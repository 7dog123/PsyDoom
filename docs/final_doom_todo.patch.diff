diff --git a/PSXDOOM/cf_main.c b/PSXDOOM/cf_main.c
index 992b9f0..308c893 100644
--- a/PSXDOOM/cf_main.c
+++ b/PSXDOOM/cf_main.c
@@ -14,9 +14,17 @@ char fuctionsnames[][16] =//80073B9C
 	"Strafe Left",
 	"Strafe Right",
 	"Weapon Backward",
-	"Weapon Forward"
+	"Weapon Forward",
+	///New Final Doom
+	"Move Backward",
+	"Move Forward"
 };
 
+// Mouse Variables
+int m_sensitivity   = 50;   //80077FB4|iGp00000664
+int m_leftbutton    = 0;    //80077FB8|iGp00000668
+int m_rightbutton   = 2;    //80077FBC|iGp0000066c
+
 /*
 =================
 =
@@ -41,10 +49,12 @@ void CF_Start(void)//L8003773C()
 =================
 */
 
+#define Control_Pad 4
+
 void CF_Stop(int exit)//L80037780()
 {
 	S_StartSound(NULL, sfx_pistol);
-	cursorpos[0] = options;
+	cursorpos[0] = Control_Pad;
 }
 
 /*
@@ -63,7 +73,7 @@ int CF_Ticker(void)//L800377AC()
     if ((gamevbls < (int)gametic) && ((gametic & 3) == 0))
         cursorframe ^= 1;
 
-	buttons = ticbuttons[0];
+	buttons = Get_PadButtons(&ticbuttons[0]);//ticbuttons[0];
 
 	if (buttons & PAD_ARROWS)
 	{
@@ -75,7 +85,7 @@ int CF_Ticker(void)//L800377AC()
             if (buttons & PAD_DOWN)
 			{
 				cursorpos[0]++;
-				if (cursorpos[0] > 8)
+				if (cursorpos[0] > 9)
 					cursorpos[0] = 0;
 
 				S_StartSound(NULL, sfx_pstop);
@@ -84,7 +94,7 @@ int CF_Ticker(void)//L800377AC()
 			{
 				cursorpos[0]--;
 				if (cursorpos[0] < 0)
-					cursorpos[0] = 8;
+					cursorpos[0] = 9;
 
 				S_StartSound(NULL, sfx_pstop);
 			}
@@ -98,26 +108,41 @@ int CF_Ticker(void)//L800377AC()
 	if (buttons & (PAD_START | PAD_SELECT))
 		return ga_exit;
 
-	if (buttons != oldticbuttons[0])
+	if (buttons != (unsigned short)oldticbuttons[0])
 	{
-		if (cursorpos[0] < 8)
-		{
-			tmpcfg = TempConfiguration;
-			for (cnt = 0; cnt < 8; cnt++, tmpcfg++)
-			{
-				if (buttons & *tmpcfg)
-				{
-					ActualConfiguration[cursorpos[0]] = *tmpcfg;
-					S_StartSound(NULL, sfx_swtchx);
-					break;
-				}
-			}
-		}
-		else if (buttons & PAD_ACTION) // Set Default Configuration
-		{
-			D_memcpy(&ActualConfiguration, &DefaultConfiguration, sizeof(int) * 8);
-			S_StartSound(NULL, sfx_swtchx);
-		}
+        if (cursorpos[0] == 8) // Default
+        {
+            if (buttons & PAD_ACTION)
+            {
+                D_memcpy(&ActualConfiguration, &DefaultConfiguration, sizeof(int) * 8);
+
+                // Apply Mouse Flag Binds
+                ActualConfiguration[m_leftbutton] |= MOUSE_LEFT;
+                ActualConfiguration[m_rightbutton] |= MOUSE_RIGHT;
+
+                S_StartSound(NULL, sfx_swtchx);
+            }
+        }
+        else
+        {
+            if (cursorpos[0] < 8) // Set New Flag Bind
+            {
+                tmpcfg = TempConfiguration;
+                for (cnt = 0; cnt < 8; cnt++, tmpcfg++)
+                {
+                    if ((buttons & *tmpcfg) && !(buttons & (MOUSE_LEFT|MOUSE_RIGHT)))
+                    {
+                        ActualConfiguration[cursorpos[0]] = *tmpcfg;
+                        S_StartSound(NULL, sfx_swtchx);
+                        break;
+                    }
+                }
+            }
+            else if ((cursorpos[0] == 9) && (buttons & PAD_ACTION)) // Exit
+            {
+                return ga_exit;
+            }
+        }
 	}
 
 	return ga_nothing;
@@ -148,13 +173,13 @@ void CF_Drawer(void)//L80037984()
 		}
 	}
 
-	ST_DrawText(-1, 20, "Configuration");//Draw Text
+	ST_DrawText(-1, 15, "Control Pad");//Draw Text
 
 	//Draw Skull Selector
-	DrawImage(statuspic.vtpage, palette[16], 10, (cursorpos[0] * 20) + 43, (cursorframe * M_SKULL_W) + M_SKULL_VX, M_SKULL_VY, M_SKULL_W, M_SKULL_H);
+	DrawImage(statuspic.vtpage, palette[16], 10, (cursorpos[0] * 20) + 38, (cursorframe * M_SKULL_W) + M_SKULL_VX, M_SKULL_VY, M_SKULL_W, M_SKULL_H);
 
 	//Draw Psx Buttons Graphics
-	ypos = 45;
+	ypos = 40;
 	actcfg = ActualConfiguration;
 	for (cnt = 0; cnt < 8; cnt++, actcfg++)
 	{
@@ -163,29 +188,282 @@ void CF_Drawer(void)//L80037984()
 		tmpcfg = TempConfiguration;
 		for (cnt2 = 0; cnt2 < 8; cnt2++, tmpcfg++)
 		{
-			if(*actcfg == *tmpcfg)
+			if(*actcfg & *tmpcfg)
 				break;
 
 			picid++;
 		}
 		//Draw Buttons PSX
         if (cursorpos[0] != cnt || !(ticon & 8))
-            DrawImage(buttonspic.vtpage, palette[0], 32, ypos, buttonspic.vramx + (picid * 16), buttonspic.vramy, 16, 16);
+            DrawImage(buttonspic.vtpage, palette[20], 38, ypos, buttonspic.vramx + (picid * 16), buttonspic.vramy, 16, 16);
 
 		ypos += 20;
 	}
 
 	//Draw Options names
-	ypos = 45;
+	ypos = 40;
 	for (cnt = 0; cnt < 8; cnt++)
 	{
-		ST_DrawText(70, ypos, fuctionsnames[cnt]);
+		ST_DrawText(65, ypos, fuctionsnames[cnt]);
 		ypos += 20;
 	}
 
 	//Draw Default Text
-    if (cursorpos[0] != cnt || !(ticon & 8))
-        ST_DrawText(70, (cnt * 20) + 45, "Default");
+    ST_DrawText(65, 200, "Default");
+
+    //Draw Exit Text
+    ST_DrawText(65, 220, "Exit"); /* FIXME */
+
+	UpdateDrawOTag();
+	DrawRender();
+}
+
+/*
+==================================
+=
+=   Mouse Configuration from Final Doom
+=
+==================================
+*/
+
+/*
+=================
+=
+= CFM_Start
+=
+=================
+*/
+
+void CFM_Start(void)//L800381D8()
+{
+	S_StartSound(NULL, sfx_pistol);
+    cursorframe = 0;
+	cursorpos[0] = 0;
+	ImageToVram(&buttonspic, "BUTTONS", 0);
+
+    ActualConfiguration[m_leftbutton ] &= ~MOUSE_LEFT;
+    ActualConfiguration[m_rightbutton] &= ~MOUSE_RIGHT;
+}
+
+/*
+=================
+=
+= CFM_Stop
+=
+=================
+*/
+
+#define Mouse 3
+
+void CFM_Stop(int exit)//L8003825C()
+{
+	S_StartSound(NULL, sfx_pistol);
+
+    ActualConfiguration[m_leftbutton ] |= MOUSE_LEFT;
+    ActualConfiguration[m_rightbutton] |= MOUSE_RIGHT;
+    M_SENSITIVITY[0] = (m_sensitivity * (100*FRACUNIT)) / 92;
+
+	cursorpos[0] = Mouse;
+}
+
+/*
+=================
+=
+= CFM_Ticker
+=
+=================
+*/
+
+int CFM_Ticker(void)//L80038300()
+{
+	unsigned int *tmpcfg;
+	int cnt, buttons, oldbuttons;
+
+    buttons = Get_PadButtons(&ticbuttons[0]);
+    oldbuttons = (unsigned short)oldticbuttons[0];
+
+    if ((gamevbls < (int)gametic) && !(gametic & 3))
+        cursorframe ^= 1;
+
+    if ((buttons != oldbuttons) && (buttons & (PAD_START | PAD_SELECT)))
+    {
+        return ga_exit;
+    }
+
+    if (!(buttons & (PAD_ARROWS | PAD_ACTION)))
+    {
+        m_vframe1[0] = 0;
+        return ga_nothing;
+    }
+
+    m_vframe1[0] -= vblsinframe[0];
+    if (m_vframe1[0] <= 0)
+    {
+        m_vframe1[0] = TICRATE;
+
+        if (buttons & PAD_DOWN)
+        {
+            cursorpos[0]++;
+            if (cursorpos[0] > 4)
+                cursorpos[0] = 0;
+
+            S_StartSound(NULL, sfx_pstop);
+        }
+        else if (buttons & PAD_UP)
+        {
+            cursorpos[0]--;
+            if (cursorpos[0] < 0)
+                cursorpos[0] = 4;
+
+            S_StartSound(NULL, sfx_pstop);
+        }
+
+        if(cursorpos[0] == 1)
+        {
+            if (buttons & PAD_RIGHT)
+			{
+				m_leftbutton++;
+				if (m_leftbutton > 9)
+					m_leftbutton = 9;
+                else
+                    S_StartSound(NULL, sfx_swtchx);
+			}
+			else if (buttons & PAD_LEFT)
+			{
+				m_leftbutton--;
+				if (m_leftbutton < 0)
+					m_leftbutton = 0;
+                else
+                    S_StartSound(NULL, sfx_swtchx);
+			}
+        }
+        else if(cursorpos[0] == 2)
+        {
+            if (buttons & PAD_RIGHT)
+			{
+				m_rightbutton++;
+				if (m_rightbutton > 9)
+					m_rightbutton = 9;
+                else
+                    S_StartSound(NULL, sfx_swtchx);
+			}
+			else if (buttons & PAD_LEFT)
+			{
+				m_rightbutton--;
+				if (m_rightbutton < 0)
+					m_rightbutton = 0;
+                else
+                    S_StartSound(NULL, sfx_swtchx);
+			}
+        }
+    }
+
+    if(cursorpos[0] == 3)//default
+    {
+        if ((buttons != oldbuttons) && (buttons & PAD_ACTION))
+        {
+            m_sensitivity = 50;
+            m_leftbutton = 0;
+            m_rightbutton = 2;
+            S_StartSound(NULL, sfx_swtchx);
+            return ga_nothing;
+        }
+    }
+    else
+    {
+        if (cursorpos[0] < 4)
+        {
+            if (cursorpos[0] == 0)//sensitivity
+            {
+                if (buttons & PAD_RIGHT)
+                {
+                    m_sensitivity++;
+                    if (m_sensitivity > 92)
+                    {
+                        m_sensitivity = 92;
+                        return ga_nothing;
+                    }
+                }
+                else if (buttons & PAD_LEFT)
+                {
+                    m_sensitivity--;
+                    if (m_sensitivity < 8)
+                    {
+                        m_sensitivity = 8;
+                        return ga_nothing;
+                    }
+                }
+
+                if ((m_sensitivity & 1) != 0)
+                {
+                    S_StartSound(NULL, sfx_stnmov);
+                    return ga_nothing;
+                }
+            }
+        }
+        else
+        {
+            if (cursorpos[0] == 4)//exit
+            {
+                if ((buttons != oldbuttons) && (buttons & PAD_ACTION))
+                {
+                    return ga_exit;
+                }
+            }
+        }
+    }
+
+	return ga_nothing;
+}
+
+/*
+=================
+=
+= CFM_Drawer
+=
+=================
+*/
+
+void CFM_Drawer(void)//L80038628()
+{
+	int		picid, cnt, cnt2, xpos, ypos;
+	unsigned int *tmpcfg;
+	unsigned int *actcfg;
+
+	NextTextureCacheIdx();
+
+	//Draw Backround MARB01 Pic
+	for (ypos = 0; ypos < 4; ypos++)
+	{
+		for (xpos = 0; xpos < 4; xpos++)
+		{
+			DrawStaticImage(&marb01pic, xpos << 6, ypos << 6, palette[20]);
+		}
+	}
+
+	ST_DrawText(-1, 20, "Mouse");
+	ST_DrawText(64, 50, "Sensitivity");
+
+	//Draw Bar Dial
+	DrawImage(statuspic.vtpage, palette[16], 65, 70, 0, 184, 108, 11);
+	DrawImage(statuspic.vtpage, palette[16], m_sensitivity + 66, 70, 108, 184, 6, 11);
+
+	ST_DrawText(64, 95, "Left Button");
+	ST_DrawText(74, 115, fuctionsnames[m_leftbutton]);
+
+	ST_DrawText(64, 140, "Right_Button");
+	ST_DrawText(74, 160, fuctionsnames[m_rightbutton]);
+
+	ST_DrawText(64, 185, "Default");
+	ST_DrawText(64, 210, "Exit");
+
+	//Draw Skull Selector
+	if(cursorpos[0] == 4)
+        ypos = (cursorpos[0] * 45) + 30;
+    else
+        ypos = (cursorpos[0] * 45) + 48;
+
+	DrawImage(statuspic.vtpage, palette[16], 40, ypos, (cursorframe * M_SKULL_W) + M_SKULL_VX, M_SKULL_VY, M_SKULL_W, M_SKULL_H);
 
 	UpdateDrawOTag();
 	DrawRender();
diff --git a/PSXDOOM/d_main.c b/PSXDOOM/d_main.c
index 95fe3f2..d0324d1 100644
--- a/PSXDOOM/d_main.c
+++ b/PSXDOOM/d_main.c
@@ -45,3 +45,6 @@ mobj_t		mobjhead;	/* head and tail of mobj list */                    //800A8C74
 buttons_t   *BT_DATA[MAXPLAYERS];//80077DF4, 80077DF8
 line_t	    *linespeciallist[MAXLINEANIMS];//0x800973a4
 
+//NEW FINAL DOOM
+int M_SENSITIVITY[MAXPLAYERS];  //80078358, 8007835c
+
diff --git a/PSXDOOM/doomdef.h b/PSXDOOM/doomdef.h
index 6133eac..667b693 100644
--- a/PSXDOOM/doomdef.h
+++ b/PSXDOOM/doomdef.h
@@ -467,8 +467,13 @@ typedef struct player_s
 	pspdef_t	psprites[NUMPSPRITES];	/* view sprites (gun, etc) */
 	boolean		didsecret;				/* true if secret level has been done */
 	void		*lastsoundsector;		/* don't flood noise every time */
 
 	int			automapx, automapy, automapscale, automapflags;
+
+
+	int         mousereactionuse;
+	boolean     mouseuse;
+
 	int			turnheld;				/* for accelerative turning */
 } player_t;
 
@@ -836,6 +841,15 @@ void CF_Stop (int exit);
 int CF_Ticker (void);
 void CF_Drawer (void);
 
+/*----- */
+/*MOUSE CONFIGURATION */
+/*----- */
+void CFM_Start (void);
+void CFM_Stop (int exit);
+int CFM_Ticker (void);
+void CFM_Drawer (void);
+int Get_PadButtons(int *buttons);
+
 /*----- */
 /*STATUS */
 /*----- */
@@ -885,27 +899,29 @@ extern	int		vblsinframe[MAXPLAYERS];		/* range from 4 to 8 */
 /*----- */
 
 /* CONTROL PAD */
-#define PAD_UP			(1<<12)//4096
-#define PAD_DOWN		(1<<14)//16384
-#define PAD_LEFT		(1<<15)//32768
-#define PAD_RIGHT		(1<<13)//8192
-#define PAD_TRIANGLE	(1<< 4)//16
-#define PAD_CROSS		(1<< 6)//64
-#define PAD_SQUARE		(1<< 7)//128
-#define PAD_CIRCLE		(1<< 5)//32
-#define PAD_L1			(1<< 2)//4
-#define PAD_L2			(1<< 0)//1
-#define PAD_R1			(1<< 3)//8
-#define PAD_R2			(1<< 1)//2
-#define PAD_START		(1<<11)//2048
-#define PAD_SELECT		(1<< 8)//256
+#define PAD_UP			4096    //(1<<12)
+#define PAD_DOWN		16384   //(1<<14)
+#define PAD_LEFT		32768   //(1<<15)
+#define PAD_RIGHT		8192    //(1<<13)
+#define PAD_TRIANGLE	16      //(1<< 4)
+#define PAD_CROSS		64      //(1<< 6)
+#define PAD_SQUARE		128     //(1<< 7)
+#define PAD_CIRCLE		32      //(1<< 5)
+#define PAD_L1			4       //(1<< 2)
+#define PAD_L2			1       //(1<< 0)
+#define PAD_R1			8       //(1<< 3)
+#define PAD_R2			2       //(1<< 1)
+#define PAD_START		2048    //(1<<11)
+#define PAD_SELECT		256     //(1<< 8)
 #define PAD_LR			(PAD_L1 | PAD_L2 | PAD_R1 | PAD_R2)//15
 #define PAD_ARROWS		(PAD_UP | PAD_RIGHT | PAD_DOWN | PAD_LEFT)//61440
 #define PAD_ACTION		(PAD_TRIANGLE | PAD_CIRCLE | PAD_CROSS | PAD_SQUARE)//240
 #define PAD_ALL			(PAD_ARROWS | PAD_START | PAD_SELECT | PAD_ACTION | PAD_LR)//63999
 //MOUSE PAD
-#define MOUSE_LEFT		(1<<3)//8
-#define MOUSE_RIGHT		(1<<2)//4
+//#define MOUSE_LEFT		(1<<3)//8
+//#define MOUSE_RIGHT		(1<<2)//4
+#define MOUSE_LEFT		1024    //(1<<10)
+#define MOUSE_RIGHT		512     //(1<< 9)
 
 
 typedef struct
@@ -918,10 +934,17 @@ typedef struct
 	unsigned int BT_STRAFERIGHT;	//*20
 	unsigned int BT_WEAPONBACKWARD;	//*24
 	unsigned int BT_WEAPONFORWARD;	//*28
+	unsigned int BT_MOUSELEFT;	    //*32
+	unsigned int BT_MOUSERIGHT;	    //*36
 } buttons_t;
 
 extern buttons_t *BT_DATA[MAXPLAYERS];//80077DF4, 80077DF8
 
+extern int M_SENSITIVITY[MAXPLAYERS];   //80078358, 8007835c
+extern int m_sensitivity;               //80077FB4|iGp00000664
+extern int m_leftbutton;                //80077FB8|iGp00000668
+extern int m_rightbutton;               //80077FBC|iGp0000066c
+
 /* psxmain.c */
 #define MAX_VRAMMEM				256     // # of entries in manager cache
 #define MAX_DYNAMIC_TPAGE		11      // max # of tpages supported for dynamic memory
@@ -942,7 +965,12 @@ extern long drawside;
 extern int	drawsync1;//80077FE4
 extern int	drawsync2;//80077F3C
 
+#define MAX_PAD 34
+extern char    buff_1[MAX_PAD], buff_2[MAX_PAD];   //80099050, 80099074
+extern signed char   *PAD_Rbuf1, *PAD_Rbuf2;       //puGp00000c40, puGp00000c44
+
 void I_Error(char *error, ...);
+unsigned int I_PadRead(void);// New Final Doom
 void ImageToVram(psxobj_t *pic, char *name, int lump);
 void DrawStaticImage(psxobj_t *psxobj, int xpos, int ypos, int pal);
 void DrawImage(int vtpage, int pal, int xpos, int ypos,  char vramx, char vramy, int width, int height);
@@ -958,9 +986,9 @@ void Vram_Viewer(int page);
 
 extern boolean cancel_link;
 extern unsigned int TempConfiguration[8];
-extern unsigned int ActualConfiguration[8];
 extern unsigned int DefaultConfiguration[8];
-extern unsigned int NewConfiguration[8];
+extern unsigned int ActualConfiguration[10];
+extern unsigned int NewConfiguration[10];
 
 void Link_Conection(void);
 boolean Update_Conection(void);
diff --git a/PSXDOOM/g_game.c b/PSXDOOM/g_game.c
index ec4c542..2a28adf 100644
--- a/PSXDOOM/g_game.c
+++ b/PSXDOOM/g_game.c
@@ -384,10 +326,17 @@ void G_InitNew (skill_t skill, int map, gametype_t gametype) //L80013368()
 	{
 	    playeringame[1] = false;
 		BT_DATA[0] = (buttons_t *)ActualConfiguration;
+
+		// New Final Doom Mouse
+		M_SENSITIVITY[0] = (m_sensitivity * (100*FRACUNIT)) / 92;
 	}
 	else if (netgame <= gt_deathmatch)
 	{
 		playeringame[1] = true;
+
+		// New Final Doom Mouse
+        M_SENSITIVITY[0] = (M_SENSITIVITY[0] * (100*FRACUNIT)) / 92;
+        M_SENSITIVITY[1] = (M_SENSITIVITY[1] * (100*FRACUNIT)) / 92;
 	}
 
 	demorecording = false;
@@ -510,7 +458,8 @@ int G_PlayDemoPtr (void)//(int *demo) L800136E8()
 {
 	int		exit;
 	int		skill, map;
-	int		config[8];
+	int		config[10];// Final Doom change 8 to 10
+	int     sensitivity;
 
 	skill = BIGLONG(demo_p[0]);
 	map = BIGLONG(demo_p[1]);
@@ -521,7 +470,15 @@ int G_PlayDemoPtr (void)//(int *demo) L800136E8()
 
 	//set new key configuration
 	D_memcpy(ActualConfiguration, demobuffer, sizeof(config));
-	demobuffer += 8;
+
+	//copy mouse m_sensitivity
+	sensitivity = m_sensitivity;
+
+	//set new mouse m_sensitivity
+	m_sensitivity = demobuffer[10];
+
+	//skip mouse and key configuration
+	demobuffer += 11;// Final Doom change 8 to 1
 
 	G_InitNew (skill, map, gt_single);
 	G_DoLoadLevel ();
@@ -532,6 +489,9 @@ int G_PlayDemoPtr (void)//(int *demo) L800136E8()
 	//restore key configuration
 	D_memcpy(ActualConfiguration, config, sizeof(config));
 
+	//restore mouse m_sensitivity
+	m_sensitivity = sensitivity;
+
 	V_PagFlags &= 1;
 	Z_FreeTags(mainzone, (PU_LEVEL | PU_LEVSPEC | PU_ANIMATION | PU_CACHE));
 	return exit;
diff --git a/PSXDOOM/o_main.c b/PSXDOOM/o_main.c
index 7512332..fd92de2 100644
--- a/PSXDOOM/o_main.c
+++ b/PSXDOOM/o_main.c
@@ -16,7 +16,9 @@ char optionsnames[][16] = //8007491C
 	"Music Volume",
 	"Sound Volume",
 	"Password",
-	"Configuration",
+	//"Configuration",
+	"Mouse",
+	"Control Pad",
 	"Main Menu",
 	"Restart Level"
 };
@@ -28,31 +30,37 @@ typedef struct
 	int y;		 //*8
 } menuitem_t;
 
-menuitem_t menu_intro[5] = //8007497c
+#define MAX_INTRO 6
+#define MAX_SINGLE 7
+#define MAX_NET 4
+
+menuitem_t menu_intro[MAX_INTRO] = //80075328
 {
-	{ 0, 62, 65 },
-	{ 1, 62, 105 },
-	{ 2, 62, 145 },
-	{ 3, 62, 170 },
-	{ 4, 62, 195 },
+	{ 0, 62, 55 },
+	{ 1, 62, 95 },
+	{ 2, 62, 135 },
+	{ 3, 62, 160 },
+	{ 4, 62, 185 },
+	{ 5, 62, 210 },
 };
 
-menuitem_t menu_single[6] = //800749B8
+menuitem_t menu_single[MAX_SINGLE] = //80075370
 {
-	{ 0, 62, 50 },
-	{ 1, 62, 90 },
-	{ 2, 62, 130 },
-	{ 3, 62, 155 },
-	{ 4, 62, 180 },
-	{ 5, 62, 205 },
+    { 0, 62, 45 },
+	{ 1, 62, 85 },
+	{ 2, 62, 125 },
+	{ 3, 62, 145 },
+	{ 4, 62, 165 },
+	{ 5, 62, 185 },
+	{ 6, 62, 205 },
 };
 
-menuitem_t menu_net[4] = //80074A00
+menuitem_t menu_net[MAX_NET] = //800753C4
 {
 	{ 0, 62, 70 },
 	{ 1, 62, 110 },
-	{ 4, 62, 150 },
-	{ 5, 62, 175 },
+	{ 5, 62, 150 },
+	{ 6, 62, 175 }
 };
 
 menuitem_t *menuitem;   //800780E4 puGp00000cd4
@@ -85,18 +93,18 @@ void O_Start(void)//L8003E680()
         if (gamepaused)
 		{
 			menuitem = menu_single;
-			itemlines = 6;
+			itemlines = MAX_SINGLE;
 		}
 		else
 		{
 			menuitem = menu_intro;
-			itemlines = 5;
+			itemlines = MAX_INTRO;
 		}
     }
 	else
 	{
 		menuitem = menu_net;
-		itemlines = 4;
+		itemlines = MAX_NET;
 	}
 }
 
@@ -137,8 +145,8 @@ int O_Ticker(void)//L8003E764()
     {
         if (playeringame[i] != 0)
         {
-            buttons = ticbuttons[i];
-            oldbuttons = oldticbuttons[i];
+            buttons = Get_PadButtons(&ticbuttons[i]); //ticbuttons[i];
+            oldbuttons = (unsigned short)oldticbuttons[i];
 
             if ((buttons != oldbuttons) && (buttons & (PAD_START|PAD_SELECT)))
             {
@@ -249,26 +257,33 @@ int O_Ticker(void)//L8003E764()
                     }
                     break;
                 case 2://Password
-                    if (buttons & PAD_ACTION)
+                    if ((buttons != oldbuttons) && (buttons & PAD_ACTION))
                     {
                         if (MiniLoop(PW_Start, PW_Stop, PW_Ticker, PW_Drawer) == ga_warped)
                             return ga_warped;
                     }
                     break;
-                case 3://Configuration
-                    if (buttons & PAD_ACTION)
+                case 3://Configuration Mouse
+                    if ((buttons != oldbuttons) && (buttons & PAD_ACTION) &&
+                        ((*(unsigned int*)&PAD_Rbuf2[0]& 0xf0ff) == 0x1000))//Check Mouse
+                    {
+                        MiniLoop(CFM_Start, CFM_Stop, CFM_Ticker, CFM_Drawer);
+                    }
+                    break;
+                case 4://Configuration Pad
+                    if ((buttons != oldbuttons) && (buttons & PAD_ACTION))
                     {
                         MiniLoop(CF_Start, CF_Stop, CF_Ticker, CF_Drawer);
                     }
                     break;
-                case 4://Main Menu
+                case 5://Main Menu
                     if (buttons & PAD_ACTION)
                     {
                         S_StartSound(0, sfx_pistol);
                         return ga_exitdemo;
                     }
                     break;
-                case 5:// Restar Level
+                case 6:// Restar Level
                     if (buttons & PAD_ACTION)
                     {
                         S_StartSound(0, sfx_pistol);
diff --git a/PSXDOOM/p_enemy.c b/PSXDOOM/p_enemy.c
index 5ba7265..9979f9c 100644
--- a/PSXDOOM/p_enemy.c
+++ b/PSXDOOM/p_enemy.c
@@ -1125,40 +1125,22 @@ void A_PainShootSkull(mobj_t *actor, angle_t angle)//L80018194()
 	int		prestep;
 	int		count;
 
-	#if FIX_PE_SKULL_LIMIT == 1
 	mobj_t	*mo;
-	#else
-	thinker_t*	currentthinker;
-	#endif // FIX_PE_SKULL_LIMIT
-
 
 	// count total number of skull currently on the level
 	count = 0;
-	#if FIX_PE_SKULL_LIMIT == 1
 	for (mo=mobjhead.next ; mo != &mobjhead ; mo=mo->next)
 	{
 		if ((mo->type == MT_SKULL))
         {
             count++;
-        }
-	}
 
-	#else
-	currentthinker = thinkercap.next;
-	while (currentthinker != &thinkercap)
-	{
-		if ((currentthinker->function == P_MobjThinker) && ((mobj_t *)currentthinker)->type == MT_SKULL)
-        {
-			count++;
+            // if there are allready 16 skulls on the level,
+            // don't spit another one
+            if (count > 16)
+                return;
         }
-		currentthinker = currentthinker->next;
 	}
-	#endif // FIX_PE_SKULL_LIMIT
-
-	// if there are allready 20 skulls on the level,
-	// don't spit another one
-	if (count > 20)
-		return;
 
 	// okay, there's playe for another one
 	an = angle >> ANGLETOFINESHIFT;
diff --git a/PSXDOOM/p_user.c b/PSXDOOM/p_user.c
index c47a405..a828606 100644
--- a/PSXDOOM/p_user.c
+++ b/PSXDOOM/p_user.c
@@ -4,7 +4,7 @@
 #include "p_local.h"
 #include "st_main.h"
 
-
+/*
 fixed_t 		forwardmove[2] = {0x40000, 0x60000};//80067668
 fixed_t 		sidemove[2] = {0x38000, 0x58000}; //80067670
 
@@ -12,7 +12,16 @@ fixed_t 		sidemove[2] = {0x38000, 0x58000}; //80067670
 fixed_t			angleturn[] = //80067678
 	{300,300,500,500,600,700,800,900,900,1000};
 fixed_t			fastangleturn[] = //800676A0
-	{800,800,900,1000,1000,1200,1200,1300,1300,1400};
+	{800,800,900,1000,1000,1200,1200,1300,1300,1400};*/
+
+fixed_t 		forwardmove[2] = {0xE000, 0x16000};//80077ECC
+fixed_t 		sidemove[2] = {0xE000, 0x16000}; //80077ED4
+
+#define SLOWTURNTICS    10
+fixed_t			angleturn[] = //800684D4
+	{75,75,125,125,150,175,200,225,225,250};
+fixed_t			fastangleturn[] = //800684FC
+	{200,200,225,250,250,300,300,325,325,350};
 
 
 /*============================================================================= */
@@ -29,8 +38,12 @@ void P_PlayerMove (mobj_t *mo)//L80029670()
 	line_t		*latchedline;
 	fixed_t		latchedx, latchedy;
 
-	momx = vblsinframe[playernum] * (mo->momx>>2);
-	momy = vblsinframe[playernum] * (mo->momy>>2);
+	//momx = vblsinframe[playernum] * (mo->momx>>2);
+	//momy = vblsinframe[playernum] * (mo->momy>>2);
+
+	// Change on Final Doom
+	momx = mo->momx;
+	momy = mo->momy;
 
 	slidething = mo;
 
@@ -240,10 +253,20 @@ void P_BuildMove (player_t *player) //L80029CA4()
 	fixed_t		ForwardMove, SideMove;
 	angle_t		AngleTurn;
 
+	int		    Mouse_X, Mouse_Y;
+
+	// defaults
+	AngleTurn = 0;
+	SideMove = 0;
+	ForwardMove = 0;
+
 	cbutton = BT_DATA[playernum];
 	buttons = ticbuttons[playernum];
 	oldbuttons = oldticbuttons[playernum];
 
+    Mouse_X = (0 - (signed char)(buttons >> 16)) * M_SENSITIVITY[playernum];
+    Mouse_Y = (0 - (signed char)(buttons >> 24)) * 3000;
+
 	speed = (buttons & cbutton->BT_SPEED) > 0;
 
 	/*  */
@@ -257,39 +280,28 @@ void P_BuildMove (player_t *player) //L80029CA4()
 	if (player->turnheld >= SLOWTURNTICS)
 		player->turnheld = SLOWTURNTICS-1;
 
-	player->forwardmove = player->sidemove = player->angleturn = 0;
-
 	if (buttons & cbutton->BT_STRAFELEFT)
 	{
-		SideMove = -vblsinframe[playernum] * sidemove[speed];
-		if (SideMove < 0) { SideMove += 3; }
-
-		player->sidemove = (SideMove >> 2);
+		SideMove -= sidemove[speed];
 	}
-	else if (buttons & cbutton->BT_STRAFERIGHT)
+	//else
+	if (buttons & cbutton->BT_STRAFERIGHT)
 	{
-		SideMove = vblsinframe[playernum] * sidemove[speed];
-		if (SideMove < 0) { SideMove += 3; }
-
-		player->sidemove = (SideMove >> 2);
+		SideMove += sidemove[speed];
 	}
 
     if (buttons & cbutton->BT_STRAFE)
 	{
 		if (buttons & PAD_LEFT)
 		{
-			SideMove = -vblsinframe[playernum] * sidemove[speed];
-			if (SideMove < 0) { SideMove += 3; }
-
-			player->sidemove = (SideMove >> 2);
+            SideMove -= sidemove[speed];
 		}
 		else if (buttons & PAD_RIGHT)
 		{
-			SideMove = vblsinframe[playernum] * sidemove[speed];
-			if (SideMove < 0) { SideMove += 3; }
-
-			player->sidemove = (SideMove >> 2);
+            SideMove += sidemove[speed];
 		}
+
+		SideMove -= Mouse_X;
 	}
 	else
 	{
@@ -297,62 +309,86 @@ void P_BuildMove (player_t *player) //L80029CA4()
 		{
 			if (buttons & PAD_LEFT)
 			{
-				AngleTurn =  vblsinframe[playernum] * fastangleturn[player->turnheld];
-				if (AngleTurn < 0) { AngleTurn += 3; }
-				AngleTurn >>= 2;
-
-				player->angleturn = AngleTurn << 17;
+				AngleTurn += fastangleturn[player->turnheld] << 17;
 			}
 			else if (buttons & PAD_RIGHT)
 			{
-				AngleTurn = vblsinframe[playernum] * fastangleturn[player->turnheld];
-				if (AngleTurn < 0) { AngleTurn += 3; }
-				AngleTurn >>= 2;
-
-				player->angleturn = -AngleTurn << 17;
+				AngleTurn -= fastangleturn[player->turnheld] << 17;
 			}
 		}
 		else
 		{
 			if (buttons & PAD_LEFT)
 			{
-				AngleTurn = vblsinframe[playernum] * angleturn[player->turnheld];
-				if (AngleTurn < 0) { AngleTurn += 3; }
-				AngleTurn >>= 2;
-
-				player->angleturn = AngleTurn << 17;
+				AngleTurn += angleturn[player->turnheld] << 17;
 			}
 			else if (buttons & PAD_RIGHT)
 			{
-				AngleTurn = vblsinframe[playernum] * angleturn[player->turnheld];
-				if (AngleTurn < 0) { AngleTurn += 3; }
-				AngleTurn >>= 2;
-
-				player->angleturn = -AngleTurn << 17;
+				AngleTurn -= angleturn[player->turnheld] << 17;
 			}
 		}
+
+		AngleTurn += Mouse_X;
 	}
 
-	if (buttons & PAD_UP)
-	{
-		ForwardMove = vblsinframe[playernum] * forwardmove[speed];
-		if (ForwardMove < 0) { ForwardMove += 3; }
+	/*  */
+	/* It allows to use the possibility of executing line actions */
+	/* by quickly pressing any mouse button, apart from the USE button */
+    /*  */
+    if (buttons & (MOUSE_LEFT|MOUSE_RIGHT))
+    {
+        if ((unsigned int)(player->mousereactionuse - 1) < 9)
+        {
+            player->mouseuse = true;
+            player->mousereactionuse = 0;
+        }
+        else if (player->mousereactionuse != 0)
+        {
+            player->mousereactionuse = 11;
+        }
+    }
+    else
+    {
+        player->mousereactionuse -= 1;
+    }
 
-		player->forwardmove = (ForwardMove >> 2);
+	if (buttons & (cbutton->BT_MOUSERIGHT | PAD_UP))
+	{
+		ForwardMove += forwardmove[speed];
 	}
-	else if (buttons & PAD_DOWN)
+	else if (buttons & (cbutton->BT_MOUSELEFT | PAD_DOWN))
 	{
-		ForwardMove = -vblsinframe[playernum] * forwardmove[speed];
-		if (ForwardMove < 0) { ForwardMove += 3; }
-
-		player->forwardmove = (ForwardMove >> 2);
+		ForwardMove -= forwardmove[speed];
 	}
+    ForwardMove += Mouse_Y;
+
+    if (ForwardMove > 0x16000)
+    {
+        ForwardMove = 0x16000;
+    }
+    else if (ForwardMove < -0x16000)
+    {
+        ForwardMove = -0x16000;
+    }
+
+    if (SideMove > 0x16000)
+    {
+        SideMove = 0x16000;
+    }
+    else if (SideMove < -0x16000)
+    {
+        SideMove = -0x16000;
+    }
 
 	/* */
 	/* if slowed down to a stop, change to a standing frame */
 	/* */
 	mo = player->mo;
 
+    player->sidemove = SideMove;
+    player->forwardmove = ForwardMove;
+    player->angleturn = AngleTurn;
+
 	if (!mo->momx && !mo->momy && player->forwardmove == 0 && player->sidemove == 0 )
 	{	/* if in a walking frame, stop moving */
 		if (mo->state == &states[S_PLAY_RUN1]
@@ -388,6 +424,7 @@ boolean		onground;//80077FF4, iGp00000be4
 //inline
 void P_Thrust (player_t *player, angle_t angle, fixed_t move) //L8002A188()
 {
+    move *= vblsinframe[playernum];
 	angle >>= ANGLETOFINESHIFT;
 	player->mo->momx += (move >> 8)*(finecosine[angle] >> 8);
 	player->mo->momy += (move >> 8)*(finesine[angle] >> 8);
@@ -479,7 +516,7 @@ void P_CalcHeight (player_t *player) //L8002A1FC()
 
 void P_MovePlayer (player_t *player)//L8002A3B8()
 {
-	player->mo->angle += player->angleturn;
+	player->mo->angle += vblsinframe[playernum] * player->angleturn;
 
 	/* don't let the player control movement if not onground */
 	onground = (player->mo->z <= player->mo->floorz);
@@ -535,7 +572,9 @@ void P_DeathThink (player_t *player)//L8002A570()
 		player->damagecount--;
 
 
-	if (((byte)ticbuttons[playernum] != 0) && (player->viewheight <= 8*FRACUNIT))
+	//if (((byte)ticbuttons[playernum] != 0) && (player->viewheight <= 8*FRACUNIT))
+	if (((ticbuttons[playernum] & (MOUSE_LEFT|MOUSE_RIGHT|PAD_ACTION|PAD_LR)) != 0) &&
+        (player->viewheight <= 8*FRACUNIT))
     {
 		player->playerstate = PST_REBORN;
     }
@@ -676,8 +715,10 @@ void P_PlayerThink (player_t *player)//L8002A6C8()
 		/* check for use */
 		/* */
 
-		if (buttons & cbutton->BT_USE)
+		if ((buttons & cbutton->BT_USE) || (player->mouseuse))
 		{
+		    player->mouseuse = false; // New
+
 			if (player->usedown == false)
 			{
 				P_UseLines(player);
diff --git a/PSXDOOM/psxmain.c b/PSXDOOM/psxmain.c
index e0d28db..9cb25f5 100644
--- a/PSXDOOM/psxmain.c
+++ b/PSXDOOM/psxmain.c
@@ -68,6 +68,13 @@ int xcount = 0;   //*(r28 + 3320)
 int ycount = 0;   //*(r28 + 3324)
 int V_PagFlags = 0;//*(r28 + 1576)//80077A38
 
+/*
+ * Limitations
+ */
+char    buff_1[MAX_PAD], buff_2[MAX_PAD];   //80099050, 80099074
+signed char   *PAD_Rbuf1, *PAD_Rbuf2;       //puGp00000c40, puGp00000c44
+
+
 int main()
 {
 	D_DoomMain ();
@@ -77,7 +84,9 @@ int main()
 void PSX_INIT(void)//L80032804()
 {
     ResetCallback();
-    PadInit(0);
+    //#if ENABLE_MOUSE == 0
+    //PadInit(0);
+    //#endif // ENABLE_MOUSE
     ResetGraph(0);
     SetGraphDebug(0);
 
@@ -94,6 +103,26 @@ void PSX_INIT(void)//L80032804()
     SetDefDispEnv(&disp[0], 256, 0, 256, 240);
     SetDefDispEnv(&disp[1], 0, 0, 256, 240);
 
+    //#if ENABLE_MOUSE == 1
+    //Control Pad Initialization from FinalDoom
+    {
+        InitPAD(buff_1, MAX_PAD, buff_2, MAX_PAD);
+        StartPAD();
+        ChangeClearPAD(0);
+        VSync(0);
+        if ((*(unsigned int *)&buff_1[0] & 0xf0ff) == 0x1000)
+        {
+            PAD_Rbuf1 = (signed char *)buff_2;
+            PAD_Rbuf2 = (signed char *)buff_1;
+        }
+        else
+        {
+            PAD_Rbuf1 = (signed char *)buff_1;
+            PAD_Rbuf2 = (signed char *)buff_2;
+        }
+    }
+    //#endif // ENABLE_MOUSE
+
     drawside = 0;
 
     EnterCriticalSection();
@@ -564,12 +621,21 @@ void Vram_Viewer(int page)//80033938
 boolean cancel_link; //0x80077A3C *(r28 + 1580)
 
 unsigned int TempConfiguration[8] = { PAD_TRIANGLE, PAD_CIRCLE, PAD_CROSS, PAD_SQUARE, PAD_L1, PAD_R1, PAD_L2, PAD_R2 };//80073c1c
-unsigned int ActualConfiguration[8] = { PAD_TRIANGLE, PAD_CIRCLE, PAD_CROSS, PAD_SQUARE, PAD_L1, PAD_R1, PAD_L2, PAD_R2 };	//80073c3c
 unsigned int DefaultConfiguration[8] = { PAD_TRIANGLE, PAD_CIRCLE, PAD_CROSS, PAD_SQUARE, PAD_L1, PAD_R1, PAD_L2, PAD_R2 };	//80073C5C
-unsigned int NewConfiguration[8];//0x80078120
+
+unsigned int ActualConfiguration[10] = { PAD_TRIANGLE|MOUSE_LEFT, PAD_CIRCLE, PAD_CROSS|MOUSE_RIGHT, PAD_SQUARE, PAD_L1, PAD_R1, PAD_L2, PAD_R2 , 0, 0};	//80073c3c
+unsigned int NewConfiguration[10];//0x80078120
+
+// Mouse
+extern int m_sensitivity;   //80077FB4|iGp00000664
+extern int m_leftbutton;    //80077FB8|iGp00000668
+extern int m_rightbutton;   //80077FBC|iGp0000066c
 
 void Link_Conection(void)//L800345A0()
 {
+    unsigned int out_code, pad_code1;
+    unsigned int *pad_buf1;
+
 	/* The following lines enclosed by square brackets are necessary for the current PSYQ SDK libcomb.lib */
 	/* This is due to the version of libcomb.lib library used in the original PSXDOOM, it worked differently. */
 	/* Also the CompaCTS macros were added as it is the current way to create links between two consoles */
-- 
2.17.1.windows.2
