diff --git a/PSXDOOM/cf_main.c b/PSXDOOM/cf_main.c
index 992b9f0..308c893 100644
--- a/PSXDOOM/cf_main.c
+++ b/PSXDOOM/cf_main.c
@@ -14,9 +14,17 @@ char fuctionsnames[][16] =//80073B9C
 	"Strafe Left",
 	"Strafe Right",
 	"Weapon Backward",
-	"Weapon Forward"
+	"Weapon Forward",
+	///New Final Doom
+	"Move Backward",
+	"Move Forward"
 };
 
+// Mouse Variables
+int m_sensitivity   = 50;   //80077FB4|iGp00000664
+int m_leftbutton    = 0;    //80077FB8|iGp00000668
+int m_rightbutton   = 2;    //80077FBC|iGp0000066c
+
 /*
 =================
 =
@@ -41,10 +49,12 @@ void CF_Start(void)//L8003773C()
 =================
 */
 
+#define Control_Pad 4
+
 void CF_Stop(int exit)//L80037780()
 {
 	S_StartSound(NULL, sfx_pistol);
-	cursorpos[0] = options;
+	cursorpos[0] = Control_Pad;
 }
 
 /*
@@ -63,7 +73,7 @@ int CF_Ticker(void)//L800377AC()
     if ((gamevbls < (int)gametic) && ((gametic & 3) == 0))
         cursorframe ^= 1;
 
-	buttons = ticbuttons[0];
+	buttons = Get_PadButtons(&ticbuttons[0]);//ticbuttons[0];
 
 	if (buttons & PAD_ARROWS)
 	{
@@ -75,7 +85,7 @@ int CF_Ticker(void)//L800377AC()
             if (buttons & PAD_DOWN)
 			{
 				cursorpos[0]++;
-				if (cursorpos[0] > 8)
+				if (cursorpos[0] > 9)
 					cursorpos[0] = 0;
 
 				S_StartSound(NULL, sfx_pstop);
@@ -84,7 +94,7 @@ int CF_Ticker(void)//L800377AC()
 			{
 				cursorpos[0]--;
 				if (cursorpos[0] < 0)
-					cursorpos[0] = 8;
+					cursorpos[0] = 9;
 
 				S_StartSound(NULL, sfx_pstop);
 			}
@@ -98,26 +108,41 @@ int CF_Ticker(void)//L800377AC()
 	if (buttons & (PAD_START | PAD_SELECT))
 		return ga_exit;
 
-	if (buttons != oldticbuttons[0])
+	if (buttons != (unsigned short)oldticbuttons[0])
 	{
-		if (cursorpos[0] < 8)
-		{
-			tmpcfg = TempConfiguration;
-			for (cnt = 0; cnt < 8; cnt++, tmpcfg++)
-			{
-				if (buttons & *tmpcfg)
-				{
-					ActualConfiguration[cursorpos[0]] = *tmpcfg;
-					S_StartSound(NULL, sfx_swtchx);
-					break;
-				}
-			}
-		}
-		else if (buttons & PAD_ACTION) // Set Default Configuration
-		{
-			D_memcpy(&ActualConfiguration, &DefaultConfiguration, sizeof(int) * 8);
-			S_StartSound(NULL, sfx_swtchx);
-		}
+        if (cursorpos[0] == 8) // Default
+        {
+            if (buttons & PAD_ACTION)
+            {
+                D_memcpy(&ActualConfiguration, &DefaultConfiguration, sizeof(int) * 8);
+
+                // Apply Mouse Flag Binds
+                ActualConfiguration[m_leftbutton] |= MOUSE_LEFT;
+                ActualConfiguration[m_rightbutton] |= MOUSE_RIGHT;
+
+                S_StartSound(NULL, sfx_swtchx);
+            }
+        }
+        else
+        {
+            if (cursorpos[0] < 8) // Set New Flag Bind
+            {
+                tmpcfg = TempConfiguration;
+                for (cnt = 0; cnt < 8; cnt++, tmpcfg++)
+                {
+                    if ((buttons & *tmpcfg) && !(buttons & (MOUSE_LEFT|MOUSE_RIGHT)))
+                    {
+                        ActualConfiguration[cursorpos[0]] = *tmpcfg;
+                        S_StartSound(NULL, sfx_swtchx);
+                        break;
+                    }
+                }
+            }
+            else if ((cursorpos[0] == 9) && (buttons & PAD_ACTION)) // Exit
+            {
+                return ga_exit;
+            }
+        }
 	}
 
 	return ga_nothing;
@@ -148,13 +173,13 @@ void CF_Drawer(void)//L80037984()
 		}
 	}
 
-	ST_DrawText(-1, 20, "Configuration");//Draw Text
+	ST_DrawText(-1, 15, "Control Pad");//Draw Text
 
 	//Draw Skull Selector
-	DrawImage(statuspic.vtpage, palette[16], 10, (cursorpos[0] * 20) + 43, (cursorframe * M_SKULL_W) + M_SKULL_VX, M_SKULL_VY, M_SKULL_W, M_SKULL_H);
+	DrawImage(statuspic.vtpage, palette[16], 10, (cursorpos[0] * 20) + 38, (cursorframe * M_SKULL_W) + M_SKULL_VX, M_SKULL_VY, M_SKULL_W, M_SKULL_H);
 
 	//Draw Psx Buttons Graphics
-	ypos = 45;
+	ypos = 40;
 	actcfg = ActualConfiguration;
 	for (cnt = 0; cnt < 8; cnt++, actcfg++)
 	{
@@ -163,29 +188,282 @@ void CF_Drawer(void)//L80037984()
 		tmpcfg = TempConfiguration;
 		for (cnt2 = 0; cnt2 < 8; cnt2++, tmpcfg++)
 		{
-			if(*actcfg == *tmpcfg)
+			if(*actcfg & *tmpcfg)
 				break;
 
 			picid++;
 		}
 		//Draw Buttons PSX
         if (cursorpos[0] != cnt || !(ticon & 8))
-            DrawImage(buttonspic.vtpage, palette[0], 32, ypos, buttonspic.vramx + (picid * 16), buttonspic.vramy, 16, 16);
+            DrawImage(buttonspic.vtpage, palette[20], 38, ypos, buttonspic.vramx + (picid * 16), buttonspic.vramy, 16, 16);
 
 		ypos += 20;
 	}
 
 	//Draw Options names
-	ypos = 45;
+	ypos = 40;
 	for (cnt = 0; cnt < 8; cnt++)
 	{
-		ST_DrawText(70, ypos, fuctionsnames[cnt]);
+		ST_DrawText(65, ypos, fuctionsnames[cnt]);
 		ypos += 20;
 	}
 
 	//Draw Default Text
-    if (cursorpos[0] != cnt || !(ticon & 8))
-        ST_DrawText(70, (cnt * 20) + 45, "Default");
+    ST_DrawText(65, 200, "Default");
+
+    //Draw Exit Text
+    ST_DrawText(65, 220, "Exit"); /* FIXME */
+
+	UpdateDrawOTag();
+	DrawRender();
+}
+
+/*
+==================================
+=
+=   Mouse Configuration from Final Doom
+=
+==================================
+*/
+
+/*
+=================
+=
+= CFM_Start
+=
+=================
+*/
+
+void CFM_Start(void)//L800381D8()
+{
+	S_StartSound(NULL, sfx_pistol);
+    cursorframe = 0;
+	cursorpos[0] = 0;
+	ImageToVram(&buttonspic, "BUTTONS", 0);
+
+    ActualConfiguration[m_leftbutton ] &= ~MOUSE_LEFT;
+    ActualConfiguration[m_rightbutton] &= ~MOUSE_RIGHT;
+}
+
+/*
+=================
+=
+= CFM_Stop
+=
+=================
+*/
+
+#define Mouse 3
+
+void CFM_Stop(int exit)//L8003825C()
+{
+	S_StartSound(NULL, sfx_pistol);
+
+    ActualConfiguration[m_leftbutton ] |= MOUSE_LEFT;
+    ActualConfiguration[m_rightbutton] |= MOUSE_RIGHT;
+    M_SENSITIVITY[0] = (m_sensitivity * (100*FRACUNIT)) / 92;
+
+	cursorpos[0] = Mouse;
+}
+
+/*
+=================
+=
+= CFM_Ticker
+=
+=================
+*/
+
+int CFM_Ticker(void)//L80038300()
+{
+	unsigned int *tmpcfg;
+	int cnt, buttons, oldbuttons;
+
+    buttons = Get_PadButtons(&ticbuttons[0]);
+    oldbuttons = (unsigned short)oldticbuttons[0];
+
+    if ((gamevbls < (int)gametic) && !(gametic & 3))
+        cursorframe ^= 1;
+
+    if ((buttons != oldbuttons) && (buttons & (PAD_START | PAD_SELECT)))
+    {
+        return ga_exit;
+    }
+
+    if (!(buttons & (PAD_ARROWS | PAD_ACTION)))
+    {
+        m_vframe1[0] = 0;
+        return ga_nothing;
+    }
+
+    m_vframe1[0] -= vblsinframe[0];
+    if (m_vframe1[0] <= 0)
+    {
+        m_vframe1[0] = TICRATE;
+
+        if (buttons & PAD_DOWN)
+        {
+            cursorpos[0]++;
+            if (cursorpos[0] > 4)
+                cursorpos[0] = 0;
+
+            S_StartSound(NULL, sfx_pstop);
+        }
+        else if (buttons & PAD_UP)
+        {
+            cursorpos[0]--;
+            if (cursorpos[0] < 0)
+                cursorpos[0] = 4;
+
+            S_StartSound(NULL, sfx_pstop);
+        }
+
+        if(cursorpos[0] == 1)
+        {
+            if (buttons & PAD_RIGHT)
+			{
+				m_leftbutton++;
+				if (m_leftbutton > 9)
+					m_leftbutton = 9;
+                else
+                    S_StartSound(NULL, sfx_swtchx);
+			}
+			else if (buttons & PAD_LEFT)
+			{
+				m_leftbutton--;
+				if (m_leftbutton < 0)
+					m_leftbutton = 0;
+                else
+                    S_StartSound(NULL, sfx_swtchx);
+			}
+        }
+        else if(cursorpos[0] == 2)
+        {
+            if (buttons & PAD_RIGHT)
+			{
+				m_rightbutton++;
+				if (m_rightbutton > 9)
+					m_rightbutton = 9;
+                else
+                    S_StartSound(NULL, sfx_swtchx);
+			}
+			else if (buttons & PAD_LEFT)
+			{
+				m_rightbutton--;
+				if (m_rightbutton < 0)
+					m_rightbutton = 0;
+                else
+                    S_StartSound(NULL, sfx_swtchx);
+			}
+        }
+    }
+
+    if(cursorpos[0] == 3)//default
+    {
+        if ((buttons != oldbuttons) && (buttons & PAD_ACTION))
+        {
+            m_sensitivity = 50;
+            m_leftbutton = 0;
+            m_rightbutton = 2;
+            S_StartSound(NULL, sfx_swtchx);
+            return ga_nothing;
+        }
+    }
+    else
+    {
+        if (cursorpos[0] < 4)
+        {
+            if (cursorpos[0] == 0)//sensitivity
+            {
+                if (buttons & PAD_RIGHT)
+                {
+                    m_sensitivity++;
+                    if (m_sensitivity > 92)
+                    {
+                        m_sensitivity = 92;
+                        return ga_nothing;
+                    }
+                }
+                else if (buttons & PAD_LEFT)
+                {
+                    m_sensitivity--;
+                    if (m_sensitivity < 8)
+                    {
+                        m_sensitivity = 8;
+                        return ga_nothing;
+                    }
+                }
+
+                if ((m_sensitivity & 1) != 0)
+                {
+                    S_StartSound(NULL, sfx_stnmov);
+                    return ga_nothing;
+                }
+            }
+        }
+        else
+        {
+            if (cursorpos[0] == 4)//exit
+            {
+                if ((buttons != oldbuttons) && (buttons & PAD_ACTION))
+                {
+                    return ga_exit;
+                }
+            }
+        }
+    }
+
+	return ga_nothing;
+}
+
+/*
+=================
+=
+= CFM_Drawer
+=
+=================
+*/
+
+void CFM_Drawer(void)//L80038628()
+{
+	int		picid, cnt, cnt2, xpos, ypos;
+	unsigned int *tmpcfg;
+	unsigned int *actcfg;
+
+	NextTextureCacheIdx();
+
+	//Draw Backround MARB01 Pic
+	for (ypos = 0; ypos < 4; ypos++)
+	{
+		for (xpos = 0; xpos < 4; xpos++)
+		{
+			DrawStaticImage(&marb01pic, xpos << 6, ypos << 6, palette[20]);
+		}
+	}
+
+	ST_DrawText(-1, 20, "Mouse");
+	ST_DrawText(64, 50, "Sensitivity");
+
+	//Draw Bar Dial
+	DrawImage(statuspic.vtpage, palette[16], 65, 70, 0, 184, 108, 11);
+	DrawImage(statuspic.vtpage, palette[16], m_sensitivity + 66, 70, 108, 184, 6, 11);
+
+	ST_DrawText(64, 95, "Left Button");
+	ST_DrawText(74, 115, fuctionsnames[m_leftbutton]);
+
+	ST_DrawText(64, 140, "Right_Button");
+	ST_DrawText(74, 160, fuctionsnames[m_rightbutton]);
+
+	ST_DrawText(64, 185, "Default");
+	ST_DrawText(64, 210, "Exit");
+
+	//Draw Skull Selector
+	if(cursorpos[0] == 4)
+        ypos = (cursorpos[0] * 45) + 30;
+    else
+        ypos = (cursorpos[0] * 45) + 48;
+
+	DrawImage(statuspic.vtpage, palette[16], 40, ypos, (cursorframe * M_SKULL_W) + M_SKULL_VX, M_SKULL_VY, M_SKULL_W, M_SKULL_H);
 
 	UpdateDrawOTag();
 	DrawRender();
diff --git a/PSXDOOM/doomdef.h b/PSXDOOM/doomdef.h
index 6133eac..667b693 100644
--- a/PSXDOOM/doomdef.h
+++ b/PSXDOOM/doomdef.h
@@ -836,6 +841,15 @@ void CF_Stop (int exit);
 int CF_Ticker (void);
 void CF_Drawer (void);
 
+/*----- */
+/*MOUSE CONFIGURATION */
+/*----- */
+void CFM_Start (void);
+void CFM_Stop (int exit);
+int CFM_Ticker (void);
+void CFM_Drawer (void);
+int Get_PadButtons(int *buttons);
+
 /*----- */
 /*STATUS */
 /*----- */
diff --git a/PSXDOOM/o_main.c b/PSXDOOM/o_main.c
index 7512332..fd92de2 100644
--- a/PSXDOOM/o_main.c
+++ b/PSXDOOM/o_main.c
@@ -16,7 +16,9 @@ char optionsnames[][16] = //8007491C
 	"Music Volume",
 	"Sound Volume",
 	"Password",
-	"Configuration",
+	//"Configuration",
+	"Mouse",
+	"Control Pad",
 	"Main Menu",
 	"Restart Level"
 };
@@ -28,31 +30,37 @@ typedef struct
 	int y;		 //*8
 } menuitem_t;
 
-menuitem_t menu_intro[5] = //8007497c
+#define MAX_INTRO 6
+#define MAX_SINGLE 7
+#define MAX_NET 4
+
+menuitem_t menu_intro[MAX_INTRO] = //80075328
 {
-	{ 0, 62, 65 },
-	{ 1, 62, 105 },
-	{ 2, 62, 145 },
-	{ 3, 62, 170 },
-	{ 4, 62, 195 },
+	{ 0, 62, 55 },
+	{ 1, 62, 95 },
+	{ 2, 62, 135 },
+	{ 3, 62, 160 },
+	{ 4, 62, 185 },
+	{ 5, 62, 210 },
 };
 
-menuitem_t menu_single[6] = //800749B8
+menuitem_t menu_single[MAX_SINGLE] = //80075370
 {
-	{ 0, 62, 50 },
-	{ 1, 62, 90 },
-	{ 2, 62, 130 },
-	{ 3, 62, 155 },
-	{ 4, 62, 180 },
-	{ 5, 62, 205 },
+    { 0, 62, 45 },
+	{ 1, 62, 85 },
+	{ 2, 62, 125 },
+	{ 3, 62, 145 },
+	{ 4, 62, 165 },
+	{ 5, 62, 185 },
+	{ 6, 62, 205 },
 };
 
-menuitem_t menu_net[4] = //80074A00
+menuitem_t menu_net[MAX_NET] = //800753C4
 {
 	{ 0, 62, 70 },
 	{ 1, 62, 110 },
-	{ 4, 62, 150 },
-	{ 5, 62, 175 },
+	{ 5, 62, 150 },
+	{ 6, 62, 175 }
 };
 
 menuitem_t *menuitem;   //800780E4 puGp00000cd4
@@ -85,18 +93,18 @@ void O_Start(void)//L8003E680()
         if (gamepaused)
 		{
 			menuitem = menu_single;
-			itemlines = 6;
+			itemlines = MAX_SINGLE;
 		}
 		else
 		{
 			menuitem = menu_intro;
-			itemlines = 5;
+			itemlines = MAX_INTRO;
 		}
     }
 	else
 	{
 		menuitem = menu_net;
-		itemlines = 4;
+		itemlines = MAX_NET;
 	}
 }
 
@@ -137,8 +145,8 @@ int O_Ticker(void)//L8003E764()
     {
         if (playeringame[i] != 0)
         {
-            buttons = ticbuttons[i];
-            oldbuttons = oldticbuttons[i];
+            buttons = Get_PadButtons(&ticbuttons[i]); //ticbuttons[i];
+            oldbuttons = (unsigned short)oldticbuttons[i];
 
             if ((buttons != oldbuttons) && (buttons & (PAD_START|PAD_SELECT)))
             {
@@ -249,26 +257,33 @@ int O_Ticker(void)//L8003E764()
                     }
                     break;
                 case 2://Password
-                    if (buttons & PAD_ACTION)
+                    if ((buttons != oldbuttons) && (buttons & PAD_ACTION))
                     {
                         if (MiniLoop(PW_Start, PW_Stop, PW_Ticker, PW_Drawer) == ga_warped)
                             return ga_warped;
                     }
                     break;
-                case 3://Configuration
-                    if (buttons & PAD_ACTION)
+                case 3://Configuration Mouse
+                    if ((buttons != oldbuttons) && (buttons & PAD_ACTION) &&
+                        ((*(unsigned int*)&PAD_Rbuf2[0]& 0xf0ff) == 0x1000))//Check Mouse
+                    {
+                        MiniLoop(CFM_Start, CFM_Stop, CFM_Ticker, CFM_Drawer);
+                    }
+                    break;
+                case 4://Configuration Pad
+                    if ((buttons != oldbuttons) && (buttons & PAD_ACTION))
                     {
                         MiniLoop(CF_Start, CF_Stop, CF_Ticker, CF_Drawer);
                     }
                     break;
-                case 4://Main Menu
+                case 5://Main Menu
                     if (buttons & PAD_ACTION)
                     {
                         S_StartSound(0, sfx_pistol);
                         return ga_exitdemo;
                     }
                     break;
-                case 5:// Restar Level
+                case 6:// Restar Level
                     if (buttons & PAD_ACTION)
                     {
                         S_StartSound(0, sfx_pistol);
diff --git a/PSXDOOM/p_enemy.c b/PSXDOOM/p_enemy.c
index 5ba7265..9979f9c 100644
--- a/PSXDOOM/p_enemy.c
+++ b/PSXDOOM/p_enemy.c
@@ -1125,40 +1125,22 @@ void A_PainShootSkull(mobj_t *actor, angle_t angle)//L80018194()
 	int		prestep;
 	int		count;
 
-	#if FIX_PE_SKULL_LIMIT == 1
 	mobj_t	*mo;
-	#else
-	thinker_t*	currentthinker;
-	#endif // FIX_PE_SKULL_LIMIT
-
 
 	// count total number of skull currently on the level
 	count = 0;
-	#if FIX_PE_SKULL_LIMIT == 1
 	for (mo=mobjhead.next ; mo != &mobjhead ; mo=mo->next)
 	{
 		if ((mo->type == MT_SKULL))
         {
             count++;
-        }
-	}
 
-	#else
-	currentthinker = thinkercap.next;
-	while (currentthinker != &thinkercap)
-	{
-		if ((currentthinker->function == P_MobjThinker) && ((mobj_t *)currentthinker)->type == MT_SKULL)
-        {
-			count++;
+            // if there are allready 16 skulls on the level,
+            // don't spit another one
+            if (count > 16)
+                return;
         }
-		currentthinker = currentthinker->next;
 	}
-	#endif // FIX_PE_SKULL_LIMIT
-
-	// if there are allready 20 skulls on the level,
-	// don't spit another one
-	if (count > 20)
-		return;
 
 	// okay, there's playe for another one
 	an = angle >> ANGLETOFINESHIFT;
-- 
2.17.1.windows.2
