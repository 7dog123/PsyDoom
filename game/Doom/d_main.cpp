#include "d_main.h"

#include "PsxVm/PsxVm.h"

void D_DoomMain() noexcept {
loc_80012274:
    sp -= 0x20;
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    init_sony_system();
    a2 = 0x51EB0000;                                    // Result = 51EB0000
    v0 = lw(gp + 0x10);                                 // Load from: gOptionsSndVol (800775F0)
    a2 |= 0x851F;                                       // Result = 51EB851F
    v1 = v0 << 7;
    v1 -= v0;
    mult(v1, a2);
    a1 = lw(gp + 0x14);                                 // Load from: gOptionsMusVol (800775F4)
    a0 = hi;
    v0 = a1 << 7;
    v0 -= a1;
    mult(v0, a2);
    s0 = 9;                                             // Result = 00000009
    s1 = 7;                                             // Result = 00000007
    v1 = u32(i32(v1) >> 31);
    a0 = u32(i32(a0) >> 5);
    a0 -= v1;
    v0 = u32(i32(v0) >> 31);
    a2 = 0x800A0000;                                    // Result = 800A0000
    a2 -= 0x78B8;                                       // Result = gTmpWadLumpBuffer[0] (80098748)
    a1 = hi;
    a1 = u32(i32(a1) >> 5);
    a1 -= v0;
    PsxSoundInit();
    Z_Init();
    I_Init();
    W_Init();
    R_Init();
    ST_Init();
    sw(0, gp + 0x9C4);                                  // Store to: gPrevGameTic (80077FA4)
    sw(0, gp + 0xA6C);                                  // Store to: gGameTic (8007804C)
    sw(0, gp + 0xCBC);                                  // Store to: gLastTgtGameTicCount (8007829C)
    sw(0, gp + 0xB6C);                                  // Store to: gTicCon (8007814C)
    sw(0, gp + 0x964);                                  // Store to: gPlayerPadButtons[0] (80077F44)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7F48);                                 // Store to: gPlayerPadButtons[1] (80077F48)
    sw(0, gp + 0xC34);                                  // Store to: gPlayerOldPadButtons[0] (80078214)
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7DE8);                                 // Store to: gPlayerOldPadButtons[1] (80078218)
loc_80012334:
    RunTitle();
    if (v0 == s0) goto loc_80012374;
    a0 = 2;                                             // Result = 00000002
    RunDemo();
    if (v0 == s0) goto loc_80012374;
    RunCredits();
    if (v0 == s0) goto loc_80012374;
    a0 = 3;                                             // Result = 00000003
    RunDemo();
    if (v0 != s0) goto loc_80012334;
loc_80012374:
    RunMenu();
    if (v0 != s1) goto loc_80012374;
    goto loc_80012334;
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void RunLegals() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    a0 = 0x80030000;                                    // Result = 80030000
    a0 += 0x4F54;                                       // Result = START_Legals (80034F54)
    a1 = 0x80030000;                                    // Result = 80030000
    a1 += 0x4FA0;                                       // Result = STOP_Legals (80034FA0)
    a2 = 0x80030000;                                    // Result = 80030000
    a2 += 0x4FCC;                                       // Result = TIC_Legals (80034FCC)
    a3 = 0x80030000;                                    // Result = 80030000
    a3 += 0x504C;                                       // Result = DRAW_Legals (8003504C)
    MiniLoop();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void RunTitle() noexcept {
loc_800123E4:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    a0 = 0x80030000;                                    // Result = 80030000
    a0 += 0x5098;                                       // Result = START_Title (80035098)
    a1 = 0x80030000;                                    // Result = 80030000
    a1 += 0x5268;                                       // Result = STOP_Title (80035268)
    a2 = 0x80030000;                                    // Result = 80030000
    a2 += 0x5294;                                       // Result = TIC_Title (80035294)
    a3 = 0x80030000;                                    // Result = 80030000
    a3 += 0x540C;                                       // Result = DRAW_Title (8003540C)
    MiniLoop();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void RunDemo() noexcept {
loc_80012424:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    a1 = 0x4000;                                        // Result = 00004000
    a2 = 1;                                             // Result = 00000001
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    sw(ra, sp + 0x14);
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2_b();
    sw(v0, gp + 0x8);                                   // Store to: gpDemoBuffer (800775E8)
    a0 = s0;
    OpenFile();
    s0 = v0;
    a0 = s0;
    a1 = lw(gp + 0x8);                                  // Load from: gpDemoBuffer (800775E8)
    a2 = 0x4000;                                        // Result = 00004000
    ReadFile();
    a0 = s0;
    CloseFile();
    G_PlayDemoPtr();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a1 = lw(gp + 0x8);                                  // Load from: gpDemoBuffer (800775E8)
    s0 = v0;
    Z_Free2();
    v0 = s0;
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void RunCredits() noexcept {
loc_800124A8:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    a0 = 0x80030000;                                    // Result = 80030000
    a0 += 0x6BD8;                                       // Result = START_Credits (80036BD8)
    a1 = 0x80030000;                                    // Result = 80030000
    a1 += 0x6CA0;                                       // Result = STOP_Credits (80036CA0)
    a2 = 0x80030000;                                    // Result = 80030000
    a2 += 0x6CC0;                                       // Result = TIC_Credits (80036CC0)
    a3 = 0x80030000;                                    // Result = 80030000
    a3 += 0x6D58;                                       // Result = DRAW_Credits (80036D58)
    MiniLoop();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void I_SetDebugDrawStringPos() noexcept {
    sw(a0, gp + 0xA50);                                 // Store to: gDebugDrawStringXPos (80078030)
    sw(a1, gp + 0xA5C);                                 // Store to: gDebugDrawStringYPos (8007803C)
    return;
}

void I_DebugDrawString() noexcept {
    sw(a0, sp);
    sw(a1, sp + 0x4);
    sw(a2, sp + 0x8);
    sw(a3, sp + 0xC);
    sp -= 0x120;
    sw(s0, sp + 0x118);
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    sw(a0, sp + 0x120);
    a0 = s0;                                            // Result = 1F800200
    a1 = 0;                                             // Result = 00000000
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lhu(a3 - 0x6B0E);                              // Load from: gTexInfo_STATUS[2] (800A94F2)
    a2 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x11C);
    sw(0, sp + 0x10);
    LIBGPU_SetDrawMode();
    s0 += 4;                                            // Result = 1F800204
    t3 = 0xFF0000;                                      // Result = 00FF0000
    t3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t8 = t7 & t3;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_80012578:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_800125E0;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_800126A4;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(t7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t8;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_800125E0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80012694;
    if (v1 == a0) goto loc_80012578;
loc_80012604:
    v0 = lw(gp + 0x4);                                  // Load from: GPU_REG_GP1 (800775E4)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_80012578;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t3;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_80012670;
    a3 = -1;                                            // Result = FFFFFFFF
loc_80012654:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp);                                        // Load from: GPU_REG_GP0 (800775E0)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_80012654;
loc_80012670:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80012578;
    goto loc_80012604;
loc_80012694:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_800126A4:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_80012704;
    v1 = -1;                                            // Result = FFFFFFFF
loc_800126EC:
    v0 = lw(s0);
    s0 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_800126EC;
loc_80012704:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_800127B8;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_80012730:
    v0 = lw(gp + 0x4);                                  // Load from: GPU_REG_GP1 (800775E4)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_800127B8;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8001279C;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80012780:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp);                                        // Load from: GPU_REG_GP0 (800775E0)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80012780;
loc_8001279C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80012730;
loc_800127B8:
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    a0 = s0;                                            // Result = 1F800200
    LIBGPU_SetSprt();
    a0 = s0;                                            // Result = 1F800200
    a1 = 0;                                             // Result = 00000000
    LIBGPU_SetSemiTrans();
    a0 = s0;                                            // Result = 1F800200
    a1 = 0;                                             // Result = 00000000
    LIBGPU_SetShadeTex();
    a0 = sp + 0x18;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lhu(v1 - 0x6F7C);                              // Load from: gPaletteClutId_Main (800A9084)
    v0 = 0x80;                                          // Result = 00000080
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x205);                                 // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x206);                                 // Store to: 1F800206
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x20E);                                 // Store to: 1F80020E
    a1 = lw(sp + 0x120);
    a2 = sp + 0x124;
    D_vsprintf();
    a0 = lw(gp + 0xA50);                                // Load from: gDebugDrawStringXPos (80078030)
    a1 = lw(gp + 0xA5C);                                // Load from: gDebugDrawStringYPos (8007803C)
    a2 = sp + 0x18;
    I_DrawStringSmall();
    v0 = lw(gp + 0xA5C);                                // Load from: gDebugDrawStringYPos (8007803C)
    v0 += 8;
    sw(v0, gp + 0xA5C);                                 // Store to: gDebugDrawStringYPos (8007803C)
    ra = lw(sp + 0x11C);
    s0 = lw(sp + 0x118);
    sp += 0x120;
    return;
}

void D_memset() noexcept {
loc_80012850:
    v0 = a0 & 3;
    v1 = a1;
    if (v0 == 0) goto loc_80012880;
    a2--;
loc_80012860:
    if (i32(a2) < 0) goto loc_80012904;
    sb(v1, a0);
    a0++;
    v0 = a0 & 3;
    a2--;
    if (v0 != 0) goto loc_80012860;
    a2++;
loc_80012880:
    v0 = a1 << 24;
    v1 = a1 << 16;
    v0 |= v1;
    v1 = a1 << 8;
    v0 |= v1;
    a1 |= v0;
    v0 = (i32(a2) < 0x20);
    a3 = a0;
    if (v0 != 0) goto loc_800128DC;
    a0 += 4;
loc_800128A8:
    sw(a1, a0 + 0x18);
    sw(a1, a0 + 0x14);
    sw(a1, a0 + 0x10);
    sw(a1, a0 + 0xC);
    sw(a1, a0 + 0x8);
    sw(a1, a0 + 0x4);
    sw(a1, a0);
    a0 += 0x20;
    sw(a1, a3);
    a2 -= 0x20;
    v0 = (i32(a2) < 0x20);
    a3 += 0x20;
    if (v0 == 0) goto loc_800128A8;
loc_800128DC:
    a2--;
    v0 = -1;                                            // Result = FFFFFFFF
    a0 = a3;
    if (a2 == v0) goto loc_80012904;
    v0 = a1;
    v1 = -1;                                            // Result = FFFFFFFF
loc_800128F4:
    sb(v0, a0);
    a2--;
    a0++;
    if (a2 != v1) goto loc_800128F4;
loc_80012904:
    return;
}

void D_memcpy() noexcept {
loc_8001290C:
    sp -= 8;
    v1 = a2 - 1;
    if (a2 == 0) goto loc_80012934;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8001291C:
    v0 = lbu(a1);
    a1++;
    v1--;
    sb(v0, a0);
    a0++;
    if (v1 != a2) goto loc_8001291C;
loc_80012934:
    sp += 8;
    return;
}

void D_strncpy() noexcept {
loc_80012940:
    sp -= 8;
    v1 = a2 - 1;
    if (a2 == 0) goto loc_80012970;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80012950:
    v0 = lbu(a1);
    a1++;
    sb(v0, a0);
    a0++;
    if (v0 == 0) goto loc_80012970;
    v1--;
    if (v1 != a2) goto loc_80012950;
loc_80012970:
    sp += 8;
    return;
}

void D_strncasecmp() noexcept {
loc_8001297C:
    v0 = lbu(a0);
    if (v0 == 0) goto loc_800129BC;
    v1 = lbu(a1);
    if (v1 == 0) goto loc_800129C0;
    {
        const bool bJump = (v0 != v1)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800129CC;
    }
    a0++;
    a2--;
    a1++;
    if (a2 != 0) goto loc_8001297C;
    v0 = 0;                                             // Result = 00000000
    goto loc_800129CC;
loc_800129BC:
    v1 = lbu(a1);
loc_800129C0:
    v0 ^= v1;
    v0 = (v0 > 0);
loc_800129CC:
    return;
}

void strupr() noexcept {
    v1 = lbu(a0);
    v0 = v1 - 0x61;
    if (v1 == 0) goto loc_80012A10;
loc_800129E4:
    v0 &= 0xFF;
    v0 = (v0 < 0x1A);
    if (v0 == 0) goto loc_800129F8;
    v1 -= 0x20;
loc_800129F8:
    sb(v1, a0);
    a0++;
    v1 = lbu(a0);
    v0 = v1 - 0x61;
    if (v1 != 0) goto loc_800129E4;
loc_80012A10:
    return;
}

void P_Random() noexcept {
loc_80012A18:
    v0 = lw(gp + 0x2C);                                 // Load from: gPRndIndex (8007760C)
    v0++;
    v0 &= 0xFF;
    sw(v0, gp + 0x2C);                                  // Store to: gPRndIndex (8007760C)
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x75A8;                                       // Result = RndTable[0] (80058A58)
    at += v0;
    v0 = lbu(at);
    return;
}

void M_Random() noexcept {
loc_80012A44:
    v0 = lw(gp + 0x28);                                 // Load from: gRndIndex (80077608)
    v0++;
    v0 &= 0xFF;
    sw(v0, gp + 0x28);                                  // Store to: gRndIndex (80077608)
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x75A8;                                       // Result = RndTable[0] (80058A58)
    at += v0;
    v0 = lbu(at);
    return;
}

void M_ClearRandom() noexcept {
loc_80012A70:
    sw(0, gp + 0x2C);                                   // Store to: gPRndIndex (8007760C)
    sw(0, gp + 0x28);                                   // Store to: gRndIndex (80077608)
    return;
}

void M_ClearBox() noexcept {
loc_80012A80:
    v1 = 0x7FFF0000;                                    // Result = 7FFF0000
    v1 |= 0xFFFF;                                       // Result = 7FFFFFFF
    v0 = 0x80000000;                                    // Result = 80000000
    sw(v0, a0 + 0xC);
    sw(v0, a0);
    sw(v1, a0 + 0x8);
    sw(v1, a0 + 0x4);
    return;
}

void M_AddToBox() noexcept {
loc_80012AA0:
    v0 = lw(a0 + 0x8);
    v0 = (i32(a1) < i32(v0));
    if (v0 == 0) goto loc_80012ABC;
    sw(a1, a0 + 0x8);
    goto loc_80012AD4;
loc_80012ABC:
    v0 = lw(a0 + 0xC);
    v0 = (i32(v0) < i32(a1));
    if (v0 == 0) goto loc_80012AD4;
    sw(a1, a0 + 0xC);
loc_80012AD4:
    v0 = lw(a0 + 0x4);
    v0 = (i32(a2) < i32(v0));
    if (v0 == 0) goto loc_80012AF0;
    sw(a2, a0 + 0x4);
    goto loc_80012B08;
loc_80012AF0:
    v0 = lw(a0);
    v0 = (i32(v0) < i32(a2));
    if (v0 == 0) goto loc_80012B08;
    sw(a2, a0);
loc_80012B08:
    return;
}

void M_AddPointToBox() noexcept {
    v0 = lw(a0 + 0x8);
    v0 = (i32(a1) < i32(v0));
    if (v0 == 0) goto loc_80012B28;
    sw(a1, a0 + 0x8);
loc_80012B28:
    v0 = lw(a0 + 0xC);
    v0 = (i32(v0) < i32(a1));
    if (v0 == 0) goto loc_80012B40;
    sw(a1, a0 + 0xC);
loc_80012B40:
    v0 = lw(a0 + 0x4);
    v0 = (i32(a2) < i32(v0));
    if (v0 == 0) goto loc_80012B58;
    sw(a2, a0 + 0x4);
loc_80012B58:
    v0 = lw(a0);
    v0 = (i32(v0) < i32(a2));
    if (v0 == 0) goto loc_80012B70;
    sw(a2, a0);
loc_80012B70:
    return;
}

void MiniLoop() noexcept {
loc_80012B78:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    sp -= 0x28;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(s3, sp + 0x1C);
    s3 = a1;
    sw(s1, sp + 0x14);
    s1 = a2;
    sw(s2, sp + 0x18);
    s2 = a3;
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    if (v0 == 0) goto loc_80012BB8;
    I_NetHandshake();
loc_80012BB8:
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7EB4);                                 // Store to: gGameAction (80077EB4)
    sw(0, gp + 0x9C4);                                  // Store to: gPrevGameTic (80077FA4)
    sw(0, gp + 0xA6C);                                  // Store to: gGameTic (8007804C)
    sw(0, gp + 0xB6C);                                  // Store to: gTicCon (8007814C)
    sw(0, gp + 0xCBC);                                  // Store to: gLastTgtGameTicCount (8007829C)
    pcall(s0);
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7E44);                                 // Store to: gElapsedVBlanks (800781BC)
    a0 = -1;                                            // Result = FFFFFFFF
    LIBETC_VSync();
    s4 = 0x80070000;                                    // Result = 80070000
    s4 += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7EEC);                                // Store to: gLastTotalVBlanks (80078114)
loc_80012BF8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7E44);                               // Load from: gElapsedVBlanks (800781BC)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    sw(v1, at);
    v0 = lw(gp + 0x964);                                // Load from: gPlayerPadButtons[0] (80077F44)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F48);                               // Load from: gPlayerPadButtons[1] (80077F48)
    sw(v0, gp + 0xC34);                                 // Store to: gPlayerOldPadButtons[0] (80078214)
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0x7DE8);                                // Store to: gPlayerOldPadButtons[1] (80078218)
    I_ReadGamepad();
    a0 = v0;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    v1 <<= 2;
    a1 = v1 + s4;
    sw(a0, a1);
    if (v0 == 0) goto loc_80012C80;
    I_NetUpdate();
    {
        const bool bJump = (v0 == 0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_80012D34;
    }
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7EB4);                                // Store to: gGameAction (80077EB4)
    s0 = 4;                                             // Result = 00000004
    goto loc_80012DBC;
loc_80012C80:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E54);                               // Load from: gbDemoRecording (800781AC)
    if (v0 != 0) goto loc_80012CA8;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F80);                               // Load from: gbDemoPlayback (80078080)
    if (v0 == 0) goto loc_80012D34;
loc_80012CA8:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F80);                               // Load from: gbDemoPlayback (80078080)
    {
        const bool bJump = (v0 == 0)
        v0 = a0 & 0xF9FF;
        if (bJump) goto loc_80012CE0;
    }
    s0 = 9;                                             // Result = 00000009
    if (v0 != 0) goto loc_80012DBC;
    v1 = lw(gp + 0xC);                                  // Load from: gpDemo_p (800775EC)
    v0 = v1 + 4;
    sw(v0, gp + 0xC);                                   // Store to: gpDemo_p (800775EC)
    a0 = lw(v1);
    sw(a0, a1);
loc_80012CE0:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E54);                               // Load from: gbDemoRecording (800781AC)
    {
        const bool bJump = (v0 == 0)
        v0 = a0 & 0x800;
        if (bJump) goto loc_80012D0C;
    }
    v1 = lw(gp + 0xC);                                  // Load from: gpDemo_p (800775EC)
    v0 = v1 + 4;
    sw(v0, gp + 0xC);                                   // Store to: gpDemo_p (800775EC)
    sw(a0, v1);
    v0 = a0 & 0x800;
loc_80012D0C:
    s0 = 5;                                             // Result = 00000005
    if (v0 != 0) goto loc_80012DBC;
    v0 = lw(gp + 0xC);                                  // Load from: gpDemo_p (800775EC)
    v1 = lw(gp + 0x8);                                  // Load from: gpDemoBuffer (800775E8)
    v0 -= v1;
    v0 = u32(i32(v0) >> 2);
    v0 = (i32(v0) < 0x4000);
    if (v0 == 0) goto loc_80012DBC;
loc_80012D34:
    v0 = lw(gp + 0xB6C);                                // Load from: gTicCon (8007814C)
    v1 = lw(gp + 0x9DC);                                // Load from: gPlayersElapsedVBlanks[0] (80077FBC)
    v0 += v1;
    v1 = lw(gp + 0xCBC);                                // Load from: gLastTgtGameTicCount (8007829C)
    a0 = u32(i32(v0) >> 2);
    sw(v0, gp + 0xB6C);                                 // Store to: gTicCon (8007814C)
    v1 = (i32(v1) < i32(a0));
    if (v1 == 0) goto loc_80012D6C;
    v0 = lw(gp + 0xA6C);                                // Load from: gGameTic (8007804C)
    sw(a0, gp + 0xCBC);                                 // Store to: gLastTgtGameTicCount (8007829C)
    v0++;
    sw(v0, gp + 0xA6C);                                 // Store to: gGameTic (8007804C)
loc_80012D6C:
    pcall(s1);
    s0 = v0;
    if (s0 != 0) goto loc_80012DBC;
    pcall(s2);
    v1 = lw(gp + 0xA6C);                                // Load from: gGameTic (8007804C)
    v0 = lw(gp + 0x9C4);                                // Load from: gPrevGameTic (80077FA4)
    v0 = (i32(v0) < i32(v1));
    if (v0 == 0) goto loc_80012DA8;
    S_UpdateSounds();
loc_80012DA8:
    v0 = lw(gp + 0xA6C);                                // Load from: gGameTic (8007804C)
    sw(v0, gp + 0x9C4);                                 // Store to: gPrevGameTic (80077FA4)
    goto loc_80012BF8;
loc_80012DBC:
    a0 = s0;
    pcall(s3);
    v1 = lw(gp + 0x964);                                // Load from: gPlayerPadButtons[0] (80077F44)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7F48);                               // Load from: gPlayerPadButtons[1] (80077F48)
    v0 = s0;
    sw(v1, gp + 0xC34);                                 // Store to: gPlayerOldPadButtons[0] (80078214)
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0x7DE8);                                // Store to: gPlayerOldPadButtons[1] (80078218)
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void G_DoLoadLevel() noexcept {
loc_80012E04:
    sp -= 0x18;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7A90;                                       // Result = gTexInfo_LOADING[0] (80097A90)
    a1 = 0x5F;                                          // Result = 0000005F
    sw(s0, sp + 0x10);
    s0 = 3;                                             // Result = 00000003
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    sw(ra, sp + 0x14);
    a2 = 0x6D;                                          // Result = 0000006D
    I_DrawPlaque();
loc_80012E30:
    a0 = 5;                                             // Result = 00000005
    wess_seq_status();
    if (v0 == s0) goto loc_80012E30;
    a0 = 7;                                             // Result = 00000007
    wess_seq_status();
    if (v0 == s0) goto loc_80012E30;
    a0 = lw(gp + 0xA68);                                // Load from: gGameMap (80078048)
    S_LoadSoundAndMusic();
    t2 = 8;                                             // Result = 00000008
    t1 = 4;                                             // Result = 00000004
    t0 = 1;                                             // Result = 00000001
    a3 = 2;                                             // Result = 00000002
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 -= 0x7810;                                       // Result = gPlayer1[1] (800A87F0)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0x7F54;                                       // Result = gbPlayerInGame[0] (800780AC)
    a2 = v1 + 0x258;                                    // Result = gThingLine_tv1[1] (800A8A48)
    a1 = lw(gp + 0x8D4);                                // Load from: gGameAction (80077EB4)
loc_80012E84:
    v0 = lw(a0);
    if (v0 == 0) goto loc_80012EB8;
    if (a1 == t2) goto loc_80012EB4;
    if (a1 == t1) goto loc_80012EB4;
    v0 = lw(v1);
    if (v0 != t0) goto loc_80012EB8;
loc_80012EB4:
    sw(a3, v1);
loc_80012EB8:
    v1 += 0x12C;
    v0 = (i32(v1) < i32(a2));
    a0 += 4;
    if (v0 != 0) goto loc_80012E84;
    a0 = lw(gp + 0xA68);                                // Load from: gGameMap (80078048)
    a1 = lw(gp + 0xC78);                                // Load from: gGameSkill (80078258)
    P_SetupLevel();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    Z_CheckHeap();
    sw(0, gp + 0x8D4);                                  // Store to: gGameAction (80077EB4)
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void G_PlayerFinishLevel() noexcept {
loc_80012F00:
    sp -= 0x18;
    v0 = a0 << 2;
    v0 += a0;
    sw(s0, sp + 0x10);
    s0 = v0 << 4;
    s0 -= v0;
    s0 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    s0 += v0;
    a0 = s0 + 0x30;
    a1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x14);
    a2 = 0x18;                                          // Result = 00000018
    D_memset();
    a0 = s0 + 0x48;
    a1 = 0;                                             // Result = 00000000
    a2 = 0x18;                                          // Result = 00000018
    D_memset();
    a0 = lw(s0);
    v1 = 0x8FFF0000;                                    // Result = 8FFF0000
    v0 = lw(a0 + 0x64);
    v1 |= 0xFFFF;                                       // Result = 8FFFFFFF
    v0 &= v1;
    sw(v0, a0 + 0x64);
    sw(0, s0 + 0xE4);
    sw(0, s0 + 0xE8);
    sw(0, s0 + 0xD8);
    sw(0, s0 + 0xDC);
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void G_PlayerReborn() noexcept {
loc_80012F88:
    sp -= 0x28;
    v0 = a0 << 2;
    v0 += a0;
    sw(s0, sp + 0x10);
    s0 = v0 << 4;
    s0 -= v0;
    s0 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    s0 += v0;
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    s1 = lw(s0 + 0x64);
    s2 = lw(s0 + 0xC8);
    s3 = lw(s0 + 0xCC);
    s4 = lw(s0 + 0xD0);
    a2 = 0x12C;                                         // Result = 0000012C
    D_memset();
    a1 = 0;                                             // Result = 00000000
    a0 = 0x80060000;                                    // Result = 80060000
    a0 += 0x70D4;                                       // Result = gMaxAmmo[0] (800670D4)
    v1 = 1;                                             // Result = 00000001
    v0 = 0x64;                                          // Result = 00000064
    sw(v0, s0 + 0x24);
    v0 = 0x32;                                          // Result = 00000032
    sw(v1, s0 + 0xB8);
    sw(v1, s0 + 0xBC);
    sw(0, s0 + 0x4);
    sw(v1, s0 + 0x70);
    sw(v1, s0 + 0x6C);
    sw(v1, s0 + 0x74);
    sw(v1, s0 + 0x78);
    sw(v0, s0 + 0x98);
    sw(s1, s0 + 0x64);
    sw(s2, s0 + 0xC8);
    sw(s3, s0 + 0xCC);
    sw(s4, s0 + 0xD0);
loc_80013030:
    v0 = lw(a0);
    a0 += 4;
    a1++;
    sw(v0, s0 + 0xA8);
    v0 = (i32(a1) < 4);
    s0 += 4;
    if (v0 != 0) goto loc_80013030;
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void G_DoReborn() noexcept {
loc_80013070:
    v0 = lw(gp + 0xA7C);                                // Load from: gNetGame (8007805C)
    sp -= 0x30;
    sw(s3, sp + 0x1C);
    s3 = a0;
    sw(ra, sp + 0x28);
    sw(s5, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    if (v0 != 0) goto loc_800130AC;
    v0 = 1;                                             // Result = 00000001
    sw(v0, gp + 0x8D4);                                 // Store to: gGameAction (80077EB4)
    goto loc_8001335C;
loc_800130AC:
    v0 = s3 << 2;
    a0 = v0 + s3;
    v0 = a0 << 4;
    v0 -= a0;
    s2 = v0 << 2;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    at += s2;
    v1 = lw(at);
    v0 = lw(v1 + 0x80);
    if (v0 == 0) goto loc_800130E8;
    sw(0, v1 + 0x80);
loc_800130E8:
    v1 = lw(gp + 0xA7C);                                // Load from: gNetGame (8007805C)
    v0 = 2;                                             // Result = 00000002
    {
        const bool bJump = (v1 != v0)
        v1 = a0 << 1;
        if (bJump) goto loc_800131E4;
    }
    s0 = 0;                                             // Result = 00000000
    s4 = s2;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FA0);                               // Load from: gpDeathmatchP (80078060)
    v0 = 0x800A0000;                                    // Result = 800A0000
    v0 -= 0x7F94;                                       // Result = gDeathmatchStarts[0] (8009806C)
    v1 -= v0;
    v0 = v1 << 1;
    v0 += v1;
    v1 = v0 << 4;
    v0 += v1;
    v1 = v0 << 8;
    v0 += v1;
    v1 = v0 << 16;
    v0 += v1;
    v0 = -v0;
    s2 = u32(i32(v0) >> 1);
loc_8001313C:
    P_Random();
    div(v0, s2);
    if (s2 != 0) goto loc_80013154;
    _break(0x1C00);
loc_80013154:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s2 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8001316C;
    }
    if (v0 != at) goto loc_8001316C;
    tge(zero, zero, 0x5D);
loc_8001316C:
    v1 = hi;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    at += s4;
    a0 = lw(at);
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 1;
    v1 = 0x800A0000;                                    // Result = 800A0000
    v1 -= 0x7F94;                                       // Result = gDeathmatchStarts[0] (8009806C)
    s1 = v0 + v1;
    a1 = lh(s1);
    a2 = lh(s1 + 0x2);
    a1 <<= 16;
    a2 <<= 16;
    P_CheckPosition();
    s0++;
    if (v0 != 0) goto loc_800131D8;
    v0 = (i32(s0) < 0x10);
    {
        const bool bJump = (v0 != 0)
        v0 = s3 << 2;
        if (bJump) goto loc_8001313C;
    }
    v0 += s3;
    v0 <<= 1;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 -= 0x7184;                                       // Result = gPlayer1MapThing[0] (800A8E7C)
    s1 = v0 + v1;
    goto loc_80013278;
loc_800131D8:
    v0 = s3 + 1;
    sh(v0, s1 + 0x6);
    goto loc_80013278;
loc_800131E4:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7184;                                       // Result = gPlayer1MapThing[0] (800A8E7C)
    s1 = v1 + v0;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    at += s2;
    a0 = lw(at);
    a1 = lh(s1);
    a2 = lh(s1 + 0x2);
    a1 <<= 16;
    a2 <<= 16;
    P_CheckPosition();
    s0 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80013278;
    s5 = s2;
    s2 = 0;                                             // Result = 00000000
loc_80013224:
    s4 = 0x800B0000;                                    // Result = 800B0000
    s4 -= 0x7184;                                       // Result = gPlayer1MapThing[0] (800A8E7C)
    s1 = s2 + s4;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    at += s5;
    a0 = lw(at);
    a1 = lh(s1);
    a2 = lh(s1 + 0x2);
    a1 <<= 16;
    a2 <<= 16;
    P_CheckPosition();
    s0++;
    if (v0 != 0) goto loc_800131D8;
    v0 = (i32(s0) < 2);
    s2 += 0xA;
    if (v0 != 0) goto loc_80013224;
    v0 = s3 << 2;
    v0 += s3;
    v0 <<= 1;
    s1 = v0 + s4;
loc_80013278:
    a0 = s1;
    P_SpawnPlayer();
    s0 = 0;                                             // Result = 00000000
    v0 = s0 << 2;                                       // Result = 00000000
loc_80013288:
    v0 += s0;
    v0 <<= 1;
    v1 = s0 + 1;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x717E;                                       // Result = gPlayer1MapThing[3] (800A8E82)
    at += v0;
    sh(v1, at);
    s0 = v1;
    v0 = (i32(s0) < 2);
    {
        const bool bJump = (v0 != 0)
        v0 = s0 << 2;
        if (bJump) goto loc_80013288;
    }
    a0 = lh(s1);
    a1 = lh(s1 + 0x2);
    a0 <<= 16;
    a1 <<= 16;
    R_PointInSubsector();
    v1 = 0x6C160000;                                    // Result = 6C160000
    a0 = lh(s1 + 0x4);
    v1 |= 0xC16D;                                       // Result = 6C16C16D
    multu(a0, v1);
    a3 = 0x1D;                                          // Result = 0000001D
    a1 = lh(s1);
    v0 = lw(v0);
    a1 <<= 16;
    a2 = lw(v0);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    v1 = hi;
    a0 -= v1;
    a0 >>= 1;
    v1 += a0;
    v1 <<= 7;
    v1 &= 0x7000;
    v0 += v1;
    v0 = lw(v0);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += v1;
    v1 = lw(at);
    a0 = v0 << 2;
    a0 += v0;
    a0 <<= 2;
    a0 += a1;
    a1 = v1 << 2;
    a1 += v1;
    v0 = lh(s1 + 0x2);
    a1 <<= 2;
    v0 <<= 16;
    a1 += v0;
    P_SpawnMObj();
    a0 = v0;
    a1 = 0x1B;                                          // Result = 0000001B
    S_StartSound();
loc_8001335C:
    ra = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x30;
    return;
}

void G_SetGameComplete() noexcept {
    v0 = 2;                                             // Result = 00000002
    sw(v0, gp + 0x8D4);                                 // Store to: gGameAction (80077EB4)
    return;
}

void G_InitNew() noexcept {
loc_80013394:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C08);                               // Load from: gLockedTexPagesMask (80077C08)
    sp -= 0x20;
    sw(s2, sp + 0x18);
    s2 = a0;
    sw(s0, sp + 0x10);
    s0 = a1;
    sw(s1, sp + 0x14);
    sw(ra, sp + 0x1C);
    sw(0, gp + 0xA14);                                  // Store to: gbIsLevelBeingRestarted (80077FF4)
    v0 &= 1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C08);                                // Store to: gLockedTexPagesMask (80077C08)
    s1 = a2;
    I_ResetTexCache();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a1 = 0x2E;                                          // Result = 0000002E
    Z_FreeTags();
    M_ClearRandom();
    v1 = 2;                                             // Result = 00000002
    v0 = 0x12C;                                         // Result = 0000012C
    sw(s0, gp + 0xA68);                                 // Store to: gGameMap (80078048)
    sw(s2, gp + 0xC78);                                 // Store to: gGameSkill (80078258)
    sw(s1, gp + 0xA7C);                                 // Store to: gNetGame (8007805C)
loc_800133FC:
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x7810;                                       // Result = gPlayer1[1] (800A87F0)
    at += v0;
    sw(v1, at);
    v0 -= 0x12C;
    a1 = 0;                                             // Result = 00000000
    if (i32(v0) >= 0) goto loc_800133FC;
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 -= 0x61D0;                                       // Result = gUnusedGameBuffer[0] (800A9E30)
    a0 = s0;                                            // Result = gUnusedGameBuffer[0] (800A9E30)
    a2 = 0x94;                                          // Result = 00000094
    D_memset();
    v1 = 1;                                             // Result = 00000001
    at = 0x800B0000;                                    // Result = 800B0000
    sw(s0, at - 0x76E8);                                // Store to: gPlayer2[0] (800A8918)
    at = 0x800B0000;                                    // Result = 800B0000
    sw(s0, at - 0x7814);                                // Store to: gPlayer1[0] (800A87EC)
    sw(v1, gp + 0xACC);                                 // Store to: gbPlayerInGame[0] (800780AC)
    v0 = (s1 < 3);
    if (s1 != 0) goto loc_8001346C;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x3E0C;                                       // Result = gBtnBinding_Attack (80073E0C)
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7FC8);                                // Store to: MAYBE_gpButtonBindings_Player1 (80077FC8)
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7F50);                                 // Store to: gbPlayerInGame[1] (800780B0)
    v0 = 4;                                             // Result = 00000004
    goto loc_8001347C;
loc_8001346C:
    {
        const bool bJump = (v0 == 0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_8001347C;
    }
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0x7F50);                                // Store to: gbPlayerInGame[1] (800780B0)
loc_8001347C:
    sw(0, gp + 0xBCC);                                  // Store to: gbDemoRecording (800781AC)
    sw(0, gp + 0xAA0);                                  // Store to: gbDemoPlayback (80078080)
    if (s2 != v0) goto loc_800134C8;
    v0 = 2;                                             // Result = 00000002
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x4850);                                // Store to: State_S_SARG_ATK1[2] (8005B7B0)
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x4834);                                // Store to: State_S_SARG_ATK2[2] (8005B7CC)
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x4818);                                // Store to: State_S_SARG_ATK3[2] (8005B7E8)
    v0 = 0xF;                                           // Result = 0000000F
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x1C18);                                // Store to: MObjInfo_MT_SERGEANT[F] (8005E3E8)
    v0 = 0x280000;                                      // Result = 00280000
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x17F8);                                // Store to: MObjInfo_MT_BRUISERSHOT[F] (8005E808)
    goto loc_800134FC;
loc_800134C8:
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x4850);                                // Store to: State_S_SARG_ATK1[2] (8005B7B0)
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x4834);                                // Store to: State_S_SARG_ATK2[2] (8005B7CC)
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x4818);                                // Store to: State_S_SARG_ATK3[2] (8005B7E8)
    v0 = 0xA;                                           // Result = 0000000A
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x1C18);                                // Store to: MObjInfo_MT_SERGEANT[F] (8005E3E8)
    v0 = 0x1E0000;                                      // Result = 001E0000
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x17F8);                                // Store to: MObjInfo_MT_BRUISERSHOT[F] (8005E808)
    v0 = 0x140000;                                      // Result = 00140000
loc_800134FC:
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x1850);                                // Store to: MObjInfo_MT_HEADSHOT[F] (8005E7B0)
    at = 0x80060000;                                    // Result = 80060000
    sw(v0, at - 0x18A8);                                // Store to: MObjInfo_MT_TROOPSHOT[F] (8005E758)
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void G_RunGame() noexcept {
loc_80013528:
    sp -= 0x20;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
loc_8001353C:
    G_DoLoadLevel();
    a0 = 0x80030000;                                    // Result = 80030000
    a0 -= 0x697C;                                       // Result = P_Start (80029684)
    a1 = 0x80030000;                                    // Result = 80030000
    a1 -= 0x68E4;                                       // Result = P_Stop (8002971C)
    a2 = 0x80030000;                                    // Result = 80030000
    a2 -= 0x6BEC;                                       // Result = P_Ticker (80029414)
    a3 = 0x80030000;                                    // Result = 80030000
    a3 -= 0x6A04;                                       // Result = P_Drawer (800295FC)
    MiniLoop();
    v1 = lw(gp + 0x8D4);                                // Load from: gGameAction (80077EB4)
    v0 = 6;                                             // Result = 00000006
    sw(0, gp + 0xA14);                                  // Store to: gbIsLevelBeingRestarted (80077FF4)
    s2 = 4;                                             // Result = 00000004
    if (v1 != v0) goto loc_80013588;
    empty_func1();
loc_80013588:
    v0 = lw(gp + 0x8D4);                                // Load from: gGameAction (80077EB4)
    v1 = 1;                                             // Result = 00000001
    if (v0 == s2) goto loc_8001353C;
    s1 = 8;                                             // Result = 00000008
    if (v0 == v1) goto loc_800135A8;
    if (v0 != s1) goto loc_800135B4;
loc_800135A8:
    sw(v1, gp + 0xA14);                                 // Store to: gbIsLevelBeingRestarted (80077FF4)
    goto loc_8001353C;
loc_800135B4:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C08);                               // Load from: gLockedTexPagesMask (80077C08)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v0 &= 1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C08);                                // Store to: gLockedTexPagesMask (80077C08)
    a1 = 8;                                             // Result = 00000008
    Z_FreeTags();
    v0 = lw(gp + 0x8D4);                                // Load from: gGameAction (80077EB4)
    s0 = 5;                                             // Result = 00000005
    if (v0 == s0) goto loc_800136F8;
    a0 = 0x80040000;                                    // Result = 80040000
    a0 -= 0x38A8;                                       // Result = IN_Start (8003C758)
    a1 = 0x80040000;                                    // Result = 80040000
    a1 -= 0x359C;                                       // Result = IN_Stop (8003CA64)
    a2 = 0x80040000;                                    // Result = 80040000
    a2 -= 0x3574;                                       // Result = IN_Ticker (8003CA8C)
    a3 = 0x80040000;                                    // Result = 80040000
    a3 -= 0x3190;                                       // Result = IN_Drawer (8003CE70)
    MiniLoop();
    v0 = lw(gp + 0xA7C);                                // Load from: gNetGame (8007805C)
    {
        const bool bJump = (v0 != 0)
        v0 = 0x1E;                                      // Result = 0000001E
        if (bJump) goto loc_80013698;
    }
    v1 = lw(gp + 0xA68);                                // Load from: gGameMap (80078048)
    {
        const bool bJump = (v1 != v0)
        v0 = 0x1F;                                      // Result = 0000001F
        if (bJump) goto loc_80013698;
    }
    v1 = lw(gp + 0xAB8);                                // Load from: gNextMap (80078098)
    {
        const bool bJump = (v1 != v0)
        v0 = (i32(v1) < 0x3C);
        if (bJump) goto loc_800136A4;
    }
    a0 = 0x80040000;                                    // Result = 80040000
    a0 -= 0x2930;                                       // Result = F1_Start (8003D6D0)
    a1 = 0x80040000;                                    // Result = 80040000
    a1 -= 0x288C;                                       // Result = F1_Stop (8003D774)
    a2 = 0x80040000;                                    // Result = 80040000
    a2 -= 0x2864;                                       // Result = F1_Ticker (8003D79C)
    a3 = 0x80040000;                                    // Result = 80040000
    a3 -= 0x2710;                                       // Result = F1_Drawer (8003D8F0)
    MiniLoop();
    v0 = lw(gp + 0x8D4);                                // Load from: gGameAction (80077EB4)
    if (v0 == s2) goto loc_8001353C;
    if (v0 == s1) goto loc_8001353C;
    {
        const bool bJump = (v0 == s0)
        v0 = -2;                                        // Result = FFFFFFFE
        if (bJump) goto loc_800136F8;
    }
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
    goto loc_800136F8;
loc_80013698:
    v1 = lw(gp + 0xAB8);                                // Load from: gNextMap (80078098)
    v0 = (i32(v1) < 0x3C);
loc_800136A4:
    if (v0 == 0) goto loc_800136B8;
    sw(v1, gp + 0xA68);                                 // Store to: gGameMap (80078048)
    goto loc_8001353C;
loc_800136B8:
    a0 = 0x80040000;                                    // Result = 80040000
    a0 -= 0x263C;                                       // Result = F2_Start (8003D9C4)
    a1 = 0x80040000;                                    // Result = 80040000
    a1 -= 0x2510;                                       // Result = F2_Stop (8003DAF0)
    a2 = 0x80040000;                                    // Result = 80040000
    a2 -= 0x24E8;                                       // Result = F2_Ticker (8003DB18)
    a3 = 0x80040000;                                    // Result = 80040000
    a3 -= 0x1CD8;                                       // Result = F2_Drawer (8003E328)
    MiniLoop();
    v1 = lw(gp + 0x8D4);                                // Load from: gGameAction (80077EB4)
    v0 = 4;                                             // Result = 00000004
    {
        const bool bJump = (v1 == v0)
        v0 = 8;                                         // Result = 00000008
        if (bJump) goto loc_8001353C;
    }
    if (v1 == v0) goto loc_8001353C;
loc_800136F8:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void G_PlayDemoPtr() noexcept {
loc_80013714:
    sp -= 0x40;
    a0 = sp + 0x10;
    sw(s1, sp + 0x34);
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x3E0C;                                       // Result = gBtnBinding_Attack (80073E0C)
    a1 = s1;                                            // Result = gBtnBinding_Attack (80073E0C)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x75E8);                               // Load from: gpDemoBuffer (800775E8)
    sw(ra, sp + 0x3C);
    sw(s2, sp + 0x38);
    sw(s0, sp + 0x30);
    v0 = v1 + 4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x75EC);                                // Store to: gpDemo_p (800775EC)
    s2 = lw(v1);
    v0 = v1 + 8;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x75EC);                                // Store to: gpDemo_p (800775EC)
    s0 = lw(v1 + 0x4);
    a2 = 0x20;                                          // Result = 00000020
    D_memcpy();
    a0 = s1;                                            // Result = gBtnBinding_Attack (80073E0C)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x75EC);                               // Load from: gpDemo_p (800775EC)
    a2 = 0x20;                                          // Result = 00000020
    D_memcpy();
    a0 = s2;
    a1 = s0;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x75EC);                               // Load from: gpDemo_p (800775EC)
    v0 += 0x20;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x75EC);                                // Store to: gpDemo_p (800775EC)
    a2 = 0;                                             // Result = 00000000
    G_InitNew();
    G_DoLoadLevel();
    a0 = 0x80030000;                                    // Result = 80030000
    a0 -= 0x697C;                                       // Result = P_Start (80029684)
    a1 = 0x80030000;                                    // Result = 80030000
    a1 -= 0x68E4;                                       // Result = P_Stop (8002971C)
    a2 = 0x80030000;                                    // Result = 80030000
    a2 -= 0x6BEC;                                       // Result = P_Ticker (80029414)
    v0 = 1;                                             // Result = 00000001
    a3 = 0x80030000;                                    // Result = 80030000
    a3 -= 0x6A04;                                       // Result = P_Drawer (800295FC)
    sw(v0, gp + 0xAA0);                                 // Store to: gbDemoPlayback (80078080)
    MiniLoop();
    a0 = s1;                                            // Result = gBtnBinding_Attack (80073E0C)
    a1 = sp + 0x10;
    a2 = 0x20;                                          // Result = 00000020
    sw(0, gp + 0xAA0);                                  // Store to: gbDemoPlayback (80078080)
    s0 = v0;
    D_memcpy();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C08);                               // Load from: gLockedTexPagesMask (80077C08)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v0 &= 1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C08);                                // Store to: gLockedTexPagesMask (80077C08)
    a1 = 0x2E;                                          // Result = 0000002E
    Z_FreeTags();
    v0 = s0;
    ra = lw(sp + 0x3C);
    s2 = lw(sp + 0x38);
    s1 = lw(sp + 0x34);
    s0 = lw(sp + 0x30);
    sp += 0x40;
    return;
}

void empty_func1() noexcept {
loc_80013838:
    return;
}

void P_RunMobjBase() noexcept {
loc_80013840:
    sp -= 0x18;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x715C;                                       // Result = gMObjHead[5] (800A8EA4)
    sw(ra, sp + 0x14);
    sw(s0, sp + 0x10);
    v1 = lw(v0);                                        // Load from: gMObjHead[5] (800A8EA4)
    v0 -= 0x14;                                         // Result = gMObjHead[0] (800A8E90)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7FB8);                                 // Store to: gCurMObjIdx (80077FB8)
    sw(v1, gp + 0xC6C);                                 // Store to: gpCurMObj (8007824C)
    s0 = v0;                                            // Result = gMObjHead[0] (800A8E90)
    if (v1 == v0) goto loc_800138C4;
loc_80013870:
    a0 = lw(gp + 0xC6C);                                // Load from: gpCurMObj (8007824C)
    v0 = lw(a0 + 0x80);
    if (v0 != 0) goto loc_800138A8;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FB8);                               // Load from: gCurMObjIdx (80077FB8)
    sw(0, a0 + 0x18);
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7FB8);                                // Store to: gCurMObjIdx (80077FB8)
    P_MobjThinker();
loc_800138A8:
    v0 = lw(gp + 0xC6C);                                // Load from: gpCurMObj (8007824C)
    v0 = lw(v0 + 0x14);
    sw(v0, gp + 0xC6C);                                 // Store to: gpCurMObj (8007824C)
    if (v0 != s0) goto loc_80013870;
loc_800138C4:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_XYMovement() noexcept {
loc_800138D8:
    sp -= 0x28;
    sw(s0, sp + 0x10);
    s0 = a0;
    v1 = -8;                                            // Result = FFFFFFF8
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 = lw(s0 + 0x48);
    a0 = 0x100000;                                      // Result = 00100000
    s4 = v0 & v1;
    v0 = lw(s0 + 0x4C);
    s2 = s4;
    s3 = v0 & v1;
    v0 = s4 + a0;
    v1 = 0x200000;                                      // Result = 00200000
    v0 = (v1 < v0);
    s1 = s3;
    if (v0 != 0) goto loc_80013938;
    v0 = s3 + a0;
    v0 = (v1 < v0);
    if (v0 == 0) goto loc_80013A1C;
loc_80013938:
    s2 = u32(i32(s2) >> 1);
    a0 = 0x100000;                                      // Result = 00100000
loc_80013940:
    v0 = s2 + a0;
    v1 = 0x200000;                                      // Result = 00200000
    v0 = (v1 < v0);
    s1 = u32(i32(s1) >> 1);
    if (v0 != 0) goto loc_80013938;
    v0 = s1 + a0;
    v0 = (v1 < v0);
    if (v0 == 0) goto loc_80013A1C;
    s2 = u32(i32(s2) >> 1);
    goto loc_80013940;
loc_8001396C:
    s3 -= s1;
    a0 = lw(s0);
    a1 = lw(s0 + 0x4);
    a0 += s2;
    a1 += s1;
    PB_TryMove();
    v1 = 0x1000000;                                     // Result = 01000000
    if (v0 != 0) goto loc_80013A1C;
    v0 = lw(s0 + 0x64);
    v0 &= v1;
    if (v0 == 0) goto loc_800139B4;
    v1 = lw(gp + 0xBA4);                                // Load from: gpHitThing (80078184)
    v0 = 0x80020000;                                    // Result = 80020000
    v0 -= 0x72AC;                                       // Result = L_SkullBash (80018D54)
    sw(v0, s0 + 0x18);
    sw(v1, s0 + 0x84);
loc_800139B4:
    v0 = lw(s0 + 0x64);
    v1 = 0x10000;                                       // Result = 00010000
    v0 &= v1;
    if (v0 == 0) goto loc_80013A10;
    v0 = lw(gp + 0x9AC);                                // Load from: gpCeilingLine (80077F8C)
    if (v0 == 0) goto loc_800139F8;
    v0 = lw(v0 + 0x3C);
    if (v0 == 0) goto loc_800139F8;
    v1 = lw(v0 + 0xC);
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 == v0) goto loc_80013AC4;
loc_800139F8:
    v1 = lw(gp + 0xBA4);                                // Load from: gpHitThing (80078184)
    v0 = 0x80020000;                                    // Result = 80020000
    v0 -= 0x7320;                                       // Result = L_MissileHit (80018CE0)
    sw(v0, s0 + 0x18);
    sw(v1, s0 + 0x84);
    goto loc_80013B14;
loc_80013A10:
    sw(0, s0 + 0x4C);
    sw(0, s0 + 0x48);
    goto loc_80013B14;
loc_80013A1C:
    {
        const bool bJump = (s4 != 0)
        s4 -= s2;
        if (bJump) goto loc_8001396C;
    }
    s4 += s2;
    s4 -= s2;
    if (s3 != 0) goto loc_8001396C;
    v1 = lw(s0 + 0x64);
    v0 = 0x1010000;                                     // Result = 01010000
    v0 &= v1;
    s4 += s2;
    if (v0 != 0) goto loc_80013B14;
    v0 = lw(s0 + 0x8);
    a0 = lw(s0 + 0x38);
    v0 = (i32(a0) < i32(v0));
    {
        const bool bJump = (v0 != 0)
        v0 = 0x100000;                                  // Result = 00100000
        if (bJump) goto loc_80013B14;
    }
    v0 &= v1;
    if (v0 == 0) goto loc_80013A88;
    v0 = lw(s0 + 0xC);
    v0 = lw(v0);
    v0 = lw(v0);
    if (a0 != v0) goto loc_80013B14;
loc_80013A88:
    v0 = lw(s0 + 0x48);
    v0 += 0xFFF;
    v0 = (v0 < 0x1FFF);
    if (v0 == 0) goto loc_80013AD4;
    v0 = lw(s0 + 0x4C);
    v0 += 0xFFF;
    v0 = (v0 < 0x1FFF);
    if (v0 == 0) goto loc_80013AD4;
    sw(0, s0 + 0x48);
    sw(0, s0 + 0x4C);
    goto loc_80013B14;
loc_80013AC4:
    v0 = 0x80020000;                                    // Result = 80020000
    v0 -= 0x38DC;                                       // Result = P_RemoveMObj (8001C724)
    sw(v0, s0 + 0x18);
    goto loc_80013B14;
loc_80013AD4:
    v0 = lw(s0 + 0x48);
    a0 = lw(s0 + 0x4C);
    v0 = u32(i32(v0) >> 8);
    v1 = v0 << 3;
    v1 -= v0;
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 1;
    a0 = u32(i32(a0) >> 8);
    v1 = a0 << 3;
    v1 -= a0;
    sw(v0, s0 + 0x48);
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 1;
    sw(v0, s0 + 0x4C);
loc_80013B14:
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void P_FloatChange() noexcept {
    a1 = lw(a0 + 0x74);
    v0 = lw(a0);
    v1 = lw(a1);
    a2 = v1 - v0;
    if (i32(a2) >= 0) goto loc_80013B58;
    a2 = -a2;
loc_80013B58:
    v1 = lw(a1 + 0x4);
    v0 = lw(a0 + 0x4);
    a1 = v1 - v0;
    v0 = (i32(a2) < i32(a1));
    if (i32(a1) >= 0) goto loc_80013B78;
    a1 = -a1;
    v0 = (i32(a2) < i32(a1));
loc_80013B78:
    v1 = a2 + a1;
    if (v0 == 0) goto loc_80013B88;
    v0 = u32(i32(a2) >> 1);
    goto loc_80013B8C;
loc_80013B88:
    v0 = u32(i32(a1) >> 1);
loc_80013B8C:
    a1 = v1 - v0;
    v0 = lw(a0 + 0x44);
    v1 = lw(a0 + 0x74);
    a2 = lw(a0 + 0x8);
    v1 = lw(v1 + 0x8);
    v0 = u32(i32(v0) >> 1);
    v0 += v1;
    v1 = v0 - a2;
    v0 = v1 << 1;
    if (i32(v1) >= 0) goto loc_80013BD0;
    v0 += v1;
    v0 = -v0;
    v0 = (i32(a1) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = 0xFFF80000;                                // Result = FFF80000
        if (bJump) goto loc_80013BD0;
    }
    v0 += a2;
    goto loc_80013BF4;
loc_80013BD0:
    v0 = v1 << 1;
    if (i32(v1) <= 0) goto loc_80013BF8;
    v0 += v1;
    v0 = (i32(a1) < i32(v0));
    v1 = 0x80000;                                       // Result = 00080000
    if (v0 == 0) goto loc_80013BF8;
    v0 = lw(a0 + 0x8);
    v0 += v1;
loc_80013BF4:
    sw(v0, a0 + 0x8);
loc_80013BF8:
    return;
}

void P_ZMovement() noexcept {
loc_80013C00:
    a2 = a0;
    v0 = lw(a2 + 0x8);
    a0 = lw(a2 + 0x50);
    v1 = lw(a2 + 0x64);
    v0 += a0;
    v1 &= 0x4000;
    sw(v0, a2 + 0x8);
    if (v1 == 0) goto loc_80013CEC;
    a0 = lw(a2 + 0x74);
    if (a0 == 0) goto loc_80013CEC;
    v1 = lw(a0);
    v0 = lw(a2);
    a1 = v1 - v0;
    if (i32(a1) >= 0) goto loc_80013C4C;
    a1 = -a1;
loc_80013C4C:
    v1 = lw(a0 + 0x4);
    v0 = lw(a2 + 0x4);
    a0 = v1 - v0;
    v0 = (i32(a1) < i32(a0));
    if (i32(a0) >= 0) goto loc_80013C6C;
    a0 = -a0;
    v0 = (i32(a1) < i32(a0));
loc_80013C6C:
    v1 = a1 + a0;
    if (v0 == 0) goto loc_80013C7C;
    v0 = u32(i32(a1) >> 1);
    goto loc_80013C80;
loc_80013C7C:
    v0 = u32(i32(a0) >> 1);
loc_80013C80:
    a0 = v1 - v0;
    v0 = lw(a2 + 0x44);
    v1 = lw(a2 + 0x74);
    a1 = lw(a2 + 0x8);
    v1 = lw(v1 + 0x8);
    v0 = u32(i32(v0) >> 1);
    v0 += v1;
    v1 = v0 - a1;
    v0 = v1 << 1;
    if (i32(v1) >= 0) goto loc_80013CC4;
    v0 += v1;
    v0 = -v0;
    v0 = (i32(a0) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = 0xFFF80000;                                // Result = FFF80000
        if (bJump) goto loc_80013CC4;
    }
    v0 += a1;
    goto loc_80013CE8;
loc_80013CC4:
    v0 = v1 << 1;
    if (i32(v1) <= 0) goto loc_80013CEC;
    v0 += v1;
    v0 = (i32(a0) < i32(v0));
    v1 = 0x80000;                                       // Result = 00080000
    if (v0 == 0) goto loc_80013CEC;
    v0 = lw(a2 + 0x8);
    v0 += v1;
loc_80013CE8:
    sw(v0, a2 + 0x8);
loc_80013CEC:
    v1 = lw(a2 + 0x8);
    v0 = lw(a2 + 0x38);
    v0 = (i32(v0) < i32(v1));
    if (v0 != 0) goto loc_80013D40;
    v0 = lw(a2 + 0x50);
    v1 = 0x10000;                                       // Result = 00010000
    if (i32(v0) >= 0) goto loc_80013D18;
    sw(0, a2 + 0x50);
loc_80013D18:
    v0 = lw(a2 + 0x38);
    sw(v0, a2 + 0x8);
    v0 = lw(a2 + 0x64);
    v0 &= v1;
    if (v0 == 0) goto loc_80013D74;
    goto loc_80013DCC;
loc_80013D40:
    v0 = lw(a2 + 0x64);
    v0 &= 0x200;
    if (v0 != 0) goto loc_80013D74;
    v1 = lw(a2 + 0x50);
    v0 = 0xFFFE0000;                                    // Result = FFFE0000
    if (v1 != 0) goto loc_80013D6C;
    v0 = 0xFFFC0000;                                    // Result = FFFC0000
    goto loc_80013D70;
loc_80013D6C:
    v0 += v1;
loc_80013D70:
    sw(v0, a2 + 0x50);
loc_80013D74:
    v0 = lw(a2 + 0x8);
    a0 = lw(a2 + 0x44);
    v1 = lw(a2 + 0x3C);
    v0 += a0;
    v1 = (i32(v1) < i32(v0));
    if (v1 == 0) goto loc_80013DD8;
    v0 = lw(a2 + 0x50);
    if (i32(v0) <= 0) goto loc_80013DA4;
    sw(0, a2 + 0x50);
loc_80013DA4:
    v0 = lw(a2 + 0x3C);
    v1 = lw(a2 + 0x44);
    v0 -= v1;
    sw(v0, a2 + 0x8);
    v0 = lw(a2 + 0x64);
    v1 = 0x10000;                                       // Result = 00010000
    v0 &= v1;
    if (v0 == 0) goto loc_80013DD8;
loc_80013DCC:
    v0 = 0x80020000;                                    // Result = 80020000
    v0 -= 0x3464;                                       // Result = P_ExplodeMissile (8001CB9C)
    sw(v0, a2 + 0x18);
loc_80013DD8:
    return;
}

void P_MobjThinker() noexcept {
loc_80013DE0:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v0 = lw(s0 + 0x48);
    if (v0 != 0) goto loc_80013E10;
    v0 = lw(s0 + 0x4C);
    if (v0 == 0) goto loc_80013E28;
loc_80013E10:
    a0 = s0;
    P_XYMovement();
    v0 = lw(s0 + 0x18);
    if (v0 != 0) goto loc_80013EEC;
loc_80013E28:
    v1 = lw(s0 + 0x8);
    v0 = lw(s0 + 0x38);
    if (v1 != v0) goto loc_80013E4C;
    v0 = lw(s0 + 0x50);
    if (v0 == 0) goto loc_80013E64;
loc_80013E4C:
    a0 = s0;
    P_ZMovement();
    v0 = lw(s0 + 0x18);
    if (v0 != 0) goto loc_80013EEC;
loc_80013E64:
    v1 = lw(s0 + 0x5C);
    v0 = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 == v0)
        v0 = v1 - 1;
        if (bJump) goto loc_80013EEC;
    }
    sw(v0, s0 + 0x5C);
    if (i32(v0) > 0) goto loc_80013EEC;
    v0 = lw(s0 + 0x60);
    v1 = lw(v0 + 0x10);
    v0 = v1 << 3;
    if (v1 != 0) goto loc_80013EA4;
    v0 = 0x80020000;                                    // Result = 80020000
    v0 -= 0x38DC;                                       // Result = P_RemoveMObj (8001C724)
    sw(v0, s0 + 0x18);
    goto loc_80013EEC;
loc_80013EA4:
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, s0 + 0x60);
    v1 = lw(v0 + 0x8);
    sw(v1, s0 + 0x5C);
    v1 = lw(v0);
    sw(v1, s0 + 0x28);
    v1 = lw(v0 + 0x4);
    sw(v1, s0 + 0x2C);
    v0 = lw(v0 + 0xC);
    sw(v0, s0 + 0x18);
loc_80013EEC:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PB_TryMove() noexcept {
loc_80013F00:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    sw(a0, gp + 0x914);                                 // Store to: gTestX (80077EF4)
    sw(a1, gp + 0x920);                                 // Store to: gTestY (80077F00)
    PB_CheckPosition();
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80013FD0;
    }
    a2 = lw(gp + 0xB24);                                // Load from: gTestCeilingz (80078104)
    v1 = lw(gp + 0xC6C);                                // Load from: gpCurMObj (8007824C)
    a0 = lw(gp + 0x988);                                // Load from: gTestFloorZ (80077F68)
    a1 = lw(v1 + 0x44);
    v0 = a2 - a0;
    v0 = (i32(v0) < i32(a1));
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80013FD0;
    }
    v1 = lw(v1 + 0x8);
    v0 = a2 - v1;
    v0 = (i32(v0) < i32(a1));
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80013FD0;
    }
    v0 = a0 - v1;
    v1 = 0x180000;                                      // Result = 00180000
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80013FD0;
    }
    v0 = lw(gp + 0xCD4);                                // Load from: gTestFlags (800782B4)
    v0 &= 0x4400;
    if (v0 != 0) goto loc_80013F98;
    v0 = lw(gp + 0xB40);                                // Load from: gTestDropoffZ (80078120)
    v0 = a0 - v0;
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80013FD0;
    }
loc_80013F98:
    a0 = lw(gp + 0xC6C);                                // Load from: gpCurMObj (8007824C)
    PB_UnsetThingPosition();
    a0 = lw(gp + 0xC6C);                                // Load from: gpCurMObj (8007824C)
    v0 = lw(gp + 0x988);                                // Load from: gTestFloorZ (80077F68)
    v1 = lw(gp + 0xB24);                                // Load from: gTestCeilingz (80078104)
    a1 = lw(gp + 0x914);                                // Load from: gTestX (80077EF4)
    a2 = lw(gp + 0x920);                                // Load from: gTestY (80077F00)
    sw(v0, a0 + 0x38);
    sw(v1, a0 + 0x3C);
    sw(a1, a0);
    sw(a2, a0 + 0x4);
    PB_SetThingPosition();
    v0 = 1;                                             // Result = 00000001
loc_80013FD0:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PB_UnsetThingPosition() noexcept {
loc_80013FE0:
    v1 = lw(a0 + 0x1C);
    if (v1 == 0) goto loc_80013FFC;
    v0 = lw(a0 + 0x20);
    sw(v0, v1 + 0x20);
loc_80013FFC:
    v1 = lw(a0 + 0x20);
    if (v1 == 0) goto loc_80014018;
    v0 = lw(a0 + 0x1C);
    sw(v0, v1 + 0x1C);
    goto loc_80014030;
loc_80014018:
    v0 = lw(a0 + 0xC);
    v1 = lw(v0);
    v0 = lw(a0 + 0x1C);
    sw(v0, v1 + 0x4C);
loc_80014030:
    v0 = lw(gp + 0xCD4);                                // Load from: gTestFlags (800782B4)
    v0 &= 0x10;
    if (v0 != 0) goto loc_800140D4;
    v1 = lw(a0 + 0x30);
    if (v1 == 0) goto loc_80014060;
    v0 = lw(a0 + 0x34);
    sw(v0, v1 + 0x34);
loc_80014060:
    v1 = lw(a0 + 0x34);
    if (v1 == 0) goto loc_8001407C;
    v0 = lw(a0 + 0x30);
    sw(v0, v1 + 0x30);
    goto loc_800140D4;
loc_8001407C:
    v0 = lw(a0 + 0x4);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v0 -= v1;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = u32(i32(v0) >> 23);
    mult(v0, v1);
    v1 = lw(a0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    a0 = lw(a0 + 0x30);
    v1 -= v0;
    v1 = u32(i32(v1) >> 23);
    v0 = lo;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EDC);                               // Load from: gppBlockLinks (80077EDC)
    v0 <<= 2;
    v0 += v1;
    sw(a0, v0);
loc_800140D4:
    return;
}

void PB_SetThingPosition() noexcept {
loc_800140DC:
    v0 = lw(gp + 0x948);                                // Load from: gpTestSubSec (80077F28)
    a1 = a0;
    sw(v0, a1 + 0xC);
    v1 = lw(v0);
    sw(0, a1 + 0x20);
    v0 = lw(v1 + 0x4C);
    sw(v0, a1 + 0x1C);
    v0 = lw(v1 + 0x4C);
    if (v0 == 0) goto loc_80014110;
    sw(a1, v0 + 0x20);
loc_80014110:
    v0 = lw(gp + 0xCD4);                                // Load from: gTestFlags (800782B4)
    v0 &= 0x10;
    sw(a1, v1 + 0x4C);
    if (v0 != 0) goto loc_800141D4;
    v1 = lw(a1);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v1 -= v0;
    v0 = lw(a1 + 0x4);
    v1 = u32(i32(v1) >> 23);
    v0 -= a0;
    a0 = u32(i32(v0) >> 23);
    if (i32(v1) < 0) goto loc_800141CC;
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = (i32(v1) < i32(a2));
    if (v0 == 0) goto loc_800141CC;
    if (i32(a0) < 0) goto loc_800141CC;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    v0 = (i32(a0) < i32(v0));
    mult(a0, a2);
    if (v0 == 0) goto loc_800141CC;
    sw(0, a1 + 0x34);
    v0 = lo;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EDC);                               // Load from: gppBlockLinks (80077EDC)
    v0 <<= 2;
    v1 += v0;
    v0 = lw(v1);
    sw(v0, a1 + 0x30);
    v0 = lw(v1);
    if (v0 == 0) goto loc_800141C4;
    sw(a1, v0 + 0x34);
loc_800141C4:
    sw(a1, v1);
    goto loc_800141D4;
loc_800141CC:
    sw(0, a1 + 0x34);
    sw(0, a1 + 0x30);
loc_800141D4:
    return;
}

void PB_CheckPosition() noexcept {
loc_800141DC:
    a0 = lw(gp + 0x914);                                // Load from: gTestX (80077EF4)
    v1 = lw(gp + 0xC6C);                                // Load from: gpCurMObj (8007824C)
    a1 = lw(gp + 0x920);                                // Load from: gTestY (80077F00)
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v0 = lw(v1 + 0x64);
    v1 = lw(v1 + 0x40);
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 -= 0x6F9C;                                       // Result = gTestBBox[0] (800A9064)
    sw(v0, gp + 0xCD4);                                 // Store to: gTestFlags (800782B4)
    v0 = v1 + a1;
    sw(v0, s0);                                         // Store to: gTestBBox[0] (800A9064)
    v0 = a1 - v1;
    at = 0x800B0000;                                    // Result = 800B0000
    sw(v0, at - 0x6F98);                                // Store to: gTestBBox[1] (800A9068)
    v0 = v1 + a0;
    at = 0x800B0000;                                    // Result = 800B0000
    sw(v0, at - 0x6F90);                                // Store to: gTestBBox[3] (800A9070)
    v0 = a0 - v1;
    at = 0x800B0000;                                    // Result = 800B0000
    sw(v0, at - 0x6F94);                                // Store to: gTestBBox[2] (800A906C)
    R_PointInSubsector();
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x6F94);                               // Load from: gTestBBox[2] (800A906C)
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v1 = 0xFFE00000;                                    // Result = FFE00000
    sw(v0, gp + 0x948);                                 // Store to: gpTestSubSec (80077F28)
    sw(0, gp + 0x9AC);                                  // Store to: gpCeilingLine (80077F8C)
    sw(0, gp + 0xBA4);                                  // Store to: gpHitThing (80078184)
    a0 -= a1;
    a0 += v1;
    a3 = u32(i32(a0) >> 23);
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x6F90);                               // Load from: gTestBBox[3] (800A9070)
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x6F98);                               // Load from: gTestBBox[1] (800A9068)
    v1 -= a1;
    a1 = 0x200000;                                      // Result = 00200000
    v1 += a1;
    s3 = u32(i32(v1) >> 23);
    a0 -= a2;
    a0 -= a1;
    s4 = u32(i32(a0) >> 23);
    v1 = lw(s0);                                        // Load from: gTestBBox[0] (800A9064)
    a0 = lw(v0);
    v1 -= a2;
    v1 += a1;
    s2 = u32(i32(v1) >> 23);
    a0 = lw(a0);
    v1 = lw(v0);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    v1 = lw(v1 + 0x4);
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7BC4);                                // Store to: gValidCount (80077BC4)
    sw(a0, gp + 0xB40);                                 // Store to: gTestDropoffZ (80078120)
    sw(a0, gp + 0x988);                                 // Store to: gTestFloorZ (80077F68)
    sw(v1, gp + 0xB24);                                 // Store to: gTestCeilingz (80078104)
    if (i32(a3) >= 0) goto loc_800142F8;
    a3 = 0;                                             // Result = 00000000
loc_800142F8:
    if (i32(s4) >= 0) goto loc_80014304;
    s4 = 0;                                             // Result = 00000000
loc_80014304:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = (i32(s3) < i32(v1));
    if (v0 != 0) goto loc_80014320;
    s3 = v1 - 1;
loc_80014320:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    v0 = (i32(s2) < i32(v1));
    s1 = a3;
    if (v0 != 0) goto loc_8001433C;
    s2 = v1 - 1;
loc_8001433C:
    v0 = (i32(s3) < i32(s1));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001439C;
    }
loc_80014348:
    v0 = (i32(s2) < i32(s4));
    s0 = s4;
    if (v0 != 0) goto loc_8001438C;
    a0 = s1;
loc_80014358:
    a1 = s0;
    PB_CheckLines();
    a0 = s1;
    if (v0 == 0) goto loc_80014378;
    a1 = s0;
    PB_CheckThings();
    s0++;
    if (v0 != 0) goto loc_80014380;
loc_80014378:
    v0 = 0;                                             // Result = 00000000
    goto loc_8001439C;
loc_80014380:
    v0 = (i32(s2) < i32(s0));
    a0 = s1;
    if (v0 == 0) goto loc_80014358;
loc_8001438C:
    s1++;
    v0 = (i32(s3) < i32(s1));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80014348;
    }
loc_8001439C:
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void PB_BoxCrossLine() noexcept {
    a1 = a0;
    a2 = 0x800B0000;                                    // Result = 800B0000
    a2 = lw(a2 - 0x6F90);                               // Load from: gTestBBox[3] (800A9070)
    v0 = lw(a1 + 0x2C);
    v0 = (i32(v0) < i32(a2));
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_800144D0;
    }
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x6F94);                               // Load from: gTestBBox[2] (800A906C)
    v0 = lw(a1 + 0x30);
    v0 = (i32(a0) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_800144D0;
    }
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x6F9C);                               // Load from: gTestBBox[0] (800A9064)
    v0 = lw(a1 + 0x28);
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_800144D0;
    }
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x6F98);                               // Load from: gTestBBox[1] (800A9068)
    v1 = lw(a1 + 0x24);
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_8001443C;
    }
    v0 = 0;                                             // Result = 00000000
    goto loc_800144D0;
loc_8001443C:
    v1 = lw(a1 + 0x34);
    {
        const bool bJump = (v1 != v0)
        v0 = a2;
        if (bJump) goto loc_80014458;
    }
    v0 = a0;
    t1 = a2;
    goto loc_8001445C;
loc_80014458:
    t1 = a0;
loc_8001445C:
    a0 = lw(a1);
    v1 = lw(a0);
    a2 = lh(a1 + 0xE);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    mult(a2, v0);
    a1 = lh(a1 + 0xA);
    a3 = lw(a0 + 0x4);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x6F9C);                               // Load from: gTestBBox[0] (800A9064)
    a0 = lo;
    v0 -= a3;
    v0 = u32(i32(v0) >> 16);
    mult(v0, a1);
    t0 = lo;
    v1 = t1 - v1;
    v1 = u32(i32(v1) >> 16);
    mult(a2, v1);
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x6F98);                               // Load from: gTestBBox[1] (800A9068)
    v0 = lo;
    v1 -= a3;
    v1 = u32(i32(v1) >> 16);
    mult(v1, a1);
    a0 = (i32(a0) < i32(t0));
    v1 = lo;
    v0 = (i32(v0) < i32(v1));
    v0 ^= a0;
loc_800144D0:
    return;
}

void PB_CheckLine() noexcept {
    v0 = lw(a0 + 0x3C);
    v1 = 0x10000;                                       // Result = 00010000
    if (v0 == 0) goto loc_80014524;
    v0 = lw(gp + 0xCD4);                                // Load from: gTestFlags (800782B4)
    v0 &= v1;
    if (v0 != 0) goto loc_80014510;
    v0 = lw(a0 + 0x10);
    v0 &= 3;
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_800145BC;
    }
loc_80014510:
    v0 = lw(a0 + 0x10);
    v0 &= 0x800;
    if (v0 == 0) goto loc_8001452C;
loc_80014524:
    v0 = 0;                                             // Result = 00000000
    goto loc_800145BC;
loc_8001452C:
    a3 = lw(a0 + 0x3C);
    a1 = lw(a0 + 0x38);
    v0 = lw(a3 + 0x4);
    v1 = lw(a1 + 0x4);
    a2 = v0;
    v0 = (i32(v1) < i32(a2));
    if (v0 == 0) goto loc_80014550;
    a2 = v1;
loc_80014550:
    a1 = lw(a1);
    v1 = lw(a3);
    v0 = (i32(v1) < i32(a1));
    a3 = a1;
    if (v0 != 0) goto loc_80014570;
    a3 = v1;
    v1 = a1;
loc_80014570:
    v0 = lw(gp + 0xB24);                                // Load from: gTestCeilingz (80078104)
    v0 = (i32(a2) < i32(v0));
    if (v0 == 0) goto loc_8001458C;
    sw(a2, gp + 0xB24);                                 // Store to: gTestCeilingz (80078104)
    sw(a0, gp + 0x9AC);                                 // Store to: gpCeilingLine (80077F8C)
loc_8001458C:
    v0 = lw(gp + 0x988);                                // Load from: gTestFloorZ (80077F68)
    v0 = (i32(v0) < i32(a3));
    if (v0 == 0) goto loc_800145A4;
    sw(a3, gp + 0x988);                                 // Store to: gTestFloorZ (80077F68)
loc_800145A4:
    v0 = lw(gp + 0xB40);                                // Load from: gTestDropoffZ (80078120)
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800145BC;
    }
    sw(v1, gp + 0xB40);                                 // Store to: gTestDropoffZ (80078120)
loc_800145BC:
    return;
}

void PB_CheckThing() noexcept {
loc_800145C4:
    a2 = a0;
    t0 = lw(a2 + 0x64);
    v0 = t0 & 2;
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800146E8;
    }
    a3 = lw(gp + 0xC6C);                                // Load from: gpCurMObj (8007824C)
    a1 = lw(a2 + 0x40);
    a0 = lw(a2);
    v0 = lw(gp + 0x914);                                // Load from: gTestX (80077EF4)
    v1 = lw(a3 + 0x40);
    v0 = a0 - v0;
    a1 += v1;
    if (i32(v0) >= 0) goto loc_80014600;
    v0 = -v0;
loc_80014600:
    v0 = (i32(v0) < i32(a1));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800146E8;
    }
    v1 = lw(a2 + 0x4);
    v0 = lw(gp + 0x920);                                // Load from: gTestY (80077F00)
    v0 = v1 - v0;
    if (i32(v0) >= 0) goto loc_80014628;
    v0 = -v0;
loc_80014628:
    v0 = (i32(v0) < i32(a1));
    if (v0 == 0) goto loc_800146B0;
    v0 = 0x1000000;                                     // Result = 01000000
    if (a2 == a3) goto loc_800146B0;
    v1 = lw(gp + 0xCD4);                                // Load from: gTestFlags (800782B4)
    v0 &= v1;
    {
        const bool bJump = (v0 != 0)
        v0 = 0x10000;                                   // Result = 00010000
        if (bJump) goto loc_800146D4;
    }
    v0 &= v1;
    {
        const bool bJump = (v0 == 0)
        v0 = t0 >> 1;
        if (bJump) goto loc_800146E0;
    }
    a0 = lw(a2 + 0x8);
    v0 = lw(a2 + 0x44);
    v1 = lw(a3 + 0x8);
    v0 += a0;
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800146E8;
    }
    v0 = lw(a3 + 0x44);
    v0 += v1;
    v0 = (i32(v0) < i32(a0));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800146E8;
    }
    v1 = lw(a3 + 0x74);
    v0 = lw(a2 + 0x54);
    a0 = lw(v1 + 0x54);
    if (a0 != v0) goto loc_800146C0;
    if (a2 != v1) goto loc_800146B8;
loc_800146B0:
    v0 = 1;                                             // Result = 00000001
    goto loc_800146E8;
loc_800146B8:
    v0 = 0;                                             // Result = 00000000
    if (a0 != 0) goto loc_800146E8;
loc_800146C0:
    v1 = lw(a2 + 0x64);
    v0 = v1 & 4;
    {
        const bool bJump = (v0 == 0)
        v0 = v1 >> 1;
        if (bJump) goto loc_800146E0;
    }
loc_800146D4:
    sw(a2, gp + 0xBA4);                                 // Store to: gpHitThing (80078184)
    v0 = 0;                                             // Result = 00000000
    goto loc_800146E8;
loc_800146E0:
    v0 ^= 1;
    v0 &= 1;
loc_800146E8:
    return;
}

void PB_CheckLines() noexcept {
loc_800146F0:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    mult(a1, v0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EC0);                               // Load from: gpBlockmap (80078140)
    v0 = lo;
    v0 += a0;
    v0 <<= 1;
    v0 += v1;
    v0 = lh(v0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F3C);                               // Load from: gpBlockmapLump (800780C4)
    v0 <<= 1;
    t3 = v0 + v1;
    v0 = -1;                                            // Result = FFFFFFFF
    v1 = lh(t3);
    a0 = lhu(t3);
    sp -= 0x10;
    if (v1 == v0) goto loc_800149A8;
    v1 = lw(gp + 0xCD4);                                // Load from: gTestFlags (800782B4)
    v0 = 0x10000;                                       // Result = 00010000
    t4 = v1 & v0;
    v1 = a0 << 16;
loc_80014750:
    v1 = u32(i32(v1) >> 16);
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB0);                               // Load from: gpLines (80077EB0)
    v0 <<= 2;
    t1 = v0 + v1;
    v0 = lw(t1 + 0x40);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    if (v0 == v1) goto loc_80014990;
    sw(v1, t1 + 0x40);
    a1 = 0x800B0000;                                    // Result = 800B0000
    a1 = lw(a1 - 0x6F90);                               // Load from: gTestBBox[3] (800A9070)
    v0 = lw(t1 + 0x2C);
    v0 = (i32(v0) < i32(a1));
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_800148A0;
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x6F94);                               // Load from: gTestBBox[2] (800A906C)
    v0 = lw(t1 + 0x30);
    v0 = (i32(a0) < i32(v0));
    if (v0 == 0) goto loc_80014800;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x6F9C);                               // Load from: gTestBBox[0] (800A9064)
    v0 = lw(t1 + 0x28);
    v0 = (i32(v0) < i32(v1));
    if (v0 == 0) goto loc_80014800;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x6F98);                               // Load from: gTestBBox[1] (800A9068)
    v1 = lw(t1 + 0x24);
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_80014808;
    }
loc_80014800:
    a0 = 0;                                             // Result = 00000000
    goto loc_800148A0;
loc_80014808:
    v1 = lw(t1 + 0x34);
    {
        const bool bJump = (v1 != v0)
        v0 = a1;
        if (bJump) goto loc_80014824;
    }
    v0 = a0;
    t2 = a1;
    goto loc_80014828;
loc_80014824:
    t2 = a0;
loc_80014828:
    a0 = lw(t1);
    v1 = lw(a0);
    a2 = lh(t1 + 0xE);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    mult(a2, v0);
    a1 = lh(t1 + 0xA);
    a3 = lw(a0 + 0x4);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x6F9C);                               // Load from: gTestBBox[0] (800A9064)
    a0 = lo;
    v0 -= a3;
    v0 = u32(i32(v0) >> 16);
    mult(v0, a1);
    t0 = lo;
    v1 = t2 - v1;
    v1 = u32(i32(v1) >> 16);
    mult(a2, v1);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x6F98);                               // Load from: gTestBBox[1] (800A9068)
    v1 = lo;
    v0 -= a3;
    v0 = u32(i32(v0) >> 16);
    mult(v0, a1);
    a0 = (i32(a0) < i32(t0));
    v0 = lo;
    v1 = (i32(v1) < i32(v0));
    a0 ^= v1;
    a0 = (a0 > 0);
loc_800148A0:
    if (a0 == 0) goto loc_80014990;
    v0 = lw(t1 + 0x3C);
    if (v0 == 0) goto loc_800148E8;
    if (t4 != 0) goto loc_800148D4;
    v0 = lw(t1 + 0x10);
    v0 &= 3;
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80014980;
    }
loc_800148D4:
    v0 = lw(t1 + 0x10);
    v0 &= 0x800;
    if (v0 == 0) goto loc_800148F0;
loc_800148E8:
    v0 = 0;                                             // Result = 00000000
    goto loc_80014980;
loc_800148F0:
    a2 = lw(t1 + 0x3C);
    a0 = lw(t1 + 0x38);
    v0 = lw(a2 + 0x4);
    v1 = lw(a0 + 0x4);
    a1 = v0;
    v0 = (i32(v1) < i32(a1));
    if (v0 == 0) goto loc_80014914;
    a1 = v1;
loc_80014914:
    a0 = lw(a0);
    v1 = lw(a2);
    v0 = (i32(v1) < i32(a0));
    a2 = a0;
    if (v0 != 0) goto loc_80014934;
    a2 = v1;
    v1 = a0;
loc_80014934:
    v0 = lw(gp + 0xB24);                                // Load from: gTestCeilingz (80078104)
    v0 = (i32(a1) < i32(v0));
    if (v0 == 0) goto loc_80014950;
    sw(a1, gp + 0xB24);                                 // Store to: gTestCeilingz (80078104)
    sw(t1, gp + 0x9AC);                                 // Store to: gpCeilingLine (80077F8C)
loc_80014950:
    v0 = lw(gp + 0x988);                                // Load from: gTestFloorZ (80077F68)
    v0 = (i32(v0) < i32(a2));
    if (v0 == 0) goto loc_80014968;
    sw(a2, gp + 0x988);                                 // Store to: gTestFloorZ (80077F68)
loc_80014968:
    v0 = lw(gp + 0xB40);                                // Load from: gTestDropoffZ (80078120)
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80014980;
    }
    sw(v1, gp + 0xB40);                                 // Store to: gTestDropoffZ (80078120)
loc_80014980:
    t3 += 2;
    if (v0 != 0) goto loc_80014994;
    v0 = 0;                                             // Result = 00000000
    goto loc_800149AC;
loc_80014990:
    t3 += 2;
loc_80014994:
    v0 = -1;                                            // Result = FFFFFFFF
    v1 = lh(t3);
    a0 = lhu(t3);
    {
        const bool bJump = (v1 != v0)
        v1 = a0 << 16;
        if (bJump) goto loc_80014750;
    }
loc_800149A8:
    v0 = 1;                                             // Result = 00000001
loc_800149AC:
    sp += 0x10;
    return;
}

void PB_CheckThings() noexcept {
loc_800149B8:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    mult(a1, v0);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EDC);                               // Load from: gppBlockLinks (80077EDC)
    sp -= 0x18;
    sw(ra, sp + 0x14);
    sw(s0, sp + 0x10);
    v0 = lo;
    v0 += a0;
    v0 <<= 2;
    v0 += v1;
    s0 = lw(v0);
    v0 = 1;                                             // Result = 00000001
    if (s0 == 0) goto loc_80014A1C;
loc_800149FC:
    a0 = s0;
    PB_CheckThing();
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80014A1C;
    }
    s0 = lw(s0 + 0x30);
    v0 = 1;                                             // Result = 00000001
    if (s0 != 0) goto loc_800149FC;
loc_80014A1C:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_CheckPosition() noexcept {
loc_8001B640:
    sp -= 0x18;
    v0 = 1;                                             // Result = 00000001
    sw(ra, sp + 0x10);
    sw(a0, gp + 0xAAC);                                 // Store to: gpTryMoveThing (8007808C)
    sw(a1, gp + 0xB70);                                 // Store to: gTryMoveX (80078150)
    sw(a2, gp + 0xB74);                                 // Store to: gTryMoveY (80078154)
    sw(v0, gp + 0xB08);                                 // Store to: gbCheckPosOnly (800780E8)
    P_TryMove2();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EC4);                               // Load from: gbTryMove2 (8007813C)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_TryMove() noexcept {
loc_8001B67C:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    sw(s0, gp + 0xAAC);                                 // Store to: gpTryMoveThing (8007808C)
    sw(a1, gp + 0xB70);                                 // Store to: gTryMoveX (80078150)
    sw(a2, gp + 0xB74);                                 // Store to: gTryMoveY (80078154)
    P_TryMove2();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7D3C);                               // Load from: gpMoveThing (800782C4)
    v0 = 0x10000;                                       // Result = 00010000
    if (a0 == 0) goto loc_8001B788;
    v1 = lw(s0 + 0x64);
    v0 &= v1;
    {
        const bool bJump = (v0 == 0)
        v0 = 0x1000000;                                 // Result = 01000000
        if (bJump) goto loc_8001B708;
    }
    P_Random();
    v1 = lw(s0 + 0x58);
    v0 &= 7;
    v1 = lw(v1 + 0x4C);
    v0++;
    mult(v0, v1);
    a1 = s0;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7D3C);                               // Load from: gpMoveThing (800782C4)
    a2 = lw(a1 + 0x74);
    a3 = lo;
    P_DamageMObj();
    goto loc_8001B788;
loc_8001B708:
    v0 &= v1;
    if (v0 == 0) goto loc_8001B780;
    P_Random();
    v1 = lw(s0 + 0x58);
    v0 &= 7;
    v1 = lw(v1 + 0x4C);
    v0++;
    mult(v0, v1);
    a1 = s0;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7D3C);                               // Load from: gpMoveThing (800782C4)
    a3 = lo;
    a2 = s0;
    P_DamageMObj();
    a0 = 0xFEFF0000;                                    // Result = FEFF0000
    v0 = lw(s0 + 0x64);
    v1 = lw(s0 + 0x58);
    a0 |= 0xFFFF;                                       // Result = FEFFFFFF
    sw(0, s0 + 0x50);
    sw(0, s0 + 0x4C);
    sw(0, s0 + 0x48);
    v0 &= a0;
    sw(v0, s0 + 0x64);
    a1 = lw(v1 + 0x4);
    a0 = s0;
    P_SetMObjState();
    goto loc_8001B788;
loc_8001B780:
    a1 = s0;
    P_TouchSpecialThing();
loc_8001B788:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EC4);                               // Load from: gbTryMove2 (8007813C)
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_InterceptVector() noexcept {
    a3 = lh(a1 + 0xE);
    v0 = lh(a0 + 0xA);
    mult(a3, v0);
    t0 = lh(a1 + 0xA);
    v1 = lo;
    v0 = lh(a0 + 0xE);
    mult(t0, v0);
    v0 = lo;
    a2 = v1 - v0;
    v0 = -1;                                            // Result = FFFFFFFF
    if (a2 == 0) goto loc_8001B840;
    v0 = lw(a1);
    v1 = lw(a0);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    mult(v0, a3);
    v1 = lw(a0 + 0x4);
    a0 = lw(a1 + 0x4);
    v0 = lo;
    v1 -= a0;
    v1 = u32(i32(v1) >> 16);
    mult(v1, t0);
    v1 = lo;
    v0 += v1;
    v0 <<= 16;
    div(v0, a2);
    if (a2 != 0) goto loc_8001B824;
    _break(0x1C00);
loc_8001B824:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a2 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8001B83C;
    }
    if (v0 != at) goto loc_8001B83C;
    tge(zero, zero, 0x5D);
loc_8001B83C:
    v0 = lo;
loc_8001B840:
    return;
}

void PIT_UseLines() noexcept {
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x7898);                               // Load from: gUseBBox[3] (800A8768)
    sp -= 0x30;
    sw(s1, sp + 0x24);
    s1 = a0;
    sw(ra, sp + 0x28);
    sw(s0, sp + 0x20);
    v0 = lw(s1 + 0x2C);
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001B9DC;
    }
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x789C);                               // Load from: gUseBBox[2] (800A8764)
    v1 = lw(s1 + 0x30);
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001B9DC;
    }
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A4);                               // Load from: gUseBBox[0] (800A875C)
    v0 = lw(s1 + 0x28);
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001B9DC;
    }
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A0);                               // Load from: gUseBBox[1] (800A8760)
    v1 = lw(s1 + 0x24);
    v0 = (i32(v0) < i32(v1));
    a0 = s1;
    if (v0 == 0) goto loc_8001B9CC;
    a1 = sp + 0x10;
    P_MakeDivline();
    a0 = lh(sp + 0x1E);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lh(v0 - 0x78AE);                               // Load from: gUseLine[2] (800A8752)
    mult(a0, v0);
    a2 = lh(sp + 0x1A);
    v1 = lo;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lh(v0 - 0x78AA);                               // Load from: gUseLine[3] (800A8756)
    mult(a2, v0);
    v0 = lo;
    a1 = v1 - v0;
    s0 = -1;                                            // Result = FFFFFFFF
    if (a1 == 0) goto loc_8001B980;
    v0 = lw(sp + 0x10);
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78B8);                               // Load from: gUseLine[0] (800A8748)
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    mult(v0, a0);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78B4);                               // Load from: gUseLine[1] (800A874C)
    a0 = lw(sp + 0x14);
    v1 = lo;
    v0 -= a0;
    v0 = u32(i32(v0) >> 16);
    mult(v0, a2);
    v0 = lo;
    v1 += v0;
    v1 <<= 16;
    div(v1, a1);
    if (a1 != 0) goto loc_8001B964;
    _break(0x1C00);
loc_8001B964:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8001B97C;
    }
    if (v1 != at) goto loc_8001B97C;
    tge(zero, zero, 0x5D);
loc_8001B97C:
    s0 = lo;
loc_8001B980:
    v0 = 1;                                             // Result = 00000001
    if (i32(s0) < 0) goto loc_8001B9DC;
    v0 = lw(gp + 0xCC8);                                // Load from: gCloseDist (800782A8)
    v0 = (i32(v0) < i32(s0));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001B9DC;
    }
    v0 = lw(s1 + 0x14);
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001B9D4;
    }
    a0 = s1;
    P_LineOpening();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D84);                               // Load from: gOpenRange (8007827C)
    {
        const bool bJump = (i32(v0) <= 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001B9D4;
    }
loc_8001B9CC:
    v0 = 1;                                             // Result = 00000001
    goto loc_8001B9DC;
loc_8001B9D4:
    sw(s1, gp + 0xC94);                                 // Store to: gpCloseLine (80078274)
    sw(s0, gp + 0xCC8);                                 // Store to: gCloseDist (800782A8)
loc_8001B9DC:
    ra = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x30;
    return;
}

void P_UseLines() noexcept {
loc_8001B9F4:
    sp -= 0x38;
    sw(s5, sp + 0x2C);
    s5 = a0;
    sw(ra, sp + 0x30);
    sw(s4, sp + 0x28);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    a0 = lw(s5);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    v0 = lw(a0 + 0x24);
    a2 = lw(a0);
    a3 = lw(a0 + 0x4);
    v0 >>= 19;
    v0 <<= 2;
    v1 += v0;
    v1 = lw(v1);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += v0;
    a0 = lw(at);
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a2, at - 0x78B8);                                // Store to: gUseLine[0] (800A8748)
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a3, at - 0x78B4);                                // Store to: gUseLine[1] (800A874C)
    v0 = v1 << 3;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 1;
    a1 = a2 + v0;
    v1 = a1 - a2;
    v0 = a0 << 3;
    v0 += a0;
    v0 <<= 2;
    v0 -= a0;
    v0 <<= 1;
    at = 0x800B0000;                                    // Result = 800B0000
    sw(v1, at - 0x78B0);                                // Store to: gUseLine[2] (800A8750)
    at = 0x800B0000;                                    // Result = 800B0000
    sw(v0, at - 0x78AC);                                // Store to: gUseLine[3] (800A8754)
    a0 = a3 + v0;
    if (i32(v1) <= 0) goto loc_8001BAC0;
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a1, at - 0x7898);                                // Store to: gUseBBox[3] (800A8768)
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a2, at - 0x789C);                                // Store to: gUseBBox[2] (800A8764)
    goto loc_8001BAD0;
loc_8001BAC0:
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a2, at - 0x7898);                                // Store to: gUseBBox[3] (800A8768)
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a1, at - 0x789C);                                // Store to: gUseBBox[2] (800A8764)
loc_8001BAD0:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78AC);                               // Load from: gUseLine[3] (800A8754)
    if (i32(v0) <= 0) goto loc_8001BAFC;
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a0, at - 0x78A4);                                // Store to: gUseBBox[0] (800A875C)
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a3, at - 0x78A0);                                // Store to: gUseBBox[1] (800A8760)
    goto loc_8001BB0C;
loc_8001BAFC:
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a3, at - 0x78A4);                                // Store to: gUseBBox[0] (800A875C)
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a0, at - 0x78A0);                                // Store to: gUseBBox[1] (800A8760)
loc_8001BB0C:
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A0);                               // Load from: gUseBBox[1] (800A8760)
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A4);                               // Load from: gUseBBox[0] (800A875C)
    v1 = 0x10000;                                       // Result = 00010000
    sw(v1, gp + 0xCC8);                                 // Store to: gCloseDist (800782A8)
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x7898);                               // Load from: gUseBBox[3] (800A8768)
    sw(0, gp + 0xC94);                                  // Store to: gpCloseLine (80078274)
    v0 -= a1;
    s1 = u32(i32(v0) >> 23);
    a0 -= a1;
    s3 = u32(i32(a0) >> 23);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    v0++;
    v1 -= a1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7BC4);                                // Store to: gValidCount (80077BC4)
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x789C);                               // Load from: gUseBBox[2] (800A8764)
    v0 -= a1;
    s4 = u32(i32(v0) >> 23);
    v0 = (i32(s3) < i32(s1));
    s2 = u32(i32(v1) >> 23);
    if (v0 != 0) goto loc_8001BBC8;
    v0 = (i32(s2) < i32(s4));
loc_8001BB8C:
    s0 = s4;
    if (v0 != 0) goto loc_8001BBB8;
    a0 = s0;
loc_8001BB98:
    a2 = 0x80020000;                                    // Result = 80020000
    a2 -= 0x47B8;                                       // Result = PIT_UseLines (8001B848)
    a1 = s1;
    P_BlockLinesIterator();
    s0++;
    v0 = (i32(s2) < i32(s0));
    a0 = s0;
    if (v0 == 0) goto loc_8001BB98;
loc_8001BBB8:
    s1++;
    v0 = (i32(s3) < i32(s1));
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(s2) < i32(s4));
        if (bJump) goto loc_8001BB8C;
    }
loc_8001BBC8:
    a1 = lw(gp + 0xC94);                                // Load from: gpCloseLine (80078274)
    if (a1 == 0) goto loc_8001BC08;
    v0 = lw(a1 + 0x14);
    if (v0 != 0) goto loc_8001BBFC;
    a0 = lw(s5);
    a1 = 0x1C;                                          // Result = 0000001C
    S_StartSound();
    goto loc_8001BC08;
loc_8001BBFC:
    a0 = lw(s5);
    P_UseSpecialLine();
loc_8001BC08:
    ra = lw(sp + 0x30);
    s5 = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x38;
    return;
}

void PIT_RadiusAttack() noexcept {
    sp -= 0x20;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(ra, sp + 0x18);
    sw(s0, sp + 0x10);
    v0 = lw(s1 + 0x64);
    v0 &= 4;
    {
        const bool bJump = (v0 == 0)
        v0 = 0x11;                                      // Result = 00000011
        if (bJump) goto loc_8001BD08;
    }
    v1 = lw(s1 + 0x54);
    {
        const bool bJump = (v1 == v0)
        v0 = 0xF;                                       // Result = 0000000F
        if (bJump) goto loc_8001BD08;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001BD0C;
    }
    a1 = lw(gp + 0xBC0);                                // Load from: gpBombSpot (800781A0)
    v1 = lw(s1);
    v0 = lw(a1);
    a0 = lw(a1 + 0x4);
    v1 -= v0;
    v0 = lw(s1 + 0x4);
    s0 = v1;
    if (i32(v1) >= 0) goto loc_8001BC94;
    s0 = -s0;
loc_8001BC94:
    v0 -= a0;
    v1 = v0;
    if (i32(v0) >= 0) goto loc_8001BCA4;
    v1 = -v1;
loc_8001BCA4:
    v0 = (i32(s0) < i32(v1));
    if (v0 == 0) goto loc_8001BCB4;
    s0 = v1;
loc_8001BCB4:
    v0 = lw(s1 + 0x40);
    v0 = s0 - v0;
    s0 = u32(i32(v0) >> 16);
    if (i32(s0) >= 0) goto loc_8001BCD0;
    s0 = 0;                                             // Result = 00000000
loc_8001BCD0:
    v0 = lw(gp + 0x8B4);                                // Load from: gBombDamage (80077E94)
    v0 = (i32(s0) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001BD0C;
    }
    a0 = s1;
    P_CheckSight();
    a0 = s1;
    if (v0 == 0) goto loc_8001BD08;
    a1 = lw(gp + 0xBC0);                                // Load from: gpBombSpot (800781A0)
    a3 = lw(gp + 0x8B4);                                // Load from: gBombDamage (80077E94)
    a2 = lw(gp + 0x910);                                // Load from: gpBombSource (80077EF0)
    a3 -= s0;
    P_DamageMObj();
loc_8001BD08:
    v0 = 1;                                             // Result = 00000001
loc_8001BD0C:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_RadiusAttack() noexcept {
loc_8001BD24:
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v1 = lw(a0 + 0x4);
    sw(a1, gp + 0x910);                                 // Store to: gpBombSource (80077EF0)
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    sw(a2, gp + 0x8B4);                                 // Store to: gBombDamage (80077E94)
    a2 <<= 16;
    sw(a0, gp + 0xBC0);                                 // Store to: gpBombSpot (800781A0)
    v0 = v1 - a2;
    v0 -= a1;
    s1 = u32(i32(v0) >> 23);
    v1 += a2;
    v1 -= a1;
    s3 = u32(i32(v1) >> 23);
    v1 = lw(a0);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    v0 = a2 + v1;
    v0 -= a0;
    s2 = u32(i32(v0) >> 23);
    v1 -= a2;
    v1 -= a0;
    v0 = (i32(s3) < i32(s1));
    s4 = u32(i32(v1) >> 23);
    if (v0 != 0) goto loc_8001BDE0;
    s0 = s4;
loc_8001BDA4:
    v0 = (i32(s2) < i32(s0));
    a0 = s0;
    if (v0 != 0) goto loc_8001BDD0;
loc_8001BDB0:
    a2 = 0x80020000;                                    // Result = 80020000
    a2 -= 0x43D0;                                       // Result = PIT_RadiusAttack (8001BC30)
    a1 = s1;
    P_BlockThingsIterator();
    s0++;
    v0 = (i32(s2) < i32(s0));
    a0 = s0;
    if (v0 == 0) goto loc_8001BDB0;
loc_8001BDD0:
    s1++;
    v0 = (i32(s3) < i32(s1));
    s0 = s4;
    if (v0 == 0) goto loc_8001BDA4;
loc_8001BDE0:
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void P_AimLineAttack() noexcept {
loc_8001BE04:
    sp -= 0x18;
    a3 = 0xFFFF0000;                                    // Result = FFFF0000
    a3 |= 0x6000;                                       // Result = FFFF6000
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    v0 = 0xA000;                                        // Result = 0000A000
    sw(ra, sp + 0x10);
    sw(a0, gp + 0xAD4);                                 // Store to: gpShooter (800780B4)
    sw(a2, gp + 0x9B8);                                 // Store to: gAttackRange (80077F98)
    sw(a1, gp + 0x9A0);                                 // Store to: gAttackAngle (80077F80)
    sw(v0, gp + 0xA18);                                 // Store to: gAimTopSlope (80077FF8)
    sw(a3, gp + 0xD18);                                 // Store to: gAimBottomSlope (800782F8)
    v1++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x7BC4);                                // Store to: gValidCount (80077BC4)
    P_Shoot2();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D2C);                               // Load from: gpShootMObj (800782D4)
    sw(v0, gp + 0x908);                                 // Store to: gpLineTarget (80077EE8)
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8001BE68;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F4C);                               // Load from: gShootSlope (80077F4C)
loc_8001BE68:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_LineAttack() noexcept {
loc_8001BE78:
    sp -= 0x30;
    sw(s4, sp + 0x20);
    s4 = a0;
    v0 = 0x7FFF0000;                                    // Result = 7FFF0000
    sw(s5, sp + 0x24);
    s5 = lw(sp + 0x40);
    v0 |= 0xFFFF;                                       // Result = 7FFFFFFF
    sw(ra, sp + 0x28);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    sw(s4, gp + 0xAD4);                                 // Store to: gpShooter (800780B4)
    sw(a2, gp + 0x9B8);                                 // Store to: gAttackRange (80077F98)
    sw(a1, gp + 0x9A0);                                 // Store to: gAttackAngle (80077F80)
    {
        const bool bJump = (a3 != v0)
        v0 = a3 + 1;
        if (bJump) goto loc_8001BED8;
    }
    v1 = 0xFFFF0000;                                    // Result = FFFF0000
    v1 |= 0x6000;                                       // Result = FFFF6000
    v0 = 0xA000;                                        // Result = 0000A000
    sw(v0, gp + 0xA18);                                 // Store to: gAimTopSlope (80077FF8)
    sw(v1, gp + 0xD18);                                 // Store to: gAimBottomSlope (800782F8)
    goto loc_8001BEE4;
loc_8001BED8:
    sw(v0, gp + 0xA18);                                 // Store to: gAimTopSlope (80077FF8)
    v0 = a3 - 1;
    sw(v0, gp + 0xD18);                                 // Store to: gAimBottomSlope (800782F8)
loc_8001BEE4:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7BC4);                                // Store to: gValidCount (80077BC4)
    P_Shoot2();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D2C);                               // Load from: gpShootMObj (800782D4)
    s0 = 0x80080000;                                    // Result = 80080000
    s0 = lw(s0 - 0x7D30);                               // Load from: gpShootLine (800782D0)
    s2 = 0x80070000;                                    // Result = 80070000
    s2 = lw(s2 + 0x7FC4);                               // Load from: gShootX (80077FC4)
    s3 = 0x80070000;                                    // Result = 80070000
    s3 = lw(s3 + 0x7FD0);                               // Load from: gShootY (80077FD0)
    s1 = 0x80070000;                                    // Result = 80070000
    s1 = lw(s1 + 0x7FD4);                               // Load from: gShootZ (80077FD4)
    sw(v0, gp + 0x908);                                 // Store to: gpLineTarget (80077EE8)
    v1 = 0x80000;                                       // Result = 00080000
    if (v0 == 0) goto loc_8001BF8C;
    v0 = lw(v0 + 0x64);
    v0 &= v1;
    a0 = s2;
    if (v0 == 0) goto loc_8001BF60;
    a1 = s3;
    a2 = s1;
    P_SpawnPuff();
    goto loc_8001BF70;
loc_8001BF60:
    a1 = s3;
    a2 = s1;
    a3 = s5;
    P_SpawnBlood();
loc_8001BF70:
    a0 = lw(gp + 0x908);                                // Load from: gpLineTarget (80077EE8)
    a1 = s4;
    a2 = a1;
    a3 = s5;
    P_DamageMObj();
    goto loc_8001C008;
loc_8001BF8C:
    if (s0 == 0) goto loc_8001C008;
    v0 = lw(s0 + 0x14);
    a0 = s4;
    if (v0 == 0) goto loc_8001BFAC;
    a1 = s0;
    P_ShootSpecialLine();
loc_8001BFAC:
    v1 = lw(s0 + 0x38);
    a0 = lw(v1 + 0xC);
    v0 = -1;                                            // Result = FFFFFFFF
    if (a0 != v0) goto loc_8001BFF8;
    v0 = lw(v1 + 0x4);
    v0 = (i32(v0) < i32(s1));
    if (v0 != 0) goto loc_8001C008;
    a1 = lw(s0 + 0x3C);
    if (a1 == 0) goto loc_8001BFF8;
    v0 = lw(a1 + 0xC);
    if (v0 == a0) goto loc_8001C008;
loc_8001BFF8:
    a0 = s2;
    a1 = s3;
    a2 = s1;
    P_SpawnPuff();
loc_8001C008:
    ra = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x30;
    return;
}

void P_AproxDistance() noexcept {
loc_8001C030:
    if (i32(a0) >= 0) goto loc_8001C03C;
    a0 = -a0;
loc_8001C03C:
    if (i32(a1) >= 0) goto loc_8001C048;
    a1 = -a1;
loc_8001C048:
    v0 = (i32(a0) < i32(a1));
    v1 = a0 + a1;
    if (v0 != 0) goto loc_8001C05C;
    v0 = u32(i32(a1) >> 1);
    goto loc_8001C060;
loc_8001C05C:
    v0 = u32(i32(a0) >> 1);
loc_8001C060:
    v0 = v1 - v0;
    return;
}

void P_PointOnLineSide() noexcept {
loc_8001C068:
    a3 = lw(a2 + 0x8);
    t0 = a0;
    if (a3 != 0) goto loc_8001C0AC;
    v0 = lw(a2);
    v0 = lw(v0);
    v0 = (i32(v0) < i32(t0));
    if (v0 != 0) goto loc_8001C0A0;
    v0 = lw(a2 + 0xC);
    v0 = (i32(v0) > 0);
    goto loc_8001C120;
loc_8001C0A0:
    v0 = lw(a2 + 0xC);
    v0 >>= 31;
    goto loc_8001C120;
loc_8001C0AC:
    v1 = lw(a2 + 0xC);
    if (v1 != 0) goto loc_8001C0E0;
    v0 = lw(a2);
    v0 = lw(v0 + 0x4);
    v0 = (i32(v0) < i32(a1));
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a3) > 0);
        if (bJump) goto loc_8001C120;
    }
    v0 = a3 >> 31;
    goto loc_8001C120;
loc_8001C0E0:
    a0 = lw(a2);
    v0 = lw(a0);
    v1 = u32(i32(v1) >> 16);
    v0 = t0 - v0;
    v0 = u32(i32(v0) >> 16);
    mult(v1, v0);
    v1 = u32(i32(a3) >> 16);
    v0 = lw(a0 + 0x4);
    a0 = lo;
    v0 = a1 - v0;
    v0 = u32(i32(v0) >> 16);
    mult(v0, v1);
    v0 = lo;
    v0 = (i32(v0) < i32(a0));
    v0 ^= 1;
loc_8001C120:
    return;
}

void P_PointOnDivlineSide() noexcept {
    sp -= 0x28;
    a3 = a0;
    sw(s0, sp + 0x18);
    s0 = a2;
    sw(ra, sp + 0x20);
    sw(s1, sp + 0x1C);
    a2 = lw(s0 + 0x8);
    t0 = a1;
    if (a2 != 0) goto loc_8001C17C;
    v0 = lw(s0);
    v0 = (i32(v0) < i32(a3));
    if (v0 != 0) goto loc_8001C170;
    v0 = lw(s0 + 0xC);
    v0 = (i32(v0) > 0);
    goto loc_8001C204;
loc_8001C170:
    v0 = lw(s0 + 0xC);
    v0 >>= 31;
    goto loc_8001C204;
loc_8001C17C:
    a0 = lw(s0 + 0xC);
    if (a0 != 0) goto loc_8001C1A8;
    v0 = lw(s0 + 0x4);
    v0 = (i32(v0) < i32(t0));
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a2) > 0);
        if (bJump) goto loc_8001C204;
    }
    v0 = a2 >> 31;
    goto loc_8001C204;
loc_8001C1A8:
    v0 = lw(s0);
    v1 = lw(s0 + 0x4);
    a1 = a3 - v0;
    s1 = t0 - v1;
    v0 = a0 ^ a2;
    v0 ^= a1;
    v0 ^= s1;
    v1 = 0x80000000;                                    // Result = 80000000
    if (i32(v0) >= 0) goto loc_8001C1DC;
    v0 = a1 ^ a0;
    v0 &= v1;
    v0 = (v0 > 0);
    goto loc_8001C204;
loc_8001C1DC:
    a0 = u32(i32(a0) >> 8);
    a1 = u32(i32(a1) >> 8);
    FixedMul();
    a1 = lw(s0 + 0x8);
    a0 = u32(i32(s1) >> 8);
    s0 = v0;
    a1 = u32(i32(a1) >> 8);
    FixedMul();
    v0 = (i32(v0) < i32(s0));
    v0 ^= 1;
loc_8001C204:
    ra = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x28;
    return;
}

void P_MakeDivline() noexcept {
loc_8001C21C:
    v0 = lw(a0);
    v0 = lw(v0);
    sw(v0, a1);
    v0 = lw(a0);
    v0 = lw(v0 + 0x4);
    sw(v0, a1 + 0x4);
    v0 = lw(a0 + 0x8);
    sw(v0, a1 + 0x8);
    v0 = lw(a0 + 0xC);
    sw(v0, a1 + 0xC);
    return;
}

void P_LineOpening() noexcept {
loc_8001C25C:
    v1 = lw(a0 + 0x20);
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 != v0) goto loc_8001C278;
    sw(0, gp + 0xC9C);                                  // Store to: gOpenRange (8007827C)
    goto loc_8001C2F0;
loc_8001C278:
    a2 = lw(a0 + 0x38);
    a0 = lw(a0 + 0x3C);
    a1 = lw(a2 + 0x4);
    v1 = lw(a0 + 0x4);
    v0 = (i32(a1) < i32(v1));
    if (v0 == 0) goto loc_8001C2A4;
    sw(a1, gp + 0xADC);                                 // Store to: gOpenTop (800780BC)
    goto loc_8001C2A8;
loc_8001C2A4:
    sw(v1, gp + 0xADC);                                 // Store to: gOpenTop (800780BC)
loc_8001C2A8:
    a1 = lw(a2);
    v1 = lw(a0);
    v0 = (i32(v1) < i32(a1));
    if (v0 == 0) goto loc_8001C2D0;
    v0 = lw(a0);
    sw(a1, gp + 0x950);                                 // Store to: gOpenBottom (80077F30)
    goto loc_8001C2D8;
loc_8001C2D0:
    v0 = lw(a2);
    sw(v1, gp + 0x950);                                 // Store to: gOpenBottom (80077F30)
loc_8001C2D8:
    sw(v0, gp + 0xBFC);                                 // Store to: gLowFloor (800781DC)
    v0 = lw(gp + 0xADC);                                // Load from: gOpenTop (800780BC)
    v1 = lw(gp + 0x950);                                // Load from: gOpenBottom (80077F30)
    v0 -= v1;
    sw(v0, gp + 0xC9C);                                 // Store to: gOpenRange (8007827C)
loc_8001C2F0:
    return;
}

void P_UnsetThingPosition() noexcept {
loc_8001C2F8:
    v0 = lw(a0 + 0x64);
    v0 &= 8;
    if (v0 != 0) goto loc_8001C35C;
    v1 = lw(a0 + 0x1C);
    if (v1 == 0) goto loc_8001C328;
    v0 = lw(a0 + 0x20);
    sw(v0, v1 + 0x20);
loc_8001C328:
    v1 = lw(a0 + 0x20);
    if (v1 == 0) goto loc_8001C344;
    v0 = lw(a0 + 0x1C);
    sw(v0, v1 + 0x1C);
    goto loc_8001C35C;
loc_8001C344:
    v0 = lw(a0 + 0xC);
    v1 = lw(v0);
    v0 = lw(a0 + 0x1C);
    sw(v0, v1 + 0x4C);
loc_8001C35C:
    v0 = lw(a0 + 0x64);
    v0 &= 0x10;
    if (v0 != 0) goto loc_8001C400;
    v1 = lw(a0 + 0x30);
    if (v1 == 0) goto loc_8001C38C;
    v0 = lw(a0 + 0x34);
    sw(v0, v1 + 0x34);
loc_8001C38C:
    v1 = lw(a0 + 0x34);
    if (v1 == 0) goto loc_8001C3A8;
    v0 = lw(a0 + 0x30);
    sw(v0, v1 + 0x30);
    goto loc_8001C400;
loc_8001C3A8:
    v0 = lw(a0 + 0x4);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v0 -= v1;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = u32(i32(v0) >> 23);
    mult(v0, v1);
    v1 = lw(a0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    a0 = lw(a0 + 0x30);
    v1 -= v0;
    v1 = u32(i32(v1) >> 23);
    v0 = lo;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EDC);                               // Load from: gppBlockLinks (80077EDC)
    v0 <<= 2;
    v0 += v1;
    sw(a0, v0);
loc_8001C400:
    return;
}

void P_SetThingPosition() noexcept {
loc_8001C408:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    a0 = lw(s0);
    a1 = lw(s0 + 0x4);
    R_PointInSubsector();
    v1 = lw(s0 + 0x64);
    v1 &= 8;
    sw(v0, s0 + 0xC);
    if (v1 != 0) goto loc_8001C468;
    v1 = lw(v0);
    sw(0, s0 + 0x20);
    v0 = lw(v1 + 0x4C);
    sw(v0, s0 + 0x1C);
    v0 = lw(v1 + 0x4C);
    if (v0 == 0) goto loc_8001C464;
    sw(s0, v0 + 0x20);
loc_8001C464:
    sw(s0, v1 + 0x4C);
loc_8001C468:
    v0 = lw(s0 + 0x64);
    v0 &= 0x10;
    if (v0 != 0) goto loc_8001C52C;
    v1 = lw(s0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v1 -= v0;
    v0 = lw(s0 + 0x4);
    v1 = u32(i32(v1) >> 23);
    v0 -= a0;
    a0 = u32(i32(v0) >> 23);
    if (i32(v1) < 0) goto loc_8001C524;
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = (i32(v1) < i32(a1));
    if (v0 == 0) goto loc_8001C524;
    if (i32(a0) < 0) goto loc_8001C524;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    v0 = (i32(a0) < i32(v0));
    mult(a0, a1);
    if (v0 == 0) goto loc_8001C524;
    sw(0, s0 + 0x34);
    v0 = lo;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EDC);                               // Load from: gppBlockLinks (80077EDC)
    v0 <<= 2;
    v1 += v0;
    v0 = lw(v1);
    sw(v0, s0 + 0x30);
    v0 = lw(v1);
    if (v0 == 0) goto loc_8001C51C;
    sw(s0, v0 + 0x34);
loc_8001C51C:
    sw(s0, v1);
    goto loc_8001C52C;
loc_8001C524:
    sw(0, s0 + 0x34);
    sw(0, s0 + 0x30);
loc_8001C52C:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_BlockLinesIterator() noexcept {
loc_8001C540:
    sp -= 0x30;
    sw(s2, sp + 0x28);
    s2 = a2;
    sw(ra, sp + 0x2C);
    sw(s1, sp + 0x24);
    sw(s0, sp + 0x20);
    if (i32(a0) < 0) goto loc_8001C640;
    v0 = 1;                                             // Result = 00000001
    if (i32(a1) < 0) goto loc_8001C644;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = (i32(a0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001C644;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    v0 = (i32(a1) < i32(v0));
    mult(a1, v1);
    if (v0 != 0) goto loc_8001C59C;
    v0 = 1;                                             // Result = 00000001
    goto loc_8001C644;
loc_8001C59C:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EC0);                               // Load from: gpBlockmap (80078140)
    v0 = lo;
    v0 += a0;
    v0 <<= 1;
    v0 += v1;
    v0 = lh(v0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F3C);                               // Load from: gpBlockmapLump (800780C4)
    v0 <<= 1;
    s0 = v0 + v1;
    v0 = -1;                                            // Result = FFFFFFFF
    v1 = lh(s0);
    a0 = lhu(s0);
    {
        const bool bJump = (v1 == v0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001C644;
    }
    s1 = -1;                                            // Result = FFFFFFFF
    v1 = a0 << 16;
loc_8001C5E4:
    v1 = u32(i32(v1) >> 16);
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB0);                               // Load from: gpLines (80077EB0)
    v0 <<= 2;
    a0 = v0 + v1;
    v0 = lw(a0 + 0x40);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    s0 += 2;
    if (v0 == v1) goto loc_8001C630;
    sw(v1, a0 + 0x40);
    pcall(s2);
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8001C644;
    }
loc_8001C630:
    v0 = lh(s0);
    a0 = lhu(s0);
    v1 = a0 << 16;
    if (v0 != s1) goto loc_8001C5E4;
loc_8001C640:
    v0 = 1;                                             // Result = 00000001
loc_8001C644:
    ra = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x30;
    return;
}

void P_BlockThingsIterator() noexcept {
loc_8001C660:
    sp -= 0x20;
    sw(s1, sp + 0x14);
    s1 = a2;
    sw(ra, sp + 0x18);
    sw(s0, sp + 0x10);
    if (i32(a0) < 0) goto loc_8001C708;
    v0 = 1;                                             // Result = 00000001
    if (i32(a1) < 0) goto loc_8001C70C;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = (i32(a0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001C70C;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    v0 = (i32(a1) < i32(v0));
    mult(a1, v1);
    if (v0 != 0) goto loc_8001C6C0;
    v0 = 1;                                             // Result = 00000001
    goto loc_8001C70C;
loc_8001C6B8:
    v0 = 0;                                             // Result = 00000000
    goto loc_8001C70C;
loc_8001C6C0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EDC);                               // Load from: gppBlockLinks (80077EDC)
    v0 = lo;
    v0 += a0;
    v0 <<= 2;
    v0 += v1;
    s0 = lw(v0);
    v0 = 1;                                             // Result = 00000001
    if (s0 == 0) goto loc_8001C70C;
loc_8001C6E8:
    a0 = s0;
    pcall(s1);
    if (v0 == 0) goto loc_8001C6B8;
    s0 = lw(s0 + 0x30);
    if (s0 != 0) goto loc_8001C6E8;
loc_8001C708:
    v0 = 1;                                             // Result = 00000001
loc_8001C70C:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_RemoveMObj() noexcept {
loc_8001C724:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    v0 = 0x20000;                                       // Result = 00020000
    sw(ra, sp + 0x14);
    v1 = lw(s0 + 0x64);
    v0 |= 1;                                            // Result = 00020001
    v1 &= v0;
    v0 = 1;                                             // Result = 00000001
    {
        const bool bJump = (v1 != v0)
        v0 = 0x2E;                                      // Result = 0000002E
        if (bJump) goto loc_8001C7F4;
    }
    v1 = lw(s0 + 0x54);
    {
        const bool bJump = (v1 == v0)
        v0 = 0x30;                                      // Result = 00000030
        if (bJump) goto loc_8001C7F4;
    }
    if (v1 == v0) goto loc_8001C7F4;
    a1 = lw(gp + 0xB58);                                // Load from: gItemRespawnQueueHead (80078138)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    a0 = a1 & 0x3F;
    v0 = a0 << 2;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7910;                                       // Result = gItemRespawnTime[0] (80097910)
    at += v0;
    sw(v1, at);
    v0 += a0;
    v1 = lhu(s0 + 0x88);
    v0 <<= 1;
    at = 0x80080000;                                    // Result = 80080000
    at += 0x612C;                                       // Result = gItemRespawnQueue[0] (8008612C)
    at += v0;
    sh(v1, at);
    v1 = lhu(s0 + 0x8A);
    at = 0x80080000;                                    // Result = 80080000
    at += 0x612E;                                       // Result = gItemRespawnQueue[1] (8008612E)
    at += v0;
    sh(v1, at);
    v1 = lhu(s0 + 0x8C);
    at = 0x80080000;                                    // Result = 80080000
    at += 0x6132;                                       // Result = gItemRespawnQueue[3] (80086132)
    at += v0;
    sh(v1, at);
    v1 = lhu(s0 + 0x8E);
    a1++;
    sw(a1, gp + 0xB58);                                 // Store to: gItemRespawnQueueHead (80078138)
    at = 0x80080000;                                    // Result = 80080000
    at += 0x6130;                                       // Result = gItemRespawnQueue[2] (80086130)
    at += v0;
    sh(v1, at);
loc_8001C7F4:
    a0 = s0;
    P_UnsetThingPosition();
    v1 = lw(s0 + 0x14);
    v0 = lw(s0 + 0x10);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    sw(v0, v1 + 0x10);
    v1 = lw(s0 + 0x10);
    v0 = lw(s0 + 0x14);
    a1 = s0;
    sw(v0, v1 + 0x14);
    Z_Free2();
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_RespawnSpecials() noexcept {
loc_8001C838:
    sp -= 0x20;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    v0 = 2;                                             // Result = 00000002
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    if (v1 != v0) goto loc_8001C9FC;
    v1 = lw(gp + 0xB58);                                // Load from: gItemRespawnQueueHead (80078138)
    v0 = lw(gp + 0xBA0);                                // Load from: gItemRespawnQueueTail (80078180)
    {
        const bool bJump = (v1 == v0)
        v0 = v1 - v0;
        if (bJump) goto loc_8001C9FC;
    }
    v0 = (i32(v0) < 0x41);
    {
        const bool bJump = (v0 != 0)
        v0 = v1 - 0x40;
        if (bJump) goto loc_8001C880;
    }
    sw(v0, gp + 0xBA0);                                 // Store to: gItemRespawnQueueTail (80078180)
loc_8001C880:
    v0 = lw(gp + 0xBA0);                                // Load from: gItemRespawnQueueTail (80078180)
    a1 = v0 & 0x3F;
    a0 = a1 << 2;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7910;                                       // Result = gItemRespawnTime[0] (80097910)
    at += a0;
    v1 = lw(at);
    v0 -= v1;
    v0 = (i32(v0) < 0x708);
    {
        const bool bJump = (v0 != 0)
        v0 = a0 + a1;
        if (bJump) goto loc_8001C9FC;
    }
    v0 <<= 1;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 += 0x612C;                                       // Result = gItemRespawnQueue[0] (8008612C)
    s0 = v0 + v1;
    v0 = lh(s0);
    s2 = v0 << 16;
    v0 = lh(s0 + 0x2);
    a0 = s2;
    s1 = v0 << 16;
    a1 = s1;
    R_PointInSubsector();
    a0 = s2;
    v0 = lw(v0);
    a1 = s1;
    a2 = lw(v0);
    a3 = 0x1E;                                          // Result = 0000001E
    P_SpawnMObj();
    a0 = v0;
    a1 = 3;                                             // Result = 00000003
    S_StartSound();
    a3 = 0;                                             // Result = 00000000
    v1 = 0;                                             // Result = 00000000
    a0 = lh(s0 + 0x6);
loc_8001C91C:
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1FC4;                                       // Result = MObjInfo_MT_PLAYER[0] (8005E03C)
    at += v1;
    v0 = lw(at);
    a2 = 0x80000000;                                    // Result = 80000000
    if (a0 == v0) goto loc_8001C948;
    a3++;
    v0 = (i32(a3) < 0x7F);
    v1 += 0x58;
    if (v0 != 0) goto loc_8001C91C;
loc_8001C948:
    v0 = a3 << 1;
    v0 += a3;
    v0 <<= 2;
    v0 -= a3;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F70;                                       // Result = MObjInfo_MT_PLAYER[15] (8005E090)
    at += v0;
    v0 = lw(at);
    v0 &= 0x100;
    a0 = s2;
    if (v0 == 0) goto loc_8001C984;
    a2 = 0x7FFF0000;                                    // Result = 7FFF0000
    a2 |= 0xFFFF;                                       // Result = 7FFFFFFF
loc_8001C984:
    a1 = s1;
    P_SpawnMObj();
    a1 = 0xB60B0000;                                    // Result = B60B0000
    v1 = lhu(s0 + 0x4);
    a1 |= 0x60B7;                                       // Result = B60B60B7
    v1 <<= 16;
    a0 = u32(i32(v1) >> 16);
    mult(a0, a1);
    a1 = v0;
    v1 = u32(i32(v1) >> 31);
    v0 = hi;
    v0 += a0;
    v0 = u32(i32(v0) >> 5);
    v0 -= v1;
    v0 <<= 29;
    sw(v0, a1 + 0x24);
    v0 = lhu(s0);
    sh(v0, a1 + 0x88);
    v0 = lhu(s0 + 0x2);
    sh(v0, a1 + 0x8A);
    v0 = lhu(s0 + 0x6);
    sh(v0, a1 + 0x8C);
    v0 = lw(gp + 0xBA0);                                // Load from: gItemRespawnQueueTail (80078180)
    v1 = lhu(s0 + 0x4);
    v0++;
    sw(v0, gp + 0xBA0);                                 // Store to: gItemRespawnQueueTail (80078180)
    sh(v1, a1 + 0x8E);
loc_8001C9FC:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_SetMObjState() noexcept {
loc_8001CA18:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    if (a1 != 0) goto loc_8001CB28;
    v0 = 0x20000;                                       // Result = 00020000
    v1 = lw(s0 + 0x64);
    v0 |= 1;                                            // Result = 00020001
    v1 &= v0;
    v0 = 1;                                             // Result = 00000001
    sw(0, s0 + 0x60);
    if (v1 != v0) goto loc_8001CAF0;
    v1 = lw(s0 + 0x54);
    v0 = 0x2E;                                          // Result = 0000002E
    if (v1 == v0) goto loc_8001CAF0;
    v0 = 0x30;                                          // Result = 00000030
    if (v1 == v0) goto loc_8001CAF0;
    a1 = lw(gp + 0xB58);                                // Load from: gItemRespawnQueueHead (80078138)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    a0 = a1 & 0x3F;
    v0 = a0 << 2;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7910;                                       // Result = gItemRespawnTime[0] (80097910)
    at += v0;
    sw(v1, at);
    v0 += a0;
    v1 = lhu(s0 + 0x88);
    v0 <<= 1;
    at = 0x80080000;                                    // Result = 80080000
    at += 0x612C;                                       // Result = gItemRespawnQueue[0] (8008612C)
    at += v0;
    sh(v1, at);
    v1 = lhu(s0 + 0x8A);
    at = 0x80080000;                                    // Result = 80080000
    at += 0x612E;                                       // Result = gItemRespawnQueue[1] (8008612E)
    at += v0;
    sh(v1, at);
    v1 = lhu(s0 + 0x8C);
    at = 0x80080000;                                    // Result = 80080000
    at += 0x6132;                                       // Result = gItemRespawnQueue[3] (80086132)
    at += v0;
    sh(v1, at);
    v1 = lhu(s0 + 0x8E);
    a1++;
    sw(a1, gp + 0xB58);                                 // Store to: gItemRespawnQueueHead (80078138)
    at = 0x80080000;                                    // Result = 80080000
    at += 0x6130;                                       // Result = gItemRespawnQueue[2] (80086130)
    at += v0;
    sh(v1, at);
loc_8001CAF0:
    a0 = s0;
    P_UnsetThingPosition();
    v1 = lw(s0 + 0x14);
    v0 = lw(s0 + 0x10);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    sw(v0, v1 + 0x10);
    v1 = lw(s0 + 0x10);
    v0 = lw(s0 + 0x14);
    a1 = s0;
    sw(v0, v1 + 0x14);
    Z_Free2();
    v0 = 0;                                             // Result = 00000000
    goto loc_8001CB88;
loc_8001CB28:
    v0 = a1 << 3;
    v0 -= a1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, s0 + 0x60);
    v1 = lw(v0 + 0x8);
    sw(v1, s0 + 0x5C);
    v1 = lw(v0);
    sw(v1, s0 + 0x28);
    v1 = lw(v0 + 0x4);
    sw(v1, s0 + 0x2C);
    v0 = lw(v0 + 0xC);
    if (v0 == 0) goto loc_8001CB80;
    a0 = s0;
    pcall(v0);
loc_8001CB80:
    sw(0, s0 + 0x18);
    v0 = 1;                                             // Result = 00000001
loc_8001CB88:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_ExplodeMissile() noexcept {
loc_8001CB9C:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v1 = lw(s0 + 0x54);
    sw(0, s0 + 0x50);
    sw(0, s0 + 0x4C);
    sw(0, s0 + 0x48);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F94;                                       // Result = MObjInfo_MT_PLAYER[C] (8005E06C)
    at += v0;
    a1 = lw(at);
    P_SetMObjState();
    P_Random();
    v1 = lw(s0 + 0x5C);
    v0 &= 1;
    v1 -= v0;
    sw(v1, s0 + 0x5C);
    if (i32(v1) > 0) goto loc_8001CC0C;
    v0 = 1;                                             // Result = 00000001
    sw(v0, s0 + 0x5C);
loc_8001CC0C:
    a0 = 0xFFFE0000;                                    // Result = FFFE0000
    a0 |= 0xFFFF;                                       // Result = FFFEFFFF
    v0 = lw(s0 + 0x64);
    v1 = lw(s0 + 0x58);
    v0 &= a0;
    sw(v0, s0 + 0x64);
    v0 = lw(v1 + 0x38);
    if (v0 == 0) goto loc_8001CC54;
    a0 = lw(s0 + 0x74);
    S_StopSound();
    v0 = lw(s0 + 0x58);
    a1 = lw(v0 + 0x38);
    a0 = s0;
    S_StartSound();
loc_8001CC54:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_SpawnMObj() noexcept {
loc_8001CC68:
    sp -= 0x28;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(s2, sp + 0x18);
    s2 = a1;
    sw(s4, sp + 0x20);
    s4 = a2;
    sw(s0, sp + 0x10);
    s0 = a3;
    a1 = 0x94;                                          // Result = 00000094
    a2 = 2;                                             // Result = 00000002
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a3 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x24);
    sw(s3, sp + 0x1C);
    Z_Malloc2();
    s3 = v0;
    a0 = s3;
    a1 = 0;                                             // Result = 00000000
    a2 = 0x94;                                          // Result = 00000094
    D_memset();
    v0 = s0 << 1;
    v0 += s0;
    v0 <<= 2;
    v0 -= s0;
    v0 <<= 3;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x1FC4;                                       // Result = MObjInfo_MT_PLAYER[0] (8005E03C)
    v0 += v1;
    sw(s0, s3 + 0x54);
    sw(v0, s3 + 0x58);
    sw(s1, s3);
    sw(s2, s3 + 0x4);
    v1 = lw(v0 + 0x40);
    sw(v1, s3 + 0x40);
    v1 = lw(v0 + 0x44);
    sw(v1, s3 + 0x44);
    v1 = lw(v0 + 0x54);
    sw(v1, s3 + 0x64);
    v1 = lw(v0 + 0x8);
    sw(v1, s3 + 0x68);
    v1 = lw(v0 + 0x14);
    sw(v1, s3 + 0x78);
    v1 = lw(v0 + 0x4);
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, s3 + 0x60);
    v1 = lw(v0 + 0x8);
    sw(v1, s3 + 0x5C);
    v1 = lw(v0);
    sw(v1, s3 + 0x28);
    v0 = lw(v0 + 0x4);
    a0 = s3;
    sw(v0, s3 + 0x2C);
    P_SetThingPosition();
    v0 = lw(s3 + 0xC);
    v0 = lw(v0);
    v1 = lw(s3 + 0xC);
    v0 = lw(v0);
    sw(v0, s3 + 0x38);
    v0 = lw(v1);
    v1 = lw(v0 + 0x4);
    v0 = 0x80000000;                                    // Result = 80000000
    sw(v1, s3 + 0x3C);
    if (s4 != v0) goto loc_8001CDB8;
    v0 = lw(s3 + 0x38);
    sw(v0, s3 + 0x8);
    goto loc_8001CDE8;
loc_8001CDB8:
    v0 = 0x7FFF0000;                                    // Result = 7FFF0000
    v0 |= 0xFFFF;                                       // Result = 7FFFFFFF
    if (s4 != v0) goto loc_8001CDE4;
    v0 = lw(s3 + 0x58);
    v0 = lw(v0 + 0x44);
    v0 = v1 - v0;
    sw(v0, s3 + 0x8);
    goto loc_8001CDE8;
loc_8001CDE4:
    sw(s4, s3 + 0x8);
loc_8001CDE8:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(s3, v0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    sw(v0, s3 + 0x14);
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    v0 = s3;
    sw(v1, v0 + 0x10);
    at = 0x800B0000;                                    // Result = 800B0000
    sw(v0, at - 0x7160);                                // Store to: gMObjHead[4] (800A8EA0)
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void P_SpawnPlayer() noexcept {
loc_8001CE40:
    sp -= 0x38;
    sw(s4, sp + 0x28);
    s4 = a0;
    sw(ra, sp + 0x30);
    sw(s5, sp + 0x2C);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    a0 = lh(s4 + 0x6);
    v1 = a0 << 2;
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7F58;                                       // Result = gpSectors (800780A8)
    at += v1;
    v0 = lw(at);
    v1 += a0;
    if (v0 != 0) goto loc_8001CE94;
    v0 = 0;                                             // Result = 00000000
    goto loc_8001D15C;
loc_8001CE94:
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 -= 0x7940;                                       // Result = gTmpWadLumpBuffer[3FDE] (800A86C0)
    s3 = v0 + v1;
    v0 = lw(s3 + 0x4);
    s5 = 2;                                             // Result = 00000002
    a1 = 0x94;                                          // Result = 00000094
    if (v0 != s5) goto loc_8001CEC8;
    a0--;
    G_PlayerReborn();
    a1 = 0x94;                                          // Result = 00000094
loc_8001CEC8:
    a2 = 2;                                             // Result = 00000002
    a3 = 0;                                             // Result = 00000000
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    s1 = lh(s4);
    s2 = lh(s4 + 0x2);
    s1 <<= 16;
    s2 <<= 16;
    Z_Malloc2();
    s0 = v0;
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    a2 = 0x94;                                          // Result = 00000094
    D_memset();
    v0 = 0x80060000;                                    // Result = 80060000
    v0 -= 0x1FC4;                                       // Result = MObjInfo_MT_PLAYER[0] (8005E03C)
    sw(0, s0 + 0x54);
    sw(v0, s0 + 0x58);
    sw(s1, s0);
    sw(s2, s0 + 0x4);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x1F84);                               // Load from: MObjInfo_MT_PLAYER[10] (8005E07C)
    sw(v0, s0 + 0x40);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x1F80);                               // Load from: MObjInfo_MT_PLAYER[11] (8005E080)
    sw(v0, s0 + 0x44);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x1F70);                               // Load from: MObjInfo_MT_PLAYER[15] (8005E090)
    sw(v0, s0 + 0x64);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x1FBC);                               // Load from: MObjInfo_MT_PLAYER[2] (8005E044)
    sw(v0, s0 + 0x68);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x1FB0);                               // Load from: MObjInfo_MT_PLAYER[5] (8005E050)
    sw(v0, s0 + 0x78);
    v1 = 0x80060000;                                    // Result = 80060000
    v1 = lw(v1 - 0x1FC0);                               // Load from: MObjInfo_MT_PLAYER[1] (8005E040)
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, s0 + 0x60);
    v1 = lw(v0 + 0x8);
    sw(v1, s0 + 0x5C);
    v1 = lw(v0);
    sw(v1, s0 + 0x28);
    v0 = lw(v0 + 0x4);
    a0 = s0;
    sw(v0, s0 + 0x2C);
    P_SetThingPosition();
    v0 = lw(s0 + 0xC);
    v0 = lw(v0);
    v1 = lw(s0 + 0xC);
    v0 = lw(v0);
    sw(v0, s0 + 0x38);
    v0 = lw(v1);
    v1 = lw(s0 + 0x38);
    v0 = lw(v0 + 0x4);
    sw(v1, s0 + 0x8);
    sw(v0, s0 + 0x3C);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(s0, v0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    sw(v0, s0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    a1 = 0xB60B0000;                                    // Result = B60B0000
    sw(v0, s0 + 0x10);
    at = 0x800B0000;                                    // Result = 800B0000
    sw(s0, at - 0x7160);                                // Store to: gMObjHead[4] (800A8EA0)
    v1 = lhu(s4 + 0x4);
    a1 |= 0x60B7;                                       // Result = B60B60B7
    v1 <<= 16;
    a0 = u32(i32(v1) >> 16);
    mult(a0, a1);
    sw(s3, s0 + 0x80);
    v1 = u32(i32(v1) >> 31);
    v0 = hi;
    v0 += a0;
    v0 = u32(i32(v0) >> 5);
    v0 -= v1;
    v0 <<= 29;
    sw(v0, s0 + 0x24);
    v0 = lw(s3 + 0x24);
    v1 = 0x290000;                                      // Result = 00290000
    sw(v0, s0 + 0x68);
    v0 = 0x24;                                          // Result = 00000024
    sw(s0, s3);
    sw(0, s3 + 0x4);
    sw(0, s3 + 0xC4);
    sw(0, s3 + 0xD4);
    sw(0, s3 + 0xD8);
    sw(0, s3 + 0xDC);
    sw(0, s3 + 0xE4);
    sw(0, s3 + 0xE8);
    sw(v1, s3 + 0x18);
    sw(v0, s3 + 0x120);
    v0 = lw(s0 + 0x8);
    v0 += v1;
    sw(v0, s3 + 0x14);
    a0 = lh(s4 + 0x6);
    a0--;
    P_SetupPsprites();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    if (v0 != s5) goto loc_8001D0DC;
    a0 = 1;                                             // Result = 00000001
    v1 = 5;                                             // Result = 00000005
    v0 = s3 + 0x14;
loc_8001D0C4:
    sw(a0, v0 + 0x48);
    v1--;
    v0 -= 4;
    if (i32(v1) >= 0) goto loc_8001D0C4;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FA4);                               // Load from: gNetGame (8007805C)
loc_8001D0DC:
    if (v0 != 0) goto loc_8001D130;
    v0 = lh(s4 + 0x6);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v0--;
    {
        const bool bJump = (v0 != v1)
        v0 = s0;
        if (bJump) goto loc_8001D15C;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C3C);                               // Load from: gbUsingAPassword (80077C3C)
    a1 = sp + 0x10;
    if (v0 == 0) goto loc_8001D130;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x6560;                                       // Result = gPasswordChars[0] (80096560)
    a2 = a1;
    a3 = s3;
    P_ProcessPassword();
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7C3C);                                 // Store to: gbUsingAPassword (80077C3C)
loc_8001D130:
    v0 = lh(s4 + 0x6);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v0--;
    {
        const bool bJump = (v0 != v1)
        v0 = s0;
        if (bJump) goto loc_8001D15C;
    }
    ST_Start();
    P_UpdatePalette();
    v0 = s0;
loc_8001D15C:
    ra = lw(sp + 0x30);
    s5 = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x38;
    return;
}

void P_SpawnMapThing() noexcept {
loc_8001D184:
    sp -= 0x30;
    sw(s2, sp + 0x18);
    s2 = a0;
    sw(ra, sp + 0x2C);
    sw(s6, sp + 0x28);
    sw(s5, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v1 = lh(s2 + 0x6);
    v0 = (i32(v1) < 3);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 << 2;
        if (bJump) goto loc_8001D23C;
    }
    v0 += v1;
    v0 <<= 1;
    v1 = lwl(s2 + 0x3);
    v1 = lwr(s2);
    a0 = lwl(s2 + 0x7);
    a0 = lwr(s2 + 0x4);
    a1 = lh(s2 + 0x8);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x718B;                                       // Result = gPlayer0MapThing[1] (800A8E75)
    at += v0;
    swl(v1, at);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x718E;                                       // Result = gPlayer0MapThing[0] (800A8E72)
    at += v0;
    swr(v1, at);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x7187;                                       // Result = gPlayer0MapThing[3] (800A8E79)
    at += v0;
    swl(a0, at);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x718A;                                       // Result = gPlayer0MapThing[2] (800A8E76)
    at += v0;
    swr(a0, at);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x7186;                                       // Result = gPlayer0MapThing[4] (800A8E7A)
    at += v0;
    sh(a1, at);
    goto loc_8001D6D8;
loc_8001D23C:
    v0 = 0xB;                                           // Result = 0000000B
    a0 = 2;                                             // Result = 00000002
    if (v1 != v0) goto loc_8001D28C;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FA0);                               // Load from: gpDeathmatchP (80078060)
    v0 = 0x800A0000;                                    // Result = 800A0000
    v0 -= 0x7F30;                                       // Result = 800980D0
    v0 = (a0 < v0);
    a1 = s2;
    if (v0 == 0) goto loc_8001D6D8;
    a2 = 0xA;                                           // Result = 0000000A
    D_memcpy();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FA0);                               // Load from: gpDeathmatchP (80078060)
    v0 += 0xA;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7FA0);                                // Store to: gpDeathmatchP (80078060)
    goto loc_8001D6D8;
loc_8001D28C:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    if (v0 == a0) goto loc_8001D2B4;
    v0 = lhu(s2 + 0x8);
    v0 &= 0x10;
    if (v0 != 0) goto loc_8001D6D8;
loc_8001D2B4:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7DA8);                               // Load from: gGameSkill (80078258)
    v0 = (v1 < 2);
    if (v0 == 0) goto loc_8001D2D4;
    a1 = 1;                                             // Result = 00000001
    goto loc_8001D2F4;
loc_8001D2D4:
    v0 = v1 - 3;
    if (v1 != a0) goto loc_8001D2E4;
    a1 = 2;                                             // Result = 00000002
    goto loc_8001D2F4;
loc_8001D2E4:
    v0 = (v0 < 2);
    if (v0 == 0) goto loc_8001D2F4;
    a1 = 4;                                             // Result = 00000004
loc_8001D2F4:
    v0 = lh(s2 + 0x8);
    v0 &= a1;
    s1 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8001D6D8;
    a1 = lh(s2 + 0x6);
    v1 = 0;                                             // Result = 00000000
loc_8001D310:
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1FC4;                                       // Result = MObjInfo_MT_PLAYER[0] (8005E03C)
    at += v1;
    v0 = lw(at);
    {
        const bool bJump = (a1 == v0)
        v0 = 0x7F;                                      // Result = 0000007F
        if (bJump) goto loc_8001D340;
    }
    s1++;
    v0 = (i32(s1) < 0x7F);
    v1 += 0x58;
    if (v0 != 0) goto loc_8001D310;
    v0 = 0x7F;                                          // Result = 0000007F
loc_8001D340:
    if (s1 != v0) goto loc_8001D360;
    a2 = lh(s2);
    a3 = lh(s2 + 0x2);
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x86C;                                        // Result = STR_P_SpawnMapThing_BadDoomEdNum_Err[0] (8001086C)
    I_Error();
loc_8001D360:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    v0 = 2;                                             // Result = 00000002
    s3 = 0x80000000;                                    // Result = 80000000
    if (v1 != v0) goto loc_8001D3A8;
    v0 = s1 << 1;
    v0 += s1;
    v0 <<= 2;
    v0 -= s1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F70;                                       // Result = MObjInfo_MT_PLAYER[15] (8005E090)
    at += v0;
    v0 = lw(at);
    v1 = 0x2400000;                                     // Result = 02400000
    v0 &= v1;
    if (v0 != 0) goto loc_8001D6D8;
loc_8001D3A8:
    v0 = lh(s2);
    v1 = lh(s2 + 0x2);
    s6 = v0 << 16;
    v0 = s1 << 1;
    v0 += s1;
    v0 <<= 2;
    v0 -= s1;
    s4 = v0 << 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F70;                                       // Result = MObjInfo_MT_PLAYER[15] (8005E090)
    at += s4;
    v0 = lw(at);
    v0 &= 0x100;
    s5 = v1 << 16;
    if (v0 == 0) goto loc_8001D3F0;
    s3 = 0x7FFF0000;                                    // Result = 7FFF0000
    s3 |= 0xFFFF;                                       // Result = 7FFFFFFF
loc_8001D3F0:
    a1 = 0x94;                                          // Result = 00000094
    a2 = 2;                                             // Result = 00000002
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2();
    s0 = v0;
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    a2 = 0x94;                                          // Result = 00000094
    D_memset();
    v0 = 0x80060000;                                    // Result = 80060000
    v0 -= 0x1FC4;                                       // Result = MObjInfo_MT_PLAYER[0] (8005E03C)
    v0 += s4;                                           // Result = MObjInfo_MT_PLAYER[0] (8005E03C)
    sw(s1, s0 + 0x54);
    sw(v0, s0 + 0x58);
    sw(s6, s0);
    sw(s5, s0 + 0x4);
    v1 = lw(v0 + 0x40);                                 // Load from: MObjInfo_MT_PLAYER[10] (8005E07C)
    sw(v1, s0 + 0x40);
    v1 = lw(v0 + 0x44);                                 // Load from: MObjInfo_MT_PLAYER[11] (8005E080)
    sw(v1, s0 + 0x44);
    v1 = lw(v0 + 0x54);                                 // Load from: MObjInfo_MT_PLAYER[15] (8005E090)
    sw(v1, s0 + 0x64);
    v1 = lw(v0 + 0x8);                                  // Load from: MObjInfo_MT_PLAYER[2] (8005E044)
    sw(v1, s0 + 0x68);
    v1 = lw(v0 + 0x14);                                 // Load from: MObjInfo_MT_PLAYER[5] (8005E050)
    sw(v1, s0 + 0x78);
    v1 = lw(v0 + 0x4);                                  // Load from: MObjInfo_MT_PLAYER[1] (8005E040)
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, s0 + 0x60);
    v1 = lw(v0 + 0x8);
    sw(v1, s0 + 0x5C);
    v1 = lw(v0);
    sw(v1, s0 + 0x28);
    v0 = lw(v0 + 0x4);
    a0 = s0;
    sw(v0, s0 + 0x2C);
    P_SetThingPosition();
    v0 = lw(s0 + 0xC);
    v0 = lw(v0);
    v1 = lw(s0 + 0xC);
    v0 = lw(v0);
    sw(v0, s0 + 0x38);
    v0 = lw(v1);
    v1 = lw(v0 + 0x4);
    v0 = 0x80000000;                                    // Result = 80000000
    sw(v1, s0 + 0x3C);
    if (s3 != v0) goto loc_8001D500;
    v0 = lw(s0 + 0x38);
    sw(v0, s0 + 0x8);
    goto loc_8001D530;
loc_8001D500:
    v0 = 0x7FFF0000;                                    // Result = 7FFF0000
    v0 |= 0xFFFF;                                       // Result = 7FFFFFFF
    if (s3 != v0) goto loc_8001D52C;
    v0 = lw(s0 + 0x58);
    v0 = lw(v0 + 0x44);
    v0 = v1 - v0;
    sw(v0, s0 + 0x8);
    goto loc_8001D530;
loc_8001D52C:
    sw(s3, s0 + 0x8);
loc_8001D530:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(s0, v0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    sw(v0, s0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(v0, s0 + 0x10);
    at = 0x800B0000;                                    // Result = 800B0000
    sw(s0, at - 0x7160);                                // Store to: gMObjHead[4] (800A8EA0)
    v0 = lw(s0 + 0x5C);
    if (i32(v0) <= 0) goto loc_8001D5BC;
    P_Random();
    v1 = lw(s0 + 0x5C);
    div(v0, v1);
    if (v1 != 0) goto loc_8001D594;
    _break(0x1C00);
loc_8001D594:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8001D5AC;
    }
    if (v0 != at) goto loc_8001D5AC;
    tge(zero, zero, 0x5D);
loc_8001D5AC:
    v1 = hi;
    v1++;
    sw(v1, s0 + 0x5C);
loc_8001D5BC:
    v0 = lw(s0 + 0x64);
    v1 = 0x400000;                                      // Result = 00400000
    v0 &= v1;
    v1 = 0x800000;                                      // Result = 00800000
    if (v0 == 0) goto loc_8001D5E8;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F20);                               // Load from: gTotalKills (80077F20)
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7F20);                                // Store to: gTotalKills (80077F20)
loc_8001D5E8:
    v0 = lw(s0 + 0x64);
    v0 &= v1;
    {
        const bool bJump = (v0 == 0)
        v0 = 0xB60B0000;                                // Result = B60B0000
        if (bJump) goto loc_8001D618;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F2C);                               // Load from: gTotalItems (80077F2C)
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7F2C);                                // Store to: gTotalItems (80077F2C)
    v0 = 0xB60B0000;                                    // Result = B60B0000
loc_8001D618:
    v1 = lhu(s2 + 0x4);
    v0 |= 0x60B7;                                       // Result = B60B60B7
    v1 <<= 16;
    a0 = u32(i32(v1) >> 16);
    mult(a0, v0);
    v1 = u32(i32(v1) >> 31);
    v0 = hi;
    v0 += a0;
    v0 = u32(i32(v0) >> 5);
    v0 -= v1;
    v0 <<= 29;
    sw(v0, s0 + 0x24);
    v0 = lhu(s2);
    sh(v0, s0 + 0x88);
    v0 = lhu(s2 + 0x2);
    sh(v0, s0 + 0x8A);
    v0 = lhu(s2 + 0x6);
    sh(v0, s0 + 0x8C);
    v0 = lhu(s2 + 0x4);
    sh(v0, s0 + 0x8E);
    v0 = lhu(s2 + 0x8);
    v0 &= 8;
    if (v0 == 0) goto loc_8001D69C;
    v0 = lw(s0 + 0x64);
    v0 |= 0x20;
    sw(v0, s0 + 0x64);
loc_8001D69C:
    v0 = lhu(s2 + 0x8);
    v1 = lw(s0 + 0x64);
    v0 &= 0xE0;
    v0 <<= 23;
    v0 |= v1;
    v1 = 0x70000000;                                    // Result = 70000000
    sw(v0, s0 + 0x64);
    v0 &= v1;
    v1 = 0x50000000;                                    // Result = 50000000
    if (v0 != v1) goto loc_8001D6D8;
    v0 = lw(s0 + 0x68);
    v0 <<= 1;
    sw(v0, s0 + 0x68);
loc_8001D6D8:
    ra = lw(sp + 0x2C);
    s6 = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x30;
    return;
}

void P_SpawnPuff() noexcept {
loc_8001D704:
    sp -= 0x28;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(s2, sp + 0x18);
    s2 = a1;
    sw(s3, sp + 0x1C);
    s3 = a2;
    sw(ra, sp + 0x20);
    sw(s0, sp + 0x10);
    P_Random();
    s0 = v0;
    P_Random();
    s0 -= v0;
    s0 <<= 10;
    s3 += s0;
    a1 = 0x94;                                          // Result = 00000094
    a2 = 2;                                             // Result = 00000002
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2();
    s0 = v0;
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    a2 = 0x94;                                          // Result = 00000094
    D_memset();
    v0 = 0x1B;                                          // Result = 0000001B
    sw(v0, s0 + 0x54);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 -= 0x167C;                                       // Result = MObjInfo_MT_PUFF[0] (8005E984)
    sw(v0, s0 + 0x58);
    sw(s1, s0);
    sw(s2, s0 + 0x4);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x163C);                               // Load from: MObjInfo_MT_PUFF[10] (8005E9C4)
    sw(v0, s0 + 0x40);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x1638);                               // Load from: MObjInfo_MT_PUFF[11] (8005E9C8)
    sw(v0, s0 + 0x44);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x1628);                               // Load from: MObjInfo_MT_PUFF[15] (8005E9D8)
    sw(v0, s0 + 0x64);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x1674);                               // Load from: MObjInfo_MT_PUFF[2] (8005E98C)
    sw(v0, s0 + 0x68);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x1668);                               // Load from: MObjInfo_MT_PUFF[5] (8005E998)
    sw(v0, s0 + 0x78);
    v1 = 0x80060000;                                    // Result = 80060000
    v1 = lw(v1 - 0x1678);                               // Load from: MObjInfo_MT_PUFF[1] (8005E988)
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, s0 + 0x60);
    v1 = lw(v0 + 0x8);
    sw(v1, s0 + 0x5C);
    v1 = lw(v0);
    sw(v1, s0 + 0x28);
    v0 = lw(v0 + 0x4);
    a0 = s0;
    sw(v0, s0 + 0x2C);
    P_SetThingPosition();
    v0 = lw(s0 + 0xC);
    v0 = lw(v0);
    v1 = lw(s0 + 0xC);
    v0 = lw(v0);
    sw(v0, s0 + 0x38);
    v0 = lw(v1);
    v1 = lw(v0 + 0x4);
    v0 = 0x80000000;                                    // Result = 80000000
    sw(v1, s0 + 0x3C);
    if (s3 != v0) goto loc_8001D868;
    v0 = lw(s0 + 0x38);
    sw(v0, s0 + 0x8);
    goto loc_8001D898;
loc_8001D868:
    v0 = 0x7FFF0000;                                    // Result = 7FFF0000
    v0 |= 0xFFFF;                                       // Result = 7FFFFFFF
    if (s3 != v0) goto loc_8001D894;
    v0 = lw(s0 + 0x58);
    v0 = lw(v0 + 0x44);
    v0 = v1 - v0;
    sw(v0, s0 + 0x8);
    goto loc_8001D898;
loc_8001D894:
    sw(s3, s0 + 0x8);
loc_8001D898:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(s0, v0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    sw(v0, s0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(v0, s0 + 0x10);
    v0 = 0x10000;                                       // Result = 00010000
    at = 0x800B0000;                                    // Result = 800B0000
    sw(s0, at - 0x7160);                                // Store to: gMObjHead[4] (800A8EA0)
    sw(v0, s0 + 0x50);
    P_Random();
    v1 = lw(s0 + 0x5C);
    v0 &= 1;
    v1 -= v0;
    sw(v1, s0 + 0x5C);
    if (i32(v1) > 0) goto loc_8001D8F4;
    v0 = 1;                                             // Result = 00000001
    sw(v0, s0 + 0x5C);
loc_8001D8F4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F98);                               // Load from: gAttackRange (80077F98)
    v0 = 0x460000;                                      // Result = 00460000
    a0 = s0;
    if (v1 != v0) goto loc_8001D910;
    a1 = 0x5F;                                          // Result = 0000005F
    P_SetMObjState();
loc_8001D910:
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void P_SpawnBlood() noexcept {
loc_8001D930:
    sp -= 0x28;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(s2, sp + 0x18);
    s2 = a1;
    sw(s3, sp + 0x1C);
    s3 = a2;
    sw(s4, sp + 0x20);
    s4 = a3;
    sw(ra, sp + 0x24);
    sw(s0, sp + 0x10);
    P_Random();
    s0 = v0;
    P_Random();
    s0 -= v0;
    s0 <<= 10;
    s3 += s0;
    a1 = 0x94;                                          // Result = 00000094
    a2 = 2;                                             // Result = 00000002
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2();
    s0 = v0;
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    a2 = 0x94;                                          // Result = 00000094
    D_memset();
    v0 = 0x1C;                                          // Result = 0000001C
    sw(v0, s0 + 0x54);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 -= 0x1624;                                       // Result = MObjInfo_MT_BLOOD[0] (8005E9DC)
    sw(v0, s0 + 0x58);
    sw(s1, s0);
    sw(s2, s0 + 0x4);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x15E4);                               // Load from: MObjInfo_MT_BLOOD[10] (8005EA1C)
    sw(v0, s0 + 0x40);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x15E0);                               // Load from: MObjInfo_MT_BLOOD[11] (8005EA20)
    sw(v0, s0 + 0x44);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x15D0);                               // Load from: MObjInfo_MT_BLOOD[15] (8005EA30)
    sw(v0, s0 + 0x64);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x161C);                               // Load from: MObjInfo_MT_BLOOD[2] (8005E9E4)
    sw(v0, s0 + 0x68);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 = lw(v0 - 0x1610);                               // Load from: MObjInfo_MT_BLOOD[5] (8005E9F0)
    sw(v0, s0 + 0x78);
    v1 = 0x80060000;                                    // Result = 80060000
    v1 = lw(v1 - 0x1620);                               // Load from: MObjInfo_MT_BLOOD[1] (8005E9E0)
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, s0 + 0x60);
    v1 = lw(v0 + 0x8);
    sw(v1, s0 + 0x5C);
    v1 = lw(v0);
    sw(v1, s0 + 0x28);
    v0 = lw(v0 + 0x4);
    a0 = s0;
    sw(v0, s0 + 0x2C);
    P_SetThingPosition();
    v0 = lw(s0 + 0xC);
    v0 = lw(v0);
    v1 = lw(s0 + 0xC);
    v0 = lw(v0);
    sw(v0, s0 + 0x38);
    v0 = lw(v1);
    v1 = lw(v0 + 0x4);
    v0 = 0x80000000;                                    // Result = 80000000
    sw(v1, s0 + 0x3C);
    if (s3 != v0) goto loc_8001DA9C;
    v0 = lw(s0 + 0x38);
    sw(v0, s0 + 0x8);
    goto loc_8001DACC;
loc_8001DA9C:
    v0 = 0x7FFF0000;                                    // Result = 7FFF0000
    v0 |= 0xFFFF;                                       // Result = 7FFFFFFF
    if (s3 != v0) goto loc_8001DAC8;
    v0 = lw(s0 + 0x58);
    v0 = lw(v0 + 0x44);
    v0 = v1 - v0;
    sw(v0, s0 + 0x8);
    goto loc_8001DACC;
loc_8001DAC8:
    sw(s3, s0 + 0x8);
loc_8001DACC:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(s0, v0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    sw(v0, s0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(v0, s0 + 0x10);
    v0 = 0x20000;                                       // Result = 00020000
    at = 0x800B0000;                                    // Result = 800B0000
    sw(s0, at - 0x7160);                                // Store to: gMObjHead[4] (800A8EA0)
    sw(v0, s0 + 0x50);
    P_Random();
    v1 = lw(s0 + 0x5C);
    v0 &= 1;
    v1 -= v0;
    sw(v1, s0 + 0x5C);
    if (i32(v1) > 0) goto loc_8001DB28;
    v0 = 1;                                             // Result = 00000001
    sw(v0, s0 + 0x5C);
loc_8001DB28:
    v0 = s4 - 9;
    v0 = (v0 < 4);
    a0 = s0;
    if (v0 == 0) goto loc_8001DB40;
    a1 = 0x5B;                                          // Result = 0000005B
    goto loc_8001DB4C;
loc_8001DB40:
    v0 = (i32(s4) < 9);
    a1 = 0x5C;                                          // Result = 0000005C
    if (v0 == 0) goto loc_8001DB54;
loc_8001DB4C:
    P_SetMObjState();
loc_8001DB54:
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void P_CheckMissileSpawn() noexcept {
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v0 = lw(s0 + 0x48);
    v1 = lw(s0);
    a2 = lw(s0 + 0x4);
    v0 = u32(i32(v0) >> 1);
    v0 += v1;
    sw(v0, s0);
    v0 = lw(s0 + 0x4C);
    a1 = lw(s0);
    v1 = lw(s0 + 0x50);
    v0 = u32(i32(v0) >> 1);
    v0 += a2;
    v1 = u32(i32(v1) >> 1);
    sw(v0, s0 + 0x4);
    v0 = lw(s0 + 0x8);
    a2 = lw(s0 + 0x4);
    v1 += v0;
    sw(v1, s0 + 0x8);
    P_TryMove();
    if (v0 != 0) goto loc_8001DC80;
    v1 = lw(s0 + 0x54);
    sw(0, s0 + 0x50);
    sw(0, s0 + 0x4C);
    sw(0, s0 + 0x48);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F94;                                       // Result = MObjInfo_MT_PLAYER[C] (8005E06C)
    at += v0;
    a1 = lw(at);
    a0 = s0;
    P_SetMObjState();
    P_Random();
    v1 = lw(s0 + 0x5C);
    v0 &= 1;
    v1 -= v0;
    sw(v1, s0 + 0x5C);
    if (i32(v1) > 0) goto loc_8001DC38;
    v0 = 1;                                             // Result = 00000001
    sw(v0, s0 + 0x5C);
loc_8001DC38:
    a0 = 0xFFFE0000;                                    // Result = FFFE0000
    a0 |= 0xFFFF;                                       // Result = FFFEFFFF
    v0 = lw(s0 + 0x64);
    v1 = lw(s0 + 0x58);
    v0 &= a0;
    sw(v0, s0 + 0x64);
    v0 = lw(v1 + 0x38);
    if (v0 == 0) goto loc_8001DC80;
    a0 = lw(s0 + 0x74);
    S_StopSound();
    v0 = lw(s0 + 0x58);
    a1 = lw(v0 + 0x38);
    a0 = s0;
    S_StartSound();
loc_8001DC80:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_SpawnMissile() noexcept {
loc_8001DC94:
    sp -= 0x30;
    sw(s4, sp + 0x20);
    s4 = a0;
    sw(s6, sp + 0x28);
    s6 = a1;
    sw(s0, sp + 0x10);
    s0 = a2;
    a1 = 0x94;                                          // Result = 00000094
    a2 = 2;                                             // Result = 00000002
    a3 = 0;                                             // Result = 00000000
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v0 = 0x200000;                                      // Result = 00200000
    sw(ra, sp + 0x2C);
    sw(s5, sp + 0x24);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v1 = lw(s4 + 0x8);
    s1 = lw(s4);
    s2 = lw(s4 + 0x4);
    s5 = v1 + v0;
    Z_Malloc2();
    s3 = v0;
    a0 = s3;
    a1 = 0;                                             // Result = 00000000
    a2 = 0x94;                                          // Result = 00000094
    D_memset();
    v0 = s0 << 1;
    v0 += s0;
    v0 <<= 2;
    v0 -= s0;
    v0 <<= 3;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x1FC4;                                       // Result = MObjInfo_MT_PLAYER[0] (8005E03C)
    v0 += v1;
    sw(s0, s3 + 0x54);
    sw(v0, s3 + 0x58);
    sw(s1, s3);
    sw(s2, s3 + 0x4);
    v1 = lw(v0 + 0x40);
    sw(v1, s3 + 0x40);
    v1 = lw(v0 + 0x44);
    sw(v1, s3 + 0x44);
    v1 = lw(v0 + 0x54);
    sw(v1, s3 + 0x64);
    v1 = lw(v0 + 0x8);
    sw(v1, s3 + 0x68);
    v1 = lw(v0 + 0x14);
    sw(v1, s3 + 0x78);
    v1 = lw(v0 + 0x4);
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, s3 + 0x60);
    v1 = lw(v0 + 0x8);
    sw(v1, s3 + 0x5C);
    v1 = lw(v0);
    sw(v1, s3 + 0x28);
    v0 = lw(v0 + 0x4);
    a0 = s3;
    sw(v0, s3 + 0x2C);
    P_SetThingPosition();
    v0 = lw(s3 + 0xC);
    v0 = lw(v0);
    v1 = lw(s3 + 0xC);
    v0 = lw(v0);
    sw(v0, s3 + 0x38);
    v0 = lw(v1);
    v1 = lw(v0 + 0x4);
    v0 = 0x80000000;                                    // Result = 80000000
    sw(v1, s3 + 0x3C);
    if (s5 != v0) goto loc_8001DDFC;
    v0 = lw(s3 + 0x38);
    sw(v0, s3 + 0x8);
    goto loc_8001DE2C;
loc_8001DDFC:
    v0 = 0x7FFF0000;                                    // Result = 7FFF0000
    v0 |= 0xFFFF;                                       // Result = 7FFFFFFF
    if (s5 != v0) goto loc_8001DE28;
    v0 = lw(s3 + 0x58);
    v0 = lw(v0 + 0x44);
    v0 = v1 - v0;
    sw(v0, s3 + 0x8);
    goto loc_8001DE2C;
loc_8001DE28:
    sw(s5, s3 + 0x8);
loc_8001DE2C:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(s3, v0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    sw(v0, s3 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    s1 = s3;
    sw(v0, s3 + 0x10);
    at = 0x800B0000;                                    // Result = 800B0000
    sw(s3, at - 0x7160);                                // Store to: gMObjHead[4] (800A8EA0)
    v0 = lw(s1 + 0x58);
    a1 = lw(v0 + 0x10);
    if (a1 == 0) goto loc_8001DE80;
    a0 = s4;
    S_StartSound();
loc_8001DE80:
    sw(s4, s1 + 0x74);
    a0 = lw(s4);
    a1 = lw(s4 + 0x4);
    a2 = lw(s6);
    a3 = lw(s6 + 0x4);
    R_PointToAngle2();
    s2 = v0;
    v0 = lw(s6 + 0x64);
    v1 = 0x70000000;                                    // Result = 70000000
    v0 &= v1;
    if (v0 == 0) goto loc_8001DED0;
    P_Random();
    s0 = v0;
    P_Random();
    s0 -= v0;
    s0 <<= 20;
    s2 += s0;
loc_8001DED0:
    sw(s2, s1 + 0x24);
    s2 >>= 19;
    a0 = s2 << 2;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    v1 = lw(s1 + 0x58);
    v0 += a0;
    v1 = lh(v1 + 0x3E);
    v0 = lw(v0);
    mult(v1, v0);
    v0 = lo;
    sw(v0, s1 + 0x48);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += a0;
    v0 = lw(at);
    mult(v1, v0);
    v0 = lo;
    sw(v0, s1 + 0x4C);
    v1 = lw(s6);
    a0 = lw(s4);
    v0 = lw(s6 + 0x4);
    a1 = lw(s4 + 0x4);
    a0 = v1 - a0;
    a1 = v0 - a1;
    P_AproxDistance();
    v1 = lw(s1 + 0x58);
    v1 = lw(v1 + 0x3C);
    div(v0, v1);
    if (v1 != 0) goto loc_8001DF60;
    _break(0x1C00);
loc_8001DF60:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8001DF78;
    }
    if (v0 != at) goto loc_8001DF78;
    tge(zero, zero, 0x5D);
loc_8001DF78:
    v1 = lo;
    a0 = s1;
    if (i32(v1) > 0) goto loc_8001DF8C;
    v1 = 1;                                             // Result = 00000001
loc_8001DF8C:
    a3 = lw(s6 + 0x8);
    v0 = lw(s4 + 0x8);
    a3 -= v0;
    div(a3, v1);
    if (v1 != 0) goto loc_8001DFAC;
    _break(0x1C00);
loc_8001DFAC:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8001DFC4;
    }
    if (a3 != at) goto loc_8001DFC4;
    tge(zero, zero, 0x5D);
loc_8001DFC4:
    a3 = lo;
    v0 = lw(s1 + 0x48);
    v1 = lw(s1);
    v0 = u32(i32(v0) >> 1);
    v0 += v1;
    sw(v0, s1);
    a1 = lw(s1);
    v0 = lw(s1 + 0x4C);
    v1 = lw(s1 + 0x4);
    v0 = u32(i32(v0) >> 1);
    v0 += v1;
    sw(v0, s1 + 0x4);
    a2 = lw(s1 + 0x4);
    sw(a3, s1 + 0x50);
    v0 = lw(s1 + 0x50);
    v1 = lw(s1 + 0x8);
    v0 = u32(i32(v0) >> 1);
    v0 += v1;
    sw(v0, s1 + 0x8);
    P_TryMove();
    {
        const bool bJump = (v0 != 0)
        v0 = s1;
        if (bJump) goto loc_8001E0C8;
    }
    v1 = lw(s1 + 0x54);
    sw(0, s1 + 0x50);
    sw(0, s1 + 0x4C);
    sw(0, s1 + 0x48);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F94;                                       // Result = MObjInfo_MT_PLAYER[C] (8005E06C)
    at += v0;
    a1 = lw(at);
    a0 = s1;
    P_SetMObjState();
    P_Random();
    v1 = lw(s1 + 0x5C);
    v0 &= 1;
    v1 -= v0;
    sw(v1, s1 + 0x5C);
    if (i32(v1) > 0) goto loc_8001E07C;
    v0 = 1;                                             // Result = 00000001
    sw(v0, s1 + 0x5C);
loc_8001E07C:
    a0 = 0xFFFE0000;                                    // Result = FFFE0000
    a0 |= 0xFFFF;                                       // Result = FFFEFFFF
    v0 = lw(s1 + 0x64);
    v1 = lw(s1 + 0x58);
    v0 &= a0;
    sw(v0, s1 + 0x64);
    v0 = lw(v1 + 0x38);
    {
        const bool bJump = (v0 == 0)
        v0 = s1;
        if (bJump) goto loc_8001E0C8;
    }
    a0 = lw(s1 + 0x74);
    S_StopSound();
    v0 = lw(s1 + 0x58);
    a1 = lw(v0 + 0x38);
    a0 = s1;
    S_StartSound();
    v0 = s1;
loc_8001E0C8:
    ra = lw(sp + 0x2C);
    s6 = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x30;
    return;
}

void P_SpawnPlayerMissile() noexcept {
loc_8001E0F4:
    sp -= 0x38;
    sw(s3, sp + 0x1C);
    s3 = a0;
    sw(s5, sp + 0x24);
    s5 = a1;
    sw(ra, sp + 0x30);
    sw(s7, sp + 0x2C);
    sw(s6, sp + 0x28);
    sw(s4, sp + 0x20);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    s4 = lw(s3 + 0x24);
    a2 = 0x4000000;                                     // Result = 04000000
    a1 = s4;
    P_AimLineAttack();
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE8);                               // Load from: gpLineTarget (80077EE8)
    s7 = v0;
    if (v1 != 0) goto loc_8001E1A8;
    v0 = 0x4000000;                                     // Result = 04000000
    s4 += v0;
    a0 = s3;
    a1 = s4;
    a2 = 0x4000000;                                     // Result = 04000000
    P_AimLineAttack();
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE8);                               // Load from: gpLineTarget (80077EE8)
    s7 = v0;
    if (v1 != 0) goto loc_8001E1A8;
    v0 = 0xF8000000;                                    // Result = F8000000
    s4 += v0;
    a0 = s3;
    a1 = s4;
    a2 = 0x4000000;                                     // Result = 04000000
    P_AimLineAttack();
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE8);                               // Load from: gpLineTarget (80077EE8)
    s7 = v0;
    if (v1 != 0) goto loc_8001E1A8;
    s4 = lw(s3 + 0x24);
    s7 = 0;                                             // Result = 00000000
loc_8001E1A8:
    a1 = 0x94;                                          // Result = 00000094
    a2 = 2;                                             // Result = 00000002
    v0 = 0x200000;                                      // Result = 00200000
    a3 = 0;                                             // Result = 00000000
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v1 = lw(s3 + 0x8);
    s0 = lw(s3);
    s1 = lw(s3 + 0x4);
    s6 = v1 + v0;
    Z_Malloc2();
    s2 = v0;
    a0 = s2;
    a1 = 0;                                             // Result = 00000000
    a2 = 0x94;                                          // Result = 00000094
    D_memset();
    v0 = s5 << 1;
    v0 += s5;
    v0 <<= 2;
    v0 -= s5;
    v0 <<= 3;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x1FC4;                                       // Result = MObjInfo_MT_PLAYER[0] (8005E03C)
    v0 += v1;
    sw(s5, s2 + 0x54);
    sw(v0, s2 + 0x58);
    sw(s0, s2);
    sw(s1, s2 + 0x4);
    v1 = lw(v0 + 0x40);
    sw(v1, s2 + 0x40);
    v1 = lw(v0 + 0x44);
    sw(v1, s2 + 0x44);
    v1 = lw(v0 + 0x54);
    sw(v1, s2 + 0x64);
    v1 = lw(v0 + 0x8);
    sw(v1, s2 + 0x68);
    v1 = lw(v0 + 0x14);
    sw(v1, s2 + 0x78);
    v1 = lw(v0 + 0x4);
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, s2 + 0x60);
    v1 = lw(v0 + 0x8);
    sw(v1, s2 + 0x5C);
    v1 = lw(v0);
    sw(v1, s2 + 0x28);
    v0 = lw(v0 + 0x4);
    a0 = s2;
    sw(v0, s2 + 0x2C);
    P_SetThingPosition();
    v0 = lw(s2 + 0xC);
    v0 = lw(v0);
    v1 = lw(s2 + 0xC);
    v0 = lw(v0);
    sw(v0, s2 + 0x38);
    v0 = lw(v1);
    v1 = lw(v0 + 0x4);
    v0 = 0x80000000;                                    // Result = 80000000
    sw(v1, s2 + 0x3C);
    if (s6 != v0) goto loc_8001E2E0;
    v0 = lw(s2 + 0x38);
    sw(v0, s2 + 0x8);
    goto loc_8001E310;
loc_8001E2E0:
    v0 = 0x7FFF0000;                                    // Result = 7FFF0000
    v0 |= 0xFFFF;                                       // Result = 7FFFFFFF
    if (s6 != v0) goto loc_8001E30C;
    v0 = lw(s2 + 0x58);
    v0 = lw(v0 + 0x44);
    v0 = v1 - v0;
    sw(v0, s2 + 0x8);
    goto loc_8001E310;
loc_8001E30C:
    sw(s6, s2 + 0x8);
loc_8001E310:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(s2, v0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    sw(v0, s2 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7160);                               // Load from: gMObjHead[4] (800A8EA0)
    sw(v0, s2 + 0x10);
    at = 0x800B0000;                                    // Result = 800B0000
    sw(s2, at - 0x7160);                                // Store to: gMObjHead[4] (800A8EA0)
    v0 = lw(s2 + 0x58);
    a1 = lw(v0 + 0x10);
    v1 = s4 >> 19;
    if (a1 == 0) goto loc_8001E368;
    a0 = s3;
    S_StartSound();
    v1 = s4 >> 19;
loc_8001E368:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    a0 = lw(s2 + 0x58);
    v1 <<= 2;
    sw(s3, s2 + 0x74);
    sw(s4, s2 + 0x24);
    v0 += v1;
    a0 = lh(a0 + 0x3E);
    v0 = lw(v0);
    mult(a0, v0);
    v0 = lo;
    sw(v0, s2 + 0x48);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += v1;
    v0 = lw(at);
    mult(a0, v0);
    v1 = lw(s2);
    v0 = lw(s2 + 0x48);
    a2 = lo;
    v0 = u32(i32(v0) >> 1);
    v0 += v1;
    mult(a0, s7);
    sw(v0, s2);
    a1 = lw(s2);
    v1 = lw(s2 + 0x4);
    sw(a2, s2 + 0x4C);
    v0 = lw(s2 + 0x4C);
    a0 = s2;
    v0 = u32(i32(v0) >> 1);
    v0 += v1;
    sw(v0, s2 + 0x4);
    a2 = lw(s2 + 0x4);
    v0 = lo;
    sw(v0, s2 + 0x50);
    v0 = lw(s2 + 0x50);
    v1 = lw(s2 + 0x8);
    v0 = u32(i32(v0) >> 1);
    v0 += v1;
    sw(v0, s2 + 0x8);
    P_TryMove();
    if (v0 != 0) goto loc_8001E4C4;
    v1 = lw(s2 + 0x54);
    sw(0, s2 + 0x50);
    sw(0, s2 + 0x4C);
    sw(0, s2 + 0x48);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F94;                                       // Result = MObjInfo_MT_PLAYER[C] (8005E06C)
    at += v0;
    a1 = lw(at);
    a0 = s2;
    P_SetMObjState();
    P_Random();
    v1 = lw(s2 + 0x5C);
    v0 &= 1;
    v1 -= v0;
    sw(v1, s2 + 0x5C);
    if (i32(v1) > 0) goto loc_8001E47C;
    v0 = 1;                                             // Result = 00000001
    sw(v0, s2 + 0x5C);
loc_8001E47C:
    a0 = 0xFFFE0000;                                    // Result = FFFE0000
    a0 |= 0xFFFF;                                       // Result = FFFEFFFF
    v0 = lw(s2 + 0x64);
    v1 = lw(s2 + 0x58);
    v0 &= a0;
    sw(v0, s2 + 0x64);
    v0 = lw(v1 + 0x38);
    if (v0 == 0) goto loc_8001E4C4;
    a0 = lw(s2 + 0x74);
    S_StopSound();
    v0 = lw(s2 + 0x58);
    a1 = lw(v0 + 0x38);
    a0 = s2;
    S_StartSound();
loc_8001E4C4:
    ra = lw(sp + 0x30);
    s7 = lw(sp + 0x2C);
    s6 = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x38;
    return;
}

void P_TryMove2() noexcept {
loc_8001E4F4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F74);                               // Load from: gpTryMoveThing (8007808C)
    sp -= 0x20;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v1 = lw(v0);
    v0 = lw(v0 + 0x4);
    sw(0, gp + 0xB5C);                                  // Store to: gbTryMove2 (8007813C)
    sw(0, gp + 0xA9C);                                  // Store to: gbFloatOk (8007807C)
    sw(v1, gp + 0xC60);                                 // Store to: gOldX (80078240)
    sw(v0, gp + 0xC64);                                 // Store to: gOldY (80078244)
    PM_CheckPosition();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F18);                               // Load from: gbCheckPosOnly (800780E8)
    if (v0 == 0) goto loc_8001E554;
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7F18);                                 // Store to: gbCheckPosOnly (800780E8)
    goto loc_8001E704;
loc_8001E554:
    v0 = lw(gp + 0xB5C);                                // Load from: gbTryMove2 (8007813C)
    if (v0 == 0) goto loc_8001E704;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7F74);                               // Load from: gpTryMoveThing (8007808C)
    v0 = lw(a0 + 0x64);
    v0 &= 0x1000;
    if (v0 != 0) goto loc_8001E608;
    a3 = lw(gp + 0x924);                                // Load from: gTmCeilingZ (80077F04)
    a2 = lw(gp + 0xC08);                                // Load from: gTmFloorZ (800781E8)
    v1 = lw(a0 + 0x44);
    sw(0, gp + 0xB5C);                                  // Store to: gbTryMove2 (8007813C)
    v0 = a3 - a2;
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001E704;
    }
    t0 = lw(a0 + 0x64);
    sw(v0, gp + 0xA9C);                                 // Store to: gbFloatOk (8007807C)
    v0 = t0 & 0x8000;
    {
        const bool bJump = (v0 != 0)
        v0 = t0 & 0x4400;
        if (bJump) goto loc_8001E5E0;
    }
    a1 = lw(a0 + 0x8);
    v1 = lw(a0 + 0x44);
    v0 = a3 - a1;
    v0 = (i32(v0) < i32(v1));
    v1 = a2 - a1;
    if (v0 != 0) goto loc_8001E704;
    v0 = 0x180000;                                      // Result = 00180000
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = t0 & 0x4400;
        if (bJump) goto loc_8001E704;
    }
loc_8001E5E0:
    {
        const bool bJump = (v0 != 0)
        v0 = 0x180000;                                  // Result = 00180000
        if (bJump) goto loc_8001E600;
    }
    v1 = lw(gp + 0x95C);                                // Load from: gTmDropoffZ (80077F3C)
    v1 = a2 - v1;
    v0 = (i32(v0) < i32(v1));
    if (v0 != 0) goto loc_8001E704;
loc_8001E600:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7F74);                               // Load from: gpTryMoveThing (8007808C)
loc_8001E608:
    P_UnsetThingPosition2();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7F74);                               // Load from: gpTryMoveThing (8007808C)
    v0 = lw(gp + 0xC08);                                // Load from: gTmFloorZ (800781E8)
    v1 = lw(gp + 0x924);                                // Load from: gTmCeilingZ (80077F04)
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7EB0);                               // Load from: gTryMoveX (80078150)
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7EAC);                               // Load from: gTryMoveY (80078154)
    sw(v0, a0 + 0x38);
    sw(v1, a0 + 0x3C);
    sw(a1, a0);
    sw(a2, a0 + 0x4);
    P_SetThingPosition2();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F74);                               // Load from: gpTryMoveThing (8007808C)
    v0 = lw(v1 + 0x80);
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001E700;
    }
    v0 = lw(v1 + 0x64);
    v0 &= 0x9000;
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001E700;
    }
    v0 = lw(gp + 0xAE0);                                // Load from: gNumCrossCheckLines (800780C0)
    v1 = -1;                                            // Result = FFFFFFFF
    v0--;
    sw(v0, gp + 0xAE0);                                 // Store to: gNumCrossCheckLines (800780C0)
    {
        const bool bJump = (v0 == v1)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001E700;
    }
    s2 = 0x800B0000;                                    // Result = 800B0000
    s2 -= 0x70D8;                                       // Result = gpCrossCheckLines[0] (800A8F28)
loc_8001E694:
    v1 = lw(gp + 0xAE0);                                // Load from: gNumCrossCheckLines (800780C0)
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F74);                               // Load from: gpTryMoveThing (8007808C)
    v1 <<= 2;
    v1 += s2;
    a0 = lw(v0);
    s1 = lw(v1);
    a1 = lw(v0 + 0x4);
    a2 = s1;
    P_PointOnLineSide();
    a2 = s1;
    a0 = lw(gp + 0xC60);                                // Load from: gOldX (80078240)
    a1 = lw(gp + 0xC64);                                // Load from: gOldY (80078244)
    s0 = v0;
    P_PointOnLineSide();
    if (s0 == v0) goto loc_8001E6E8;
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7F74);                               // Load from: gpTryMoveThing (8007808C)
    a0 = s1;
    P_CrossSpecialLine();
loc_8001E6E8:
    v1 = lw(gp + 0xAE0);                                // Load from: gNumCrossCheckLines (800780C0)
    v0 = -1;                                            // Result = FFFFFFFF
    v1--;
    sw(v1, gp + 0xAE0);                                 // Store to: gNumCrossCheckLines (800780C0)
    {
        const bool bJump = (v1 != v0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001E694;
    }
loc_8001E700:
    sw(v0, gp + 0xB5C);                                 // Store to: gbTryMove2 (8007813C)
loc_8001E704:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void UNKNOWN_DoomFunc3() noexcept {
    v1 = lw(a2);
    v0 = lw(v1);
    a0 -= v0;
    v0 = lh(a2 + 0xE);
    a0 = u32(i32(a0) >> 16);
    mult(v0, a0);
    v0 = lw(v1 + 0x4);
    a1 -= v0;
    v1 = lo;
    v0 = lh(a2 + 0xA);
    a1 = u32(i32(a1) >> 16);
    mult(a1, v0);
    v0 = lo;
    v0 = (i32(v0) < i32(v1));
    v0 ^= 1;
    return;
}

void P_UnsetThingPosition2() noexcept {
loc_8001E76C:
    v1 = lw(a0 + 0x1C);
    if (v1 == 0) goto loc_8001E788;
    v0 = lw(a0 + 0x20);
    sw(v0, v1 + 0x20);
loc_8001E788:
    v1 = lw(a0 + 0x20);
    if (v1 == 0) goto loc_8001E7A4;
    v0 = lw(a0 + 0x1C);
    sw(v0, v1 + 0x1C);
    goto loc_8001E7BC;
loc_8001E7A4:
    v0 = lw(a0 + 0xC);
    v1 = lw(v0);
    v0 = lw(a0 + 0x1C);
    sw(v0, v1 + 0x4C);
loc_8001E7BC:
    v0 = lw(a0 + 0x64);
    v0 &= 0x10;
    if (v0 != 0) goto loc_8001E860;
    v1 = lw(a0 + 0x30);
    if (v1 == 0) goto loc_8001E7EC;
    v0 = lw(a0 + 0x34);
    sw(v0, v1 + 0x34);
loc_8001E7EC:
    v1 = lw(a0 + 0x34);
    if (v1 == 0) goto loc_8001E808;
    v0 = lw(a0 + 0x30);
    sw(v0, v1 + 0x30);
    goto loc_8001E860;
loc_8001E808:
    v0 = lw(a0 + 0x4);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v0 -= v1;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = u32(i32(v0) >> 23);
    mult(v0, v1);
    v1 = lw(a0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    a0 = lw(a0 + 0x30);
    v1 -= v0;
    v1 = u32(i32(v1) >> 23);
    v0 = lo;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EDC);                               // Load from: gppBlockLinks (80077EDC)
    v0 <<= 2;
    v0 += v1;
    sw(a0, v0);
loc_8001E860:
    return;
}

void P_SetThingPosition2() noexcept {
loc_8001E868:
    a1 = a0;
    v0 = lw(a1 + 0x64);
    v1 = lw(gp + 0xCDC);                                // Load from: gpNewSubsec (800782BC)
    v0 &= 8;
    sw(v1, a1 + 0xC);
    if (v0 != 0) goto loc_8001E8AC;
    v1 = lw(v1);
    sw(0, a1 + 0x20);
    v0 = lw(v1 + 0x4C);
    sw(v0, a1 + 0x1C);
    v0 = lw(v1 + 0x4C);
    if (v0 == 0) goto loc_8001E8A8;
    sw(a1, v0 + 0x20);
loc_8001E8A8:
    sw(a1, v1 + 0x4C);
loc_8001E8AC:
    v0 = lw(a1 + 0x64);
    v0 &= 0x10;
    if (v0 != 0) goto loc_8001E970;
    v1 = lw(a1);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v1 -= v0;
    v0 = lw(a1 + 0x4);
    v1 = u32(i32(v1) >> 23);
    v0 -= a0;
    a0 = u32(i32(v0) >> 23);
    if (i32(v1) < 0) goto loc_8001E968;
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = (i32(v1) < i32(a2));
    if (v0 == 0) goto loc_8001E968;
    if (i32(a0) < 0) goto loc_8001E968;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    v0 = (i32(a0) < i32(v0));
    mult(a0, a2);
    if (v0 == 0) goto loc_8001E968;
    sw(0, a1 + 0x34);
    v0 = lo;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EDC);                               // Load from: gppBlockLinks (80077EDC)
    v0 <<= 2;
    v1 += v0;
    v0 = lw(v1);
    sw(v0, a1 + 0x30);
    v0 = lw(v1);
    if (v0 == 0) goto loc_8001E960;
    sw(a1, v0 + 0x34);
loc_8001E960:
    sw(a1, v1);
    goto loc_8001E970;
loc_8001E968:
    sw(0, a1 + 0x34);
    sw(0, a1 + 0x30);
loc_8001E970:
    return;
}

void PM_CheckPosition() noexcept {
loc_8001E978:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F74);                               // Load from: gpTryMoveThing (8007808C)
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7EAC);                               // Load from: gTryMoveY (80078154)
    sp -= 0x28;
    sw(s0, sp + 0x10);
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x7C10;                                       // Result = gtTmbBox[0] (80097C10)
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 = lw(v1 + 0x40);
    a2 = lw(v1 + 0x64);
    v0 += a1;
    sw(v0, s0);                                         // Store to: gtTmbBox[0] (80097C10)
    v0 = lw(v1 + 0x40);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7EB0);                               // Load from: gTryMoveX (80078150)
    v0 = a1 - v0;
    at = 0x80090000;                                    // Result = 80090000
    sw(v0, at + 0x7C14);                                // Store to: gtTmbBox[1] (80097C14)
    v0 = lw(v1 + 0x40);
    v0 += a0;
    at = 0x80090000;                                    // Result = 80090000
    sw(v0, at + 0x7C1C);                                // Store to: gtTmbBox[3] (80097C1C)
    v0 = lw(v1 + 0x40);
    sw(a2, gp + 0xA98);                                 // Store to: gTmFlags (80078078)
    v0 = a0 - v0;
    at = 0x80090000;                                    // Result = 80090000
    sw(v0, at + 0x7C18);                                // Store to: gtTmbBox[2] (80097C18)
    R_PointInSubsector();
    v1 = lw(v0);
    sw(v0, gp + 0xCDC);                                 // Store to: gpNewSubsec (800782BC)
    v0 = lw(v0);
    sw(0, gp + 0xAE0);                                  // Store to: gNumCrossCheckLines (800780C0)
    sw(0, gp + 0xCE4);                                  // Store to: gpMoveThing (800782C4)
    sw(0, gp + 0xC68);                                  // Store to: gpBlockLine (80078248)
    a0 = lw(v1);
    a1 = lw(v0 + 0x4);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    v1 = lw(gp + 0xA98);                                // Load from: gTmFlags (80078078)
    v0++;
    v1 &= 0x1000;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7BC4);                                // Store to: gValidCount (80077BC4)
    sw(a0, gp + 0x95C);                                 // Store to: gTmDropoffZ (80077F3C)
    sw(a0, gp + 0xC08);                                 // Store to: gTmFloorZ (800781E8)
    sw(a1, gp + 0x924);                                 // Store to: gTmCeilingZ (80077F04)
    {
        const bool bJump = (v1 == 0)
        v1 = 0xFFE00000;                                // Result = FFE00000
        if (bJump) goto loc_8001EA68;
    }
    v0 = 1;                                             // Result = 00000001
    goto loc_8001EC40;
loc_8001EA5C:
    sw(0, gp + 0xB5C);                                  // Store to: gbTryMove2 (8007813C)
    goto loc_8001EC44;
loc_8001EA68:
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7C18);                               // Load from: gtTmbBox[2] (80097C18)
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    a0 = 0x80090000;                                    // Result = 80090000
    a0 = lw(a0 + 0x7C1C);                               // Load from: gtTmbBox[3] (80097C1C)
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v0 -= a1;
    v0 += v1;
    a3 = u32(i32(v0) >> 23);
    a0 -= a1;
    a1 = 0x200000;                                      // Result = 00200000
    a0 += a1;
    s3 = u32(i32(a0) >> 23);
    v1 = 0x80090000;                                    // Result = 80090000
    v1 = lw(v1 + 0x7C14);                               // Load from: gtTmbBox[1] (80097C14)
    v0 = lw(s0);                                        // Load from: gtTmbBox[0] (80097C10)
    v1 -= a2;
    v1 -= a1;
    s4 = u32(i32(v1) >> 23);
    v0 -= a2;
    v0 += a1;
    s2 = u32(i32(v0) >> 23);
    if (i32(a3) >= 0) goto loc_8001EAD0;
    a3 = 0;                                             // Result = 00000000
loc_8001EAD0:
    if (i32(s4) >= 0) goto loc_8001EADC;
    s4 = 0;                                             // Result = 00000000
loc_8001EADC:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = (i32(s3) < i32(v1));
    if (v0 != 0) goto loc_8001EAF8;
    s3 = v1 - 1;
loc_8001EAF8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    v0 = (i32(s2) < i32(v1));
    s1 = a3;
    if (v0 != 0) goto loc_8001EB14;
    s2 = v1 - 1;
loc_8001EB14:
    v0 = (i32(s3) < i32(s1));
    if (v0 != 0) goto loc_8001EB5C;
    v0 = (i32(s2) < i32(s4));
loc_8001EB24:
    s0 = s4;
    if (v0 != 0) goto loc_8001EB4C;
    a0 = s1;
loc_8001EB30:
    a1 = s0;
    PM_CheckThings();
    s0++;
    if (v0 == 0) goto loc_8001EA5C;
    v0 = (i32(s2) < i32(s0));
    a0 = s1;
    if (v0 == 0) goto loc_8001EB30;
loc_8001EB4C:
    s1++;
    v0 = (i32(s3) < i32(s1));
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(s2) < i32(s4));
        if (bJump) goto loc_8001EB24;
    }
loc_8001EB5C:
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7C18);                               // Load from: gtTmbBox[2] (80097C18)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    v1 = 0x80090000;                                    // Result = 80090000
    v1 = lw(v1 + 0x7C1C);                               // Load from: gtTmbBox[3] (80097C1C)
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v0 -= a0;
    a3 = u32(i32(v0) >> 23);
    v1 -= a0;
    s3 = u32(i32(v1) >> 23);
    a0 = 0x80090000;                                    // Result = 80090000
    a0 = lw(a0 + 0x7C14);                               // Load from: gtTmbBox[1] (80097C14)
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7C10);                               // Load from: gtTmbBox[0] (80097C10)
    a0 -= a1;
    s4 = u32(i32(a0) >> 23);
    v0 -= a1;
    s2 = u32(i32(v0) >> 23);
    if (i32(a3) >= 0) goto loc_8001EBB4;
    a3 = 0;                                             // Result = 00000000
loc_8001EBB4:
    if (i32(s4) >= 0) goto loc_8001EBC0;
    s4 = 0;                                             // Result = 00000000
loc_8001EBC0:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = (i32(s3) < i32(v1));
    if (v0 != 0) goto loc_8001EBDC;
    s3 = v1 - 1;
loc_8001EBDC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    v0 = (i32(s2) < i32(v1));
    s1 = a3;
    if (v0 != 0) goto loc_8001EBF8;
    s2 = v1 - 1;
loc_8001EBF8:
    v0 = (i32(s3) < i32(s1));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001EC40;
    }
loc_8001EC04:
    v0 = (i32(s2) < i32(s4));
    s0 = s4;
    if (v0 != 0) goto loc_8001EC30;
    a0 = s1;
loc_8001EC14:
    a1 = s0;
    PM_CheckLines();
    s0++;
    if (v0 == 0) goto loc_8001EA5C;
    v0 = (i32(s2) < i32(s0));
    a0 = s1;
    if (v0 == 0) goto loc_8001EC14;
loc_8001EC30:
    s1++;
    v0 = (i32(s3) < i32(s1));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001EC04;
    }
loc_8001EC40:
    sw(v0, gp + 0xB5C);                                 // Store to: gbTryMove2 (8007813C)
loc_8001EC44:
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void PM_BoxCrossLine() noexcept {
    a2 = a0;
    a1 = 0x80090000;                                    // Result = 80090000
    a1 = lw(a1 + 0x7C1C);                               // Load from: gtTmbBox[3] (80097C1C)
    v0 = lw(a2 + 0x2C);
    v0 = (i32(v0) < i32(a1));
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8001ED6C;
    }
    a0 = 0x80090000;                                    // Result = 80090000
    a0 = lw(a0 + 0x7C18);                               // Load from: gtTmbBox[2] (80097C18)
    v0 = lw(a2 + 0x30);
    v0 = (i32(a0) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8001ED6C;
    }
    a3 = 0x80090000;                                    // Result = 80090000
    a3 = lw(a3 + 0x7C10);                               // Load from: gtTmbBox[0] (80097C10)
    v0 = lw(a2 + 0x28);
    v0 = (i32(v0) < i32(a3));
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8001ED6C;
    }
    v1 = 0x80090000;                                    // Result = 80090000
    v1 = lw(v1 + 0x7C14);                               // Load from: gtTmbBox[1] (80097C14)
    v0 = lw(a2 + 0x24);
    v0 = (i32(v1) < i32(v0));
    t2 = v1;
    if (v0 != 0) goto loc_8001ECE4;
    v0 = 0;                                             // Result = 00000000
    goto loc_8001ED6C;
loc_8001ECE4:
    v1 = lw(a2 + 0x34);
    v0 = 2;                                             // Result = 00000002
    t0 = a3;
    if (v1 != v0) goto loc_8001ED00;
    v0 = a0;
    t1 = a1;
    goto loc_8001ED08;
loc_8001ED00:
    v0 = a1;
    t1 = a0;
loc_8001ED08:
    v1 = lw(a2);
    a0 = lw(v1);
    a3 = lh(a2 + 0xE);
    v0 -= a0;
    v0 = u32(i32(v0) >> 16);
    mult(a3, v0);
    a2 = lh(a2 + 0xA);
    v1 = lw(v1 + 0x4);
    a1 = lo;
    v0 = t0 - v1;
    v0 = u32(i32(v0) >> 16);
    mult(v0, a2);
    t0 = lo;
    a0 = t1 - a0;
    a0 = u32(i32(a0) >> 16);
    mult(a3, a0);
    v0 = lo;
    v1 = t2 - v1;
    v1 = u32(i32(v1) >> 16);
    mult(v1, a2);
    a1 = (i32(a1) < i32(t0));
    v1 = lo;
    v0 = (i32(v0) < i32(v1));
    v0 ^= a1;
loc_8001ED6C:
    return;
}

void PIT_CheckLine() noexcept {
loc_8001ED74:
    v0 = lw(a0 + 0x3C);
    v1 = 0x10000;                                       // Result = 00010000
    if (v0 == 0) goto loc_8001EE04;
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7F74);                               // Load from: gpTryMoveThing (8007808C)
    v0 = lw(a1 + 0x64);
    v0 &= v1;
    if (v0 != 0) goto loc_8001EDD0;
    v1 = lw(a0 + 0x10);
    v0 = v1 & 1;
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8001EEBC;
    }
    v0 = lw(a1 + 0x80);
    {
        const bool bJump = (v0 != 0)
        v0 = v1 & 2;
        if (bJump) goto loc_8001EDD0;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8001EEBC;
    }
loc_8001EDD0:
    v0 = lw(a0 + 0x38);
    a1 = lw(v0 + 0x4);
    t0 = lw(v0);
    v0 = lw(a0 + 0x3C);
    if (a1 == t0) goto loc_8001EE00;
    v1 = lw(v0 + 0x4);
    a2 = lw(v0);
    a3 = v1;
    if (v1 != a2) goto loc_8001EE0C;
loc_8001EE00:
    sw(a0, gp + 0xC68);                                 // Store to: gpBlockLine (80078248)
loc_8001EE04:
    v0 = 0;                                             // Result = 00000000
    goto loc_8001EEBC;
loc_8001EE0C:
    v0 = (i32(a1) < i32(a3));
    v1 = t0;
    if (v0 == 0) goto loc_8001EE1C;
    a3 = a1;
loc_8001EE1C:
    a1 = a2;
    v0 = (i32(a1) < i32(v1));
    if (v0 != 0) goto loc_8001EE34;
    v1 = a2;
    a1 = t0;
loc_8001EE34:
    v0 = lw(gp + 0x924);                                // Load from: gTmCeilingZ (80077F04)
    v0 = (i32(a3) < i32(v0));
    if (v0 == 0) goto loc_8001EE4C;
    sw(a3, gp + 0x924);                                 // Store to: gTmCeilingZ (80077F04)
loc_8001EE4C:
    v0 = lw(gp + 0xC08);                                // Load from: gTmFloorZ (800781E8)
    v0 = (i32(v0) < i32(v1));
    if (v0 == 0) goto loc_8001EE64;
    sw(v1, gp + 0xC08);                                 // Store to: gTmFloorZ (800781E8)
loc_8001EE64:
    v0 = lw(gp + 0x95C);                                // Load from: gTmDropoffZ (80077F3C)
    v0 = (i32(a1) < i32(v0));
    if (v0 == 0) goto loc_8001EE7C;
    sw(a1, gp + 0x95C);                                 // Store to: gTmDropoffZ (80077F3C)
loc_8001EE7C:
    v0 = lw(a0 + 0x14);
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001EEBC;
    }
    v1 = lw(gp + 0xAE0);                                // Load from: gNumCrossCheckLines (800780C0)
    v0 = (i32(v1) < 8);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 << 2;
        if (bJump) goto loc_8001EEB8;
    }
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x70D8;                                       // Result = gpCrossCheckLines[0] (800A8F28)
    at += v0;
    sw(a0, at);
    v0 = v1 + 1;
    sw(v0, gp + 0xAE0);                                 // Store to: gNumCrossCheckLines (800780C0)
loc_8001EEB8:
    v0 = 1;                                             // Result = 00000001
loc_8001EEBC:
    return;
}

void PIT_CheckThing() noexcept {
loc_8001EEC4:
    a2 = a0;
    t0 = lw(a2 + 0x64);
    v0 = t0 & 7;
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001F020;
    }
    a3 = 0x80080000;                                    // Result = 80080000
    a3 = lw(a3 - 0x7F74);                               // Load from: gpTryMoveThing (8007808C)
    a1 = lw(a2 + 0x40);
    a0 = lw(a2);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB0);                               // Load from: gTryMoveX (80078150)
    v1 = lw(a3 + 0x40);
    v0 = a0 - v0;
    a1 += v1;
    if (i32(v0) >= 0) goto loc_8001EF08;
    v0 = -v0;
loc_8001EF08:
    v0 = (i32(v0) < i32(a1));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001F020;
    }
    v1 = lw(a2 + 0x4);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EAC);                               // Load from: gTryMoveY (80078154)
    v0 = v1 - v0;
    if (i32(v0) >= 0) goto loc_8001EF34;
    v0 = -v0;
loc_8001EF34:
    v0 = (i32(v0) < i32(a1));
    if (v0 == 0) goto loc_8001F004;
    v0 = 0x1000000;                                     // Result = 01000000
    if (a2 == a3) goto loc_8001F004;
    v1 = lw(a3 + 0x64);
    v0 &= v1;
    {
        const bool bJump = (v0 != 0)
        v0 = 0x10000;                                   // Result = 00010000
        if (bJump) goto loc_8001EFD8;
    }
    v0 &= v1;
    {
        const bool bJump = (v0 == 0)
        v0 = t0 & 1;
        if (bJump) goto loc_8001EFE4;
    }
    a0 = lw(a2 + 0x8);
    v0 = lw(a2 + 0x44);
    v1 = lw(a3 + 0x8);
    v0 += a0;
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001F020;
    }
    v0 = lw(a3 + 0x44);
    v0 += v1;
    v0 = (i32(v0) < i32(a0));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8001F020;
    }
    v1 = lw(a3 + 0x74);
    v0 = lw(a2 + 0x54);
    a0 = lw(v1 + 0x54);
    if (a0 != v0) goto loc_8001EFC4;
    if (a2 == v1) goto loc_8001F004;
    v0 = 0;                                             // Result = 00000000
    if (a0 != 0) goto loc_8001F020;
loc_8001EFC4:
    v1 = lw(a2 + 0x64);
    v0 = v1 & 4;
    {
        const bool bJump = (v0 == 0)
        v0 = v1 >> 1;
        if (bJump) goto loc_8001F018;
    }
loc_8001EFD8:
    sw(a2, gp + 0xCE4);                                 // Store to: gpMoveThing (800782C4)
    v0 = 0;                                             // Result = 00000000
    goto loc_8001F020;
loc_8001EFE4:
    if (v0 == 0) goto loc_8001F00C;
    v0 = lw(gp + 0xA98);                                // Load from: gTmFlags (80078078)
    v0 &= 0x800;
    if (v0 == 0) goto loc_8001F00C;
    sw(a2, gp + 0xCE4);                                 // Store to: gpMoveThing (800782C4)
loc_8001F004:
    v0 = 1;                                             // Result = 00000001
    goto loc_8001F020;
loc_8001F00C:
    v0 = lw(a2 + 0x64);
    v0 >>= 1;
loc_8001F018:
    v0 ^= 1;
    v0 &= 1;
loc_8001F020:
    return;
}

void PM_CheckLines() noexcept {
loc_8001F028:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    mult(a1, v0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EC0);                               // Load from: gpBlockmap (80078140)
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s0, sp + 0x20);
    v0 = lo;
    v0 += a0;
    v0 <<= 1;
    v0 += v1;
    v0 = lh(v0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F3C);                               // Load from: gpBlockmapLump (800780C4)
    v0 <<= 1;
    s0 = v0 + v1;
    goto loc_8001F1DC;
loc_8001F074:
    v1 = u32(i32(v1) >> 16);
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB0);                               // Load from: gpLines (80077EB0)
    v0 <<= 2;
    t0 = v0 + v1;
    v0 = lw(t0 + 0x40);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    if (v0 == v1) goto loc_8001F1D8;
    sw(v1, t0 + 0x40);
    a2 = 0x80090000;                                    // Result = 80090000
    a2 = lw(a2 + 0x7C1C);                               // Load from: gtTmbBox[3] (80097C1C)
    v0 = lw(t0 + 0x2C);
    v0 = (i32(v0) < i32(a2));
    a1 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8001F1B8;
    a1 = 0x80090000;                                    // Result = 80090000
    a1 = lw(a1 + 0x7C18);                               // Load from: gtTmbBox[2] (80097C18)
    v0 = lw(t0 + 0x30);
    v0 = (i32(a1) < i32(v0));
    if (v0 == 0) goto loc_8001F124;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 = lw(v1 + 0x7C10);                               // Load from: gtTmbBox[0] (80097C10)
    v0 = lw(t0 + 0x28);
    v0 = (i32(v0) < i32(v1));
    if (v0 == 0) goto loc_8001F124;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 = lw(a0 + 0x7C14);                               // Load from: gtTmbBox[1] (80097C14)
    v0 = lw(t0 + 0x24);
    v0 = (i32(a0) < i32(v0));
    t2 = v1;
    if (v0 != 0) goto loc_8001F12C;
loc_8001F124:
    a1 = 0;                                             // Result = 00000000
    goto loc_8001F1B8;
loc_8001F12C:
    v1 = lw(t0 + 0x34);
    v0 = 2;                                             // Result = 00000002
    t3 = a0;
    if (v1 != v0) goto loc_8001F148;
    v0 = a1;
    t1 = a2;
    goto loc_8001F150;
loc_8001F148:
    v0 = a2;
    t1 = a1;
loc_8001F150:
    a0 = lw(t0);
    v1 = lw(a0);
    a3 = lh(t0 + 0xE);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    mult(a3, v0);
    a2 = lh(t0 + 0xA);
    a0 = lw(a0 + 0x4);
    a1 = lo;
    v0 = t2 - a0;
    v0 = u32(i32(v0) >> 16);
    mult(v0, a2);
    v0 = lo;
    v1 = t1 - v1;
    v1 = u32(i32(v1) >> 16);
    mult(a3, v1);
    v1 = lo;
    a0 = t3 - a0;
    a0 = u32(i32(a0) >> 16);
    mult(a0, a2);
    a1 = (i32(a1) < i32(v0));
    v0 = lo;
    v1 = (i32(v1) < i32(v0));
    a1 ^= v1;
    a1 = (a1 > 0);
loc_8001F1B8:
    if (a1 == 0) goto loc_8001F1D8;
    a0 = t0;
    PIT_CheckLine();
    s0 += 2;
    if (v0 != 0) goto loc_8001F1DC;
    v0 = 0;                                             // Result = 00000000
    goto loc_8001F1F4;
loc_8001F1D8:
    s0 += 2;
loc_8001F1DC:
    v0 = -1;                                            // Result = FFFFFFFF
    v1 = lh(s0);
    a0 = lhu(s0);
    {
        const bool bJump = (v1 != v0)
        v1 = a0 << 16;
        if (bJump) goto loc_8001F074;
    }
    v0 = 1;                                             // Result = 00000001
loc_8001F1F4:
    ra = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x28;
    return;
}

void PM_CheckThings() noexcept {
loc_8001F208:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    mult(a1, v0);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EDC);                               // Load from: gppBlockLinks (80077EDC)
    sp -= 0x18;
    sw(ra, sp + 0x14);
    sw(s0, sp + 0x10);
    v0 = lo;
    v0 += a0;
    v0 <<= 2;
    v0 += v1;
    s0 = lw(v0);
    v0 = 1;                                             // Result = 00000001
    if (s0 == 0) goto loc_8001F26C;
loc_8001F24C:
    a0 = s0;
    PIT_CheckThing();
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8001F26C;
    }
    s0 = lw(s0 + 0x30);
    v0 = 1;                                             // Result = 00000001
    if (s0 != 0) goto loc_8001F24C;
loc_8001F26C:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_Shoot2() noexcept {
loc_80023C34:
    t0 = 0x80080000;                                    // Result = 80080000
    t0 = lw(t0 - 0x7F4C);                               // Load from: gpShooter (800780B4)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7F80);                               // Load from: gAttackAngle (80077F80)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    t1 = 0x80070000;                                    // Result = 80070000
    t1 = lh(t1 + 0x7F9A);                               // Load from: gAttackRange + 2 (80077F9A) (80077F9A)
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 -= 0x6F8C;                                       // Result = gShootDiv[0] (800A9074)
    sw(ra, sp + 0x14);
    a1 >>= 19;
    a2 = lw(t0);
    a1 <<= 2;
    sw(a2, s0);                                         // Store to: gShootDiv[0] (800A9074)
    a3 = lw(t0 + 0x4);
    v0 += a1;
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a3, at - 0x6F88);                                // Store to: gShootDiv[1] (800A9078)
    v0 = lw(v0);
    mult(t1, v0);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E48);                               // Load from: gNumBspNodes (800781B8)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D08);                               // Load from: gAimBottomSlope (800782F8)
    sw(0, gp + 0xCF0);                                  // Store to: gpShootLine (800782D0)
    sw(0, gp + 0xCF4);                                  // Store to: gpShootMObj (800782D4)
    sw(0, gp + 0xB4C);                                  // Store to: gOldFrac (8007812C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FF8);                               // Load from: gAimTopSlope (80077FF8)
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += a1;
    a1 = lw(at);
    v0 += v1;
    v0 = u32(i32(v0) >> 1);
    v1 = lo;
    sw(v0, gp + 0x9CC);                                 // Store to: gAimMidSlope (80077FAC)
    v0 = u32(i32(a2) >> 16);
    mult(t1, a1);
    sw(v0, gp + 0xC10);                                 // Store to: gSsx1 (800781F0)
    a1 = lw(t0);
    v0 = u32(i32(a3) >> 16);
    sw(v0, gp + 0xC20);                                 // Store to: gSsy1 (80078200)
    v1 += a1;
    a1 = lw(t0 + 0x4);
    a2 = v1 - a2;
    sw(v1, gp + 0xA58);                                 // Store to: gShootX2 (80078038)
    v1 = u32(i32(v1) >> 16);
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a2, at - 0x6F84);                                // Store to: gShootDiv[2] (800A907C)
    sw(v1, gp + 0xC1C);                                 // Store to: gSsx2 (800781FC)
    v0 = lo;
    v0 += a1;
    a3 = v0 - a3;
    a2 ^= a3;
    sw(v0, gp + 0xA64);                                 // Store to: gShootY2 (80078044)
    v0 = u32(i32(v0) >> 16);
    at = 0x800B0000;                                    // Result = 800B0000
    sw(a3, at - 0x6F80);                                // Store to: gShootDiv[3] (800A9080)
    sw(v0, gp + 0xC2C);                                 // Store to: gSsy2 (8007820C)
    v0 = lw(t0 + 0x44);
    v1 = lw(t0 + 0x8);
    a2 = (i32(a2) > 0);
    sw(a2, gp + 0xA8C);                                 // Store to: gbShootDivPositive (8007806C)
    v0 = u32(i32(v0) >> 1);
    v0 += v1;
    v1 = 0x80000;                                       // Result = 00080000
    v0 += v1;
    sw(v0, gp + 0x9F4);                                 // Store to: gShootZ (80077FD4)
    a0--;
    PA_CrossBSPNode();
    v0 = lw(gp + 0xCF4);                                // Load from: gpShootMObj (800782D4)
    a0 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80023E28;
    a1 = 0;                                             // Result = 00000000
    a2 = 0x10000;                                       // Result = 00010000
    PA_DoIntercept();
    v0 = lw(gp + 0xCF4);                                // Load from: gpShootMObj (800782D4)
    if (v0 != 0) goto loc_80023E28;
    v0 = lw(gp + 0xCF0);                                // Load from: gpShootLine (800782D0)
    if (v0 == 0) goto loc_80023E28;
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7F98);                               // Load from: gAttackRange (80077F98)
    a0 = 0x40000;                                       // Result = 00040000
    FixedDiv();
    a1 = lw(gp + 0xBF0);                                // Load from: gFirstLineFrac (800781D0)
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x6F84);                               // Load from: gShootDiv[2] (800A907C)
    a1 -= v0;
    sw(a1, gp + 0xBF0);                                 // Store to: gFirstLineFrac (800781D0)
    FixedMul();
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x6F80);                               // Load from: gShootDiv[3] (800A9080)
    v1 = lw(s0);                                        // Load from: gShootDiv[0] (800A9074)
    a1 = lw(gp + 0xBF0);                                // Load from: gFirstLineFrac (800781D0)
    v0 += v1;
    sw(v0, gp + 0x9E4);                                 // Store to: gShootX (80077FC4)
    FixedMul();
    a0 = lw(gp + 0xBF0);                                // Load from: gFirstLineFrac (800781D0)
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x6F88);                               // Load from: gShootDiv[1] (800A9078)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7F98);                               // Load from: gAttackRange (80077F98)
    v0 += v1;
    sw(v0, gp + 0x9F0);                                 // Store to: gShootY (80077FD0)
    FixedMul();
    a0 = lw(gp + 0x9CC);                                // Load from: gAimMidSlope (80077FAC)
    a1 = v0;
    FixedMul();
    v1 = lw(gp + 0x9F4);                                // Load from: gShootZ (80077FD4)
    v0 += v1;
    sw(v0, gp + 0x9F4);                                 // Store to: gShootZ (80077FD4)
loc_80023E28:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PA_DoIntercept() noexcept {
loc_80023E3C:
    v1 = a1;
    a1 = a2;
    a2 = lw(gp + 0xB4C);                                // Load from: gOldFrac (8007812C)
    sp -= 0x18;
    v0 = (i32(a2) < i32(a1));
    sw(ra, sp + 0x10);
    if (v0 == 0) goto loc_80023E78;
    v0 = lw(gp + 0xC80);                                // Load from: gpOldValue (80078260)
    sw(a0, gp + 0xC80);                                 // Store to: gpOldValue (80078260)
    sw(a1, gp + 0xB4C);                                 // Store to: gOldFrac (8007812C)
    a0 = v0;
    v0 = lw(gp + 0x8E8);                                // Load from: gbOld_isLine (80077EC8)
    a1 = a2;
    sw(v1, gp + 0x8E8);                                 // Store to: gbOld_isLine (80077EC8)
    v1 = v0;
loc_80023E78:
    v0 = 0xFFFF;                                        // Result = 0000FFFF
    if (a1 == 0) goto loc_80023E8C;
    v0 = (i32(v0) < i32(a1));
    if (v0 == 0) goto loc_80023E94;
loc_80023E8C:
    v0 = 1;                                             // Result = 00000001
    goto loc_80023EB4;
loc_80023E94:
    if (v1 != 0) goto loc_80023EAC;
    PA_ShootThing();
    goto loc_80023EB4;
loc_80023EAC:
    PA_ShootLine();
loc_80023EB4:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PA_ShootLine() noexcept {
loc_80023EC4:
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 = lw(s0 + 0x10);
    v0 &= 4;
    s1 = a1;
    if (v0 != 0) goto loc_80023F14;
    v0 = lw(gp + 0xCF0);                                // Load from: gpShootLine (800782D0)
    if (v0 != 0) goto loc_80023F08;
    sw(s0, gp + 0xCF0);                                 // Store to: gpShootLine (800782D0)
    sw(s1, gp + 0xBF0);                                 // Store to: gFirstLineFrac (800781D0)
loc_80023F08:
    sw(0, gp + 0xB4C);                                  // Store to: gOldFrac (8007812C)
    v0 = 0;                                             // Result = 00000000
    goto loc_800240A0;
loc_80023F14:
    a1 = lw(s0 + 0x38);
    a2 = lw(s0 + 0x3C);
    a0 = lw(a1 + 0x4);
    v1 = lw(a2 + 0x4);
    v0 = (i32(a0) < i32(v1));
    if (v0 == 0) goto loc_80023F44;
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0x7F44);                                // Store to: gOpenTop (800780BC)
    goto loc_80023F4C;
loc_80023F44:
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0x7F44);                                // Store to: gOpenTop (800780BC)
loc_80023F4C:
    a0 = lw(a1);
    v1 = lw(a2);
    v0 = (i32(v1) < i32(a0));
    if (v0 == 0) goto loc_80023F74;
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x7F30);                                // Store to: gOpenBottom (80077F30)
    goto loc_80023F7C;
loc_80023F74:
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x7F30);                                // Store to: gOpenBottom (80077F30)
loc_80023F7C:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7F98);                               // Load from: gAttackRange (80077F98)
    a1 = s1;
    FixedMul();
    v1 = lw(s0 + 0x38);
    a0 = lw(s0 + 0x3C);
    a1 = lw(v1);
    v1 = lw(a0);
    s2 = v0;
    if (a1 == v1) goto loc_8002400C;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F30);                               // Load from: gOpenBottom (80077F30)
    a0 = lw(gp + 0x9F4);                                // Load from: gShootZ (80077FD4)
    a1 = s2;
    a0 = v0 - a0;
    FixedDiv();
    v1 = lw(gp + 0x9CC);                                // Load from: gAimMidSlope (80077FAC)
    a0 = v0;
    v1 = (i32(a0) < i32(v1));
    if (v1 != 0) goto loc_80023FEC;
    v0 = lw(gp + 0xCF0);                                // Load from: gpShootLine (800782D0)
    if (v0 != 0) goto loc_80023FEC;
    sw(s0, gp + 0xCF0);                                 // Store to: gpShootLine (800782D0)
    sw(s1, gp + 0xBF0);                                 // Store to: gFirstLineFrac (800781D0)
loc_80023FEC:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D08);                               // Load from: gAimBottomSlope (800782F8)
    v0 = (i32(v0) < i32(a0));
    if (v0 == 0) goto loc_8002400C;
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0x7D08);                                // Store to: gAimBottomSlope (800782F8)
loc_8002400C:
    v0 = lw(s0 + 0x38);
    v1 = lw(s0 + 0x3C);
    a0 = lw(v0 + 0x4);
    v0 = lw(v1 + 0x4);
    a1 = s2;
    if (a0 == v0) goto loc_80024088;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F44);                               // Load from: gOpenTop (800780BC)
    a0 = lw(gp + 0x9F4);                                // Load from: gShootZ (80077FD4)
    a0 = v0 - a0;
    FixedDiv();
    v1 = lw(gp + 0x9CC);                                // Load from: gAimMidSlope (80077FAC)
    a0 = v0;
    v1 = (i32(v1) < i32(a0));
    if (v1 != 0) goto loc_80024068;
    v0 = lw(gp + 0xCF0);                                // Load from: gpShootLine (800782D0)
    if (v0 != 0) goto loc_80024068;
    sw(s0, gp + 0xCF0);                                 // Store to: gpShootLine (800782D0)
    sw(s1, gp + 0xBF0);                                 // Store to: gFirstLineFrac (800781D0)
loc_80024068:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FF8);                               // Load from: gAimTopSlope (80077FF8)
    v0 = (i32(a0) < i32(v0));
    if (v0 == 0) goto loc_80024088;
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x7FF8);                                // Store to: gAimTopSlope (80077FF8)
loc_80024088:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7FF8);                               // Load from: gAimTopSlope (80077FF8)
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D08);                               // Load from: gAimBottomSlope (800782F8)
    v0 = (i32(v0) < i32(v1));
loc_800240A0:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void PA_ShootThing() noexcept {
loc_800240BC:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F4C);                               // Load from: gpShooter (800780B4)
    sp -= 0x28;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(s3, sp + 0x1C);
    s3 = a1;
    sw(ra, sp + 0x20);
    sw(s2, sp + 0x18);
    sw(s0, sp + 0x10);
    if (s1 == v0) goto loc_80024170;
    v0 = lw(s1 + 0x64);
    v0 &= 4;
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8002423C;
    }
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7F98);                               // Load from: gAttackRange (80077F98)
    a1 = s3;
    FixedMul();
    s2 = v0;
    a1 = s2;
    a0 = lw(s1 + 0x8);
    v0 = lw(s1 + 0x44);
    v1 = lw(gp + 0x9F4);                                // Load from: gShootZ (80077FD4)
    a0 += v0;
    a0 -= v1;
    FixedDiv();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D08);                               // Load from: gAimBottomSlope (800782F8)
    s0 = v0;
    v1 = (i32(s0) < i32(v1));
    v0 = 1;                                             // Result = 00000001
    if (v1 != 0) goto loc_8002423C;
    v0 = lw(s1 + 0x8);
    a0 = lw(gp + 0x9F4);                                // Load from: gShootZ (80077FD4)
    a1 = s2;
    a0 = v0 - a0;
    FixedDiv();
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7FF8);                               // Load from: gAimTopSlope (80077FF8)
    a2 = v0;
    v0 = (i32(v1) < i32(a2));
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(v1) < i32(s0));
        if (bJump) goto loc_80024178;
    }
loc_80024170:
    v0 = 1;                                             // Result = 00000001
    goto loc_8002423C;
loc_80024178:
    if (v0 == 0) goto loc_80024184;
    s0 = v1;
loc_80024184:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D08);                               // Load from: gAimBottomSlope (800782F8)
    v0 = (i32(a2) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = s0 + a2;
        if (bJump) goto loc_800241A4;
    }
    a2 = v1;
    v0 = s0 + a2;
loc_800241A4:
    v1 = v0 >> 31;
    v0 += v1;
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7F98);                               // Load from: gAttackRange (80077F98)
    v0 = u32(i32(v0) >> 1);
    sw(v0, gp + 0x96C);                                 // Store to: gShootSlope (80077F4C)
    sw(s1, gp + 0xCF4);                                 // Store to: gpShootMObj (800782D4)
    a0 = 0xA0000;                                       // Result = 000A0000
    FixedDiv();
    s0 = s3 - v0;
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x6F84);                               // Load from: gShootDiv[2] (800A907C)
    a1 = s0;
    FixedMul();
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x6F8C);                               // Load from: gShootDiv[0] (800A9074)
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x6F80);                               // Load from: gShootDiv[3] (800A9080)
    v0 += v1;
    sw(v0, gp + 0x9E4);                                 // Store to: gShootX (80077FC4)
    a1 = s0;
    FixedMul();
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x6F88);                               // Load from: gShootDiv[1] (800A9078)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7F98);                               // Load from: gAttackRange (80077F98)
    v0 += v1;
    sw(v0, gp + 0x9F0);                                 // Store to: gShootY (80077FD0)
    a0 = s0;
    FixedMul();
    a0 = lw(gp + 0x96C);                                // Load from: gShootSlope (80077F4C)
    a1 = v0;
    FixedMul();
    v1 = lw(gp + 0x9F4);                                // Load from: gShootZ (80077FD4)
    v1 += v0;
    v0 = 0;                                             // Result = 00000000
    sw(v1, gp + 0x9F4);                                 // Store to: gShootZ (80077FD4)
loc_8002423C:
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void PA_SightCrossLine() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    v1 = lw(a0 + 0x4);
    a1 = lw(gp + 0xC20);                                // Load from: gSsy1 (80078200)
    t8 = lw(gp + 0xC2C);                                // Load from: gSsy2 (8007820C)
    v0 = lw(gp + 0xC10);                                // Load from: gSsx1 (800781F0)
    t7 = lh(v1 + 0x2);
    a2 = t8 - a1;
    t0 = t7 - v0;
    mult(a2, t0);
    t6 = lw(gp + 0xC1C);                                // Load from: gSsx2 (800781FC)
    t5 = lh(v1 + 0x6);
    t4 = lo;
    t1 = t6 - v0;
    a3 = t5 - a1;
    mult(a3, t1);
    a0 = lw(a0);
    t3 = lh(a0 + 0x2);
    v1 = lo;
    t0 = t3 - v0;
    mult(a2, t0);
    t2 = lh(a0 + 0x6);
    a2 = lo;
    a3 = t2 - a1;
    mult(a3, t1);
    v1 = (i32(t4) < i32(v1));
    v0 = lo;
    v0 = (i32(a2) < i32(v0));
    t1 = t2 - t5;
    if (v1 == v0) goto loc_80024320;
    mult(t1, t0);
    a0 = lo;
    a2 = t7 - t3;
    mult(a2, a3);
    v0 = lo;
    t0 = t6 - t3;
    mult(t1, t0);
    v1 = lo;
    a3 = t8 - t2;
    mult(a2, a3);
    t4 = a0 + v0;
    a0 = t4;
    v0 = lo;
    a2 = v1 + v0;
    a1 = a0 + a2;
    FixedDiv();
    goto loc_80024324;
loc_80024320:
    v0 = -1;                                            // Result = FFFFFFFF
loc_80024324:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PA_CrossSubsector() noexcept {
loc_80024334:
    sp -= 0x28;
    sw(s3, sp + 0x1C);
    s3 = a0;
    sw(ra, sp + 0x20);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v0 = lw(s3);
    s0 = lw(v0 + 0x4C);
    if (s0 == 0) goto loc_80024594;
    s2 = 0x800B0000;                                    // Result = 800B0000
    s2 -= 0x75BC;                                       // Result = gThingLine_tv1[0] (800A8A44)
    s1 = 0x800B0000;                                    // Result = 800B0000
    s1 -= 0x75A0;                                       // Result = gThingLine_tv2[0] (800A8A60)
loc_80024378:
    v0 = lw(s0 + 0xC);
    if (v0 != s3) goto loc_80024584;
    v0 = lw(gp + 0xA8C);                                // Load from: gbShootDivPositive (8007806C)
    if (v0 == 0) goto loc_800243E4;
    v0 = lw(s0);
    v1 = lw(s0 + 0x40);
    v0 -= v1;
    sw(v0, s2);                                         // Store to: gThingLine_tv1[0] (800A8A44)
    v0 = lw(s0 + 0x4);
    v1 = lw(s0 + 0x40);
    v0 += v1;
    sw(v0, s2 + 0x4);                                   // Store to: gThingLine_tv1[1] (800A8A48)
    v0 = lw(s0);
    v1 = lw(s0 + 0x40);
    v0 += v1;
    sw(v0, s1);                                         // Store to: gThingLine_tv2[0] (800A8A60)
    v0 = lw(s0 + 0x4);
    v1 = lw(s0 + 0x40);
    v0 -= v1;
    goto loc_80024430;
loc_800243E4:
    v0 = lw(s0);
    v1 = lw(s0 + 0x40);
    v0 -= v1;
    sw(v0, s2);                                         // Store to: gThingLine_tv1[0] (800A8A44)
    v0 = lw(s0 + 0x4);
    v1 = lw(s0 + 0x40);
    v0 -= v1;
    sw(v0, s2 + 0x4);                                   // Store to: gThingLine_tv1[1] (800A8A48)
    v0 = lw(s0);
    v1 = lw(s0 + 0x40);
    v0 += v1;
    sw(v0, s1);                                         // Store to: gThingLine_tv2[0] (800A8A60)
    v0 = lw(s0 + 0x4);
    v1 = lw(s0 + 0x40);
    v0 += v1;
loc_80024430:
    sw(v0, s1 + 0x4);                                   // Store to: gThingLine_tv2[1] (800A8A64)
    v0 = lw(gp + 0x538);                                // Load from: gpThingLine_tv2 (80077B18)
    a0 = lw(gp + 0xC20);                                // Load from: gSsy1 (80078200)
    t8 = lw(gp + 0xC2C);                                // Load from: gSsy2 (8007820C)
    v1 = lw(gp + 0xC10);                                // Load from: gSsx1 (800781F0)
    t7 = lh(v0 + 0x2);
    t2 = t8 - a0;
    a3 = t7 - v1;
    mult(t2, a3);
    t6 = lw(gp + 0xC1C);                                // Load from: gSsx2 (800781FC)
    t5 = lh(v0 + 0x6);
    t1 = lo;
    t0 = t6 - v1;
    a2 = t5 - a0;
    mult(a2, t0);
    v0 = lw(gp + 0x534);                                // Load from: gpThingLine_tv1 (80077B14)
    t4 = lh(v0 + 0x2);
    a1 = lo;
    a3 = t4 - v1;
    mult(t2, a3);
    t3 = lh(v0 + 0x6);
    v1 = lo;
    a2 = t3 - a0;
    mult(a2, t0);
    t1 = (i32(t1) < i32(a1));
    v0 = lo;
    v1 = (i32(v1) < i32(v0));
    t0 = t3 - t5;
    if (t1 != v1) goto loc_800244B0;
    a1 = -1;                                            // Result = FFFFFFFF
    goto loc_800244F4;
loc_800244B0:
    mult(t0, a3);
    a0 = lo;
    t2 = t7 - t4;
    mult(t2, a2);
    v0 = lo;
    a3 = t6 - t4;
    mult(t0, a3);
    v1 = lo;
    a2 = t8 - t3;
    mult(t2, a2);
    t1 = a0 + v0;
    a0 = t1;
    v0 = lo;
    v1 += v0;
    a1 = a0 + v1;
    FixedDiv();
    a1 = v0;
loc_800244F4:
    v0 = 0x10000;                                       // Result = 00010000
    v0 = (v0 < a1);
    a0 = s0;
    if (v0 != 0) goto loc_80024584;
    a3 = 0;                                             // Result = 00000000
    a2 = lw(gp + 0xB4C);                                // Load from: gOldFrac (8007812C)
    v0 = (i32(a2) < i32(a1));
    v1 = a1;
    if (v0 == 0) goto loc_80024540;
    v0 = lw(gp + 0xC80);                                // Load from: gpOldValue (80078260)
    a0 = v0;
    v0 = lw(gp + 0x8E8);                                // Load from: gbOld_isLine (80077EC8)
    v1 = a2;
    sw(s0, gp + 0xC80);                                 // Store to: gpOldValue (80078260)
    sw(a1, gp + 0xB4C);                                 // Store to: gOldFrac (8007812C)
    sw(0, gp + 0x8E8);                                  // Store to: gbOld_isLine (80077EC8)
    a3 = v0;
loc_80024540:
    v0 = 0xFFFF;                                        // Result = 0000FFFF
    if (v1 == 0) goto loc_80024554;
    v0 = (i32(v0) < i32(v1));
    if (v0 == 0) goto loc_8002455C;
loc_80024554:
    v0 = 1;                                             // Result = 00000001
    goto loc_8002457C;
loc_8002455C:
    if (a3 == 0) goto loc_80024574;
    a1 = v1;
    PA_ShootLine();
    goto loc_8002457C;
loc_80024574:
    a1 = v1;
    PA_ShootThing();
loc_8002457C:
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80024738;
    }
loc_80024584:
    s0 = lw(s0 + 0x1C);
    if (s0 != 0) goto loc_80024378;
loc_80024594:
    v0 = lh(s3 + 0x6);
    s1 = lh(s3 + 0x4);
    v1 = v0 << 2;
    v1 += v0;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7DC8);                               // Load from: gpSegs (80078238)
    v1 <<= 3;
    s2 = v1 + v0;
    if (s1 == 0) goto loc_80024734;
loc_800245B8:
    s0 = lw(s2 + 0x14);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    v0 = lw(s0 + 0x40);
    if (v0 == v1) goto loc_80024728;
    v0 = lw(s0 + 0x4);
    a0 = lw(gp + 0xC20);                                // Load from: gSsy1 (80078200)
    t8 = lw(gp + 0xC2C);                                // Load from: gSsy2 (8007820C)
    sw(v1, s0 + 0x40);
    v1 = lw(gp + 0xC10);                                // Load from: gSsx1 (800781F0)
    t7 = lh(v0 + 0x2);
    t2 = t8 - a0;
    a3 = t7 - v1;
    mult(t2, a3);
    t6 = lw(gp + 0xC1C);                                // Load from: gSsx2 (800781FC)
    t5 = lh(v0 + 0x6);
    t1 = lo;
    t0 = t6 - v1;
    a2 = t5 - a0;
    mult(a2, t0);
    v0 = lw(s0);
    t4 = lh(v0 + 0x2);
    a1 = lo;
    a3 = t4 - v1;
    mult(t2, a3);
    t3 = lh(v0 + 0x6);
    v1 = lo;
    a2 = t3 - a0;
    mult(a2, t0);
    t1 = (i32(t1) < i32(a1));
    v0 = lo;
    v1 = (i32(v1) < i32(v0));
    t0 = t3 - t5;
    if (t1 != v1) goto loc_80024654;
    a1 = -1;                                            // Result = FFFFFFFF
    goto loc_80024698;
loc_80024654:
    mult(t0, a3);
    a0 = lo;
    t2 = t7 - t4;
    mult(t2, a2);
    v0 = lo;
    a3 = t6 - t4;
    mult(t0, a3);
    v1 = lo;
    a2 = t8 - t3;
    mult(t2, a2);
    t1 = a0 + v0;
    a0 = t1;
    v0 = lo;
    v1 += v0;
    a1 = a0 + v1;
    FixedDiv();
    a1 = v0;
loc_80024698:
    v0 = 0x10000;                                       // Result = 00010000
    v0 = (v0 < a1);
    a0 = s0;
    if (v0 != 0) goto loc_80024728;
    a2 = lw(gp + 0xB4C);                                // Load from: gOldFrac (8007812C)
    v0 = (i32(a2) < i32(a1));
    v1 = 1;                                             // Result = 00000001
    if (v0 == 0) goto loc_800246DC;
    v0 = lw(gp + 0xC80);                                // Load from: gpOldValue (80078260)
    sw(a0, gp + 0xC80);                                 // Store to: gpOldValue (80078260)
    sw(a1, gp + 0xB4C);                                 // Store to: gOldFrac (8007812C)
    a0 = v0;
    v0 = lw(gp + 0x8E8);                                // Load from: gbOld_isLine (80077EC8)
    a1 = a2;
    sw(v1, gp + 0x8E8);                                 // Store to: gbOld_isLine (80077EC8)
    v1 = v0;
loc_800246DC:
    v0 = 0xFFFF;                                        // Result = 0000FFFF
    if (a1 == 0) goto loc_800246F0;
    v0 = (i32(v0) < i32(a1));
    if (v0 == 0) goto loc_800246F8;
loc_800246F0:
    v0 = 1;                                             // Result = 00000001
    goto loc_80024718;
loc_800246F8:
    if (v1 == 0) goto loc_80024710;
    PA_ShootLine();
    goto loc_80024718;
loc_80024710:
    PA_ShootThing();
loc_80024718:
    s1--;
    if (v0 != 0) goto loc_8002472C;
    v0 = 0;                                             // Result = 00000000
    goto loc_80024738;
loc_80024728:
    s1--;
loc_8002472C:
    s2 += 0x28;
    if (s1 != 0) goto loc_800245B8;
loc_80024734:
    v0 = 1;                                             // Result = 00000001
loc_80024738:
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void PointOnVectorSide() noexcept {
    v0 = lw(a2);
    a0 -= v0;
    v0 = lh(a2 + 0xE);
    a0 = u32(i32(a0) >> 16);
    mult(v0, a0);
    v0 = lw(a2 + 0x4);
    a1 -= v0;
    v1 = lo;
    v0 = lh(a2 + 0xA);
    a1 = u32(i32(a1) >> 16);
    mult(a1, v0);
    v0 = lo;
    v0 = (i32(v0) < i32(v1));
    v0 ^= 1;
    return;
}

void PA_CrossBSPNode() noexcept {
loc_8002479C:
    sp -= 0x20;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v0 = a0 & 0x8000;
loc_800247B4:
    {
        const bool bJump = (v0 == 0)
        v0 = 0xFFFF0000;                                // Result = FFFF0000
        if (bJump) goto loc_80024804;
    }
    v0 |= 0x7FFF;                                       // Result = FFFF7FFF
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7DDC);                               // Load from: gNumSubsectors (80078224)
    s0 = a0 & v0;
    v0 = (i32(s0) < i32(a2));
    if (v0 != 0) goto loc_800247E8;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0xB24;                                        // Result = STR_PA_CrossSubsector_Err[0] (80010B24)
    a1 = s0;
    I_Error();
loc_800247E8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F40);                               // Load from: gpSubsectors (80077F40)
    a0 = s0 << 4;
    a0 += v0;
    PA_CrossSubsector();
    goto loc_800248EC;
loc_80024804:
    v0 = a0 << 3;
    v0 -= a0;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EA4);                               // Load from: gpBspNodes (80077EA4)
    v0 <<= 3;
    s0 = v0 + v1;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x6F8C);                               // Load from: gShootDiv[0] (800A9074)
    v1 = lw(s0);
    v0 -= v1;
    v1 = lh(s0 + 0xE);
    v0 = u32(i32(v0) >> 16);
    mult(v1, v0);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x6F88);                               // Load from: gShootDiv[1] (800A9078)
    v1 = lw(s0 + 0x4);
    v0 -= v1;
    a0 = lo;
    v1 = lh(s0 + 0xA);
    v0 = u32(i32(v0) >> 16);
    mult(v0, v1);
    v0 = lo;
    s2 = (i32(v0) < i32(a0));
    s1 = s2 ^ 1;
    v0 = s1 << 2;
    v0 += s0;
    a0 = lw(v0 + 0x30);
    PA_CrossBSPNode();
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_800248EC;
    }
    v0 = lw(gp + 0xA58);                                // Load from: gShootX2 (80078038)
    v1 = lw(s0);
    v0 -= v1;
    v1 = lh(s0 + 0xE);
    v0 = u32(i32(v0) >> 16);
    mult(v1, v0);
    v0 = lw(gp + 0xA64);                                // Load from: gShootY2 (80078044)
    v1 = lw(s0 + 0x4);
    v0 -= v1;
    a0 = lo;
    v1 = lh(s0 + 0xA);
    v0 = u32(i32(v0) >> 16);
    mult(v0, v1);
    v0 = lo;
    v0 = (i32(v0) < i32(a0));
    v0 ^= 1;
    {
        const bool bJump = (s1 == v0)
        v0 = s2 << 2;
        if (bJump) goto loc_800248E8;
    }
    v0 += s0;
    a0 = lw(v0 + 0x30);
    v0 = a0 & 0x8000;
    goto loc_800247B4;
loc_800248E8:
    v0 = 1;                                             // Result = 00000001
loc_800248EC:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_CheckSights() noexcept {
loc_80024908:
    sp -= 0x20;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x715C;                                       // Result = gMObjHead[5] (800A8EA4)
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    s0 = lw(v0);                                        // Load from: gMObjHead[5] (800A8EA4)
    v0 -= 0x14;                                         // Result = gMObjHead[0] (800A8E90)
    s1 = 0x400000;                                      // Result = 00400000
    if (s0 == v0) goto loc_8002499C;
loc_80024930:
    a0 = lw(s0 + 0x64);
    v0 = a0 & s1;
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80024988;
    }
    v1 = lw(s0 + 0x5C);
    {
        const bool bJump = (v1 != v0)
        v0 = 0xFBFF0000;                                // Result = FBFF0000
        if (bJump) goto loc_80024988;
    }
    v0 |= 0xFFFF;                                       // Result = FBFFFFFF
    a1 = lw(s0 + 0x74);
    v0 &= a0;
    sw(v0, s0 + 0x64);
    if (a1 == 0) goto loc_80024988;
    a0 = s0;
    P_CheckSight();
    v1 = 0x4000000;                                     // Result = 04000000
    if (v0 == 0) goto loc_80024988;
    v0 = lw(s0 + 0x64);
    v0 |= v1;
    sw(v0, s0 + 0x64);
loc_80024988:
    s0 = lw(s0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    if (s0 != v0) goto loc_80024930;
loc_8002499C:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_CheckSight() noexcept {
loc_800249B4:
    sp -= 0x18;
    t0 = a0;
    t1 = a1;
    a1 = 0xE9BD0000;                                    // Result = E9BD0000
    sw(ra, sp + 0x10);
    v0 = lw(t0 + 0xC);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7F58);                               // Load from: gpSectors (800780A8)
    v0 = lw(v0);
    a1 |= 0x37A7;                                       // Result = E9BD37A7
    v0 -= a0;
    mult(v0, a1);
    v0 = lw(t1 + 0xC);
    v0 = lw(v0);
    v1 = lo;
    v0 -= a0;
    mult(v0, a1);
    v0 = lo;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7F54);                               // Load from: gNumSectors (80077F54)
    v1 = u32(i32(v1) >> 2);
    mult(v1, a0);
    v0 = u32(i32(v0) >> 2);
    v1 = 1;                                             // Result = 00000001
    a0 = lo;
    a0 += v0;
    a1 = u32(i32(a0) >> 3);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F1C);                               // Load from: gpRejectMatrix (800780E4)
    a0 &= 7;
    v0 += a1;
    v0 = lbu(v0);
    v1 = v1 << a0;
    v0 &= v1;
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80024B2C;
    }
    a3 = 0xFFFE0000;                                    // Result = FFFE0000
    a2 = 0x10000;                                       // Result = 00010000
    a1 = lw(t0);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    a1 &= a3;
    a1 |= a2;
    at = 0x80090000;                                    // Result = 80090000
    sw(a1, at + 0x7C00);                                // Store to: gSTrace[0] (80097C00)
    a0 = lw(t0 + 0x4);
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7BC4);                                // Store to: gValidCount (80077BC4)
    v0 = u32(i32(a1) >> 16);
    sw(v0, gp + 0xC18);                                 // Store to: gT1xs (800781F8)
    a0 &= a3;
    a0 |= a2;
    at = 0x80090000;                                    // Result = 80090000
    sw(a0, at + 0x7C04);                                // Store to: gSTrace[1] (80097C04)
    v0 = lw(t1);
    v1 = u32(i32(a0) >> 16);
    sw(v1, gp + 0xC28);                                 // Store to: gT1ys (80078208)
    v1 = lw(t1 + 0x4);
    v0 &= a3;
    v0 |= a2;
    v1 &= a3;
    v1 |= a2;
    a1 = v0 - a1;
    a0 = v1 - a0;
    at = 0x80090000;                                    // Result = 80090000
    sw(a1, at + 0x7C08);                                // Store to: gSTrace[2] (80097C08)
    at = 0x80090000;                                    // Result = 80090000
    sw(a0, at + 0x7C0C);                                // Store to: gSTrace[3] (80097C0C)
    a1 = lw(t0 + 0x8);
    a0 = lw(t0 + 0x44);
    sw(v0, gp + 0xB20);                                 // Store to: gT2x (80078100)
    v0 = u32(i32(v0) >> 16);
    sw(v0, gp + 0xC24);                                 // Store to: gT2xs (80078204)
    v0 = lw(t1 + 0x8);
    sw(v1, gp + 0xB28);                                 // Store to: gT2y (80078108)
    v1 = u32(i32(v1) >> 16);
    sw(v1, gp + 0xC30);                                 // Store to: gT2ys (80078210)
    v1 = lw(t1 + 0x44);
    a1 += a0;
    a0 = u32(i32(a0) >> 2);
    a1 -= a0;
    v0 += v1;
    v0 -= a1;
    sw(v0, gp + 0xC00);                                 // Store to: gTopSlope (800781E0)
    v0 = lw(t1 + 0x8);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E48);                               // Load from: gNumBspNodes (800781B8)
    sw(a1, gp + 0xA40);                                 // Store to: gSightZStart (80078020)
    v0 -= a1;
    sw(v0, gp + 0xA28);                                 // Store to: gBottomSlope (80078008)
    a0--;
    PS_CrossBSPNode();
loc_80024B2C:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PS_SightCrossLine() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    v1 = lw(a0 + 0x4);
    a1 = lw(gp + 0xC28);                                // Load from: gT1ys (80078208)
    t8 = lw(gp + 0xC30);                                // Load from: gT2ys (80078210)
    v0 = lw(gp + 0xC18);                                // Load from: gT1xs (800781F8)
    t7 = lh(v1 + 0x2);
    a2 = t8 - a1;
    t0 = t7 - v0;
    mult(a2, t0);
    t6 = lw(gp + 0xC24);                                // Load from: gT2xs (80078204)
    t5 = lh(v1 + 0x6);
    t4 = lo;
    t1 = t6 - v0;
    a3 = t5 - a1;
    mult(a3, t1);
    a0 = lw(a0);
    t3 = lh(a0 + 0x2);
    v1 = lo;
    t0 = t3 - v0;
    mult(a2, t0);
    t2 = lh(a0 + 0x6);
    a2 = lo;
    a3 = t2 - a1;
    mult(a3, t1);
    v1 = (i32(t4) < i32(v1));
    v0 = lo;
    v0 = (i32(a2) < i32(v0));
    t1 = t2 - t5;
    if (v1 == v0) goto loc_80024C00;
    mult(t1, t0);
    a0 = lo;
    a2 = t7 - t3;
    mult(a2, a3);
    v0 = lo;
    t0 = t6 - t3;
    mult(t1, t0);
    v1 = lo;
    a3 = t8 - t2;
    mult(a2, a3);
    t4 = a0 + v0;
    a0 = t4;
    v0 = lo;
    a2 = v1 + v0;
    a1 = a0 + a2;
    FixedDiv();
    goto loc_80024C04;
loc_80024C00:
    v0 = -1;                                            // Result = FFFFFFFF
loc_80024C04:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_CrossSubsector() noexcept {
loc_80024C14:
    sp -= 0x20;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v1 = lh(a0 + 0x6);
    s1 = lh(a0 + 0x4);
    v0 = v1 << 2;
    v0 += v1;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7DC8);                               // Load from: gpSegs (80078238)
    v0 <<= 3;
    s2 = v0 + v1;
    if (s1 == 0) goto loc_80024EA0;
loc_80024C4C:
    s0 = lw(s2 + 0x14);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    v0 = lw(s0 + 0x40);
    if (v0 == v1) goto loc_80024E94;
    v0 = lw(s0 + 0x4);
    a0 = lw(gp + 0xC28);                                // Load from: gT1ys (80078208)
    t8 = lw(gp + 0xC30);                                // Load from: gT2ys (80078210)
    sw(v1, s0 + 0x40);
    v1 = lw(gp + 0xC18);                                // Load from: gT1xs (800781F8)
    t7 = lh(v0 + 0x2);
    t1 = t8 - a0;
    a3 = t7 - v1;
    mult(t1, a3);
    t6 = lw(gp + 0xC24);                                // Load from: gT2xs (80078204)
    t5 = lh(v0 + 0x6);
    t2 = lo;
    t0 = t6 - v1;
    a2 = t5 - a0;
    mult(a2, t0);
    v0 = lw(s0);
    t4 = lh(v0 + 0x2);
    a1 = lo;
    a3 = t4 - v1;
    mult(t1, a3);
    t3 = lh(v0 + 0x6);
    v1 = lo;
    a2 = t3 - a0;
    mult(a2, t0);
    t2 = (i32(t2) < i32(a1));
    v0 = lo;
    v1 = (i32(v1) < i32(v0));
    t0 = t3 - t5;
    if (t2 != v1) goto loc_80024CE8;
    a1 = -1;                                            // Result = FFFFFFFF
    goto loc_80024D2C;
loc_80024CE8:
    mult(t0, a3);
    a0 = lo;
    t1 = t7 - t4;
    mult(t1, a2);
    v0 = lo;
    a3 = t6 - t4;
    mult(t0, a3);
    v1 = lo;
    a2 = t8 - t3;
    mult(t1, a2);
    t2 = a0 + v0;
    a0 = t2;
    v0 = lo;
    v1 += v0;
    a1 = a0 + v1;
    FixedDiv();
    a1 = v0;
loc_80024D2C:
    v1 = a1 - 4;
    v0 = 0xFFFC;                                        // Result = 0000FFFC
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80024E94;
    t0 = lw(s0 + 0x3C);
    if (t0 == 0) goto loc_80024E8C;
    t1 = lw(s0 + 0x38);
    a0 = lw(t0);
    a2 = lw(t1);
    if (a2 != a0) goto loc_80024D7C;
    v1 = lw(t1 + 0x4);
    v0 = lw(t0 + 0x4);
    if (v1 == v0) goto loc_80024E94;
loc_80024D7C:
    v0 = lw(t0 + 0x4);
    v1 = lw(t1 + 0x4);
    a3 = v0;
    v0 = (i32(v1) < i32(a3));
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(a0) < i32(a2));
        if (bJump) goto loc_80024D98;
    }
    a3 = v1;
loc_80024D98:
    v1 = a0;
    if (v0 == 0) goto loc_80024DA4;
    v1 = a2;
loc_80024DA4:
    v0 = (i32(v1) < i32(a3));
    if (v0 == 0) goto loc_80024E8C;
    a1 = u32(i32(a1) >> 2);
    if (a2 == a0) goto loc_80024E0C;
    v0 = lw(gp + 0xA40);                                // Load from: gSightZStart (80078020)
    v0 = v1 - v0;
    v0 <<= 6;
    div(v0, a1);
    if (a1 != 0) goto loc_80024DD8;
    _break(0x1C00);
loc_80024DD8:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_80024DF0;
    }
    if (v0 != at) goto loc_80024DF0;
    tge(zero, zero, 0x5D);
loc_80024DF0:
    v0 = lo;
    v1 = lw(gp + 0xA28);                                // Load from: gBottomSlope (80078008)
    v0 <<= 8;
    v1 = (i32(v1) < i32(v0));
    if (v1 == 0) goto loc_80024E0C;
    sw(v0, gp + 0xA28);                                 // Store to: gBottomSlope (80078008)
loc_80024E0C:
    v1 = lw(t1 + 0x4);
    v0 = lw(t0 + 0x4);
    if (v1 == v0) goto loc_80024E74;
    v0 = lw(gp + 0xA40);                                // Load from: gSightZStart (80078020)
    v0 = a3 - v0;
    v0 <<= 6;
    div(v0, a1);
    if (a1 != 0) goto loc_80024E40;
    _break(0x1C00);
loc_80024E40:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_80024E58;
    }
    if (v0 != at) goto loc_80024E58;
    tge(zero, zero, 0x5D);
loc_80024E58:
    v0 = lo;
    v1 = lw(gp + 0xC00);                                // Load from: gTopSlope (800781E0)
    v0 <<= 8;
    v1 = (i32(v0) < i32(v1));
    if (v1 == 0) goto loc_80024E74;
    sw(v0, gp + 0xC00);                                 // Store to: gTopSlope (800781E0)
loc_80024E74:
    v1 = lw(gp + 0xC00);                                // Load from: gTopSlope (800781E0)
    v0 = lw(gp + 0xA28);                                // Load from: gBottomSlope (80078008)
    v0 = (i32(v0) < i32(v1));
    s1--;
    if (v0 != 0) goto loc_80024E98;
loc_80024E8C:
    v0 = 0;                                             // Result = 00000000
    goto loc_80024EA4;
loc_80024E94:
    s1--;
loc_80024E98:
    s2 += 0x28;
    if (s1 != 0) goto loc_80024C4C;
loc_80024EA0:
    v0 = 1;                                             // Result = 00000001
loc_80024EA4:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void PS_CrossBSPNode() noexcept {
loc_80024EC0:
    sp -= 0x20;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v0 = a0 & 0x8000;
loc_80024ED8:
    {
        const bool bJump = (v0 == 0)
        v0 = 0xFFFF0000;                                // Result = FFFF0000
        if (bJump) goto loc_80024F28;
    }
    v0 |= 0x7FFF;                                       // Result = FFFF7FFF
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7DDC);                               // Load from: gNumSubsectors (80078224)
    s0 = a0 & v0;
    v0 = (i32(s0) < i32(a2));
    if (v0 != 0) goto loc_80024F0C;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0xB50;                                        // Result = STR_PS_CrossSubsector_Err[0] (80010B50)
    a1 = s0;
    I_Error();
loc_80024F0C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F40);                               // Load from: gpSubsectors (80077F40)
    a0 = s0 << 4;
    a0 += v0;
    P_CrossSubsector();
    goto loc_80025010;
loc_80024F28:
    v0 = a0 << 3;
    v0 -= a0;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EA4);                               // Load from: gpBspNodes (80077EA4)
    v0 <<= 3;
    s0 = v0 + v1;
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7C04);                               // Load from: gSTrace[1] (80097C04)
    v1 = lw(s0 + 0x4);
    v0 -= v1;
    v1 = lh(s0 + 0xA);
    v0 = u32(i32(v0) >> 16);
    mult(v0, v1);
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7C00);                               // Load from: gSTrace[0] (80097C00)
    v1 = lw(s0);
    v0 -= v1;
    a0 = lo;
    v1 = lh(s0 + 0xE);
    v0 = u32(i32(v0) >> 16);
    mult(v1, v0);
    v0 = lo;
    s2 = (i32(a0) < i32(v0));
    s1 = s2 ^ 1;
    v0 = s1 << 2;
    v0 += s0;
    a0 = lw(v0 + 0x30);
    PS_CrossBSPNode();
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80025010;
    }
    v0 = lw(gp + 0xB28);                                // Load from: gT2y (80078108)
    v1 = lw(s0 + 0x4);
    v0 -= v1;
    v1 = lh(s0 + 0xA);
    v0 = u32(i32(v0) >> 16);
    mult(v0, v1);
    v0 = lw(gp + 0xB20);                                // Load from: gT2x (80078100)
    v1 = lw(s0);
    v0 -= v1;
    v1 = lo;
    a0 = lh(s0 + 0xE);
    v0 = u32(i32(v0) >> 16);
    mult(a0, v0);
    v0 = lo;
    v1 = (i32(v1) < i32(v0));
    v1 ^= 1;
    v0 = s2 << 2;
    if (s1 == v1) goto loc_8002500C;
    v0 += s0;
    a0 = lw(v0 + 0x30);
    v0 = a0 & 0x8000;
    goto loc_80024ED8;
loc_8002500C:
    v0 = 1;                                             // Result = 00000001
loc_80025010:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_SlideMove() noexcept {
loc_8002502C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7ED8);                               // Load from: gpSlideThing (80077ED8)
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    s2 = lw(v0 + 0x48);
    s3 = lw(v0 + 0x4C);
    v1 = lw(v0);
    a0 = lw(v0 + 0x4);
    v0 = lw(v0 + 0x64);
    v0 &= 0x1000;
    sw(v1, gp + 0x9B0);                                 // Store to: gSlideX (80077F90)
    sw(a0, gp + 0x9B4);                                 // Store to: gSlideY (80077F94)
    s0 = 0x10000;                                       // Result = 00010000
    if (v0 == 0) goto loc_800250AC;
    a0 = s0;                                            // Result = 00010000
    goto loc_800250E0;
loc_80025084:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7ED8);                               // Load from: gpSlideThing (80077ED8)
    a0 = lw(v0);
    a1 = lw(v0 + 0x4);
    sw(s2, v0 + 0x48);
    sw(s3, v0 + 0x4C);
    SL_CheckSpecialLines();
    goto loc_80025198;
loc_800250AC:
    s4 = 0;                                             // Result = 00000000
    a0 = s2;
loc_800250B4:
    a1 = s3;
    P_CompletableFrac();
    s0 = v0;
    v0 = 0x10000;                                       // Result = 00010000
    if (s0 == v0) goto loc_800250D0;
    s0 -= 0x1000;
loc_800250D0:
    a0 = s0;
    if (i32(s0) >= 0) goto loc_800250E0;
    s0 = 0;                                             // Result = 00000000
    a0 = s0;                                            // Result = 00000000
loc_800250E0:
    a1 = s2;
    FixedMul();
    a0 = s0;
    a1 = s3;
    s1 = v0;
    FixedMul();
    v1 = lw(gp + 0x9B0);                                // Load from: gSlideX (80077F90)
    a0 = v0;
    a2 = s1 + v1;
    v1 = lw(gp + 0x9B4);                                // Load from: gSlideY (80077F94)
    v0 = 0x10000;                                       // Result = 00010000
    sw(a2, gp + 0x9B0);                                 // Store to: gSlideX (80077F90)
    a3 = a0 + v1;
    sw(a3, gp + 0x9B4);                                 // Store to: gSlideY (80077F94)
    if (s0 == v0) goto loc_80025084;
    s3 -= a0;
    a0 = s2 - s1;
    a1 = lw(gp + 0xBC8);                                // Load from: gBlockNvx (800781A8)
    s4++;
    FixedMul();
    s0 = v0;
    a1 = lw(gp + 0xBD0);                                // Load from: gBlockNvy (800781B0)
    a0 = s3;
    FixedMul();
    s0 += v0;
    a1 = lw(gp + 0xBC8);                                // Load from: gBlockNvx (800781A8)
    a0 = s0;
    FixedMul();
    s2 = v0;
    a1 = lw(gp + 0xBD0);                                // Load from: gBlockNvy (800781B0)
    a0 = s0;
    FixedMul();
    s3 = v0;
    v0 = (i32(s4) < 3);
    a0 = s2;
    if (v0 != 0) goto loc_800250B4;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7ED8);                               // Load from: gpSlideThing (80077ED8)
    v1 = lw(v0);
    a0 = lw(v0 + 0x4);
    sw(0, v0 + 0x4C);
    sw(0, v0 + 0x48);
    sw(v1, gp + 0x9B0);                                 // Store to: gSlideX (80077F90)
    sw(a0, gp + 0x9B4);                                 // Store to: gSlideY (80077F94)
loc_80025198:
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void P_CompletableFrac() noexcept {
loc_800251BC:
    sp -= 0x40;
    a2 = a0;
    v0 = 0x10000;                                       // Result = 00010000
    v1 = lw(gp + 0x9B4);                                // Load from: gSlideY (80077F94)
    a0 = 0x170000;                                      // Result = 00170000
    sw(ra, sp + 0x3C);
    sw(s6, sp + 0x38);
    sw(s5, sp + 0x34);
    sw(s4, sp + 0x30);
    sw(s3, sp + 0x2C);
    sw(s2, sp + 0x28);
    sw(s1, sp + 0x24);
    sw(s0, sp + 0x20);
    sw(v0, gp + 0xC48);                                 // Store to: gBlockFrac (80078228)
    sw(a2, gp + 0xA90);                                 // Store to: gSlideDx (80078070)
    sw(a1, gp + 0xA94);                                 // Store to: gSlideDy (80078074)
    v0 = v1 + a0;
    at = 0x80090000;                                    // Result = 80090000
    sw(v0, at + 0x7BF0);                                // Store to: gEndBox[0] (80097BF0)
    v0 = lw(gp + 0x9B0);                                // Load from: gSlideX (80077F90)
    v1 -= a0;
    at = 0x80090000;                                    // Result = 80090000
    sw(v1, at + 0x7BF4);                                // Store to: gEndBox[1] (80097BF4)
    v1 = v0 + a0;
    v0 -= a0;
    at = 0x80090000;                                    // Result = 80090000
    sw(v1, at + 0x7BFC);                                // Store to: gEndBox[3] (80097BFC)
    at = 0x80090000;                                    // Result = 80090000
    sw(v0, at + 0x7BF8);                                // Store to: gEndBox[2] (80097BF8)
    v0 += a2;
    if (i32(a2) <= 0) goto loc_8002524C;
    v0 = a2 + v1;
    at = 0x80090000;                                    // Result = 80090000
    sw(v0, at + 0x7BFC);                                // Store to: gEndBox[3] (80097BFC)
    goto loc_80025254;
loc_8002524C:
    at = 0x80090000;                                    // Result = 80090000
    sw(v0, at + 0x7BF8);                                // Store to: gEndBox[2] (80097BF8)
loc_80025254:
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x7BF4;                                       // Result = gEndBox[1] (80097BF4)
    if (i32(a1) <= 0) goto loc_8002526C;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x7BF0;                                       // Result = gEndBox[0] (80097BF0)
loc_8002526C:
    v0 = lw(v1);
    v0 += a1;
    sw(v0, v1);
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7BF8);                               // Load from: gEndBox[2] (80097BF8)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    v1 = 0x80090000;                                    // Result = 80090000
    v1 = lw(v1 + 0x7BFC);                               // Load from: gEndBox[3] (80097BFC)
    v0 -= a0;
    a1 = u32(i32(v0) >> 23);
    v1 -= a0;
    s5 = u32(i32(v1) >> 23);
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7BF4);                               // Load from: gEndBox[1] (80097BF4)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v1 = 0x80090000;                                    // Result = 80090000
    v1 = lw(v1 + 0x7BF0);                               // Load from: gEndBox[0] (80097BF0)
    v0 -= a0;
    s6 = u32(i32(v0) >> 23);
    v1 -= a0;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7BC4);                                // Store to: gValidCount (80077BC4)
    s3 = u32(i32(v1) >> 23);
    if (i32(a1) >= 0) goto loc_800252EC;
    a1 = 0;                                             // Result = 00000000
loc_800252EC:
    if (i32(s6) >= 0) goto loc_800252F8;
    s6 = 0;                                             // Result = 00000000
loc_800252F8:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    v0 = (i32(s5) < i32(v1));
    if (v0 != 0) goto loc_80025314;
    s5 = v1 - 1;
loc_80025314:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    v0 = (i32(s3) < i32(v1));
    s2 = a1;
    if (v0 != 0) goto loc_80025330;
    s3 = v1 - 1;
loc_80025330:
    v0 = (i32(s5) < i32(s2));
    if (v0 != 0) goto loc_80025410;
    v0 = (i32(s3) < i32(s6));
loc_80025340:
    s1 = s6;
    if (v0 != 0) goto loc_80025400;
loc_80025348:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    mult(s1, v0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EC0);                               // Load from: gpBlockmap (80078140)
    v0 = lo;
    v0 += s2;
    v0 <<= 1;
    v0 += v1;
    v0 = lh(v0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F3C);                               // Load from: gpBlockmapLump (800780C4)
    v0 <<= 1;
    s0 = v0 + v1;
    v0 = -1;                                            // Result = FFFFFFFF
    v1 = lh(s0);
    a0 = lhu(s0);
    {
        const bool bJump = (v1 == v0)
        v1 = a0 << 16;
        if (bJump) goto loc_800253F0;
    }
    s4 = -1;                                            // Result = FFFFFFFF
loc_8002539C:
    v1 = u32(i32(v1) >> 16);
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB0);                               // Load from: gpLines (80077EB0)
    v0 <<= 2;
    a0 = v0 + v1;
    v0 = lw(a0 + 0x40);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    s0 += 2;
    if (v0 == v1) goto loc_800253E0;
    sw(v1, a0 + 0x40);
    SL_CheckLine();
loc_800253E0:
    v0 = lh(s0);
    a0 = lhu(s0);
    v1 = a0 << 16;
    if (v0 != s4) goto loc_8002539C;
loc_800253F0:
    s1++;
    v0 = (i32(s3) < i32(s1));
    if (v0 == 0) goto loc_80025348;
loc_80025400:
    s2++;
    v0 = (i32(s5) < i32(s2));
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(s3) < i32(s6));
        if (bJump) goto loc_80025340;
    }
loc_80025410:
    v1 = lw(gp + 0xC48);                                // Load from: gBlockFrac (80078228)
    v0 = (i32(v1) < 0x1000);
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8002542C;
    }
    v0 = v1;
    goto loc_80025434;
loc_8002542C:
    sw(0, gp + 0xC48);                                  // Store to: gBlockFrac (80078228)
    sw(0, gp + 0x9BC);                                  // Store to: gpSpecialLine (80077F9C)
loc_80025434:
    ra = lw(sp + 0x3C);
    s6 = lw(sp + 0x38);
    s5 = lw(sp + 0x34);
    s4 = lw(sp + 0x30);
    s3 = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x40;
    return;
}

void SL_PointOnSide() noexcept {
    v0 = lw(gp + 0xAF4);                                // Load from: gP1y (800780D4)
    sp -= 0x20;
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    s0 = a1 - v0;
    v0 = lw(gp + 0xAEC);                                // Load from: gP1x (800780CC)
    a1 = lw(gp + 0xB78);                                // Load from: gNvx (80078158)
    a0 -= v0;
    FixedMul();
    s1 = v0;
    a1 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    a0 = s0;
    FixedMul();
    s1 += v0;
    v0 = 0x10000;                                       // Result = 00010000
    v0 = (i32(v0) < i32(s1));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800254B8;
    }
    v0 = 0xFFFF0000;                                    // Result = FFFF0000
    v0 = (i32(s1) < i32(v0));
    v0 = -v0;
loc_800254B8:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void SL_CrossFrac() noexcept {
    a1 = lw(gp + 0xB78);                                // Load from: gNvx (80078158)
    a2 = lw(gp + 0xAFC);                                // Load from: gP3x (800780DC)
    v1 = lw(gp + 0xB14);                                // Load from: gP3y (800780F4)
    v0 = lw(gp + 0xAF4);                                // Load from: gP1y (800780D4)
    a0 = lw(gp + 0xAEC);                                // Load from: gP1x (800780CC)
    sp -= 0x20;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    s1 = v1 - v0;
    a0 = a2 - a0;
    FixedMul();
    s2 = v0;
    a1 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    a0 = s1;
    FixedMul();
    s2 += v0;
    a1 = lw(gp + 0xB78);                                // Load from: gNvx (80078158)
    a2 = lw(gp + 0xB10);                                // Load from: gP4x (800780F0)
    v1 = lw(gp + 0xB1C);                                // Load from: gP4y (800780FC)
    v0 = lw(gp + 0xAF4);                                // Load from: gP1y (800780D4)
    a0 = lw(gp + 0xAEC);                                // Load from: gP1x (800780CC)
    s1 = v1 - v0;
    a0 = a2 - a0;
    FixedMul();
    s0 = v0;
    a1 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    a0 = s1;
    FixedMul();
    s0 += v0;
    v0 = ~s2;
    v0 >>= 31;
    v1 = s0 >> 31;
    {
        const bool bJump = (v0 != v1)
        v0 = 0x10000;                                   // Result = 00010000
        if (bJump) goto loc_8002556C;
    }
    a0 = s2;
    a1 = a0 - s0;
    FixedDiv();
loc_8002556C:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void CheckLineEnds() noexcept {
    v1 = lw(gp + 0xB14);                                // Load from: gP3y (800780F4)
    v0 = lw(gp + 0xAF4);                                // Load from: gP1y (800780D4)
    sp -= 0x28;
    sw(s2, sp + 0x18);
    s2 = lw(gp + 0xAFC);                                // Load from: gP3x (800780DC)
    a0 = lw(gp + 0xAEC);                                // Load from: gP1x (800780CC)
    sw(s0, sp + 0x10);
    s0 = lw(gp + 0xB1C);                                // Load from: gP4y (800780FC)
    sw(ra, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s1, sp + 0x14);
    s3 = v0 - v1;
    a0 -= s2;
    s0 -= v1;
    v0 = lw(gp + 0xB10);                                // Load from: gP4x (800780F0)
    a1 = s0;
    s2 -= v0;
    FixedMul();
    s1 = v0;
    a0 = s3;
    a1 = s2;
    FixedMul();
    s1 += v0;
    a1 = s0;
    a2 = lw(gp + 0xAF0);                                // Load from: gP2x (800780D0)
    v1 = lw(gp + 0xB00);                                // Load from: gP2y (800780E0)
    v0 = lw(gp + 0xB14);                                // Load from: gP3y (800780F4)
    a0 = lw(gp + 0xAFC);                                // Load from: gP3x (800780DC)
    s3 = v1 - v0;
    a0 = a2 - a0;
    FixedMul();
    s0 = v0;
    a0 = s3;
    a1 = s2;
    FixedMul();
    s0 += v0;
    s1 = ~s1;
    s1 >>= 31;
    s0 >>= 31;
    v0 = s1 ^ s0;
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void ClipToLine() noexcept {
loc_80025648:
    a1 = lw(gp + 0xB78);                                // Load from: gNvx (80078158)
    v1 = lw(gp + 0x9B0);                                // Load from: gSlideX (80077F90)
    a0 = lw(gp + 0xAEC);                                // Load from: gP1x (800780CC)
    a2 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = lw(gp + 0x9B4);                                // Load from: gSlideY (80077F94)
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 = a1 << 1;
    v0 += a1;
    v0 <<= 3;
    v0 -= a1;
    v1 -= v0;
    v0 = a2 << 1;
    v0 += a2;
    v0 <<= 3;
    v0 -= a2;
    s0 -= v0;
    a2 = lw(gp + 0xA90);                                // Load from: gSlideDx (80078070)
    v0 = lw(gp + 0xA94);                                // Load from: gSlideDy (80078074)
    a0 = v1 - a0;
    sw(v1, gp + 0xAFC);                                 // Store to: gP3x (800780DC)
    sw(s0, gp + 0xB14);                                 // Store to: gP3y (800780F4)
    v1 += a2;
    sw(v1, gp + 0xB10);                                 // Store to: gP4x (800780F0)
    v1 = lw(gp + 0xAF4);                                // Load from: gP1y (800780D4)
    v0 += s0;
    sw(v0, gp + 0xB1C);                                 // Store to: gP4y (800780FC)
    s0 -= v1;
    FixedMul();
    s1 = v0;
    a1 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    a0 = s0;
    FixedMul();
    s1 += v0;
    v0 = 0x10000;                                       // Result = 00010000
    v0 = (i32(v0) < i32(s1));
    s2 = 1;                                             // Result = 00000001
    if (v0 != 0) goto loc_800256F8;
    v0 = 0xFFFF0000;                                    // Result = FFFF0000
    v0 = (i32(s1) < i32(v0));
    s2 = -v0;
loc_800256F8:
    v0 = -1;                                            // Result = FFFFFFFF
    if (s2 == v0) goto loc_80025824;
    a1 = lw(gp + 0xB78);                                // Load from: gNvx (80078158)
    v1 = lw(gp + 0xB10);                                // Load from: gP4x (800780F0)
    s0 = lw(gp + 0xB1C);                                // Load from: gP4y (800780FC)
    a0 = lw(gp + 0xAEC);                                // Load from: gP1x (800780CC)
    v0 = lw(gp + 0xAF4);                                // Load from: gP1y (800780D4)
    a0 = v1 - a0;
    s0 -= v0;
    FixedMul();
    s1 = v0;
    a1 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    a0 = s0;
    FixedMul();
    s1 += v0;
    v0 = 0x10000;                                       // Result = 00010000
    v0 = (i32(v0) < i32(s1));
    v1 = 1;                                             // Result = 00000001
    if (v0 != 0) goto loc_80025754;
    v0 = 0xFFFF0000;                                    // Result = FFFF0000
    v0 = (i32(s1) < i32(v0));
    v1 = -v0;
loc_80025754:
    v0 = 1;                                             // Result = 00000001
    if (v1 == 0) goto loc_80025824;
    if (v1 == v0) goto loc_80025824;
    v1 = 0;                                             // Result = 00000000
    if (s2 == 0) goto loc_8002580C;
    a1 = lw(gp + 0xB78);                                // Load from: gNvx (80078158)
    a2 = lw(gp + 0xAFC);                                // Load from: gP3x (800780DC)
    v1 = lw(gp + 0xB14);                                // Load from: gP3y (800780F4)
    v0 = lw(gp + 0xAF4);                                // Load from: gP1y (800780D4)
    a0 = lw(gp + 0xAEC);                                // Load from: gP1x (800780CC)
    s1 = v1 - v0;
    a0 = a2 - a0;
    FixedMul();
    s2 = v0;
    a1 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    a0 = s1;
    FixedMul();
    s2 += v0;
    a1 = lw(gp + 0xB78);                                // Load from: gNvx (80078158)
    a2 = lw(gp + 0xB10);                                // Load from: gP4x (800780F0)
    v1 = lw(gp + 0xB1C);                                // Load from: gP4y (800780FC)
    v0 = lw(gp + 0xAF4);                                // Load from: gP1y (800780D4)
    a0 = lw(gp + 0xAEC);                                // Load from: gP1x (800780CC)
    s1 = v1 - v0;
    a0 = a2 - a0;
    FixedMul();
    s0 = v0;
    a1 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    a0 = s1;
    FixedMul();
    s0 += v0;
    v0 = ~s2;
    v0 >>= 31;
    v1 = s0 >> 31;
    {
        const bool bJump = (v0 != v1)
        v1 = 0x10000;                                   // Result = 00010000
        if (bJump) goto loc_800257F8;
    }
    a0 = s2;
    a1 = a0 - s0;
    FixedDiv();
    v1 = v0;
loc_800257F8:
    v0 = lw(gp + 0xC48);                                // Load from: gBlockFrac (80078228)
    v0 = (i32(v1) < i32(v0));
    if (v0 == 0) goto loc_80025824;
loc_8002580C:
    v0 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    sw(v1, gp + 0xC48);                                 // Store to: gBlockFrac (80078228)
    v1 = lw(gp + 0xB78);                                // Load from: gNvx (80078158)
    v0 = -v0;
    sw(v0, gp + 0xBC8);                                 // Store to: gBlockNvx (800781A8)
    sw(v1, gp + 0xBD0);                                 // Store to: gBlockNvy (800781B0)
loc_80025824:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void SL_CheckLine() noexcept {
loc_80025840:
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7BFC);                               // Load from: gEndBox[3] (80097BFC)
    sp -= 0x20;
    sw(s2, sp + 0x18);
    s2 = a0;
    sw(ra, sp + 0x1C);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v1 = lw(s2 + 0x2C);
    v0 = (i32(v0) < i32(v1));
    if (v0 != 0) goto loc_80025A70;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 = lw(v1 + 0x7BF8);                               // Load from: gEndBox[2] (80097BF8)
    v0 = lw(s2 + 0x30);
    v0 = (i32(v0) < i32(v1));
    if (v0 != 0) goto loc_80025A70;
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7BF0);                               // Load from: gEndBox[0] (80097BF0)
    v1 = lw(s2 + 0x28);
    v0 = (i32(v0) < i32(v1));
    if (v0 != 0) goto loc_80025A70;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 = lw(v1 + 0x7BF4);                               // Load from: gEndBox[1] (80097BF4)
    v0 = lw(s2 + 0x24);
    v0 = (i32(v0) < i32(v1));
    if (v0 != 0) goto loc_80025A70;
    a0 = lw(s2 + 0x3C);
    if (a0 == 0) goto loc_80025960;
    v0 = lw(s2 + 0x10);
    v0 &= 1;
    if (v0 != 0) goto loc_80025960;
    a2 = lw(s2 + 0x38);
    v0 = lw(a0);
    v1 = lw(a2);
    a1 = v0;
    v0 = (i32(a1) < i32(v1));
    if (v0 == 0) goto loc_8002590C;
    a1 = v1;
loc_8002590C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7ED8);                               // Load from: gpSlideThing (80077ED8)
    v1 = lw(v0 + 0x8);
    v0 = 0x180000;                                      // Result = 00180000
    v1 = a1 - v1;
    v0 = (i32(v0) < i32(v1));
    if (v0 != 0) goto loc_80025960;
    v0 = lw(a0 + 0x4);
    a0 = lw(a2 + 0x4);
    v1 = v0;
    v0 = (i32(a0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = 0x370000;                                  // Result = 00370000
        if (bJump) goto loc_8002594C;
    }
    v1 = a0;
loc_8002594C:
    v0 |= 0xFFFF;                                       // Result = 0037FFFF
    v1 -= a1;
    v0 = (i32(v0) < i32(v1));
    if (v0 != 0) goto loc_80025A70;
loc_80025960:
    v0 = lw(s2);
    a0 = lw(gp + 0x9B0);                                // Load from: gSlideX (80077F90)
    v1 = lw(s2);
    a1 = lw(s2 + 0x4);
    s0 = lw(gp + 0x9B4);                                // Load from: gSlideY (80077F94)
    a3 = lw(v0);
    v0 = lw(s2 + 0x48);
    t0 = lw(v1 + 0x4);
    a2 = lw(a1);
    v1 = lw(s2 + 0x4);
    v0 <<= 2;
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += v0;
    a1 = lw(at);
    v0 = lw(v1 + 0x4);
    a0 -= a3;
    sw(v0, gp + 0xB00);                                 // Store to: gP2y (800780E0)
    v0 = lw(s2 + 0x48);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    v0 <<= 2;
    v0 += v1;
    v0 = lw(v0);
    sw(a3, gp + 0xAEC);                                 // Store to: gP1x (800780CC)
    sw(t0, gp + 0xAF4);                                 // Store to: gP1y (800780D4)
    sw(a2, gp + 0xAF0);                                 // Store to: gP2x (800780D0)
    sw(a1, gp + 0xB78);                                 // Store to: gNvx (80078158)
    v0 = -v0;
    sw(v0, gp + 0xB7C);                                 // Store to: gNvy (8007815C)
    s0 -= t0;
    FixedMul();
    s1 = v0;
    a1 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    a0 = s0;
    FixedMul();
    s1 += v0;
    v0 = 0x10000;                                       // Result = 00010000
    v0 = (i32(v0) < i32(s1));
    v1 = 1;                                             // Result = 00000001
    if (v0 != 0) goto loc_80025A10;
    v0 = 0xFFFF0000;                                    // Result = FFFF0000
    v0 = (i32(s1) < i32(v0));
    v1 = -v0;
loc_80025A10:
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 == 0) goto loc_80025A70;
    if (v1 != v0) goto loc_80025A68;
    v0 = lw(s2 + 0x3C);
    if (v0 == 0) goto loc_80025A70;
    a0 = lw(gp + 0xAEC);                                // Load from: gP1x (800780CC)
    v1 = lw(gp + 0xAF0);                                // Load from: gP2x (800780D0)
    v0 = lw(gp + 0xB00);                                // Load from: gP2y (800780E0)
    sw(a0, gp + 0xAF0);                                 // Store to: gP2x (800780D0)
    a0 = lw(gp + 0xAF4);                                // Load from: gP1y (800780D4)
    sw(v0, gp + 0xAF4);                                 // Store to: gP1y (800780D4)
    v0 = lw(gp + 0xB78);                                // Load from: gNvx (80078158)
    sw(v1, gp + 0xAEC);                                 // Store to: gP1x (800780CC)
    v1 = lw(gp + 0xB7C);                                // Load from: gNvy (8007815C)
    v0 = -v0;
    v1 = -v1;
    sw(v0, gp + 0xB78);                                 // Store to: gNvx (80078158)
    sw(v1, gp + 0xB7C);                                 // Store to: gNvy (8007815C)
    sw(a0, gp + 0xB00);                                 // Store to: gP2y (800780E0)
loc_80025A68:
    ClipToLine();
loc_80025A70:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void SL_PointOnSide2() noexcept {
    sp -= 0x20;
    sw(s2, sp + 0x18);
    s2 = a2;
    sw(s1, sp + 0x14);
    s1 = a1 - a3;
    a1 = lw(sp + 0x34);
    v0 = lw(sp + 0x30);
    a0 -= s2;
    sw(ra, sp + 0x1C);
    sw(s0, sp + 0x10);
    a1 -= a3;
    s2 -= v0;
    FixedMul();
    s0 = v0;
    a0 = s1;
    a1 = s2;
    FixedMul();
    s0 += v0;
    v0 = -1;                                            // Result = FFFFFFFF
    if (i32(s0) < 0) goto loc_80025AE0;
    v0 = 1;                                             // Result = 00000001
loc_80025AE0:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void SL_CheckSpecialLines() noexcept {
loc_80025AFC:
    sp -= 0x98;
    sw(a0, sp + 0x10);
    sw(a2, sp + 0x20);
    v0 = (i32(a0) < i32(a2));
    sw(ra, sp + 0x94);
    sw(fp, sp + 0x90);
    sw(s7, sp + 0x8C);
    sw(s6, sp + 0x88);
    sw(s5, sp + 0x84);
    sw(s4, sp + 0x80);
    sw(s3, sp + 0x7C);
    sw(s2, sp + 0x78);
    sw(s1, sp + 0x74);
    sw(s0, sp + 0x70);
    sw(a1, sp + 0x18);
    sw(a3, sp + 0x28);
    if (v0 == 0) goto loc_80025B50;
    t1 = lw(sp + 0x10);
    t0 = lw(sp + 0x20);
    sw(t1, sp + 0x38);
    goto loc_80025B5C;
loc_80025B50:
    t1 = lw(sp + 0x20);
    t0 = lw(sp + 0x10);
    sw(t1, sp + 0x38);
loc_80025B5C:
    sw(t0, sp + 0x40);
    t1 = lw(sp + 0x18);
    t0 = lw(sp + 0x28);
    v0 = (i32(t1) < i32(t0));
    if (v0 == 0) goto loc_80025B94;
    sw(t1, sp + 0x48);
    goto loc_80025BA0;
loc_80025B80:
    v0 = lw(gp + 0xA3C);                                // Load from: gpLine (8007801C)
    sw(v0, gp + 0x9BC);                                 // Store to: gpSpecialLine (80077F9C)
    goto loc_80025F10;
loc_80025B94:
    t1 = lw(sp + 0x28);
    t0 = lw(sp + 0x18);
    sw(t1, sp + 0x48);
loc_80025BA0:
    sw(t0, sp + 0x50);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    t1 = lw(sp + 0x38);
    t0 = lw(sp + 0x40);
    v1 = t1 - v0;
    a0 = u32(i32(v1) >> 23);
    v0 = t0 - v0;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    t1 = lw(sp + 0x48);
    t0 = lw(sp + 0x50);
    v0 = u32(i32(v0) >> 23);
    sw(v0, sp + 0x58);
    v0 = t1 - v1;
    v0 = u32(i32(v0) >> 23);
    v1 = t0 - v1;
    v1 = u32(i32(v1) >> 23);
    sw(v0, sp + 0x60);
    sw(v1, sp + 0x68);
    if (i32(a0) >= 0) goto loc_80025BF8;
    a0 = 0;                                             // Result = 00000000
loc_80025BF8:
    t1 = lw(sp + 0x60);
    if (i32(t1) >= 0) goto loc_80025C0C;
    sw(0, sp + 0x60);
loc_80025C0C:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    t0 = lw(sp + 0x58);
    v0 = (i32(t0) < i32(v1));
    v1--;
    if (v0 != 0) goto loc_80025C2C;
    sw(v1, sp + 0x58);
loc_80025C2C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    t1 = lw(sp + 0x68);
    v0 = (i32(t1) < i32(v1));
    if (v0 != 0) goto loc_80025C50;
    v1--;
    sw(v1, sp + 0x68);
loc_80025C50:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    t0 = lw(sp + 0x58);
    sw(a0, sp + 0x30);
    sw(0, gp + 0x9BC);                                  // Store to: gpSpecialLine (80077F9C)
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7BC4);                                // Store to: gValidCount (80077BC4)
    v0 = (i32(t0) < i32(a0));
    if (v0 != 0) goto loc_80025F10;
loc_80025C7C:
    fp = lw(sp + 0x60);
    t1 = lw(sp + 0x68);
    v0 = (i32(t1) < i32(fp));
    if (v0 != 0) goto loc_80025EF8;
loc_80025C94:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    mult(fp, v0);
    t0 = lw(sp + 0x30);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7EC0);                               // Load from: gpBlockmap (80078140)
    v1 = lo;
    v1 += t0;
    v0 = v1 << 1;
    v0 += a0;
    v0 = lh(v0);
    sw(v1, gp + 0x9A4);                                 // Store to: gSL_CheckSpecialLines_UNKNOWN_var (80077F84)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F3C);                               // Load from: gpBlockmapLump (800780C4)
    sw(v0, gp + 0x9A4);                                 // Store to: gSL_CheckSpecialLines_UNKNOWN_var (80077F84)
    v0 <<= 1;
    v0 += v1;
    sw(v0, gp + 0xC70);                                 // Store to: gpBlockmapLineNum (80078250)
    v1 = lh(v0);
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 == v0) goto loc_80025EE4;
loc_80025CF0:
    v0 = lw(gp + 0xC70);                                // Load from: gpBlockmapLineNum (80078250)
    v1 = lh(v0);
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB0);                               // Load from: gpLines (80077EB0)
    v0 <<= 2;
    v1 += v0;
    v0 = lw(v1 + 0x14);
    sw(v1, gp + 0xA3C);                                 // Store to: gpLine (8007801C)
    if (v0 == 0) goto loc_80025EC4;
    v0 = lw(v1 + 0x40);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7BC4);                               // Load from: gValidCount (80077BC4)
    if (v0 == a0) goto loc_80025EC4;
    v0 = lw(v1 + 0x2C);
    sw(a0, v1 + 0x40);
    t1 = lw(sp + 0x40);
    v0 = (i32(t1) < i32(v0));
    if (v0 != 0) goto loc_80025EC4;
    v0 = lw(v1 + 0x30);
    t0 = lw(sp + 0x38);
    v0 = (i32(v0) < i32(t0));
    if (v0 != 0) goto loc_80025EC4;
    v0 = lw(v1 + 0x28);
    t1 = lw(sp + 0x50);
    v0 = (i32(t1) < i32(v0));
    if (v0 != 0) goto loc_80025EC4;
    v0 = lw(v1 + 0x24);
    t0 = lw(sp + 0x48);
    v0 = (i32(v0) < i32(t0));
    s5 = 1;                                             // Result = 00000001
    if (v0 != 0) goto loc_80025EC4;
    v0 = lw(v1);
    v1 = lw(v1 + 0x4);
    t1 = lw(sp + 0x10);
    s2 = lw(v0);
    s4 = lw(v0 + 0x4);
    s7 = lw(v1 + 0x4);
    s6 = lw(v1);
    a0 = t1 - s2;
    s3 = s7 - s4;
    a1 = s3;
    FixedMul();
    s0 = v0;
    s1 = s2 - s6;
    t0 = lw(sp + 0x18);
    a1 = s1;
    a0 = t0 - s4;
    FixedMul();
    s0 += v0;
    a1 = s3;
    if (i32(s0) >= 0) goto loc_80025E00;
    s5 = -1;                                            // Result = FFFFFFFF
loc_80025E00:
    t1 = lw(sp + 0x20);
    a0 = t1 - s2;
    FixedMul();
    s0 = v0;
    t0 = lw(sp + 0x28);
    a1 = s1;
    a0 = t0 - s4;
    FixedMul();
    s0 += v0;
    v0 = 1;                                             // Result = 00000001
    if (i32(s0) >= 0) goto loc_80025E30;
    v0 = -1;                                            // Result = FFFFFFFF
loc_80025E30:
    if (s5 == v0) goto loc_80025EC4;
    t1 = lw(sp + 0x10);
    t0 = lw(sp + 0x28);
    a0 = s2 - t1;
    t1 = lw(sp + 0x18);
    s2 = t0 - t1;
    a1 = s2;
    FixedMul();
    t0 = lw(sp + 0x18);
    t1 = lw(sp + 0x10);
    a0 = s4 - t0;
    t0 = lw(sp + 0x20);
    s0 = v0;
    s1 = t1 - t0;
    a1 = s1;
    FixedMul();
    s0 += v0;
    s5 = 1;                                             // Result = 00000001
    if (i32(s0) >= 0) goto loc_80025E88;
    s5 = -1;                                            // Result = FFFFFFFF
loc_80025E88:
    t1 = lw(sp + 0x10);
    a1 = s2;
    a0 = s6 - t1;
    FixedMul();
    s0 = v0;
    t0 = lw(sp + 0x18);
    a1 = s1;
    a0 = s7 - t0;
    FixedMul();
    s0 += v0;
    v0 = 1;                                             // Result = 00000001
    if (i32(s0) >= 0) goto loc_80025EBC;
    v0 = -1;                                            // Result = FFFFFFFF
loc_80025EBC:
    if (s5 != v0) goto loc_80025B80;
loc_80025EC4:
    v1 = lw(gp + 0xC70);                                // Load from: gpBlockmapLineNum (80078250)
    v0 = v1 + 2;
    sw(v0, gp + 0xC70);                                 // Store to: gpBlockmapLineNum (80078250)
    v1 = lh(v1 + 0x2);
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 != v0) goto loc_80025CF0;
loc_80025EE4:
    t1 = lw(sp + 0x68);
    fp++;
    v0 = (i32(t1) < i32(fp));
    if (v0 == 0) goto loc_80025C94;
loc_80025EF8:
    t0 = lw(sp + 0x30);
    t1 = lw(sp + 0x58);
    t0++;
    v0 = (i32(t1) < i32(t0));
    sw(t0, sp + 0x30);
    if (v0 == 0) goto loc_80025C7C;
loc_80025F10:
    ra = lw(sp + 0x94);
    fp = lw(sp + 0x90);
    s7 = lw(sp + 0x8C);
    s6 = lw(sp + 0x88);
    s5 = lw(sp + 0x84);
    s4 = lw(sp + 0x80);
    s3 = lw(sp + 0x7C);
    s2 = lw(sp + 0x78);
    s1 = lw(sp + 0x74);
    s0 = lw(sp + 0x70);
    sp += 0x98;
    return;
}

void P_InitPicAnims() noexcept {
loc_80025F44:
    sp -= 0x28;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 += 0x63AC;                                       // Result = gAnims_1[0] (800863AC)
    sw(s1, sp + 0x14);
    s1 = 0x80060000;                                    // Result = 80060000
    s1 += 0x7244;                                       // Result = AnimDefs_1_bIsTexture (80067244)
    sw(s3, sp + 0x1C);
    s3 = 0;                                             // Result = 00000000
    sw(s2, sp + 0x18);
    s2 = s1 + 0xD;                                      // Result = AnimDefs_1_startName[0] (80067251)
    sw(ra, sp + 0x20);
    sw(s0, sp + 0x10);
    sw(v0, gp + 0xB84);                                 // Store to: gpLastAnim (80078164)
loc_80025F78:
    v0 = lw(s1);
    if (v0 == 0) goto loc_800260A4;
    a0 = s1 + 4;
    R_TextureNumForName();
    v1 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    a0 = s2;
    sw(v0, v1 + 0x8);
    R_TextureNumForName();
    v1 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    a0 = lw(v1 + 0x8);
    a1 = v0;
    sw(a1, v1 + 0x4);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7ED8);                               // Load from: gpTextures (80078128)
    v0 = a0 << 5;
    v0 += v1;
    v0 = lhu(v0 + 0xA);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(a1) < i32(a0));
        if (bJump) goto loc_800261F0;
    }
    s0 = a0;
    if (v0 != 0) goto loc_800261B8;
    a1 = 8;                                             // Result = 00000008
loc_80025FE0:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7D20);                               // Load from: gFirstTexLumpNum (800782E0)
    a2 = 0;                                             // Result = 00000000
    a0 += s0;
    W_CacheLumpNum();
    v0 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    a0 = s0 << 5;
    v0 = lw(v0 + 0x8);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7ED8);                               // Load from: gpTextures (80078128)
    v0 <<= 5;
    v0 += v1;
    v0 = lbu(v0 + 0x8);
    v1 += a0;
    sb(v0, v1 + 0x8);
    v0 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    v0 = lw(v0 + 0x8);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7ED8);                               // Load from: gpTextures (80078128)
    v0 <<= 5;
    v0 += v1;
    v0 = lbu(v0 + 0x9);
    v1 += a0;
    sb(v0, v1 + 0x9);
    a1 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    v0 = lw(a1 + 0x8);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7ED8);                               // Load from: gpTextures (80078128)
    v0 <<= 5;
    v0 += v1;
    v0 = lhu(v0 + 0xA);
    a0 += v1;
    sh(v0, a0 + 0xA);
    v0 = lw(a1 + 0x8);
    v0 <<= 5;
    v0 += v1;
    v0 = lw(v0 + 0x14);
    sw(v0, a0 + 0x14);
    v0 = lw(a1 + 0x4);
    s0++;
    v0 = (i32(v0) < i32(s0));
    a1 = 8;                                             // Result = 00000008
    if (v0 == 0) goto loc_80025FE0;
    goto loc_800261B8;
loc_800260A4:
    a0 = s1 + 4;
    R_FlatNumForName();
    v1 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    a0 = s2;
    sw(v0, v1 + 0x8);
    R_FlatNumForName();
    v1 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    a0 = lw(v1 + 0x8);
    a1 = v0;
    sw(a1, v1 + 0x4);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EDC);                               // Load from: gpFlatTextures (80078124)
    v0 = a0 << 5;
    v0 += v1;
    v0 = lhu(v0 + 0xA);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(a1) < i32(a0));
        if (bJump) goto loc_800261F0;
    }
    s0 = a0;
    if (v0 != 0) goto loc_800261B8;
    a1 = 8;                                             // Result = 00000008
loc_800260FC:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7D48);                               // Load from: gFirstFlatLumpNum (800782B8)
    a2 = 0;                                             // Result = 00000000
    a0 += s0;
    W_CacheLumpNum();
    v0 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    a0 = s0 << 5;
    v0 = lw(v0 + 0x8);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EDC);                               // Load from: gpFlatTextures (80078124)
    v0 <<= 5;
    v0 += v1;
    v0 = lbu(v0 + 0x8);
    v1 += a0;
    sb(v0, v1 + 0x8);
    v0 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    v0 = lw(v0 + 0x8);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EDC);                               // Load from: gpFlatTextures (80078124)
    v0 <<= 5;
    v0 += v1;
    v0 = lbu(v0 + 0x9);
    v1 += a0;
    sb(v0, v1 + 0x9);
    a1 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    v0 = lw(a1 + 0x8);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EDC);                               // Load from: gpFlatTextures (80078124)
    v0 <<= 5;
    v0 += v1;
    v0 = lhu(v0 + 0xA);
    a0 += v1;
    sh(v0, a0 + 0xA);
    v0 = lw(a1 + 0x8);
    v0 <<= 5;
    v0 += v1;
    v0 = lw(v0 + 0x14);
    sw(v0, a0 + 0x14);
    v0 = lw(a1 + 0x4);
    s0++;
    v0 = (i32(v0) < i32(s0));
    a1 = 8;                                             // Result = 00000008
    if (v0 == 0) goto loc_800260FC;
loc_800261B8:
    v1 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    a1 = lw(s1);
    a2 = lw(v1 + 0x8);
    v0 = lw(v1 + 0x4);
    a0 = lw(v1 + 0x8);
    sw(a1, v1);
    v0 -= a0;
    v0++;
    sw(a2, v1 + 0x10);
    sw(v0, v1 + 0xC);
    a0 = lw(s2 + 0xB);
    v0 = v1 + 0x18;
    sw(v0, gp + 0xB84);                                 // Store to: gpLastAnim (80078164)
    sw(a0, v1 + 0x14);
loc_800261F0:
    s3++;
    s2 += 0x1C;
    v0 = (s3 < 0x10);
    s1 += 0x1C;
    if (v0 != 0) goto loc_80025F78;
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void getSide() noexcept {
loc_80026224:
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    v0 -= a0;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F58);                               // Load from: gpSectors (800780A8)
    v0 <<= 2;
    v0 += v1;
    v0 = lw(v0 + 0x58);
    a1 <<= 2;
    a1 += v0;
    v0 = lw(a1);
    a2 <<= 2;
    a2 += v0;
    v1 = lw(a2 + 0x1C);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EA0);                               // Load from: gpSides (80077EA0)
    v0 <<= 3;
    v0 += v1;
    return;
}

void getSector() noexcept {
loc_80026280:
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    v0 -= a0;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F58);                               // Load from: gpSectors (800780A8)
    v0 <<= 2;
    v0 += v1;
    v0 = lw(v0 + 0x58);
    a1 <<= 2;
    a1 += v0;
    v0 = lw(a1);
    a2 <<= 2;
    a2 += v0;
    v1 = lw(a2 + 0x1C);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EA0);                               // Load from: gpSides (80077EA0)
    v0 <<= 3;
    v0 += v1;
    v0 = lw(v0 + 0x14);
    return;
}

void twoSided() noexcept {
loc_800262E4:
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    v0 -= a0;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F58);                               // Load from: gpSectors (800780A8)
    v0 <<= 2;
    v0 += v1;
    v0 = lw(v0 + 0x58);
    a1 <<= 2;
    a1 += v0;
    v0 = lw(a1);
    v0 = lw(v0 + 0x10);
    v0 &= 4;
    return;
}

void getNextSector() noexcept {
loc_80026324:
    v0 = lw(a0 + 0x10);
    v0 &= 4;
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8002634C;
    }
    v0 = lw(a0 + 0x38);
    if (v0 != a1) goto loc_8002634C;
    v0 = lw(a0 + 0x3C);
loc_8002634C:
    return;
}

void P_FindLowestFloorSurrounding() noexcept {
loc_80026354:
    sp -= 8;
    v0 = lw(a0 + 0x54);
    a3 = lw(a0);
    a1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_800263D8;
    t0 = v0;
    a2 = lw(a0 + 0x58);
loc_80026370:
    v1 = lw(a2);
    v0 = lw(v1 + 0x10);
    v0 &= 4;
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_800263A4;
    }
    v0 = lw(v1 + 0x38);
    if (v0 != a0) goto loc_800263A4;
    v0 = lw(v1 + 0x3C);
loc_800263A4:
    a2 += 4;
    if (v0 == 0) goto loc_800263C8;
    v1 = lw(v0);                                        // Load from: 00000000
    v0 = (i32(v1) < i32(a3));
    if (v0 == 0) goto loc_800263C8;
    a3 = v1;
loc_800263C8:
    a1++;
    v0 = (i32(a1) < i32(t0));
    if (v0 != 0) goto loc_80026370;
loc_800263D8:
    v0 = a3;
    sp += 8;
    return;
}

void P_FindHighestFloorSurrounding() noexcept {
loc_800263E8:
    sp -= 8;
    a3 = 0xFE0C0000;                                    // Result = FE0C0000
    v0 = lw(a0 + 0x54);
    a1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80026470;
    t0 = v0;
    a2 = lw(a0 + 0x58);
loc_80026408:
    v1 = lw(a2);
    v0 = lw(v1 + 0x10);
    v0 &= 4;
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8002643C;
    }
    v0 = lw(v1 + 0x38);
    if (v0 != a0) goto loc_8002643C;
    v0 = lw(v1 + 0x3C);
loc_8002643C:
    a2 += 4;
    if (v0 == 0) goto loc_80026460;
    v1 = lw(v0);                                        // Load from: 00000000
    v0 = (i32(a3) < i32(v1));
    if (v0 == 0) goto loc_80026460;
    a3 = v1;
loc_80026460:
    a1++;
    v0 = (i32(a1) < i32(t0));
    if (v0 != 0) goto loc_80026408;
loc_80026470:
    v0 = a3;                                            // Result = FE0C0000
    sp += 8;
    return;
}

void P_FindNextHighestFloor() noexcept {
loc_80026480:
    sp -= 0x58;
    a3 = 0;                                             // Result = 00000000
    v0 = lw(a0 + 0x54);
    a2 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80026518;
    t0 = sp;
loc_8002649C:
    v0 = lw(a0 + 0x58);
    v1 = a2 << 2;
    v1 += v0;
    v1 = lw(v1);
    v0 = lw(v1 + 0x10);
    v0 &= 4;
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_800264D8;
    }
    v0 = lw(v1 + 0x38);
    if (v0 != a0) goto loc_800264D8;
    v0 = lw(v1 + 0x3C);
loc_800264D8:
    a2++;
    if (v0 == 0) goto loc_80026504;
    v1 = lw(v0);                                        // Load from: 00000000
    v0 = (i32(a1) < i32(v1));
    if (v0 == 0) goto loc_80026504;
    sw(v1, t0);
    t0 += 4;
    a3++;                                               // Result = 00000001
loc_80026504:
    v0 = lw(a0 + 0x54);
    v0 = (i32(a2) < i32(v0));
    if (v0 != 0) goto loc_8002649C;
loc_80026518:
    a1 = lw(sp);
    a2 = 1;                                             // Result = 00000001
    v0 = (i32(a2) < i32(a3));                           // Result = 00000000
    {
        const bool bJump = (v0 == 0)
        v0 = a1;
        if (bJump) goto loc_80026558;
    }
    a0 = sp + 4;
loc_80026530:
    v1 = lw(a0);
    v0 = (i32(v1) < i32(a1));
    a0 += 4;
    if (v0 == 0) goto loc_80026548;
    a1 = v1;
loc_80026548:
    a2++;
    v0 = (i32(a2) < i32(a3));
    {
        const bool bJump = (v0 != 0)
        v0 = a1;
        if (bJump) goto loc_80026530;
    }
loc_80026558:
    sp += 0x58;
    return;
}

void P_FindLowestCeilingSurrounding() noexcept {
loc_80026564:
    sp -= 8;
    a3 = 0x7FFF0000;                                    // Result = 7FFF0000
    a3 |= 0xFFFF;                                       // Result = 7FFFFFFF
    v0 = lw(a0 + 0x54);
    a1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_800265F0;
    t0 = v0;
    a2 = lw(a0 + 0x58);
loc_80026588:
    v1 = lw(a2);
    v0 = lw(v1 + 0x10);
    v0 &= 4;
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_800265BC;
    }
    v0 = lw(v1 + 0x38);
    if (v0 != a0) goto loc_800265BC;
    v0 = lw(v1 + 0x3C);
loc_800265BC:
    a2 += 4;
    if (v0 == 0) goto loc_800265E0;
    v1 = lw(v0 + 0x4);                                  // Load from: 00000004
    v0 = (i32(v1) < i32(a3));
    if (v0 == 0) goto loc_800265E0;
    a3 = v1;
loc_800265E0:
    a1++;
    v0 = (i32(a1) < i32(t0));
    if (v0 != 0) goto loc_80026588;
loc_800265F0:
    v0 = a3;                                            // Result = 7FFFFFFF
    sp += 8;
    return;
}

void P_FindHighestCeilingSurrounding() noexcept {
loc_80026600:
    sp -= 8;
    a3 = 0;                                             // Result = 00000000
    v0 = lw(a0 + 0x54);
    a2 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80026688;
    t0 = v0;
    a1 = lw(a0 + 0x58);
loc_80026620:
    v1 = lw(a1);
    v0 = lw(v1 + 0x10);
    v0 &= 4;
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80026654;
    }
    v0 = lw(v1 + 0x38);
    if (v0 != a0) goto loc_80026654;
    v0 = lw(v1 + 0x3C);
loc_80026654:
    a1 += 4;
    if (v0 == 0) goto loc_80026678;
    v1 = lw(v0 + 0x4);                                  // Load from: 00000004
    v0 = (i32(a2) < i32(v1));
    if (v0 == 0) goto loc_80026678;
    a2 = v1;
loc_80026678:
    a3++;
    v0 = (i32(a3) < i32(t0));
    if (v0 != 0) goto loc_80026620;
loc_80026688:
    v0 = a2;                                            // Result = 00000000
    sp += 8;
    return;
}

void P_FindSectorFromLineTag() noexcept {
loc_80026698:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F54);                               // Load from: gNumSectors (80077F54)
    a1++;
    v0 = (i32(a1) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = a1 << 1;
        if (bJump) goto loc_800266F4;
    }
    a2 = v1;
    v0 += a1;
    v0 <<= 3;
    v0 -= a1;
    v0 <<= 2;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F58);                               // Load from: gpSectors (800780A8)
    a0 = lw(a0 + 0x18);
    v1 += v0;
loc_800266D4:
    v0 = lw(v1 + 0x18);
    {
        const bool bJump = (v0 == a0)
        v0 = a1;
        if (bJump) goto loc_800266F8;
    }
    a1++;
    v0 = (i32(a1) < i32(a2));
    v1 += 0x5C;
    if (v0 != 0) goto loc_800266D4;
loc_800266F4:
    v0 = -1;                                            // Result = FFFFFFFF
loc_800266F8:
    return;
}

void P_FindMinSurroundingLight() noexcept {
loc_80026700:
    sp -= 8;
    v0 = lw(a0 + 0x54);
    a2 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80026784;
    t0 = v0;
    a3 = lw(a0 + 0x58);
loc_8002671C:
    v1 = lw(a3);
    v0 = lw(v1 + 0x10);
    v0 &= 4;
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80026750;
    }
    v0 = lw(v1 + 0x38);
    if (v0 != a0) goto loc_80026750;
    v0 = lw(v1 + 0x3C);
loc_80026750:
    a3 += 4;
    if (v0 == 0) goto loc_80026774;
    v1 = lh(v0 + 0x12);                                 // Load from: 00000012
    v0 = (i32(v1) < i32(a1));
    if (v0 == 0) goto loc_80026774;
    a1 = v1;
loc_80026774:
    a2++;
    v0 = (i32(a2) < i32(t0));
    if (v0 != 0) goto loc_8002671C;
loc_80026784:
    v0 = a1;
    sp += 8;
    return;
}

void P_CrossSpecialLine() noexcept {
loc_80026794:
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s0, sp + 0x20);
    v0 = lw(a1 + 0x80);
    s0 = a0;
    if (v0 != 0) goto loc_8002683C;
    v1 = lw(a1 + 0x54);
    v0 = (v1 < 0x1A);
    {
        const bool bJump = (v0 == 0)
        v0 = (v1 < 0x14);
        if (bJump) goto loc_800267CC;
    }
    if (v0 == 0) goto loc_80026D2C;
loc_800267CC:
    v1 = lw(s0 + 0x14);
    v0 = 0x58;                                          // Result = 00000058
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 0x59);
        if (bJump) goto loc_8002683C;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0xA;                                       // Result = 0000000A
        if (bJump) goto loc_80026818;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 0xB);
        if (bJump) goto loc_8002683C;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_80026804;
    }
    if (v1 == v0) goto loc_8002683C;
    goto loc_80026D2C;
loc_80026804:
    v0 = 0x27;                                          // Result = 00000027
    if (v1 == v0) goto loc_8002683C;
    goto loc_80026D2C;
loc_80026818:
    v0 = 0x61;                                          // Result = 00000061
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 0x61);
        if (bJump) goto loc_8002683C;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(v1) < 0x7F);
        if (bJump) goto loc_80026D2C;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(v1) < 0x7D);
        if (bJump) goto loc_80026D2C;
    }
    if (v0 != 0) goto loc_80026D2C;
loc_8002683C:
    v0 = lw(s0 + 0x14);
    v1 = v0 - 2;
    v0 = (v1 < 0x8D);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 << 2;
        if (bJump) goto loc_80026D2C;
    }
    at = 0x80010000;                                    // Result = 80010000
    at += 0xBAC;                                        // Result = JumpTable_P_CrossSpecialLine[0] (80010BAC)
    at += v0;
    v0 = lw(at);
    switch (v0) {
        case 0x80026870: goto loc_80026870;
        case 0x8002687C: goto loc_8002687C;
        case 0x80026888: goto loc_80026888;
        case 0x80026894: goto loc_80026894;
        case 0x800268A0: goto loc_800268A0;
        case 0x80026D2C: goto loc_80026D2C;
        case 0x800268AC: goto loc_800268AC;
        case 0x800268B8: goto loc_800268B8;
        case 0x800268C4: goto loc_800268C4;
        case 0x800268D0: goto loc_800268D0;
        case 0x800268DC: goto loc_800268DC;
        case 0x800268E8: goto loc_800268E8;
        case 0x800268F8: goto loc_800268F8;
        case 0x80026904: goto loc_80026904;
        case 0x80026910: goto loc_80026910;
        case 0x8002691C: goto loc_8002691C;
        case 0x80026928: goto loc_80026928;
        case 0x80026940: goto loc_80026940;
        case 0x8002694C: goto loc_8002694C;
        case 0x80026958: goto loc_80026958;
        case 0x80026A94: goto loc_80026A94;
        case 0x80026964: goto loc_80026964;
        case 0x8002697C: goto loc_8002697C;
        case 0x80026988: goto loc_80026988;
        case 0x80026998: goto loc_80026998;
        case 0x800269A4: goto loc_800269A4;
        case 0x800269B4: goto loc_800269B4;
        case 0x800269C0: goto loc_800269C0;
        case 0x800269D0: goto loc_800269D0;
        case 0x800269DC: goto loc_800269DC;
        case 0x80026B00: goto loc_80026B00;
        case 0x80026B14: goto loc_80026B14;
        case 0x80026B28: goto loc_80026B28;
        case 0x80026B38: goto loc_80026B38;
        case 0x80026B4C: goto loc_80026B4C;
        case 0x80026B60: goto loc_80026B60;
        case 0x80026B74: goto loc_80026B74;
        case 0x80026B88: goto loc_80026B88;
        case 0x80026B9C: goto loc_80026B9C;
        case 0x80026BB0: goto loc_80026BB0;
        case 0x80026BC4: goto loc_80026BC4;
        case 0x80026BD8: goto loc_80026BD8;
        case 0x80026BEC: goto loc_80026BEC;
        case 0x80026C00: goto loc_80026C00;
        case 0x80026C0C: goto loc_80026C0C;
        case 0x80026C18: goto loc_80026C18;
        case 0x80026C28: goto loc_80026C28;
        case 0x80026C3C: goto loc_80026C3C;
        case 0x80026C50: goto loc_80026C50;
        case 0x80026C64: goto loc_80026C64;
        case 0x80026C78: goto loc_80026C78;
        case 0x80026C8C: goto loc_80026C8C;
        case 0x80026C98: goto loc_80026C98;
        case 0x80026D24: goto loc_80026D24;
        case 0x80026CAC: goto loc_80026CAC;
        case 0x80026A10: goto loc_80026A10;
        case 0x800269E8: goto loc_800269E8;
        case 0x80026CC0: goto loc_80026CC0;
        case 0x80026CD4: goto loc_80026CD4;
        case 0x80026CE8: goto loc_80026CE8;
        case 0x800269F8: goto loc_800269F8;
        case 0x80026A04: goto loc_80026A04;
        case 0x80026A28: goto loc_80026A28;
        case 0x80026A40: goto loc_80026A40;
        case 0x80026CFC: goto loc_80026CFC;
        case 0x80026A58: goto loc_80026A58;
        case 0x80026A70: goto loc_80026A70;
        case 0x80026A84: goto loc_80026A84;
        case 0x80026D14: goto loc_80026D14;
        case 0x80026AA4: goto loc_80026AA4;
        case 0x80026ABC: goto loc_80026ABC;
        default: jump_table_err(); break;
    }
loc_80026870:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    goto loc_80026A30;
loc_8002687C:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    goto loc_80026A30;
loc_80026888:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    goto loc_80026A30;
loc_80026894:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    goto loc_80026A48;
loc_800268A0:
    a0 = s0;
    a1 = 4;                                             // Result = 00000004
    goto loc_80026AAC;
loc_800268AC:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    goto loc_80026A18;
loc_800268B8:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    goto loc_80026A60;
loc_800268C4:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    goto loc_80026930;
loc_800268D0:
    a0 = s0;
    a1 = 0xFF;                                          // Result = 000000FF
    goto loc_80026930;
loc_800268DC:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    goto loc_80026A30;
loc_800268E8:
    a0 = s0;
    EV_StartLightStrobing();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_800268F8:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    goto loc_80026A48;
loc_80026904:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    goto loc_80026A60;
loc_80026910:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    goto loc_80026AAC;
loc_8002691C:
    a0 = s0;
    a1 = 5;                                             // Result = 00000005
    goto loc_80026A48;
loc_80026928:
    a0 = s0;
    a1 = 0x23;                                          // Result = 00000023
loc_80026930:
    EV_LightTurnOn();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_80026940:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    goto loc_80026A48;
loc_8002694C:
    a0 = s0;
    a1 = 6;                                             // Result = 00000006
    goto loc_80026A48;
loc_80026958:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    goto loc_80026A48;
loc_80026964:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    EV_DoCeiling();
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    goto loc_80026A48;
loc_8002697C:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    goto loc_80026AAC;
loc_80026988:
    G_ExitLevel();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_80026998:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    goto loc_80026A60;
loc_800269A4:
    a0 = s0;
    EV_StopPlat();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_800269B4:
    a0 = s0;
    a1 = 9;                                             // Result = 00000009
    goto loc_80026A48;
loc_800269C0:
    a0 = s0;
    EV_CeilingCrushStop();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_800269D0:
    a0 = s0;
    a1 = 7;                                             // Result = 00000007
    goto loc_80026A48;
loc_800269DC:
    a0 = s0;
    a1 = 8;                                             // Result = 00000008
    goto loc_80026A48;
loc_800269E8:
    a0 = s0;
    EV_TurnTagLightsOff();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_800269F8:
    a0 = s0;
    a1 = 5;                                             // Result = 00000005
    goto loc_80026A30;
loc_80026A04:
    a0 = s0;
    a1 = 6;                                             // Result = 00000006
    goto loc_80026A30;
loc_80026A10:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
loc_80026A18:
    EV_BuildStairs();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_80026A28:
    a0 = s0;
    a1 = 7;                                             // Result = 00000007
loc_80026A30:
    EV_DoDoor();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_80026A40:
    a0 = s0;
    a1 = 4;                                             // Result = 00000004
loc_80026A48:
    EV_DoFloor();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_80026A58:
    a0 = s0;
    a1 = 4;                                             // Result = 00000004
loc_80026A60:
    a2 = 0;                                             // Result = 00000000
    EV_DoPlat();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_80026A70:
    a0 = lw(s0 + 0x18);
    G_SecretExitLevel();
    goto loc_80026D2C;
loc_80026A84:
    v0 = lw(a1 + 0x80);
    if (v0 != 0) goto loc_80026D2C;
loc_80026A94:
    a0 = s0;
    EV_Teleport();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_80026AA4:
    a0 = s0;
    a1 = 5;                                             // Result = 00000005
loc_80026AAC:
    EV_DoCeiling();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_80026ABC:
    S_StopMusicSequence();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x3E5C;                                       // Result = CDTrackNum_ClubDoom (80073E5C)
    a0 = lw(v0);                                        // Load from: CDTrackNum_ClubDoom (80073E5C)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x75F8);                               // Load from: gCdMusicVol (800775F8)
    a2 = 0;                                             // Result = 00000000
    sw(0, sp + 0x18);
    sw(0, sp + 0x1C);
    v0 = lw(v0);                                        // Load from: CDTrackNum_ClubDoom (80073E5C)
    a3 = 0;                                             // Result = 00000000
    sw(v0, sp + 0x10);
    sw(a1, sp + 0x14);
    psxcd_play_at_andloop();
    sw(0, s0 + 0x14);
    goto loc_80026D2C;
loc_80026B00:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    EV_DoCeiling();
    goto loc_80026D2C;
loc_80026B14:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    EV_DoCeiling();
    goto loc_80026D2C;
loc_80026B28:
    a0 = s0;
    EV_CeilingCrushStop();
    goto loc_80026D2C;
loc_80026B38:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    EV_DoDoor();
    goto loc_80026D2C;
loc_80026B4C:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    EV_DoDoor();
    goto loc_80026D2C;
loc_80026B60:
    a0 = s0;
    a1 = 4;                                             // Result = 00000004
    EV_DoCeiling();
    goto loc_80026D2C;
loc_80026B74:
    a0 = s0;
    a1 = 0x23;                                          // Result = 00000023
    EV_LightTurnOn();
    goto loc_80026D2C;
loc_80026B88:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    EV_LightTurnOn();
    goto loc_80026D2C;
loc_80026B9C:
    a0 = s0;
    a1 = 0xFF;                                          // Result = 000000FF
    EV_LightTurnOn();
    goto loc_80026D2C;
loc_80026BB0:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    EV_DoFloor();
    goto loc_80026D2C;
loc_80026BC4:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    EV_DoFloor();
    goto loc_80026D2C;
loc_80026BD8:
    a0 = s0;
    a1 = 6;                                             // Result = 00000006
    EV_DoFloor();
    goto loc_80026D2C;
loc_80026BEC:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    EV_DoDoor();
    goto loc_80026D2C;
loc_80026C00:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    goto loc_80026D04;
loc_80026C0C:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    goto loc_80026D04;
loc_80026C18:
    a0 = s0;
    EV_StopPlat();
    goto loc_80026D2C;
loc_80026C28:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    EV_DoDoor();
    goto loc_80026D2C;
loc_80026C3C:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    EV_DoFloor();
    goto loc_80026D2C;
loc_80026C50:
    a0 = s0;
    a1 = 7;                                             // Result = 00000007
    EV_DoFloor();
    goto loc_80026D2C;
loc_80026C64:
    a0 = s0;
    a1 = 8;                                             // Result = 00000008
    EV_DoFloor();
    goto loc_80026D2C;
loc_80026C78:
    a0 = s0;
    a1 = 9;                                             // Result = 00000009
    EV_DoFloor();
    goto loc_80026D2C;
loc_80026C8C:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    goto loc_80026D04;
loc_80026C98:
    a0 = s0;
    a1 = 5;                                             // Result = 00000005
    EV_DoFloor();
    goto loc_80026D2C;
loc_80026CAC:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    EV_DoFloor();
    goto loc_80026D2C;
loc_80026CC0:
    a0 = s0;
    a1 = 5;                                             // Result = 00000005
    EV_DoDoor();
    goto loc_80026D2C;
loc_80026CD4:
    a0 = s0;
    a1 = 6;                                             // Result = 00000006
    EV_DoDoor();
    goto loc_80026D2C;
loc_80026CE8:
    a0 = s0;
    a1 = 7;                                             // Result = 00000007
    EV_DoDoor();
    goto loc_80026D2C;
loc_80026CFC:
    a0 = s0;
    a1 = 4;                                             // Result = 00000004
loc_80026D04:
    a2 = 0;                                             // Result = 00000000
    EV_DoPlat();
    goto loc_80026D2C;
loc_80026D14:
    v0 = lw(a1 + 0x80);
    if (v0 != 0) goto loc_80026D2C;
loc_80026D24:
    a0 = s0;
    EV_Teleport();
loc_80026D2C:
    ra = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x28;
    return;
}

void P_ShootSpecialLine() noexcept {
loc_80026D40:
    sp -= 0x18;
    sw(ra, sp + 0x14);
    sw(s0, sp + 0x10);
    v0 = lw(a0 + 0x80);
    s0 = a1;
    if (v0 != 0) goto loc_80026D6C;
    v1 = lw(s0 + 0x14);
    v0 = 0x2E;                                          // Result = 0000002E
    if (v1 != v0) goto loc_80026DF4;
loc_80026D6C:
    v1 = lw(s0 + 0x14);
    v0 = 0x2E;                                          // Result = 0000002E
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 0x2F);
        if (bJump) goto loc_80026DB8;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0x18;                                      // Result = 00000018
        if (bJump) goto loc_80026D94;
    }
    a0 = s0;
    if (v1 == v0) goto loc_80026DA8;
    goto loc_80026DF4;
loc_80026D94:
    v0 = 0x2F;                                          // Result = 0000002F
    a0 = s0;
    if (v1 == v0) goto loc_80026DD4;
    goto loc_80026DF4;
loc_80026DA8:
    a1 = 3;                                             // Result = 00000003
    EV_DoFloor();
    goto loc_80026DE0;
loc_80026DB8:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    EV_DoDoor();
    a0 = s0;
    if (v0 == 0) goto loc_80026DF4;
    a1 = 1;                                             // Result = 00000001
    goto loc_80026DEC;
loc_80026DD4:
    a1 = 3;                                             // Result = 00000003
    a2 = 0;                                             // Result = 00000000
    EV_DoPlat();
loc_80026DE0:
    a0 = s0;
    if (v0 == 0) goto loc_80026DF4;
    a1 = 0;                                             // Result = 00000000
loc_80026DEC:
    P_ChangeSwitchTexture();
loc_80026DF4:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_PlayerInSpecialSector() noexcept {
loc_80026E08:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v1 = lw(s0);
    v0 = lw(v1 + 0xC);
    a0 = lw(v0);
    v1 = lw(v1 + 0x8);
    v0 = lw(a0);
    if (v1 != v0) goto loc_80026FB4;
    v0 = lw(a0 + 0x14);
    v1 = v0 - 4;
    v0 = (v1 < 0xD);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 << 2;
        if (bJump) goto loc_80026FA0;
    }
    at = 0x80010000;                                    // Result = 80010000
    at += 0xDE4;                                        // Result = JumpTable_P_PlayerInSpecialSector[0] (80010DE4)
    at += v0;
    v0 = lw(at);
    switch (v0) {
        case 0x80026F1C: goto loc_80026F1C;
        case 0x80026E74: goto loc_80026E74;
        case 0x80026FA0: goto loc_80026FA0;
        case 0x80026EC8: goto loc_80026EC8;
        case 0x80026F88: goto loc_80026F88;
        default: jump_table_err(); break;
    }
loc_80026E74:
    v0 = lw(s0 + 0x3C);
    v1 = 7;                                             // Result = 00000007
    if (v0 != 0) goto loc_80026FB4;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v1, at - 0x78E8);                                // Store to: gStatusBar[0] (80098718)
    v0 = (i32(v0) < i32(a0));
    {
        const bool bJump = (v0 == 0)
        v0 = a0 & 0xF;
        if (bJump) goto loc_80026FB4;
    }
    a1 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80026FB4;
    a0 = lw(s0);
    a2 = 0;                                             // Result = 00000000
    a3 = 0xA;                                           // Result = 0000000A
    P_DamageMObj();
    goto loc_80026FB4;
loc_80026EC8:
    v0 = lw(s0 + 0x3C);
    v1 = 7;                                             // Result = 00000007
    if (v0 != 0) goto loc_80026FB4;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v1, at - 0x78E8);                                // Store to: gStatusBar[0] (80098718)
    v0 = (i32(v0) < i32(a0));
    {
        const bool bJump = (v0 == 0)
        v0 = a0 & 0xF;
        if (bJump) goto loc_80026FB4;
    }
    a1 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80026FB4;
    a0 = lw(s0);
    a2 = 0;                                             // Result = 00000000
    a3 = 5;                                             // Result = 00000005
    P_DamageMObj();
    goto loc_80026FB4;
loc_80026F1C:
    v0 = lw(s0 + 0x3C);
    if (v0 == 0) goto loc_80026F40;
    P_Random();
    v0 = (i32(v0) < 5);
    if (v0 == 0) goto loc_80026FB4;
loc_80026F40:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    v1 = 7;                                             // Result = 00000007
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v1, at - 0x78E8);                                // Store to: gStatusBar[0] (80098718)
    v0 = (i32(v0) < i32(a0));
    {
        const bool bJump = (v0 == 0)
        v0 = a0 & 0xF;
        if (bJump) goto loc_80026FB4;
    }
    a1 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80026FB4;
    a0 = lw(s0);
    a2 = 0;                                             // Result = 00000000
    a3 = 0x14;                                          // Result = 00000014
    P_DamageMObj();
    goto loc_80026FB4;
loc_80026F88:
    v0 = lw(s0 + 0xD0);
    v0++;
    sw(v0, s0 + 0xD0);
    sw(0, a0 + 0x14);
    goto loc_80026FB4;
loc_80026FA0:
    a1 = lw(a0 + 0x14);
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0xB7C;                                        // Result = STR_P_PlayerInSpecialSector_Spec_Err[0] (80010B7C)
    I_Error();
loc_80026FB4:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_UpdateSpecials() noexcept {
loc_80026FC8:
    sp -= 0x28;
    v0 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    a1 = 0x80080000;                                    // Result = 80080000
    a1 += 0x63AC;                                       // Result = gAnims_1[0] (800863AC)
    sw(ra, sp + 0x20);
    sw(s1, sp + 0x1C);
    v0 = (a1 < v0);
    sw(s0, sp + 0x18);
    if (v0 == 0) goto loc_800270EC;
    a2 = -1;                                            // Result = FFFFFFFF
    a0 = a1 + 0x10;                                     // Result = gAnims_1[4] (800863BC)
    t3 = 0x80080000;                                    // Result = 80080000
    t3 = lw(t3 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    t2 = 0x80070000;                                    // Result = 80070000
    t2 = lw(t2 + 0x7F6C);                               // Load from: gpTextureTranslation (80077F6C)
    t1 = 0x80080000;                                    // Result = 80080000
    t1 = lw(t1 - 0x7ED8);                               // Load from: gpTextures (80078128)
    t0 = 0x80070000;                                    // Result = 80070000
    t0 = lw(t0 + 0x7F60);                               // Load from: gpFlatTranslation (80077F60)
    a3 = 0x80080000;                                    // Result = 80080000
    a3 = lw(a3 - 0x7EDC);                               // Load from: gpFlatTextures (80078124)
loc_8002701C:
    v0 = lw(a0 + 0x4);
    v0 &= t3;
    if (v0 != 0) goto loc_800270D8;
    v0 = lw(a1);
    if (v0 == 0) goto loc_8002708C;
    v0 = lw(a0);
    v1 = lw(a0 - 0xC);
    v0++;
    v1 = (i32(v1) < i32(v0));
    sw(v0, a0);
    if (v1 == 0) goto loc_80027064;
    v0 = lw(a0 - 0x8);
    sw(v0, a0);
loc_80027064:
    v0 = lw(a0 - 0x8);
    v1 = lw(a0);
    v0 <<= 2;
    v0 += t2;
    sw(v1, v0);
    v0 = lw(a0);
    v0 <<= 5;
    v0 += t1;
    goto loc_800270D4;
loc_8002708C:
    v0 = lw(a0);
    v1 = lw(a0 - 0xC);
    v0++;
    v1 = (i32(v1) < i32(v0));
    sw(v0, a0);
    if (v1 == 0) goto loc_800270B0;
    v0 = lw(a0 - 0x8);
    sw(v0, a0);
loc_800270B0:
    v0 = lw(a0 - 0x8);
    v1 = lw(a0);
    v0 <<= 2;
    v0 += t0;
    sw(v1, v0);
    v0 = lw(a0);
    v0 <<= 5;
    v0 += a3;
loc_800270D4:
    sw(a2, v0 + 0x1C);
loc_800270D8:
    v0 = lw(gp + 0xB84);                                // Load from: gpLastAnim (80078164)
    a1 += 0x18;
    v0 = (a1 < v0);
    a0 += 0x18;
    if (v0 != 0) goto loc_8002701C;
loc_800270EC:
    v0 = lw(gp + 0x970);                                // Load from: gNumLinespecials (80077F50)
    s1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80027264;
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7EA0);                               // Load from: gpSides (80077EA0)
    t1 = 0x10000;                                       // Result = 00010000
    a3 = 0xFF7F0000;                                    // Result = FF7F0000
    t0 = 0xFFFF0000;                                    // Result = FFFF0000
    a2 = 0x80090000;                                    // Result = 80090000
    a2 += 0x757C;                                       // Result = gpLineSpecialList[0] (8009757C)
loc_80027118:
    a0 = lw(a2);
    v1 = lw(a0 + 0x14);
    v0 = 0xC9;                                          // Result = 000000C9
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 0xCA);
        if (bJump) goto loc_80027188;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0xC8;                                      // Result = 000000C8
        if (bJump) goto loc_80027148;
    }
    if (v1 == v0) goto loc_80027164;
    goto loc_80027250;
loc_80027148:
    v0 = 0xCA;                                          // Result = 000000CA
    {
        const bool bJump = (v1 == v0)
        v0 = 0xCB;                                      // Result = 000000CB
        if (bJump) goto loc_800271DC;
    }
    if (v1 == v0) goto loc_80027200;
    goto loc_80027250;
loc_80027164:
    v1 = lw(a0 + 0x1C);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v0 += a1;
    v1 = lw(v0);
    v1 += t1;
    goto loc_800271AC;
loc_80027188:
    v1 = lw(a0 + 0x1C);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v0 += a1;
    v1 = lw(v0);
    v1 += t0;
loc_800271AC:
    sw(v1, v0);
    v1 = lw(a0 + 0x1C);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v0 += a1;
    v1 = lw(v0);
    v1 &= a3;
    sw(v1, v0);
    goto loc_80027250;
loc_800271DC:
    v1 = lw(a0 + 0x1C);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v0 += a1;
    v1 = lw(v0 + 0x4);
    v1 += t1;
    goto loc_80027224;
loc_80027200:
    v1 = lw(a0 + 0x1C);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v0 += a1;
    v1 = lw(v0 + 0x4);
    v1 += t0;
loc_80027224:
    sw(v1, v0 + 0x4);
    v1 = lw(a0 + 0x1C);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v0 += a1;
    v1 = lw(v0 + 0x4);
    v1 &= a3;
    sw(v1, v0 + 0x4);
loc_80027250:
    v0 = lw(gp + 0x970);                                // Load from: gNumLinespecials (80077F50)
    s1++;
    v0 = (i32(s1) < i32(v0));
    a2 += 4;
    if (v0 != 0) goto loc_80027118;
loc_80027264:
    s1 = 0;                                             // Result = 00000000
    s0 = 0;                                             // Result = 00000000
loc_8002726C:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B8;                                       // Result = gButtonList_1[3] (800977B8)
    at += s0;
    v1 = lw(at);
    if (i32(v1) <= 0) goto loc_80027400;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    v0 = lw(at);
    v0 = v1 - v0;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B8;                                       // Result = gButtonList_1[3] (800977B8)
    at += s0;
    sw(v0, at);
    {
        const bool bJump = (i32(v0) > 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80027400;
    }
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B0;                                       // Result = gButtonList_1[1] (800977B0)
    at += s0;
    v1 = lw(at);
    if (v1 == v0) goto loc_80027344;
    v0 = 2;                                             // Result = 00000002
    if (v1 == 0) goto loc_800272FC;
    if (v1 == v0) goto loc_8002738C;
    goto loc_800273D0;
loc_800272FC:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77AC;                                       // Result = gButtonList_1[0] (800977AC)
    at += s0;
    v0 = lw(at);
    v1 = lw(v0 + 0x1C);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B4;                                       // Result = gButtonList_1[2] (800977B4)
    at += s0;
    a0 = lw(at);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EA0);                               // Load from: gpSides (80077EA0)
    v0 <<= 3;
    v0 += v1;
    sw(a0, v0 + 0x8);
    goto loc_800273D0;
loc_80027344:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77AC;                                       // Result = gButtonList_1[0] (800977AC)
    at += s0;
    v0 = lw(at);
    v1 = lw(v0 + 0x1C);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B4;                                       // Result = gButtonList_1[2] (800977B4)
    at += s0;
    a0 = lw(at);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EA0);                               // Load from: gpSides (80077EA0)
    v0 <<= 3;
    v0 += v1;
    sw(a0, v0 + 0x10);
    goto loc_800273D0;
loc_8002738C:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77AC;                                       // Result = gButtonList_1[0] (800977AC)
    at += s0;
    v0 = lw(at);
    v1 = lw(v0 + 0x1C);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B4;                                       // Result = gButtonList_1[2] (800977B4)
    at += s0;
    a0 = lw(at);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EA0);                               // Load from: gpSides (80077EA0)
    v0 <<= 3;
    v0 += v1;
    sw(a0, v0 + 0xC);
loc_800273D0:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77BC;                                       // Result = gButtonList_1[4] (800977BC)
    at += s0;
    a0 = lw(at);
    a1 = 0x16;                                          // Result = 00000016
    S_StartSound();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x77AC;                                       // Result = gButtonList_1[0] (800977AC)
    a0 += s0;
    a1 = 0;                                             // Result = 00000000
    a2 = 0x14;                                          // Result = 00000014
    D_memset();
loc_80027400:
    s1++;
    v0 = (i32(s1) < 0x10);
    s0 += 0x14;
    if (v0 != 0) goto loc_8002726C;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E0C);                               // Load from: gbIsSkyVisible (800781F4)
    if (v0 == 0) goto loc_80027444;
    v0 = lw(gp + 0x554);                                // Load from: gpUpdateFireSkyFunc (80077B34)
    if (v0 == 0) goto loc_80027444;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    pcall(v0);
loc_80027444:
    ra = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x28;
    return;
}

void EV_DoDonut() noexcept {
loc_8002745C:
    sp -= 0x40;
    sw(fp, sp + 0x38);
    fp = a0;
    sw(s4, sp + 0x28);
    s4 = -1;                                            // Result = FFFFFFFF
    sw(s6, sp + 0x30);
    s6 = 0;                                             // Result = 00000000
    sw(s7, sp + 0x34);
    s7 = 0x80020000;                                    // Result = 80020000
    s7 -= 0x6FF0;                                       // Result = T_MoveFloor (80019010)
    sw(s5, sp + 0x2C);
    s5 = 0x10000;                                       // Result = 00010000
    s5 |= 0x8000;                                       // Result = 00018000
    sw(ra, sp + 0x3C);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
loc_800274A4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F54);                               // Load from: gNumSectors (80077F54)
    a0 = s4 + 1;                                        // Result = 00000000
    v0 = (i32(a0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = a0 << 1;                                   // Result = 00000000
        if (bJump) goto loc_80027500;
    }
    a2 = v1;
    v0 += a0;                                           // Result = 00000000
    v0 <<= 3;                                           // Result = 00000000
    v0 -= a0;                                           // Result = 00000000
    v0 <<= 2;                                           // Result = 00000000
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F58);                               // Load from: gpSectors (800780A8)
    a1 = lw(fp + 0x18);
    v1 += v0;
loc_800274E0:
    v0 = lw(v1 + 0x18);
    s4 = a0;
    if (v0 == a1) goto loc_80027504;
    a0++;
    v0 = (i32(a0) < i32(a2));
    v1 += 0x5C;
    if (v0 != 0) goto loc_800274E0;
loc_80027500:
    s4 = -1;                                            // Result = FFFFFFFF
loc_80027504:
    v0 = s4 << 1;                                       // Result = FFFFFFFE
    if (i32(s4) < 0) goto loc_80027670;
    v0 += s4;                                           // Result = FFFFFFFD
    v0 <<= 3;                                           // Result = FFFFFFE8
    v0 -= s4;                                           // Result = FFFFFFE9
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F58);                               // Load from: gpSectors (800780A8)
    v0 <<= 2;                                           // Result = FFFFFFA4
    s3 = v0 + v1;
    v0 = lw(s3 + 0x50);
    if (v0 != 0) goto loc_800274A4;
    v0 = lw(s3 + 0x58);
    v1 = lw(v0);
    v0 = lw(v1 + 0x10);
    v0 &= 4;
    s6 = 1;                                             // Result = 00000001
    if (v0 != 0) goto loc_80027610;
    s1 = 0;                                             // Result = 00000000
    goto loc_80027624;
loc_80027564:
    a1 = 0x2C;                                          // Result = 0000002C
    a2 = 4;                                             // Result = 00000004
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2();
    s0 = v0;
    a0 = s0;
    P_AddThinker();
    a1 = 0x2C;                                          // Result = 0000002C
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v0 = 0xA;                                           // Result = 0000000A
    sw(s0, s1 + 0x50);
    sw(v0, s0 + 0xC);
    v0 = 1;                                             // Result = 00000001
    sw(s7, s0 + 0x8);
    sw(0, s0 + 0x10);
    sw(v0, s0 + 0x18);
    sw(s1, s0 + 0x14);
    sw(s5, s0 + 0x28);
    v0 = lhu(s2 + 0x8);
    a2 = 4;                                             // Result = 00000004
    sw(0, s0 + 0x1C);
    sh(v0, s0 + 0x20);
    v0 = lw(s2);
    a3 = 0;                                             // Result = 00000000
    sw(v0, s0 + 0x24);
    Z_Malloc2();
    s0 = v0;
    a0 = s0;
    P_AddThinker();
    v0 = -1;                                            // Result = FFFFFFFF
    sw(s0, s3 + 0x50);
    sw(s7, s0 + 0x8);
    sw(0, s0 + 0xC);
    sw(0, s0 + 0x10);
    sw(v0, s0 + 0x18);
    sw(s3, s0 + 0x14);
    sw(s5, s0 + 0x28);
    v0 = lw(s2);
    sw(v0, s0 + 0x24);
    goto loc_800274A4;
loc_80027610:
    s1 = lw(v1 + 0x38);
    if (s1 != s3) goto loc_80027624;
    s1 = lw(v1 + 0x3C);
loc_80027624:
    v0 = lw(s1 + 0x54);
    a0 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_800274A4;
    a1 = v0;
    v1 = lw(s1 + 0x58);
loc_80027640:
    v0 = lw(v1);
    s2 = lw(v0 + 0x3C);
    a0++;
    if (s2 != s3) goto loc_80027564;
    v0 = (i32(a0) < i32(a1));
    v1 += 4;
    if (v0 != 0) goto loc_80027640;
    goto loc_800274A4;
loc_80027670:
    v0 = s6;                                            // Result = 00000000
    ra = lw(sp + 0x3C);
    fp = lw(sp + 0x38);
    s7 = lw(sp + 0x34);
    s6 = lw(sp + 0x30);
    s5 = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x40;
    return;
}

void G_ScheduleExitLevel() noexcept {
    sp -= 0x20;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(s2, sp + 0x18);
    s2 = a1;
    a1 = 0x14;                                          // Result = 00000014
    a2 = 4;                                             // Result = 00000004
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a3 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x1C);
    sw(s0, sp + 0x10);
    Z_Malloc2();
    s0 = v0;
    a0 = s0;
    P_AddThinker();
    v0 = 0x80020000;                                    // Result = 80020000
    v0 += 0x7718;                                       // Result = G_BeginExitLevel (80027718)
    sw(v0, s0 + 0x8);
    sw(s1, s0 + 0xC);
    sw(s2, s0 + 0x10);
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void G_BeginExitLevel() noexcept {
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v0 = lw(s0 + 0xC);
    v0--;
    sw(v0, s0 + 0xC);
    if (i32(v0) > 0) goto loc_80027754;
    v0 = lw(s0 + 0x10);
    pcall(v0);
    a0 = s0;
    P_RemoveThinker();
loc_80027754:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void G_ExitLevel() noexcept {
loc_80027768:
    sp -= 0x18;
    a1 = 0x14;                                          // Result = 00000014
    a2 = 4;                                             // Result = 00000004
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FB8);                               // Load from: gGameMap (80078048)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    sw(ra, sp + 0x14);
    sw(s0, sp + 0x10);
    v0++;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7F68);                                // Store to: gNextMap (80078098)
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2();
    s0 = v0;
    a0 = s0;
    P_AddThinker();
    v0 = 0x80020000;                                    // Result = 80020000
    v0 += 0x7718;                                       // Result = G_BeginExitLevel (80027718)
    sw(v0, s0 + 0x8);
    v0 = 4;                                             // Result = 00000004
    sw(v0, s0 + 0xC);
    v0 = 0x80010000;                                    // Result = 80010000
    v0 += 0x3384;                                       // Result = G_SetGameComplete (80013384)
    sw(v0, s0 + 0x10);
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void G_SecretExitLevel() noexcept {
loc_800277E0:
    sp -= 0x18;
    a1 = 0x14;                                          // Result = 00000014
    a2 = 4;                                             // Result = 00000004
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0x7F68);                                // Store to: gNextMap (80078098)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a3 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x14);
    sw(s0, sp + 0x10);
    Z_Malloc2();
    s0 = v0;
    a0 = s0;
    P_AddThinker();
    v0 = 0x80020000;                                    // Result = 80020000
    v0 += 0x7718;                                       // Result = G_BeginExitLevel (80027718)
    sw(v0, s0 + 0x8);
    v0 = 4;                                             // Result = 00000004
    sw(v0, s0 + 0xC);
    v0 = 0x80010000;                                    // Result = 80010000
    v0 += 0x3384;                                       // Result = G_SetGameComplete (80013384)
    sw(v0, s0 + 0x10);
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_SpawnSpecials() noexcept {
loc_8002784C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F54);                               // Load from: gNumSectors (80077F54)
    sp -= 0x38;
    sw(s0, sp + 0x28);
    s0 = 0x80080000;                                    // Result = 80080000
    s0 = lw(s0 - 0x7F58);                               // Load from: gpSectors (800780A8)
    sw(s1, sp + 0x2C);
    s1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x30);
    if (i32(v0) <= 0) goto loc_80027A54;
loc_80027874:
    v1 = lw(s0 + 0x14);
    v0 = 0xC;                                           // Result = 0000000C
    if (v1 == 0) goto loc_80027A38;
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 0xD);
        if (bJump) goto loc_800279B8;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 3;                                         // Result = 00000003
        if (bJump) goto loc_800278F4;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 4);
        if (bJump) goto loc_8002796C;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800278BC;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_80027954;
    }
    a0 = s0;
    if (v1 == v0) goto loc_80027964;
    s1++;
    goto loc_80027A3C;
loc_800278BC:
    v0 = 9;                                             // Result = 00000009
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 0xA);
        if (bJump) goto loc_80027988;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 8;                                         // Result = 00000008
        if (bJump) goto loc_800278E0;
    }
    a0 = s0;
    if (v1 == v0) goto loc_80027978;
    s1++;
    goto loc_80027A3C;
loc_800278E0:
    v0 = 0xA;                                           // Result = 0000000A
    if (v1 == v0) goto loc_800279A8;
    s1++;
    goto loc_80027A3C;
loc_800278F4:
    v0 = 0xC8;                                          // Result = 000000C8
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 0xC9);
        if (bJump) goto loc_800279F8;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0xE;                                       // Result = 0000000E
        if (bJump) goto loc_8002792C;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 0xE);
        if (bJump) goto loc_800279D4;
    }
    a0 = s0;
    if (v0 != 0) goto loc_800279C8;
    v0 = 0x11;                                          // Result = 00000011
    if (v1 == v0) goto loc_800279E8;
    s1++;
    goto loc_80027A3C;
loc_8002792C:
    v0 = 0xCA;                                          // Result = 000000CA
    {
        const bool bJump = (v1 == v0)
        v0 = (i32(v1) < 0xCA);
        if (bJump) goto loc_80027A1C;
    }
    a0 = s0;
    if (v0 != 0) goto loc_80027A0C;
    v0 = 0xCC;                                          // Result = 000000CC
    a1 = 4;                                             // Result = 00000004
    if (v1 == v0) goto loc_80027A2C;
    s1++;
    goto loc_80027A3C;
loc_80027954:
    a0 = s0;
    P_SpawnLightFlash();
    s1++;
    goto loc_80027A3C;
loc_80027964:
    a1 = 8;                                             // Result = 00000008
    goto loc_80027A2C;
loc_8002796C:
    a0 = s0;
    a1 = 0xF;                                           // Result = 0000000F
    goto loc_80027A2C;
loc_80027978:
    a1 = 0;                                             // Result = 00000000
    P_SpawnGlowingLight();
    s1++;
    goto loc_80027A3C;
loc_80027988:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FEC);                               // Load from: gTotalSecret (80077FEC)
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7FEC);                                // Store to: gTotalSecret (80077FEC)
    s1++;
    goto loc_80027A3C;
loc_800279A8:
    a0 = s0;
    P_SpawnDoorCloseIn30();
    s1++;
    goto loc_80027A3C;
loc_800279B8:
    a0 = s0;
    a1 = 0xF;                                           // Result = 0000000F
    a2 = 1;                                             // Result = 00000001
    goto loc_80027A30;
loc_800279C8:
    a1 = 8;                                             // Result = 00000008
    a2 = 1;                                             // Result = 00000001
    goto loc_80027A30;
loc_800279D4:
    a0 = s0;
    a1 = s1;
    P_SpawnDoorRaiseIn5Mins();
    s1++;
    goto loc_80027A3C;
loc_800279E8:
    a0 = s0;
    P_SpawnFireFlicker();
    s1++;
    goto loc_80027A3C;
loc_800279F8:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    P_SpawnGlowingLight();
    s1++;
    goto loc_80027A3C;
loc_80027A0C:
    a1 = 2;                                             // Result = 00000002
    P_SpawnGlowingLight();
    s1++;
    goto loc_80027A3C;
loc_80027A1C:
    a0 = s0;
    P_SpawnRapidStrobeFlash();
    s1++;
    goto loc_80027A3C;
loc_80027A2C:
    a2 = 0;                                             // Result = 00000000
loc_80027A30:
    P_SpawnStrobeFlash();
loc_80027A38:
    s1++;
loc_80027A3C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F54);                               // Load from: gNumSectors (80077F54)
    v0 = (i32(s1) < i32(v0));
    s0 += 0x5C;
    if (v0 != 0) goto loc_80027874;
loc_80027A54:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E38);                               // Load from: gNumLines (800781C8)
    sw(0, gp + 0x970);                                  // Store to: gNumLinespecials (80077F50)
    s1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80027AD0;
    a2 = 0x80090000;                                    // Result = 80090000
    a2 += 0x757C;                                       // Result = gpLineSpecialList[0] (8009757C)
    a1 = v0;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7EB0);                               // Load from: gpLines (80077EB0)
loc_80027A7C:
    v1 = lw(a0 + 0x14);
    v0 = (i32(v1) < 0xCC);
    s1++;
    if (v0 == 0) goto loc_80027AC4;
    v0 = (i32(v1) < 0xC8);
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(s1) < i32(a1));
        if (bJump) goto loc_80027AC8;
    }
    v1 = lw(gp + 0x970);                                // Load from: gNumLinespecials (80077F50)
    v0 = (i32(v1) < 0x20);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 << 2;
        if (bJump) goto loc_80027AC4;
    }
    v0 += a2;
    sw(a0, v0);
    v0 = v1 + 1;
    sw(v0, gp + 0x970);                                 // Store to: gNumLinespecials (80077F50)
loc_80027AC4:
    v0 = (i32(s1) < i32(a1));
loc_80027AC8:
    a0 += 0x4C;
    if (v0 != 0) goto loc_80027A7C;
loc_80027AD0:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F54);                               // Load from: gNumSectors (80077F54)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7F88);                                 // Store to: gMapBossSpecialFlags (80077F88)
    s1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80027BA4;
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0xE1C;                                        // Result = JumpTable_P_SpawnSpecials[0] (80010E1C)
    a1 = v0;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7F58);                               // Load from: gpSectors (800780A8)
loc_80027AFC:
    v0 = lw(a0 + 0x18);
    v1 = v0 - 0x29A;
    v0 = (v1 < 6);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 << 2;
        if (bJump) goto loc_80027B94;
    }
    v0 += a2;
    v0 = lw(v0);
    switch (v0) {
        case 0x80027B2C: goto loc_80027B2C;
        case 0x80027B3C: goto loc_80027B3C;
        case 0x80027B4C: goto loc_80027B4C;
        case 0x80027B5C: goto loc_80027B5C;
        case 0x80027B6C: goto loc_80027B6C;
        case 0x80027B7C: goto loc_80027B7C;
        default: jump_table_err(); break;
    }
loc_80027B2C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F88);                               // Load from: gMapBossSpecialFlags (80077F88)
    v0 |= 1;
    goto loc_80027B8C;
loc_80027B3C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F88);                               // Load from: gMapBossSpecialFlags (80077F88)
    v0 |= 2;
    goto loc_80027B8C;
loc_80027B4C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F88);                               // Load from: gMapBossSpecialFlags (80077F88)
    v0 |= 4;
    goto loc_80027B8C;
loc_80027B5C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F88);                               // Load from: gMapBossSpecialFlags (80077F88)
    v0 |= 8;
    goto loc_80027B8C;
loc_80027B6C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F88);                               // Load from: gMapBossSpecialFlags (80077F88)
    v0 |= 0x10;
    goto loc_80027B8C;
loc_80027B7C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F88);                               // Load from: gMapBossSpecialFlags (80077F88)
    v0 |= 0x20;
loc_80027B8C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7F88);                                // Store to: gMapBossSpecialFlags (80077F88)
loc_80027B94:
    s1++;
    v0 = (i32(s1) < i32(a1));
    a0 += 0x5C;
    if (v0 != 0) goto loc_80027AFC;
loc_80027BA4:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x715C;                                       // Result = gMObjHead[5] (800A8EA4)
    v1 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x7E9C);                                // Store to: gMapBlueKeyType (80077E9C)
    v1 = 2;                                             // Result = 00000002
    a0 = lw(v0);                                        // Load from: gMObjHead[5] (800A8EA4)
    v0 -= 0x14;                                         // Result = gMObjHead[0] (800A8E90)
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0x7F60);                                // Store to: gMapYellowKeyType (800780A0)
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7DE4);                                 // Store to: gMapRedKeyType (8007821C)
    t3 = 0x29;                                          // Result = 00000029
    if (a0 == v0) goto loc_80027C5C;
    t2 = 0x28;                                          // Result = 00000028
    t1 = 0x2A;                                          // Result = 0000002A
    t0 = 4;                                             // Result = 00000004
    a3 = 5;                                             // Result = 00000005
    a2 = 3;                                             // Result = 00000003
    a1 = v0;                                            // Result = gMObjHead[0] (800A8E90)
loc_80027BF4:
    v1 = lw(a0 + 0x54);
    v0 = (v1 < 0x2A);
    if (v1 == t3) goto loc_80027C44;
    if (v0 == 0) goto loc_80027C1C;
    if (v1 == t2) goto loc_80027C34;
    goto loc_80027C4C;
loc_80027C1C:
    if (v1 != t1) goto loc_80027C4C;
    at = 0x80070000;                                    // Result = 80070000
    sw(t0, at + 0x7E9C);                                // Store to: gMapBlueKeyType (80077E9C)
    goto loc_80027C4C;
loc_80027C34:
    at = 0x80080000;                                    // Result = 80080000
    sw(a3, at - 0x7F60);                                // Store to: gMapYellowKeyType (800780A0)
    goto loc_80027C4C;
loc_80027C44:
    at = 0x80080000;                                    // Result = 80080000
    sw(a2, at - 0x7DE4);                                // Store to: gMapRedKeyType (8007821C)
loc_80027C4C:
    a0 = lw(a0 + 0x14);
    if (a0 != a1) goto loc_80027BF4;
loc_80027C5C:
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 -= 0x62E8;                                       // Result = gpActiveCeilings[0] (800A9D18)
    a1 = 0;                                             // Result = 00000000
    a2 = 0x78;                                          // Result = 00000078
    D_memset();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7C44;                                       // Result = gpActivePlats[0] (80097C44)
    a1 = 0;                                             // Result = 00000000
    a2 = 0x78;                                          // Result = 00000078
    D_memset();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x77AC;                                       // Result = gButtonList_1[0] (800977AC)
    a1 = 0;                                             // Result = 00000000
    a2 = 0x140;                                         // Result = 00000140
    D_memset();
    ra = lw(sp + 0x30);
    s1 = lw(sp + 0x2C);
    s0 = lw(sp + 0x28);
    sp += 0x38;
    return;
}

void P_UpdateFireSky() noexcept {
loc_80027CB0:
    t3 = a0;
    v0 = lh(t3 + 0x10);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7DC4);                               // Load from: gpLumpCache (8007823C)
    v0 <<= 2;
    v0 += v1;
    v0 = lw(v0);
    t1 = 0;                                             // Result = 00000000
    a1 = v0 + 0x48;
loc_80027CD4:
    t0 = 1;                                             // Result = 00000001
    t2 = t1 + 1;
    a2 = a1 + t1;
loc_80027CE0:
    a3 = lbu(a2);
    if (a3 != 0) goto loc_80027CF8;
    sb(0, a2 - 0x40);
    goto loc_80027D54;
loc_80027CF8:
    v0 = lbu(gp + 0x558);                               // Load from: gFireSkyRndIndex (80077B38)
    a0 = v0 + 1;
    v1 = v0 & 0xFF;
    v0 += 2;
    sb(a0, gp + 0x558);                                 // Store to: gFireSkyRndIndex (80077B38)
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x75A8;                                       // Result = RndTable[0] (80058A58)
    at += v1;
    v1 = lbu(at);
    a0 &= 0xFF;
    sb(v0, gp + 0x558);                                 // Store to: gFireSkyRndIndex (80077B38)
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x75A8;                                       // Result = RndTable[0] (80058A58)
    at += a0;
    v0 = lbu(at);
    v1 &= 3;
    v1 = t2 - v1;
    v1 &= 0x3F;
    v1 += a1;
    v0 &= 1;
    v0 = a3 - v0;
    sb(v0, v1 - 0x40);
loc_80027D54:
    a2 += 0x40;
    t0++;
    v0 = (i32(t0) < 0x80);
    a1 += 0x40;
    if (v0 != 0) goto loc_80027CE0;
    t1++;                                               // Result = 00000001
    v0 = (i32(t1) < 0x40);                              // Result = 00000001
    a1 -= 0x1FC0;
    if (v0 != 0) goto loc_80027CD4;
    v0 = -1;                                            // Result = FFFFFFFF
    sw(v0, t3 + 0x1C);
    return;
}

void P_InitSwitchList() noexcept {
loc_80027D84:
    sp -= 0x30;
    sw(s5, sp + 0x24);
    s5 = 0;                                             // Result = 00000000
    v0 = 0x80060000;                                    // Result = 80060000
    v0 += 0x7404;                                       // Result = AlphSwitchList_1_a[0] (80067404)
    sw(s4, sp + 0x20);
    s4 = v0 + 9;                                        // Result = AlphSwitchList_1_b[0] (8006740D)
    sw(s3, sp + 0x1C);
    s3 = v0;                                            // Result = AlphSwitchList_1_a[0] (80067404)
    sw(s1, sp + 0x14);
    s1 = 0x80090000;                                    // Result = 80090000
    s1 += 0x75FC;                                       // Result = gSwitchList[0] (800975FC)
    sw(ra, sp + 0x28);
    sw(s2, sp + 0x18);
    sw(s0, sp + 0x10);
loc_80027DC0:
    a0 = s3;
    R_TextureNumForName();
    a0 = s4;
    s2 = v0;
    R_TextureNumForName();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7ED8);                               // Load from: gpTextures (80078128)
    v1 = s2 << 5;
    v1 += a0;
    v1 = lhu(v1 + 0xA);
    s0 = v0;
    if (v1 == 0) goto loc_80027E14;
    v0 = s0 << 5;
    a0 += v0;
    v0 = lhu(a0 + 0xA);
    if (v0 != 0) goto loc_80027E34;
    I_CacheTex();
loc_80027E14:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7ED8);                               // Load from: gpTextures (80078128)
    v1 = s0 << 5;
    v1 += v0;
    v0 = lhu(v1 + 0xA);
    if (v0 == 0) goto loc_80027E5C;
loc_80027E34:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7ED8);                               // Load from: gpTextures (80078128)
    v1 = s2 << 5;
    a0 = v1 + v0;
    v0 = lhu(a0 + 0xA);
    if (v0 != 0) goto loc_80027E5C;
    I_CacheTex();
loc_80027E5C:
    sw(s2, s1);
    s1 += 4;
    sw(s0, s1);
    s1 += 4;
    s4 += 0x12;
    s5++;
    v0 = (s5 < 0x31);
    s3 += 0x12;
    if (v0 != 0) goto loc_80027DC0;
    ra = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x30;
    return;
}

void P_StartButton() noexcept {
    t1 = 0;                                             // Result = 00000000
    t0 = 0x80090000;                                    // Result = 80090000
    t0 += 0x77B8;                                       // Result = gButtonList_1[3] (800977B8)
    v1 = 0;                                             // Result = 00000000
loc_80027EB8:
    v0 = lw(t0);
    if (v0 != 0) goto loc_80027F20;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77AC;                                       // Result = gButtonList_1[0] (800977AC)
    at += v1;
    sw(a0, at);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B0;                                       // Result = gButtonList_1[1] (800977B0)
    at += v1;
    sw(a1, at);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B4;                                       // Result = gButtonList_1[2] (800977B4)
    at += v1;
    sw(a2, at);
    sw(a3, t0);
    v0 = lw(a0 + 0x38);
    v0 += 0x38;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77BC;                                       // Result = gButtonList_1[4] (800977BC)
    at += v1;
    sw(v0, at);
    goto loc_80027F34;
loc_80027F20:
    t0 += 0x14;
    t1++;
    v0 = (i32(t1) < 0x10);
    v1 += 0x14;
    if (v0 != 0) goto loc_80027EB8;
loc_80027F34:
    return;
}

void P_ChangeSwitchTexture() noexcept {
loc_80027F3C:
    sp -= 0x28;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(s3, sp + 0x1C);
    s3 = a1;
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s2, sp + 0x18);
    sw(s0, sp + 0x10);
    if (s3 != 0) goto loc_80027F68;
    sw(0, s1 + 0x14);
loc_80027F68:
    v1 = lw(s1 + 0x1C);
    a0 = 0xB;                                           // Result = 0000000B
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EA0);                               // Load from: gpSides (80077EA0)
    v0 <<= 3;
    v0 += v1;
    t0 = lw(v0 + 0x8);
    a3 = lw(v0 + 0x10);
    v1 = lw(s1 + 0x14);
    a2 = lw(v0 + 0xC);
    a1 = 0x16;                                          // Result = 00000016
    if (v1 != a0) goto loc_80027FA4;
    a1 = 0x17;                                          // Result = 00000017
loc_80027FA4:
    s0 = 0;                                             // Result = 00000000
    s2 = 0x80090000;                                    // Result = 80090000
    s2 += 0x75FC;                                       // Result = gSwitchList[0] (800975FC)
    s4 = s2;                                            // Result = gSwitchList[0] (800975FC)
loc_80027FB4:
    v0 = lw(s2);
    if (v0 != t0) goto loc_80028080;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 = lw(a0 + 0x77BC);                               // Load from: gButtonList_1[4] (800977BC)
    S_StartSound();
    v0 = lw(s1 + 0x1C);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7EA0);                               // Load from: gpSides (80077EA0)
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v0 = s0 ^ 1;
    v0 <<= 2;
    v0 += s4;
    v0 = lw(v0);
    v1 += a0;
    sw(v0, v1 + 0x8);
    if (s3 == 0) goto loc_80028208;
    a2 = lw(s2);
    a3 = 0xF;                                           // Result = 0000000F
    a0 = 0;                                             // Result = 00000000
    a1 = 0x80090000;                                    // Result = 80090000
    a1 += 0x77B8;                                       // Result = gButtonList_1[3] (800977B8)
    v1 = 0;                                             // Result = 00000000
loc_80028020:
    v0 = lw(a1);
    a0++;
    if (v0 != 0) goto loc_80028068;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77AC;                                       // Result = gButtonList_1[0] (800977AC)
    at += v1;
    sw(s1, at);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B0;                                       // Result = gButtonList_1[1] (800977B0)
    at += v1;
    sw(0, at);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B4;                                       // Result = gButtonList_1[2] (800977B4)
    at += v1;
    sw(a2, at);
    sw(a3, a1);
    goto loc_800281BC;
loc_80028068:
    a1 += 0x14;
    v0 = (i32(a0) < 0x10);
    v1 += 0x14;
    if (v0 != 0) goto loc_80028020;
    goto loc_80028208;
loc_80028080:
    if (v0 != a3) goto loc_80028110;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 = lw(a0 + 0x77BC);                               // Load from: gButtonList_1[4] (800977BC)
    S_StartSound();
    v0 = lw(s1 + 0x1C);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7EA0);                               // Load from: gpSides (80077EA0)
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v0 = s0 ^ 1;
    v0 <<= 2;
    v0 += s4;
    v0 = lw(v0);
    v1 += a0;
    sw(v0, v1 + 0x10);
    if (s3 == 0) goto loc_80028208;
    a3 = 1;                                             // Result = 00000001
    a2 = lw(s2);
    t0 = 0xF;                                           // Result = 0000000F
    a0 = 0;                                             // Result = 00000000
    a1 = 0x80090000;                                    // Result = 80090000
    a1 += 0x77B8;                                       // Result = gButtonList_1[3] (800977B8)
    v1 = 0;                                             // Result = 00000000
loc_800280E8:
    v0 = lw(a1);
    a0++;
    if (v0 == 0) goto loc_80028188;
    a1 += 0x14;
    v0 = (i32(a0) < 0x10);
    v1 += 0x14;
    if (v0 != 0) goto loc_800280E8;
    goto loc_80028208;
loc_80028110:
    if (v0 != a2) goto loc_800281F8;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 = lw(a0 + 0x77BC);                               // Load from: gButtonList_1[4] (800977BC)
    S_StartSound();
    v0 = lw(s1 + 0x1C);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7EA0);                               // Load from: gpSides (80077EA0)
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v0 = s0 ^ 1;
    v0 <<= 2;
    v0 += s4;
    v0 = lw(v0);
    v1 += a0;
    sw(v0, v1 + 0xC);
    if (s3 == 0) goto loc_80028208;
    a3 = 2;                                             // Result = 00000002
    a2 = lw(s2);
    t0 = 0xF;                                           // Result = 0000000F
    a0 = 0;                                             // Result = 00000000
    a1 = 0x80090000;                                    // Result = 80090000
    a1 += 0x77B8;                                       // Result = gButtonList_1[3] (800977B8)
    v1 = 0;                                             // Result = 00000000
loc_80028178:
    v0 = lw(a1);
    a0++;
    if (v0 != 0) goto loc_800281E0;
loc_80028188:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77AC;                                       // Result = gButtonList_1[0] (800977AC)
    at += v1;
    sw(s1, at);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B0;                                       // Result = gButtonList_1[1] (800977B0)
    at += v1;
    sw(a3, at);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77B4;                                       // Result = gButtonList_1[2] (800977B4)
    at += v1;
    sw(a2, at);
    sw(t0, a1);
loc_800281BC:
    v0 = lw(s1 + 0x38);
    v0 += 0x38;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x77BC;                                       // Result = gButtonList_1[4] (800977BC)
    at += v1;
    sw(v0, at);
    goto loc_80028208;
loc_800281E0:
    a1 += 0x14;
    v0 = (i32(a0) < 0x10);
    v1 += 0x14;
    if (v0 != 0) goto loc_80028178;
    goto loc_80028208;
loc_800281F8:
    s0++;
    v0 = (s0 < 0x62);
    s2 += 4;
    if (v0 != 0) goto loc_80027FB4;
loc_80028208:
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void P_UseSpecialLine() noexcept {
loc_8002822C:
    sp -= 0x20;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(ra, sp + 0x18);
    sw(s0, sp + 0x10);
    v0 = lw(s1 + 0x80);
    s0 = a1;
    if (v0 != 0) goto loc_80028274;
    v0 = lw(s0 + 0x10);
    v0 &= 0x20;
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80028808;
    }
    v1 = lw(s0 + 0x14);
    v0 = 1;                                             // Result = 00000001
    {
        const bool bJump = (v1 != v0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80028808;
    }
loc_80028274:
    v0 = lw(s0 + 0x14);
    v1 = v0 - 1;
    v0 = (v1 < 0x8B);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 << 2;
        if (bJump) goto loc_80028804;
    }
    at = 0x80010000;                                    // Result = 80010000
    at += 0xE34;                                        // Result = JumpTable_P_UseSpecialLine[0] (80010E34)
    at += v0;
    v0 = lw(at);
    switch (v0) {
        case 0x800282BC: goto loc_800282BC;
        case 0x80028804: goto loc_80028804;
        case 0x800285C4: goto loc_800285C4;
        case 0x800285E0: goto loc_800285E0;
        case 0x800285F8: goto loc_800285F8;
        case 0x8002860C: goto loc_8002860C;
        case 0x8002862C: goto loc_8002862C;
        case 0x8002864C: goto loc_8002864C;
        case 0x80028668: goto loc_80028668;
        case 0x80028688: goto loc_80028688;
        case 0x800286A8: goto loc_800286A8;
        case 0x800282A8: goto loc_800282A8;
        case 0x800286C4: goto loc_800286C4;
        case 0x800286E0: goto loc_800286E0;
        case 0x8002842C: goto loc_8002842C;
        case 0x80028448: goto loc_80028448;
        case 0x80028464: goto loc_80028464;
        case 0x80028718: goto loc_80028718;
        case 0x80028734: goto loc_80028734;
        case 0x80028750: goto loc_80028750;
        case 0x80028768: goto loc_80028768;
        case 0x80028480: goto loc_80028480;
        case 0x8002849C: goto loc_8002849C;
        case 0x800284B8: goto loc_800284B8;
        case 0x800284D8: goto loc_800284D8;
        case 0x800284F4: goto loc_800284F4;
        case 0x80028550: goto loc_80028550;
        case 0x80028510: goto loc_80028510;
        case 0x80028530: goto loc_80028530;
        case 0x8002856C: goto loc_8002856C;
        case 0x8002858C: goto loc_8002858C;
        case 0x800285A8: goto loc_800285A8;
        case 0x800286FC: goto loc_800286FC;
        case 0x800282D0: goto loc_800282D0;
        case 0x80028784: goto loc_80028784;
        case 0x800287A0: goto loc_800287A0;
        case 0x800287BC: goto loc_800287BC;
        case 0x80028328: goto loc_80028328;
        case 0x80028344: goto loc_80028344;
        case 0x80028360: goto loc_80028360;
        case 0x8002837C: goto loc_8002837C;
        case 0x80028398: goto loc_80028398;
        case 0x800283B4: goto loc_800283B4;
        case 0x800283D0: goto loc_800283D0;
        case 0x800283F0: goto loc_800283F0;
        case 0x80028410: goto loc_80028410;
        case 0x800282FC: goto loc_800282FC;
        case 0x800287D8: goto loc_800287D8;
        case 0x800287E4: goto loc_800287E4;
        default: jump_table_err(); break;
    }
loc_800282A8:
    a0 = s0;
    a1 = s1;
    EV_DoLockedDoor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
loc_800282BC:
    a0 = s0;
    a1 = s1;
    EV_VerticalDoor();
    v0 = 1;                                             // Result = 00000001
    goto loc_80028808;
loc_800282D0:
    a0 = s0;
    a1 = s1;
    EV_DoLockedDoor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 6;                                             // Result = 00000006
    EV_DoDoor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_800282FC:
    a0 = s0;
    a1 = s1;
    EV_DoLockedDoor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 6;                                             // Result = 00000006
    EV_DoDoor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_80028328:
    a0 = s0;
    a1 = 5;                                             // Result = 00000005
    EV_DoDoor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_80028344:
    a0 = s0;
    a1 = 6;                                             // Result = 00000006
    EV_DoDoor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_80028360:
    a0 = s0;
    a1 = 7;                                             // Result = 00000007
    EV_DoDoor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_8002837C:
    a0 = s0;
    a1 = 5;                                             // Result = 00000005
    EV_DoDoor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_80028398:
    a0 = s0;
    a1 = 6;                                             // Result = 00000006
    EV_DoDoor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_800283B4:
    a0 = s0;
    a1 = 7;                                             // Result = 00000007
    EV_DoDoor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_800283D0:
    a0 = s0;
    a1 = 4;                                             // Result = 00000004
    a2 = 0;                                             // Result = 00000000
    EV_DoPlat();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_800283F0:
    a0 = s0;
    a1 = 4;                                             // Result = 00000004
    a2 = 0;                                             // Result = 00000000
    EV_DoPlat();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_80028410:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    EV_BuildStairs();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_8002842C:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    EV_DoDoor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_80028448:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    EV_DoCeiling();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_80028464:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    EV_DoFloor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_80028480:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    EV_DoFloor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_8002849C:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    EV_DoDoor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_800284B8:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    a2 = 1;                                             // Result = 00000001
    EV_DoPlat();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_800284D8:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    EV_DoDoor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_800284F4:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    EV_DoFloor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_80028510:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    a2 = 0x18;                                          // Result = 00000018
    EV_DoPlat();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_80028530:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    a2 = 0x20;                                          // Result = 00000020
    EV_DoPlat();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_80028550:
    a0 = s0;
    a1 = 9;                                             // Result = 00000009
    EV_DoFloor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_8002856C:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    a2 = 0;                                             // Result = 00000000
    EV_DoPlat();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_8002858C:
    a0 = s0;
    a1 = 4;                                             // Result = 00000004
    EV_DoFloor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_800285A8:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    EV_DoFloor();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80028808;
    }
    a0 = s0;
    goto loc_800287F8;
loc_800285C4:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    EV_BuildStairs();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_800285E0:
    a0 = s0;
    EV_DoDonut();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_800285F8:
    G_ExitLevel();
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_8002860C:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    a2 = 0x20;                                          // Result = 00000020
    EV_DoPlat();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_8002862C:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    a2 = 0x18;                                          // Result = 00000018
    EV_DoPlat();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_8002864C:
    a0 = s0;
    a1 = 4;                                             // Result = 00000004
    EV_DoFloor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_80028668:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    a2 = 0;                                             // Result = 00000000
    EV_DoPlat();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_80028688:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    a2 = 0;                                             // Result = 00000000
    EV_DoPlat();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_800286A8:
    a0 = s0;
    a1 = 1;                                             // Result = 00000001
    EV_DoFloor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_800286C4:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    EV_DoDoor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_800286E0:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    EV_DoCeiling();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_800286FC:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    EV_DoFloor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_80028718:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    EV_DoCeiling();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_80028734:
    a0 = s0;
    a1 = 2;                                             // Result = 00000002
    EV_DoDoor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_80028750:
    a0 = lw(s0 + 0x18);
    G_SecretExitLevel();
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_80028768:
    a0 = s0;
    a1 = 9;                                             // Result = 00000009
    EV_DoFloor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_80028784:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    EV_DoFloor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_800287A0:
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    EV_DoFloor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_800287BC:
    a0 = s0;
    a1 = 3;                                             // Result = 00000003
    EV_DoDoor();
    a0 = s0;
    if (v0 == 0) goto loc_80028804;
    a1 = 0;                                             // Result = 00000000
    goto loc_800287FC;
loc_800287D8:
    a0 = s0;
    a1 = 0xFF;                                          // Result = 000000FF
    goto loc_800287EC;
loc_800287E4:
    a0 = s0;
    a1 = 0x23;                                          // Result = 00000023
loc_800287EC:
    EV_LightTurnOn();
    a0 = s0;
loc_800287F8:
    a1 = 1;                                             // Result = 00000001
loc_800287FC:
    P_ChangeSwitchTexture();
loc_80028804:
    v0 = 1;                                             // Result = 00000001
loc_80028808:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_Telefrag() noexcept {
    sp -= 0x28;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(s2, sp + 0x18);
    s2 = a1;
    sw(s3, sp + 0x1C);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x715C;                                       // Result = gMObjHead[5] (800A8EA4)
    sw(ra, sp + 0x20);
    sw(s0, sp + 0x10);
    s0 = lw(v0);                                        // Load from: gMObjHead[5] (800A8EA4)
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    s3 = a2;
    if (s0 == v0) goto loc_800288F8;
loc_8002885C:
    v0 = lw(s0 + 0x64);
    v0 &= 4;
    if (v0 == 0) goto loc_800288E4;
    v1 = lw(s0 + 0x40);
    v0 = lw(s0);
    a0 = lw(s1 + 0x40);
    a1 = v0 - s2;
    v1 += a0;
    v0 = 0x40000;                                       // Result = 00040000
    v1 += v0;
    a0 = -v1;
    v0 = (i32(a1) < i32(a0));
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(v1) < i32(a1));
        if (bJump) goto loc_800288E4;
    }
    if (v0 != 0) goto loc_800288E4;
    v0 = lw(s0 + 0x4);
    a1 = v0 - s3;
    v0 = (i32(a1) < i32(a0));
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(v1) < i32(a1));
        if (bJump) goto loc_800288E4;
    }
    a0 = s0;
    if (v0 != 0) goto loc_800288E4;
    a1 = s1;
    a2 = s1;
    a3 = 0x2710;                                        // Result = 00002710
    P_DamageMObj();
    v0 = lw(s0 + 0x64);
    v1 = -7;                                            // Result = FFFFFFF9
    v0 &= v1;
    sw(v0, s0 + 0x64);
loc_800288E4:
    s0 = lw(s0 + 0x14);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    if (s0 != v0) goto loc_8002885C;
loc_800288F8:
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void EV_Teleport() noexcept {
loc_80028918:
    sp -= 0x40;
    sw(s0, sp + 0x18);
    s0 = a0;
    sw(s1, sp + 0x1C);
    s1 = a1;
    sw(ra, sp + 0x3C);
    sw(fp, sp + 0x38);
    sw(s7, sp + 0x34);
    sw(s6, sp + 0x30);
    sw(s5, sp + 0x2C);
    sw(s4, sp + 0x28);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    a0 = lw(s1);
    a1 = lw(s1 + 0x4);
    a2 = s0;
    P_PointOnLineSide();
    a0 = (v0 < 1);
    v0 = lw(s1 + 0x64);
    v1 = 0x10000;                                       // Result = 00010000
    v0 &= v1;
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80028C04;
    }
    v0 = 1;                                             // Result = 00000001
    {
        const bool bJump = (a0 == v0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80028C04;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F54);                               // Load from: gNumSectors (80077F54)
    a2 = lw(s0 + 0x18);
    a1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80028C00;
    t0 = 0x800B0000;                                    // Result = 800B0000
    t0 -= 0x715C;                                       // Result = gMObjHead[5] (800A8EA4)
    s5 = t0 - 0x14;                                     // Result = gMObjHead[0] (800A8E90)
    a3 = 0;                                             // Result = 00000000
loc_800289A4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F58);                               // Load from: gpSectors (800780A8)
    v0 += a3;
    v0 = lw(v0 + 0x18);
    if (v0 != a2) goto loc_80028BE8;
    s2 = lw(t0);                                        // Load from: gMObjHead[5] (800A8EA4)
    if (s2 == s5) goto loc_80028BE8;
loc_800289D4:
    v1 = lw(s2 + 0x54);
    v0 = 0x1F;                                          // Result = 0000001F
    a0 = 0xE9BD0000;                                    // Result = E9BD0000
    if (v1 != v0) goto loc_80028BD8;
    v0 = lw(s2 + 0xC);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7F58);                               // Load from: gpSectors (800780A8)
    v0 = lw(v0);
    a0 |= 0x37A7;                                       // Result = E9BD37A7
    v0 -= v1;
    mult(v0, a0);
    v0 = lo;
    v0 = u32(i32(v0) >> 2);
    if (v0 != a1) goto loc_80028BD8;
    v0 = lw(s1 + 0x64);
    s7 = lw(s1);
    fp = lw(s1 + 0x4);
    s6 = lw(s1 + 0x8);
    v0 |= 0x8000;
    sw(v0, s1 + 0x64);
    v0 = lw(s1 + 0x80);
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7F40);                                 // Store to: gNumCrossCheckLines (800780C0)
    if (v0 == 0) goto loc_80028AEC;
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 = lw(s0 - 0x715C);                               // Load from: gMObjHead[5] (800A8EA4)
    s4 = lw(s2);
    s3 = lw(s2 + 0x4);
    if (s0 == s5) goto loc_80028AEC;
loc_80028A54:
    v0 = lw(s0 + 0x64);
    v0 &= 4;
    if (v0 == 0) goto loc_80028ADC;
    a0 = lw(s0 + 0x40);
    v0 = lw(s0);
    v1 = lw(s1 + 0x40);
    a1 = v0 - s4;
    a0 += v1;
    v0 = 0x40000;                                       // Result = 00040000
    a0 += v0;
    v1 = -a0;
    v0 = (i32(a1) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a0) < i32(a1));
        if (bJump) goto loc_80028ADC;
    }
    if (v0 != 0) goto loc_80028ADC;
    v0 = lw(s0 + 0x4);
    a1 = v0 - s3;
    v0 = (i32(a1) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a0) < i32(a1));
        if (bJump) goto loc_80028ADC;
    }
    a0 = s0;
    if (v0 != 0) goto loc_80028ADC;
    a1 = s1;
    a2 = s1;
    a3 = 0x2710;                                        // Result = 00002710
    P_DamageMObj();
    v1 = lw(s0 + 0x64);
    v0 = -7;                                            // Result = FFFFFFF9
    v1 &= v0;
    sw(v1, s0 + 0x64);
loc_80028ADC:
    s0 = lw(s0 + 0x14);
    if (s0 != s5) goto loc_80028A54;
loc_80028AEC:
    a1 = lw(s2);
    a2 = lw(s2 + 0x4);
    a0 = s1;
    P_TryMove();
    a0 = 0xFFFF0000;                                    // Result = FFFF0000
    v1 = lw(s1 + 0x64);
    a0 |= 0x7FFF;                                       // Result = FFFF7FFF
    v1 &= a0;
    sw(v1, s1 + 0x64);
    if (v0 == 0) goto loc_80028C00;
    a0 = s7;
    a1 = fp;
    a2 = s6;
    v0 = lw(s1 + 0x38);
    a3 = 0x1D;                                          // Result = 0000001D
    sw(v0, s1 + 0x8);
    P_SpawnMObj();
    a0 = v0;
    a1 = 0x1B;                                          // Result = 0000001B
    S_StartSound();
    a3 = 0x1D;                                          // Result = 0000001D
    v1 = lw(s2 + 0x24);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    a2 = lw(s1 + 0x8);
    v1 >>= 19;
    v1 <<= 2;
    v0 += v1;
    v0 = lw(v0);
    a1 = lw(s2);
    a0 = v0 << 2;
    a0 += v0;
    a0 <<= 2;
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += v1;
    v0 = lw(at);
    a0 += a1;
    a1 = v0 << 2;
    a1 += v0;
    v0 = lw(s2 + 0x4);
    a1 <<= 2;
    a1 += v0;
    P_SpawnMObj();
    a0 = v0;
    a1 = 0x1B;                                          // Result = 0000001B
    S_StartSound();
    v0 = lw(s1 + 0x80);
    {
        const bool bJump = (v0 == 0)
        v0 = 9;                                         // Result = 00000009
        if (bJump) goto loc_80028BBC;
    }
    sw(v0, s1 + 0x78);
loc_80028BBC:
    v1 = lw(s2 + 0x24);
    v0 = 1;                                             // Result = 00000001
    sw(0, s1 + 0x50);
    sw(0, s1 + 0x4C);
    sw(0, s1 + 0x48);
    sw(v1, s1 + 0x24);
    goto loc_80028C04;
loc_80028BD8:
    s2 = lw(s2 + 0x14);
    if (s2 != s5) goto loc_800289D4;
loc_80028BE8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F54);                               // Load from: gNumSectors (80077F54)
    a1++;
    v0 = (i32(a1) < i32(v0));
    a3 += 0x5C;
    if (v0 != 0) goto loc_800289A4;
loc_80028C00:
    v0 = 0;                                             // Result = 00000000
loc_80028C04:
    ra = lw(sp + 0x3C);
    fp = lw(sp + 0x38);
    s7 = lw(sp + 0x34);
    s6 = lw(sp + 0x30);
    s5 = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x40;
    return;
}

void P_AddThinker() noexcept {
loc_80028C38:
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x6550);                               // Load from: gThinkerCap[0] (80096550)
    sw(a0, v0 + 0x4);
    v0 = 0x80090000;                                    // Result = 80090000
    v0 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    sw(v0, a0 + 0x4);
    v1 = lw(v0);                                        // Load from: gThinkerCap[0] (80096550)
    sw(v1, a0);
    sw(a0, v0);                                         // Store to: gThinkerCap[0] (80096550)
    return;
}

void P_RemoveThinker() noexcept {
loc_80028C68:
    v0 = -1;                                            // Result = FFFFFFFF
    sw(v0, a0 + 0x8);
    return;
}

void P_RunThinkers() noexcept {
    sp -= 0x20;
    v0 = 0x80090000;                                    // Result = 80090000
    v0 += 0x6554;                                       // Result = gThinkerCap[1] (80096554)
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    s0 = lw(v0);                                        // Load from: gThinkerCap[1] (80096554)
    v0 -= 4;                                            // Result = gThinkerCap[0] (80096550)
    sw(0, gp + 0xD14);                                  // Store to: gNumActiveThinkers (800782F4)
    s2 = -1;                                            // Result = FFFFFFFF
    if (s0 == v0) goto loc_80028D14;
    s1 = v0;                                            // Result = gThinkerCap[0] (80096550)
loc_80028CA8:
    v0 = lw(s0 + 0x8);
    a1 = s0;
    if (v0 != s2) goto loc_80028CE4;
    v1 = lw(s0 + 0x4);
    v0 = lw(s0);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    sw(v0, v1);
    v1 = lw(s0);
    v0 = lw(s0 + 0x4);
    sw(v0, v1 + 0x4);
    Z_Free2();
    goto loc_80028D04;
loc_80028CE4:
    if (v0 == 0) goto loc_80028CF4;
    a0 = s0;
    pcall(v0);
loc_80028CF4:
    v0 = lw(gp + 0xD14);                                // Load from: gNumActiveThinkers (800782F4)
    v0++;
    sw(v0, gp + 0xD14);                                 // Store to: gNumActiveThinkers (800782F4)
loc_80028D04:
    s0 = lw(s0 + 0x4);
    if (s0 != s1) goto loc_80028CA8;
loc_80028D14:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_RunMobjLate() noexcept {
    sp -= 0x20;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x715C;                                       // Result = gMObjHead[5] (800A8EA4)
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    a0 = lw(v0);                                        // Load from: gMObjHead[5] (800A8EA4)
    v0 -= 0x14;                                         // Result = gMObjHead[0] (800A8E90)
    s1 = v0;                                            // Result = gMObjHead[0] (800A8E90)
    if (a0 == v0) goto loc_80028D7C;
loc_80028D58:
    v0 = lw(a0 + 0x18);
    s0 = lw(a0 + 0x14);
    if (v0 == 0) goto loc_80028D70;
    pcall(v0);
loc_80028D70:
    a0 = s0;
    if (a0 != s1) goto loc_80028D58;
loc_80028D7C:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_CheckCheats() noexcept {
loc_80028D94:
    sp -= 0x40;
    sw(s0, sp + 0x20);
    s0 = 1;                                             // Result = 00000001
    sw(s5, sp + 0x34);
    s5 = 0x800B0000;                                    // Result = 800B0000
    s5 -= 0x7754;                                       // Result = gPlayer1[30] (800A88AC)
    sw(s6, sp + 0x38);
    s6 = -0x31;                                         // Result = FFFFFFCF
    sw(s3, sp + 0x2C);
    s3 = 0x12C;                                         // Result = 0000012C
    sw(s1, sp + 0x24);
    s1 = 4;                                             // Result = 00000004
    sw(ra, sp + 0x3C);
    sw(s4, sp + 0x30);
    sw(s2, sp + 0x28);
loc_80028DD0:
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7F54;                                       // Result = gbPlayerInGame[0] (800780AC)
    at += s1;
    v0 = lw(at);
    if (v0 == 0) goto loc_80028F34;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at += s1;
    s2 = lw(at);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7DEC;                                       // Result = gPlayerOldPadButtons[0] (80078214)
    at += s1;
    s4 = lw(at);
    v0 = s2 & 0x800;
    {
        const bool bJump = (v0 == 0)
        v0 = s4 & 0x800;
        if (bJump) goto loc_80028E90;
    }
    if (v0 != 0) goto loc_80028E90;
    v0 = lw(gp + 0x8E0);                                // Load from: gbGamePaused (80077EC0)
    v0 ^= 1;
    sw(v0, gp + 0x8E0);                                 // Store to: gbGamePaused (80077EC0)
    if (v0 != 0) goto loc_800290B0;
    a0 = 0;                                             // Result = 00000000
    psxcd_restart();
loc_80028E40:
    psxcd_seeking_for_play();
    if (v0 != 0) goto loc_80028E40;
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x75F8);                               // Load from: gCdMusicVol (800775F8)
    a0 = 0x1F4;                                         // Result = 000001F4
    psxspu_start_cd_fade();
    S_Resume();
    v0 = lw(s5);                                        // Load from: gPlayer1[30] (800A88AC)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D28);                               // Load from: gTicConOnPause (800782D8)
    v0 &= s6;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0x7EB4);                                // Store to: gTicCon (8007814C)
    v1 = u32(i32(v1) >> 2);
    sw(v0, s5);                                         // Store to: gPlayer1[30] (800A88AC)
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0x7D64);                                // Store to: gLastTgtGameTicCount (8007829C)
loc_80028E90:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    a3 = s3 + v0;
    v0 = s2 & 0x100;
    {
        const bool bJump = (v0 == 0)
        v0 = s4 & 0x100;
        if (bJump) goto loc_80028F34;
    }
    if (v0 != 0) goto loc_80028F34;
    v0 = lw(gp + 0x8E0);                                // Load from: gbGamePaused (80077EC0)
    if (v0 == 0) goto loc_80028F34;
    v0 = lw(a3 + 0xC0);
    v0 &= s6;
    sw(v0, a3 + 0xC0);
    I_DrawPresent();
    a0 = 0x80040000;                                    // Result = 80040000
    a0 -= 0x16F0;                                       // Result = O_Init (8003E910)
    a1 = 0x80040000;                                    // Result = 80040000
    a1 -= 0x1630;                                       // Result = O_Shutdown (8003E9D0)
    a2 = 0x80040000;                                    // Result = 80040000
    a2 -= 0x160C;                                       // Result = O_Control (8003E9F4)
    a3 = 0x80040000;                                    // Result = 80040000
    a3 -= 0x1138;                                       // Result = O_Drawer (8003EEC8)
    MiniLoop();
    v1 = v0;
    v0 = 9;                                             // Result = 00000009
    {
        const bool bJump = (v1 == v0)
        v0 = 8;                                         // Result = 00000008
        if (bJump) goto loc_800293E8;
    }
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x7EB4);                                // Store to: gGameAction (80077EB4)
    {
        const bool bJump = (v1 == v0)
        v0 = 5;                                         // Result = 00000005
        if (bJump) goto loc_80028F24;
    }
    if (v1 != v0) goto loc_800293E8;
loc_80028F24:
    O_Drawer();
    goto loc_800293E8;
loc_80028F34:
    s3 -= 0x12C;
    s0--;
    s1 -= 4;
    if (i32(s0) >= 0) goto loc_80028DD0;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    if (v0 != 0) goto loc_800293E8;
    if (s2 != 0) goto loc_80028F68;
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7EF8);                                 // Store to: gVBlanksUntilMenuMove (80077EF8)
loc_80028F68:
    v1 = lw(a3 + 0xC0);
    v0 = v1 & 0x20;
    {
        const bool bJump = (v0 == 0)
        v0 = v1 & 0x10;
        if (bJump) goto loc_80029044;
    }
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7EF8;                                       // Result = gVBlanksUntilMenuMove (80077EF8)
    v0 = lw(a0);                                        // Load from: gVBlanksUntilMenuMove (80077EF8)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7FBC);                               // Load from: gPlayersElapsedVBlanks[0] (80077FBC)
    v0 -= v1;
    sw(v0, a0);                                         // Store to: gVBlanksUntilMenuMove (80077EF8)
    if (i32(v0) > 0) goto loc_80029000;
    v0 = s2 & 0x8000;
    {
        const bool bJump = (v0 == 0)
        v0 = s2 & 0x2000;
        if (bJump) goto loc_80028FCC;
    }
    v0 = lw(gp + 0xC90);                                // Load from: gMapNumToCheatWarpTo (80078270)
    v0--;
    sw(v0, gp + 0xC90);                                 // Store to: gMapNumToCheatWarpTo (80078270)
    {
        const bool bJump = (i32(v0) > 0)
        v0 = 0xF;                                       // Result = 0000000F
        if (bJump) goto loc_80028FFC;
    }
    v0 = 1;                                             // Result = 00000001
    goto loc_80028FF4;
loc_80028FCC:
    if (v0 == 0) goto loc_80029000;
    v0 = lw(gp + 0xC90);                                // Load from: gMapNumToCheatWarpTo (80078270)
    v0++;
    sw(v0, gp + 0xC90);                                 // Store to: gMapNumToCheatWarpTo (80078270)
    v0 = (i32(v0) < 0x37);
    {
        const bool bJump = (v0 != 0)
        v0 = 0xF;                                       // Result = 0000000F
        if (bJump) goto loc_80028FFC;
    }
    v0 = 0x36;                                          // Result = 00000036
loc_80028FF4:
    sw(v0, gp + 0xC90);                                 // Store to: gMapNumToCheatWarpTo (80078270)
    v0 = 0xF;                                           // Result = 0000000F
loc_80028FFC:
    sw(v0, a0);                                         // Store to: gVBlanksUntilMenuMove (80077EF8)
loc_80029000:
    v0 = s2 & 0xF0;
    if (s2 == s4) goto loc_800293E8;
    {
        const bool bJump = (v0 == 0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_800293E8;
    }
    a0 = -0x21;                                         // Result = FFFFFFDF
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7EB4);                                // Store to: gGameAction (80077EB4)
    v0 = lw(a3 + 0xC0);
    v1 = lw(gp + 0xC90);                                // Load from: gMapNumToCheatWarpTo (80078270)
    v0 &= a0;
    sw(v0, a3 + 0xC0);
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0x7FB8);                                // Store to: gGameMap (80078048)
    goto loc_800293E8;
loc_80029044:
    if (v0 == 0) goto loc_800290EC;
    v0 = s2 & 0x8000;
    if (s2 == s4) goto loc_800293E8;
    {
        const bool bJump = (v0 == 0)
        v0 = s2 & 0x2000;
        if (bJump) goto loc_80029080;
    }
    v0 = lw(gp + 0x8F4);                                // Load from: gVramViewerTexPage (80077ED4)
    v0--;
    sw(v0, gp + 0x8F4);                                 // Store to: gVramViewerTexPage (80077ED4)
    if (i32(v0) >= 0) goto loc_800293E8;
    sw(0, gp + 0x8F4);                                  // Store to: gVramViewerTexPage (80077ED4)
    goto loc_800293E8;
loc_80029080:
    if (v0 == 0) goto loc_800293E8;
    v0 = lw(gp + 0x8F4);                                // Load from: gVramViewerTexPage (80077ED4)
    v0++;
    sw(v0, gp + 0x8F4);                                 // Store to: gVramViewerTexPage (80077ED4)
    v0 = (i32(v0) < 0xB);
    {
        const bool bJump = (v0 != 0)
        v0 = 0xA;                                       // Result = 0000000A
        if (bJump) goto loc_800293E8;
    }
    sw(v0, gp + 0x8F4);                                 // Store to: gVramViewerTexPage (80077ED4)
    goto loc_800293E8;
loc_800290B0:
    psxcd_pause();
    a0 = 0xD;                                           // Result = 0000000D
    wess_seq_stop();
    a0 = 0xE;                                           // Result = 0000000E
    wess_seq_stop();
    S_Pause();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    sw(0, gp + 0xA04);                                  // Store to: gCurCheatBtnSequenceIdx (80077FE4)
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7D28);                                // Store to: gTicConOnPause (800782D8)
    goto loc_800293E8;
loc_800290EC:
    v0 = lw(gp + 0x8E0);                                // Load from: gbGamePaused (80077EC0)
    if (v0 == 0) goto loc_800293E8;
    if (s2 == 0) goto loc_800293E8;
    s0 = 0;                                             // Result = 00000000
    if (s2 == s4) goto loc_800293E8;
    t6 = 0x800B0000;                                    // Result = 800B0000
    t6 -= 0x6E5C;                                       // Result = gCheatSequenceBtns[0] (800A91A4)
    t3 = 0x800A0000;                                    // Result = 800A0000
    t3 -= 0x78C0;                                       // Result = gpStatusBarMsgStr (80098740)
    t4 = t3 + 4;                                        // Result = gStatusBarMsgTicsLeft (80098744)
    t2 = 1;                                             // Result = 00000001
    t5 = 0x80010000;                                    // Result = 80010000
    t5 += 0x1120;                                       // Result = JumpTable_P_CheckCheats_2[0] (80011120)
    v0 = lw(gp + 0xA04);                                // Load from: gCurCheatBtnSequenceIdx (80077FE4)
    t1 = 0x80060000;                                    // Result = 80060000
    t1 += 0x7778;                                       // Result = CheatSequenceButtons[0] (80067778)
    v1 = v0 + 1;
    v0 <<= 1;
    sw(v1, gp + 0xA04);                                 // Store to: gCurCheatBtnSequenceIdx (80077FE4)
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6E5C;                                       // Result = gCheatSequenceBtns[0] (800A91A4)
    at += v0;
    sh(s2, at);
loc_80029154:
    t0 = lw(gp + 0xA04);                                // Load from: gCurCheatBtnSequenceIdx (80077FE4)
    a0 = 0;                                             // Result = 00000000
    if (i32(t0) <= 0) goto loc_80029194;
    a2 = t1;
    a1 = t6;                                            // Result = gCheatSequenceBtns[0] (800A91A4)
loc_8002916C:
    v1 = lh(a1);
    v0 = lh(a2);
    {
        const bool bJump = (v1 != v0)
        v0 = (i32(a0) < 8);
        if (bJump) goto loc_80029198;
    }
    a2 += 2;
    a0++;
    v0 = (i32(a0) < i32(t0));
    a1 += 2;
    if (v0 != 0) goto loc_8002916C;
loc_80029194:
    v0 = (i32(a0) < 8);
loc_80029198:
    {
        const bool bJump = (v0 != 0)
        v0 = (s0 < 0xA);
        if (bJump) goto loc_800293B4;
    }
    if (v0 == 0) goto loc_800293C4;
    v0 = s0 << 2;
    at = 0x80010000;                                    // Result = 80010000
    at += 0x10F8;                                       // Result = JumpTable_P_CheckCheats_1[0] (800110F8)
    at += v0;
    v0 = lw(at);
    switch (v0) {
        case 0x800291C8: goto loc_800291C8;
        case 0x80029204: goto loc_80029204;
        case 0x80029240: goto loc_80029240;
        case 0x80029290: goto loc_80029290;
        case 0x800293C4: goto loc_800293C4;
        case 0x80029370: goto loc_80029370;
        case 0x800293A0: goto loc_800293A0;
        default: jump_table_err(); break;
    }
loc_800291C8:
    v0 = lw(a3 + 0xC0);
    v0 ^= 4;
    sw(v0, a3 + 0xC0);
    v0 &= 4;
    if (v0 == 0) goto loc_800291F4;
    v0 = 0x80010000;                                    // Result = 80010000
    v0 += 0x1060;                                       // Result = STR_Cheat_AllMapLines_On[0] (80011060)
    sw(v0, t3);
    goto loc_80029288;
loc_800291F4:
    v0 = 0x80010000;                                    // Result = 80010000
    v0 += 0x1074;                                       // Result = STR_Cheat_AllMapLines_Off[0] (80011074)
    sw(v0, t3);
    goto loc_80029288;
loc_80029204:
    v0 = lw(a3 + 0xC0);
    v0 ^= 8;
    sw(v0, a3 + 0xC0);
    v0 &= 8;
    if (v0 == 0) goto loc_80029230;
    v0 = 0x80010000;                                    // Result = 80010000
    v0 += 0x1088;                                       // Result = STR_Cheat_AllMapThings_On[0] (80011088)
    sw(v0, t3);
    goto loc_80029288;
loc_80029230:
    v0 = 0x80010000;                                    // Result = 80010000
    v0 += 0x109C;                                       // Result = STR_Cheat_AllMapThings_Off[0] (8001109C)
    sw(v0, t3);
    goto loc_80029288;
loc_80029240:
    v0 = lw(a3 + 0xC0);
    v0 ^= 2;
    sw(v0, a3 + 0xC0);
    v0 &= 2;
    if (v0 == 0) goto loc_8002927C;
    v0 = 0x80010000;                                    // Result = 80010000
    v0 += 0x10B0;                                       // Result = STR_Cheat_GodMode_On[0] (800110B0)
    sw(v0, t3);
    v1 = lw(a3);
    v0 = 0x64;                                          // Result = 00000064
    sw(v0, a3 + 0x24);
    sw(v0, v1 + 0x68);
    goto loc_80029288;
loc_8002927C:
    v0 = 0x80010000;                                    // Result = 80010000
    v0 += 0x10C8;                                       // Result = STR_Cheat_GodMode_Off[0] (800110C8)
    sw(v0, t3);
loc_80029288:
    sw(t2, t4);
    goto loc_800293C4;
loc_80029290:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x715C;                                       // Result = gMObjHead[5] (800A8EA4)
    a0 = lw(v0);                                        // Load from: gMObjHead[5] (800A8EA4)
    v0 -= 0x14;                                         // Result = gMObjHead[0] (800A8E90)
    if (a0 == v0) goto loc_80029314;
    a1 = v0;                                            // Result = gMObjHead[0] (800A8E90)
loc_800292AC:
    v0 = lw(a0 + 0x54);
    v1 = v0 - 0x25;
    v0 = (v1 < 6);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 << 2;
        if (bJump) goto loc_80029304;
    }
    v0 += t5;
    v0 = lw(v0);
    switch (v0) {
        case 0x800292D8: goto loc_800292D8;
        case 0x800292E8: goto loc_800292E8;
        case 0x800292E0: goto loc_800292E0;
        case 0x800292F8: goto loc_800292F8;
        case 0x80029300: goto loc_80029300;
        case 0x800292F0: goto loc_800292F0;
        default: jump_table_err(); break;
    }
loc_800292D8:
    sw(t2, a3 + 0x4C);
    goto loc_80029304;
loc_800292E0:
    sw(t2, a3 + 0x50);
    goto loc_80029304;
loc_800292E8:
    sw(t2, a3 + 0x48);
    goto loc_80029304;
loc_800292F0:
    sw(t2, a3 + 0x58);
    goto loc_80029304;
loc_800292F8:
    sw(t2, a3 + 0x5C);
    goto loc_80029304;
loc_80029300:
    sw(t2, a3 + 0x54);
loc_80029304:
    a0 = lw(a0 + 0x14);
    if (a0 != a1) goto loc_800292AC;
loc_80029314:
    a0 = 8;                                             // Result = 00000008
    v1 = a3 + 0x20;
    v0 = 0xC8;                                          // Result = 000000C8
    sw(v0, a3 + 0x28);
    v0 = 2;                                             // Result = 00000002
    sw(v0, a3 + 0x2C);
loc_8002932C:
    sw(t2, v1 + 0x74);
    a0--;
    v1 -= 4;
    if (i32(a0) >= 0) goto loc_8002932C;
    a0 = 0;                                             // Result = 00000000
    v1 = a3;
loc_80029344:
    v0 = lw(v1 + 0xA8);
    a0++;
    sw(v0, v1 + 0x98);
    v0 = (i32(a0) < 4);
    v1 += 4;
    if (v0 != 0) goto loc_80029344;
    v0 = 0x80010000;                                    // Result = 80010000
    v0 += 0x10E0;                                       // Result = STR_Cheat_LotsOfGoodies[0] (800110E0)
    sw(v0, t3);
    sw(t2, t3 + 0x4);
    goto loc_800293C4;
loc_80029370:
    v0 = lw(a3 + 0xC0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB8);                               // Load from: gGameMap (80078048)
    v0 |= 0x20;
    sw(v1, gp + 0xC90);                                 // Store to: gMapNumToCheatWarpTo (80078270)
    v1 = (i32(v1) < 0x37);
    sw(v0, a3 + 0xC0);
    if (v1 != 0) goto loc_800293C4;
    v0 = 0x36;                                          // Result = 00000036
    sw(v0, gp + 0xC90);                                 // Store to: gMapNumToCheatWarpTo (80078270)
    goto loc_800293C4;
loc_800293A0:
    v0 = lw(a3 + 0xC0);
    v0 ^= 0x80;
    sw(v0, a3 + 0xC0);
    goto loc_800293C4;
loc_800293B4:
    s0++;
    v0 = (s0 < 0xC);
    t1 += 0x10;
    if (v0 != 0) goto loc_80029154;
loc_800293C4:
    v1 = lw(gp + 0xA04);                                // Load from: gCurCheatBtnSequenceIdx (80077FE4)
    v0 = v1;
    if (i32(v1) >= 0) goto loc_800293D8;
    v0 = v1 + 7;
loc_800293D8:
    v0 = u32(i32(v0) >> 3);
    v0 <<= 3;
    v0 = v1 - v0;
    sw(v0, gp + 0xA04);                                 // Store to: gCurCheatBtnSequenceIdx (80077FE4)
loc_800293E8:
    ra = lw(sp + 0x3C);
    s6 = lw(sp + 0x38);
    s5 = lw(sp + 0x34);
    s4 = lw(sp + 0x30);
    s3 = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x40;
    return;
}

void P_Ticker() noexcept {
    sp -= 0x20;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7EB4);                                 // Store to: gGameAction (80077EB4)
    P_CheckCheats();
    v0 = lw(gp + 0x8E0);                                // Load from: gbGamePaused (80077EC0)
    if (v0 != 0) goto loc_8002955C;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    v0 = (i32(v0) < i32(v1));
    if (v0 == 0) goto loc_8002955C;
    s0 = 0x80090000;                                    // Result = 80090000
    s0 = lw(s0 + 0x6554);                               // Load from: gThinkerCap[1] (80096554)
    v0 = 0x80090000;                                    // Result = 80090000
    v0 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    sw(0, gp + 0xD14);                                  // Store to: gNumActiveThinkers (800782F4)
    if (s0 == v0) goto loc_800294F8;
    s2 = -1;                                            // Result = FFFFFFFF
    s1 = v0;                                            // Result = gThinkerCap[0] (80096550)
loc_8002948C:
    v0 = lw(s0 + 0x8);
    a1 = s0;
    if (v0 != s2) goto loc_800294C8;
    v1 = lw(s0 + 0x4);
    v0 = lw(s0);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    sw(v0, v1);
    v1 = lw(s0);
    v0 = lw(s0 + 0x4);
    sw(v0, v1 + 0x4);
    Z_Free2();
    goto loc_800294E8;
loc_800294C8:
    if (v0 == 0) goto loc_800294D8;
    a0 = s0;
    pcall(v0);
loc_800294D8:
    v0 = lw(gp + 0xD14);                                // Load from: gNumActiveThinkers (800782F4)
    v0++;
    sw(v0, gp + 0xD14);                                 // Store to: gNumActiveThinkers (800782F4)
loc_800294E8:
    s0 = lw(s0 + 0x4);
    if (s0 != s1) goto loc_8002948C;
loc_800294F8:
    P_CheckSights();
    P_RunMobjBase();
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x715C);                               // Load from: gMObjHead[5] (800A8EA4)
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    s1 = v0;                                            // Result = gMObjHead[0] (800A8E90)
    if (a0 == v0) goto loc_80029544;
loc_80029520:
    v0 = lw(a0 + 0x18);
    s0 = lw(a0 + 0x14);
    if (v0 == 0) goto loc_80029538;
    pcall(v0);
loc_80029538:
    a0 = s0;
    if (a0 != s1) goto loc_80029520;
loc_80029544:
    P_UpdateSpecials();
    P_RespawnSpecials();
    ST_Ticker();
loc_8002955C:
    sw(0, gp + 0xD0C);                                  // Store to: gPlayerNum (800782EC)
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    s2 = 0x80080000;                                    // Result = 80080000
    s2 -= 0x7F54;                                       // Result = gbPlayerInGame[0] (800780AC)
    s1 = 2;                                             // Result = 00000002
loc_80029574:
    a0 = lw(gp + 0xD0C);                                // Load from: gPlayerNum (800782EC)
    v0 = a0 << 2;
    v0 += s2;
    v0 = lw(v0);
    if (v0 == 0) goto loc_800295BC;
    v0 = lw(s0 + 0x4);
    if (v0 != s1) goto loc_800295AC;
    G_DoReborn();
loc_800295AC:
    a0 = s0;
    AM_Control();
    a0 = s0;
    P_PlayerThink();
loc_800295BC:
    v0 = lw(gp + 0xD0C);                                // Load from: gPlayerNum (800782EC)
    v0++;
    sw(v0, gp + 0xD0C);                                 // Store to: gPlayerNum (800782EC)
    v0 = (i32(v0) < 2);
    s0 += 0x12C;
    if (v0 != 0) goto loc_80029574;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EB4);                               // Load from: gGameAction (80077EB4)
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_Drawer() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    I_IncDrawnFrameCount();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v1 = v0 << 2;
    v1 += v0;
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 2;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x76F0;                                       // Result = gPlayer1[49] (800A8910)
    at += v0;
    v0 = lw(at);
    v0 &= 1;
    if (v0 == 0) goto loc_8002965C;
    AM_Drawer();
    goto loc_80029664;
loc_8002965C:
    R_RenderPlayerView();
loc_80029664:
    ST_Drawer();
    I_SubmitGpuCmds();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_Start() noexcept {
    sp -= 0x28;
    sw(s0, sp + 0x20);
    s0 = 1;                                             // Result = 00000001
    sw(ra, sp + 0x24);
    sw(0, gp + 0x8E0);                                  // Store to: gbGamePaused (80077EC0)
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x7BC4);                                // Store to: gValidCount (80077BC4)
    AM_Start();
    M_ClearRandom();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F80);                               // Load from: gbDemoPlayback (80078080)
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x7BE4);                                // Store to: gbIsLevelDataCached (80077BE4)
    a2 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_80029700;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 += 0x3E54;                                       // Result = CDTrackNum_Credits_Demo (80073E54)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x75F8);                               // Load from: gCdMusicVol (800775F8)
    v0 = lw(v1);                                        // Load from: CDTrackNum_Credits_Demo (80073E54)
    sw(0, sp + 0x18);
    sw(0, sp + 0x1C);
    sw(v0, sp + 0x10);
    sw(a1, sp + 0x14);
    a0 = lw(v1);                                        // Load from: CDTrackNum_Credits_Demo (80073E54)
    a3 = 0;                                             // Result = 00000000
    psxcd_play_at_andloop();
    goto loc_80029708;
loc_80029700:
    S_StartMusicSequence();
loc_80029708:
    ra = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x28;
    return;
}

void P_Stop() noexcept {
    sp -= 0x20;
    a0 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    LIBGPU_DrawSync();
    s0 = 0;                                             // Result = 00000000
    S_Clear();
    psxcd_stop();
    S_StopMusicSequence();
    s1 = 0x80080000;                                    // Result = 80080000
    s1 -= 0x7F54;                                       // Result = gbPlayerInGame[0] (800780AC)
    sw(0, gp + 0x8E0);                                  // Store to: gbGamePaused (80077EC0)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7BE4);                                 // Store to: gbIsLevelDataCached (80077BE4)
loc_80029760:
    v0 = lw(s1);
    s1 += 4;
    if (v0 == 0) goto loc_80029778;
    a0 = s0;
    G_PlayerFinishLevel();
loc_80029778:
    s0++;
    v0 = (i32(s0) < 2);
    if (v0 != 0) goto loc_80029760;
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void P_PlayerMove() noexcept {
loc_800297A0:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    sp -= 0x28;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v1 = lw(s0 + 0x48);
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    a0 = lw(at);
    v1 = u32(i32(v1) >> 2);
    mult(v1, a0);
    v0 = lw(s0 + 0x4C);
    s2 = lo;
    v0 = u32(i32(v0) >> 2);
    mult(v0, a0);
    sw(s0, gp + 0x8F8);                                 // Store to: gpSlideThing (80077ED8)
    s1 = lo;
    P_SlideMove();
    s3 = 0x80070000;                                    // Result = 80070000
    s3 = lw(s3 + 0x7F9C);                               // Load from: gpSpecialLine (80077F9C)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7F90);                               // Load from: gSlideX (80077F90)
    v0 = lw(s0);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7F94);                               // Load from: gSlideY (80077F94)
    if (a1 != v0) goto loc_80029838;
    v0 = lw(s0 + 0x4);
    {
        const bool bJump = (a2 == v0)
        v0 = 0x100000;                                  // Result = 00100000
        if (bJump) goto loc_80029848;
    }
loc_80029838:
    a0 = s0;
    P_TryMove();
    {
        const bool bJump = (v0 != 0)
        v0 = 0x100000;                                  // Result = 00100000
        if (bJump) goto loc_800298E8;
    }
loc_80029848:
    v0 = (i32(v0) < i32(s2));
    {
        const bool bJump = (v0 == 0)
        v0 = 0xFFF00000;                                // Result = FFF00000
        if (bJump) goto loc_8002985C;
    }
    s2 = 0x100000;                                      // Result = 00100000
    goto loc_8002986C;
loc_8002985C:
    v0 = (i32(s2) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = 0x100000;                                  // Result = 00100000
        if (bJump) goto loc_80029870;
    }
    s2 = 0xFFF00000;                                    // Result = FFF00000
loc_8002986C:
    v0 = 0x100000;                                      // Result = 00100000
loc_80029870:
    v0 = (i32(v0) < i32(s1));
    {
        const bool bJump = (v0 == 0)
        v0 = 0xFFF00000;                                // Result = FFF00000
        if (bJump) goto loc_80029884;
    }
    s1 = 0x100000;                                      // Result = 00100000
    goto loc_80029894;
loc_80029884:
    v0 = (i32(s1) < i32(v0));
    a0 = s0;
    if (v0 == 0) goto loc_80029898;
    s1 = 0xFFF00000;                                    // Result = FFF00000
loc_80029894:
    a0 = s0;
loc_80029898:
    a2 = lw(s0 + 0x4);
    a1 = lw(s0);
    a2 += s1;
    P_TryMove();
    a0 = s0;
    if (v0 == 0) goto loc_800298BC;
    sw(0, s0 + 0x48);
    sw(s1, s0 + 0x4C);
    goto loc_800298E8;
loc_800298BC:
    a1 = lw(s0);
    a2 = lw(s0 + 0x4);
    a1 += s2;
    P_TryMove();
    if (v0 == 0) goto loc_800298E0;
    sw(s2, s0 + 0x48);
    sw(0, s0 + 0x4C);
    goto loc_800298E8;
loc_800298E0:
    sw(0, s0 + 0x4C);
    sw(0, s0 + 0x48);
loc_800298E8:
    a0 = s3;
    if (s3 == 0) goto loc_800298F8;
    a1 = s0;
    P_CrossSpecialLine();
loc_800298F8:
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void P_PlayerXYMovement() noexcept {
    sp -= 0x18;
    sw(s0, sp + 0x10);
    sw(ra, sp + 0x14);
    s0 = a0;
    P_PlayerMove();
    v0 = lw(s0 + 0x8);
    a0 = lw(s0 + 0x38);
    v0 = (i32(a0) < i32(v0));
    v1 = 0x100000;                                      // Result = 00100000
    if (v0 != 0) goto loc_800299F4;
    v0 = lw(s0 + 0x64);
    v0 &= v1;
    if (v0 == 0) goto loc_80029978;
    v0 = lw(s0 + 0xC);
    v0 = lw(v0);
    v0 = lw(v0);
    if (a0 != v0) goto loc_800299F4;
loc_80029978:
    v0 = lw(s0 + 0x48);
    v0 += 0xFFF;
    v0 = (v0 < 0x1FFF);
    if (v0 == 0) goto loc_800299B4;
    v0 = lw(s0 + 0x4C);
    v0 += 0xFFF;
    v0 = (v0 < 0x1FFF);
    if (v0 == 0) goto loc_800299B4;
    sw(0, s0 + 0x48);
    sw(0, s0 + 0x4C);
    goto loc_800299F4;
loc_800299B4:
    v0 = lw(s0 + 0x48);
    a0 = lw(s0 + 0x4C);
    v0 = u32(i32(v0) >> 8);
    v1 = v0 << 3;
    v1 -= v0;
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 1;
    a0 = u32(i32(a0) >> 8);
    v1 = a0 << 3;
    v1 -= a0;
    sw(v0, s0 + 0x48);
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 1;
    sw(v0, s0 + 0x4C);
loc_800299F4:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_PlayerZMovement() noexcept {
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    a1 = lw(s0 + 0x8);
    v1 = lw(s0 + 0x38);
    v0 = (i32(a1) < i32(v1));
    v1 -= a1;
    if (v0 == 0) goto loc_80029A64;
    a0 = lw(s0 + 0x80);
    v0 = lw(a0 + 0x18);
    v0 -= v1;
    sw(v0, a0 + 0x18);
    a0 = lw(s0 + 0x80);
    v1 = lw(a0 + 0x18);
    v0 = 0x290000;                                      // Result = 00290000
    v0 -= v1;
    v0 = u32(i32(v0) >> 2);
    sw(v0, a0 + 0x1C);
loc_80029A64:
    v0 = lw(s0 + 0x8);
    a0 = lw(s0 + 0x50);
    v1 = lw(s0 + 0x38);
    v0 += a0;
    v1 = (i32(v1) < i32(v0));
    sw(v0, s0 + 0x8);
    if (v1 != 0) goto loc_80029AC0;
    a0 = lw(s0 + 0x50);
    v0 = 0xFFF80000;                                    // Result = FFF80000
    if (i32(a0) >= 0) goto loc_80029AB4;
    v0 = (i32(a0) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = u32(i32(a0) >> 3);
        if (bJump) goto loc_80029AB0;
    }
    a0 = s0;
    v1 = lw(s0 + 0x80);
    a1 = 0x1A;                                          // Result = 0000001A
    sw(v0, v1 + 0x1C);
    S_StartSound();
loc_80029AB0:
    sw(0, s0 + 0x50);
loc_80029AB4:
    v0 = lw(s0 + 0x38);
    sw(v0, s0 + 0x8);
    goto loc_80029AE0;
loc_80029AC0:
    v1 = lw(s0 + 0x50);
    v0 = 0xFFFE0000;                                    // Result = FFFE0000
    if (v1 != 0) goto loc_80029AD8;
    v0 = 0xFFFC0000;                                    // Result = FFFC0000
    goto loc_80029ADC;
loc_80029AD8:
    v0 += v1;
loc_80029ADC:
    sw(v0, s0 + 0x50);
loc_80029AE0:
    v0 = lw(s0 + 0x8);
    a0 = lw(s0 + 0x44);
    v1 = lw(s0 + 0x3C);
    v0 += a0;
    v1 = (i32(v1) < i32(v0));
    if (v1 == 0) goto loc_80029B24;
    v0 = lw(s0 + 0x50);
    if (i32(v0) <= 0) goto loc_80029B10;
    sw(0, s0 + 0x50);
loc_80029B10:
    v0 = lw(s0 + 0x3C);
    v1 = lw(s0 + 0x44);
    v0 -= v1;
    sw(v0, s0 + 0x8);
loc_80029B24:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_PlayerMobjThink() noexcept {
loc_80029B38:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v0 = lw(s0 + 0x48);
    if (v0 != 0) goto loc_80029B68;
    v0 = lw(s0 + 0x4C);
    if (v0 == 0) goto loc_80029C38;
loc_80029B68:
    a0 = s0;
    P_PlayerMove();
    v0 = lw(s0 + 0x8);
    a0 = lw(s0 + 0x38);
    v0 = (i32(a0) < i32(v0));
    v1 = 0x100000;                                      // Result = 00100000
    if (v0 != 0) goto loc_80029C38;
    v0 = lw(s0 + 0x64);
    v0 &= v1;
    if (v0 == 0) goto loc_80029BBC;
    v0 = lw(s0 + 0xC);
    v0 = lw(v0);
    v0 = lw(v0);
    if (a0 != v0) goto loc_80029C38;
loc_80029BBC:
    v0 = lw(s0 + 0x48);
    v0 += 0xFFF;
    v0 = (v0 < 0x1FFF);
    if (v0 == 0) goto loc_80029BF8;
    v0 = lw(s0 + 0x4C);
    v0 += 0xFFF;
    v0 = (v0 < 0x1FFF);
    if (v0 == 0) goto loc_80029BF8;
    sw(0, s0 + 0x48);
    sw(0, s0 + 0x4C);
    goto loc_80029C38;
loc_80029BF8:
    v0 = lw(s0 + 0x48);
    a0 = lw(s0 + 0x4C);
    v0 = u32(i32(v0) >> 8);
    v1 = v0 << 3;
    v1 -= v0;
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 1;
    a0 = u32(i32(a0) >> 8);
    v1 = a0 << 3;
    v1 -= a0;
    sw(v0, s0 + 0x48);
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 1;
    sw(v0, s0 + 0x4C);
loc_80029C38:
    a1 = lw(s0 + 0x8);
    v1 = lw(s0 + 0x38);
    v0 = (i32(a1) < i32(v1));
    if (a1 != v1) goto loc_80029C5C;
    v0 = lw(s0 + 0x50);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(a1) < i32(v1));
        if (bJump) goto loc_80029D58;
    }
loc_80029C5C:
    v1 -= a1;
    if (v0 == 0) goto loc_80029C98;
    a0 = lw(s0 + 0x80);
    v0 = lw(a0 + 0x18);
    v0 -= v1;
    sw(v0, a0 + 0x18);
    a0 = lw(s0 + 0x80);
    v1 = lw(a0 + 0x18);
    v0 = 0x290000;                                      // Result = 00290000
    v0 -= v1;
    v0 = u32(i32(v0) >> 2);
    sw(v0, a0 + 0x1C);
loc_80029C98:
    v0 = lw(s0 + 0x8);
    a0 = lw(s0 + 0x50);
    v1 = lw(s0 + 0x38);
    v0 += a0;
    v1 = (i32(v1) < i32(v0));
    sw(v0, s0 + 0x8);
    if (v1 != 0) goto loc_80029CF4;
    a1 = lw(s0 + 0x50);
    v0 = 0xFFF80000;                                    // Result = FFF80000
    if (i32(a1) >= 0) goto loc_80029CE8;
    v0 = (i32(a1) < i32(v0));
    a0 = s0;
    if (v0 == 0) goto loc_80029CE4;
    v0 = u32(i32(a1) >> 3);
    v1 = lw(s0 + 0x80);
    a1 = 0x1A;                                          // Result = 0000001A
    sw(v0, v1 + 0x1C);
    S_StartSound();
loc_80029CE4:
    sw(0, s0 + 0x50);
loc_80029CE8:
    v0 = lw(s0 + 0x38);
    sw(v0, s0 + 0x8);
    goto loc_80029D14;
loc_80029CF4:
    v1 = lw(s0 + 0x50);
    v0 = 0xFFFE0000;                                    // Result = FFFE0000
    if (v1 != 0) goto loc_80029D0C;
    v0 = 0xFFFC0000;                                    // Result = FFFC0000
    goto loc_80029D10;
loc_80029D0C:
    v0 += v1;
loc_80029D10:
    sw(v0, s0 + 0x50);
loc_80029D14:
    v0 = lw(s0 + 0x8);
    a0 = lw(s0 + 0x44);
    v1 = lw(s0 + 0x3C);
    v0 += a0;
    v1 = (i32(v1) < i32(v0));
    if (v1 == 0) goto loc_80029D58;
    v0 = lw(s0 + 0x50);
    if (i32(v0) <= 0) goto loc_80029D44;
    sw(0, s0 + 0x50);
loc_80029D44:
    v0 = lw(s0 + 0x3C);
    v1 = lw(s0 + 0x44);
    v0 -= v1;
    sw(v0, s0 + 0x8);
loc_80029D58:
    v1 = lw(s0 + 0x5C);
    v0 = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 == v0)
        v0 = v1 - 1;
        if (bJump) goto loc_80029DC0;
    }
    sw(v0, s0 + 0x5C);
    if (i32(v0) > 0) goto loc_80029DC0;
    v0 = lw(s0 + 0x60);
    v1 = lw(v0 + 0x10);
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, s0 + 0x60);
    v1 = lw(v0 + 0x8);
    sw(v1, s0 + 0x5C);
    v1 = lw(v0);
    sw(v1, s0 + 0x28);
    v0 = lw(v0 + 0x4);
    sw(v0, s0 + 0x2C);
loc_80029DC0:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_BuildMove() noexcept {
loc_80029DD4:
    sp -= 0x18;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    a1 = a0;
    sw(ra, sp + 0x10);
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FC8;                                       // Result = MAYBE_gpButtonBindings_Player1 (80077FC8)
    at += v0;
    t0 = lw(at);
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at += v0;
    a2 = lw(at);
    v1 = lw(t0 + 0xC);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7DEC;                                       // Result = gPlayerOldPadButtons[0] (80078214)
    at += v0;
    a0 = lw(at);
    a3 = a2 & v1;
    v1 = a2 & 0x8000;
    a3 = (i32(a3) > 0);
    if (v1 == 0) goto loc_80029E3C;
    v0 = a0 & 0x8000;
    if (v0 != 0) goto loc_80029E50;
loc_80029E3C:
    v0 = a2 & 0x2000;
    {
        const bool bJump = (v0 == 0)
        v0 = a0 & 0x2000;
        if (bJump) goto loc_80029E64;
    }
    if (v0 == 0) goto loc_80029E64;
loc_80029E50:
    v0 = lw(a1 + 0x128);
    v0++;
    sw(v0, a1 + 0x128);
    goto loc_80029E68;
loc_80029E64:
    sw(0, a1 + 0x128);
loc_80029E68:
    v0 = lw(a1 + 0x128);
    v0 = (i32(v0) < 0xA);
    {
        const bool bJump = (v0 != 0)
        v0 = 9;                                         // Result = 00000009
        if (bJump) goto loc_80029E80;
    }
    sw(v0, a1 + 0x128);
loc_80029E80:
    sw(0, a1 + 0x10);
    sw(0, a1 + 0xC);
    sw(0, a1 + 0x8);
    v0 = lw(t0 + 0x10);
    v0 &= a2;
    v1 = a3 << 2;
    if (v0 == 0) goto loc_80029EDC;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    v0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7840;                                       // Result = SideMove[0] (80067840)
    at += v1;
    v1 = lw(at);
    v0 = -v0;
    mult(v0, v1);
    goto loc_80029F28;
loc_80029EDC:
    v0 = lw(t0 + 0x14);
    v0 &= a2;
    if (v0 == 0) goto loc_80029F40;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    a0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7840;                                       // Result = SideMove[0] (80067840)
    at += v1;
    v0 = lw(at);
    mult(a0, v0);
loc_80029F28:
    v0 = lo;
    if (i32(v0) >= 0) goto loc_80029F38;
    v0 += 3;
loc_80029F38:
    v0 = u32(i32(v0) >> 2);
    sw(v0, a1 + 0xC);
loc_80029F40:
    v0 = lw(t0 + 0x8);
    v0 &= a2;
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 0x8000;
        if (bJump) goto loc_80029FF8;
    }
    v1 = a3 << 2;
    if (v0 == 0) goto loc_80029F98;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    v0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7840;                                       // Result = SideMove[0] (80067840)
    at += v1;
    v1 = lw(at);
    v0 = -v0;
    mult(v0, v1);
    goto loc_80029FDC;
loc_80029F98:
    v0 = a2 & 0x2000;
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 0x1000;
        if (bJump) goto loc_8002A190;
    }
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    a0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7840;                                       // Result = SideMove[0] (80067840)
    at += v1;
    v0 = lw(at);
    mult(a0, v0);
loc_80029FDC:
    v0 = lo;
    if (i32(v0) >= 0) goto loc_80029FEC;
    v0 += 3;
loc_80029FEC:
    v0 = u32(i32(v0) >> 2);
    sw(v0, a1 + 0xC);
    goto loc_8002A18C;
loc_80029FF8:
    v0 = a2 & 0x5000;
    if (a3 == 0) goto loc_8002A0C8;
    {
        const bool bJump = (v0 != 0)
        v0 = a2 & 0x8000;
        if (bJump) goto loc_8002A0CC;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 0x2000;
        if (bJump) goto loc_8002A064;
    }
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v1 = lw(a1 + 0x128);
    v0 <<= 2;
    v1 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    a0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7870;                                       // Result = FastAngleTurn[0] (80067870)
    at += v1;
    v0 = lw(at);
    mult(a0, v0);
    v0 = lo;
    if (i32(v0) >= 0) goto loc_8002A05C;
    v0 += 3;
loc_8002A05C:
    v0 = u32(i32(v0) >> 2);
    goto loc_8002A184;
loc_8002A064:
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 0x1000;
        if (bJump) goto loc_8002A190;
    }
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v1 = lw(a1 + 0x128);
    v0 <<= 2;
    v1 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    a0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7870;                                       // Result = FastAngleTurn[0] (80067870)
    at += v1;
    v0 = lw(at);
    mult(a0, v0);
    v0 = lo;
    if (i32(v0) >= 0) goto loc_8002A0B8;
    v0 += 3;
loc_8002A0B8:
    v0 = u32(i32(v0) >> 2);
    v0 <<= 17;
    v0 = -v0;
    goto loc_8002A188;
loc_8002A0C8:
    v0 = a2 & 0x8000;
loc_8002A0CC:
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 0x2000;
        if (bJump) goto loc_8002A128;
    }
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v1 = lw(a1 + 0x128);
    v0 <<= 2;
    v1 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    a0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7848;                                       // Result = AngleTurn[0] (80067848)
    at += v1;
    v0 = lw(at);
    mult(a0, v0);
    v0 = lo;
    if (i32(v0) >= 0) goto loc_8002A120;
    v0 += 3;
loc_8002A120:
    v0 = u32(i32(v0) >> 2);
    goto loc_8002A184;
loc_8002A128:
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 0x1000;
        if (bJump) goto loc_8002A190;
    }
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v1 = lw(a1 + 0x128);
    v0 <<= 2;
    v1 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    a0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7848;                                       // Result = AngleTurn[0] (80067848)
    at += v1;
    v0 = lw(at);
    mult(a0, v0);
    v0 = lo;
    if (i32(v0) >= 0) goto loc_8002A17C;
    v0 += 3;
loc_8002A17C:
    v0 = u32(i32(v0) >> 2);
    v0 = -v0;
loc_8002A184:
    v0 <<= 17;
loc_8002A188:
    sw(v0, a1 + 0x10);
loc_8002A18C:
    v0 = a2 & 0x1000;
loc_8002A190:
    v1 = a3 << 2;
    if (v0 == 0) goto loc_8002A1D0;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    a0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7838;                                       // Result = ForwardMove[0] (80067838)
    at += v1;
    v0 = lw(at);
    mult(a0, v0);
    goto loc_8002A214;
loc_8002A1D0:
    v0 = a2 & 0x4000;
    if (v0 == 0) goto loc_8002A22C;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    v0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7838;                                       // Result = ForwardMove[0] (80067838)
    at += v1;
    v1 = lw(at);
    v0 = -v0;
    mult(v0, v1);
loc_8002A214:
    v0 = lo;
    if (i32(v0) >= 0) goto loc_8002A224;
    v0 += 3;
loc_8002A224:
    v0 = u32(i32(v0) >> 2);
    sw(v0, a1 + 0x8);
loc_8002A22C:
    a0 = lw(a1);
    v0 = lw(a0 + 0x48);
    if (v0 != 0) goto loc_8002A2A8;
    v0 = lw(a0 + 0x4C);
    if (v0 != 0) goto loc_8002A2A8;
    v0 = lw(a1 + 0x8);
    if (v0 != 0) goto loc_8002A2A8;
    v0 = lw(a1 + 0xC);
    if (v0 != 0) goto loc_8002A2A8;
    v1 = lw(a0 + 0x60);
    a1 = 0x80060000;                                    // Result = 80060000
    a1 -= 0x6180;                                       // Result = State_S_PLAY_RUN1[0] (80059E80)
    v0 = a1 + 0x1C;                                     // Result = State_S_PLAY_RUN2[0] (80059E9C)
    if (v1 == a1) goto loc_8002A2A0;
    {
        const bool bJump = (v1 == v0)
        v0 = a1 + 0x38;                                 // Result = State_S_PLAY_RUN3[0] (80059EB8)
        if (bJump) goto loc_8002A2A0;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = a1 + 0x54;                                 // Result = State_S_PLAY_RUN4[0] (80059ED4)
        if (bJump) goto loc_8002A2A0;
    }
    if (v1 != v0) goto loc_8002A2A8;
loc_8002A2A0:
    a1 = 0x9A;                                          // Result = 0000009A
    P_SetMObjState();
loc_8002A2A8:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_Thrust() noexcept {
    a1 >>= 19;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    a1 <<= 2;
    v0 += a1;
    v0 = lw(v0);
    a2 = u32(i32(a2) >> 8);
    v0 = u32(i32(v0) >> 8);
    mult(a2, v0);
    a3 = lw(a0);
    v1 = lw(a3 + 0x48);
    v0 = lo;
    v0 += v1;
    sw(v0, a3 + 0x48);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += a1;
    v0 = lw(at);
    v0 = u32(i32(v0) >> 8);
    mult(a2, v0);
    a0 = lw(a0);
    v1 = lw(a0 + 0x4C);
    v0 = lo;
    v0 += v1;
    sw(v0, a0 + 0x4C);
    return;
}

void P_CalcHeight() noexcept {
loc_8002A32C:
    a1 = a0;
    v0 = lw(a1);
    v0 = lw(v0 + 0x48);
    v0 = u32(i32(v0) >> 8);
    mult(v0, v0);
    v0 = lw(a1);
    v1 = lo;
    sw(v1, a1 + 0x20);
    v0 = lw(v0 + 0x4C);
    v0 = u32(i32(v0) >> 8);
    mult(v0, v0);
    v0 = lo;
    v0 += v1;
    v0 = u32(i32(v0) >> 4);
    v1 = 0x100000;                                      // Result = 00100000
    sw(v0, a1 + 0x20);
    v0 = (i32(v1) < i32(v0));
    if (v0 == 0) goto loc_8002A388;
    sw(v1, a1 + 0x20);
loc_8002A388:
    v0 = lw(gp + 0xBEC);                                // Load from: gbOnGround (800781CC)
    a0 = 0x290000;                                      // Result = 00290000
    if (v0 != 0) goto loc_8002A3D0;
    v0 = lw(a1);
    v1 = lw(v0 + 0x8);
    v0 = lw(a1);
    v1 += a0;
    sw(v1, a1 + 0x14);
    a0 = lw(v0 + 0x3C);
    v0 = 0xFFFC0000;                                    // Result = FFFC0000
    a0 += v0;
    v1 = (i32(a0) < i32(v1));
    if (v1 == 0) goto loc_8002A4E0;
    sw(a0, a1 + 0x14);
    goto loc_8002A4E0;
loc_8002A3D0:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    v0 = v1 << 1;
    v0 += v1;
    v1 = v0 << 4;
    v0 += v1;
    v0 <<= 4;
    v0 &= 0x7FF0;
    v1 = lw(a1 + 0x20);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += v0;
    v0 = lw(at);
    v1 = u32(i32(v1) >> 17);
    mult(v1, v0);
    v0 = lw(a1 + 0x4);
    a0 = lo;
    if (v0 != 0) goto loc_8002A4A4;
    v0 = lw(a1 + 0x18);
    v1 = lw(a1 + 0x1C);
    v0 += v1;
    v1 = 0x290000;                                      // Result = 00290000
    sw(v0, a1 + 0x18);
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = 0x140000;                                  // Result = 00140000
        if (bJump) goto loc_8002A44C;
    }
    sw(v1, a1 + 0x18);
    sw(0, a1 + 0x1C);
loc_8002A44C:
    v1 = lw(a1 + 0x18);
    v0 |= 0x7FFF;                                       // Result = 00147FFF
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = 0x140000;                                  // Result = 00140000
        if (bJump) goto loc_8002A478;
    }
    v1 = lw(a1 + 0x1C);
    v0 |= 0x8000;                                       // Result = 00148000
    sw(v0, a1 + 0x18);
    if (i32(v1) > 0) goto loc_8002A488;
    v0 = 1;                                             // Result = 00000001
    sw(v0, a1 + 0x1C);
loc_8002A478:
    v0 = lw(a1 + 0x1C);
    if (v0 == 0) goto loc_8002A4A4;
loc_8002A488:
    v0 = lw(a1 + 0x1C);
    v1 = 0x8000;                                        // Result = 00008000
    v0 += v1;
    sw(v0, a1 + 0x1C);
    if (v0 != 0) goto loc_8002A4A4;
    v0 = 1;                                             // Result = 00000001
    sw(v0, a1 + 0x1C);
loc_8002A4A4:
    v0 = lw(a1);
    v1 = lw(a1 + 0x18);
    v0 = lw(v0 + 0x8);
    v0 += v1;
    v1 = lw(a1);
    v0 += a0;
    sw(v0, a1 + 0x14);
    a0 = lw(v1 + 0x3C);
    v1 = 0xFFFC0000;                                    // Result = FFFC0000
    a0 += v1;
    v0 = (i32(a0) < i32(v0));
    if (v0 == 0) goto loc_8002A4E0;
    sw(a0, a1 + 0x14);
loc_8002A4E0:
    return;
}

void P_MovePlayer() noexcept {
loc_8002A4E8:
    sp -= 0x18;
    a3 = a0;
    sw(ra, sp + 0x10);
    a0 = lw(a3);
    v1 = lw(a3 + 0x10);
    v0 = lw(a0 + 0x24);
    v0 += v1;
    sw(v0, a0 + 0x24);
    v0 = lw(a3);
    v1 = lw(v0 + 0x8);
    v0 = lw(v0 + 0x38);
    a2 = lw(a3 + 0x8);
    v0 = (i32(v0) < i32(v1));
    v0 ^= 1;
    sw(v0, gp + 0xBEC);                                 // Store to: gbOnGround (800781CC)
    if (a2 == 0) goto loc_8002A5B0;
    a2 = u32(i32(a2) >> 8);
    if (v0 == 0) goto loc_8002A5B0;
    a1 = lw(a3);
    v1 = lw(a1 + 0x24);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    v1 >>= 19;
    v1 <<= 2;
    v0 += v1;
    v0 = lw(v0);
    v0 = u32(i32(v0) >> 8);
    mult(a2, v0);
    a0 = lw(a1 + 0x48);
    v0 = lo;
    v0 += a0;
    sw(v0, a1 + 0x48);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += v1;
    v0 = lw(at);
    v0 = u32(i32(v0) >> 8);
    mult(a2, v0);
    a0 = lw(a3);
    v1 = lw(a0 + 0x4C);
    v0 = lo;
    v0 += v1;
    sw(v0, a0 + 0x4C);
loc_8002A5B0:
    a2 = lw(a3 + 0xC);
    if (a2 == 0) goto loc_8002A64C;
    v0 = lw(gp + 0xBEC);                                // Load from: gbOnGround (800781CC)
    {
        const bool bJump = (v0 == 0)
        v0 = 0xC0000000;                                // Result = C0000000
        if (bJump) goto loc_8002A64C;
    }
    a1 = lw(a3);
    v1 = lw(a1 + 0x24);
    v1 += v0;
    v1 >>= 19;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    v1 <<= 2;
    v0 += v1;
    v0 = lw(v0);
    a2 = u32(i32(a2) >> 8);
    v0 = u32(i32(v0) >> 8);
    mult(a2, v0);
    a0 = lw(a1 + 0x48);
    v0 = lo;
    v0 += a0;
    sw(v0, a1 + 0x48);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += v1;
    v0 = lw(at);
    v0 = u32(i32(v0) >> 8);
    mult(a2, v0);
    a0 = lw(a3);
    v1 = lw(a0 + 0x4C);
    v0 = lo;
    v0 += v1;
    sw(v0, a0 + 0x4C);
loc_8002A64C:
    v0 = lw(a3 + 0x8);
    if (v0 != 0) goto loc_8002A66C;
    v0 = lw(a3 + 0xC);
    if (v0 == 0) goto loc_8002A690;
loc_8002A66C:
    a0 = lw(a3);
    v1 = lw(a0 + 0x60);
    v0 = 0x80060000;                                    // Result = 80060000
    v0 -= 0x619C;                                       // Result = State_S_PLAY[0] (80059E64)
    if (v1 != v0) goto loc_8002A690;
    a1 = 0x9B;                                          // Result = 0000009B
    P_SetMObjState();
loc_8002A690:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_DeathThink() noexcept {
loc_8002A6A0:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    sw(ra, sp + 0x14);
    s0 = a0;
    P_MovePsprites();
    v1 = lw(s0 + 0x18);
    v0 = 0x80000;                                       // Result = 00080000
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = 0xFFFF0000;                                // Result = FFFF0000
        if (bJump) goto loc_8002A6D0;
    }
    v0 += v1;
    sw(v0, s0 + 0x18);
loc_8002A6D0:
    v0 = lw(s0);
    v1 = lw(v0 + 0x8);
    v0 = lw(v0 + 0x38);
    v0 = (i32(v0) < i32(v1));
    v0 ^= 1;
    sw(v0, gp + 0xBEC);                                 // Store to: gbOnGround (800781CC)
    a0 = s0;
    P_CalcHeight();
    v1 = lw(s0 + 0xE0);
    if (v1 == 0) goto loc_8002A78C;
    v0 = lw(s0);
    if (v1 == v0) goto loc_8002A78C;
    a0 = lw(v0);
    a1 = lw(v0 + 0x4);
    a2 = lw(v1);
    a3 = lw(v1 + 0x4);
    R_PointToAngle2();
    t0 = 0xFC710000;                                    // Result = FC710000
    t0 |= 0xC71D;                                       // Result = FC71C71D
    v1 = 0xF8E30000;                                    // Result = F8E30000
    a1 = lw(s0);
    v1 |= 0x8E3A;                                       // Result = F8E38E3A
    a0 = lw(a1 + 0x24);
    a3 = v0;
    a2 = v0 - a0;
    v0 = a2 + t0;
    v1 = (v1 < v0);
    if (v1 == 0) goto loc_8002A768;
    sw(a3, a1 + 0x24);
    goto loc_8002A78C;
loc_8002A768:
    v0 = 0x38E0000;                                     // Result = 038E0000
    if (i32(a2) < 0) goto loc_8002A780;
    v0 |= 0x38E3;                                       // Result = 038E38E3
    v0 += a0;
    sw(v0, a1 + 0x24);
    goto loc_8002A7A0;
loc_8002A780:
    v0 = a0 + t0;
    sw(v0, a1 + 0x24);
    goto loc_8002A7A0;
loc_8002A78C:
    v0 = lw(s0 + 0xD8);
    {
        const bool bJump = (v0 == 0)
        v0--;
        if (bJump) goto loc_8002A7A0;
    }
    sw(v0, s0 + 0xD8);
loc_8002A7A0:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at += v0;
    v0 = lbu(at);
    {
        const bool bJump = (v0 == 0)
        v0 = 0x80000;                                   // Result = 00080000
        if (bJump) goto loc_8002A7E4;
    }
    v1 = lw(s0 + 0x18);
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_8002A7E4;
    }
    sw(v0, s0 + 0x4);
loc_8002A7E4:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void P_PlayerThink() noexcept {
loc_8002A7F8:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v1 = lw(s0 + 0x4);
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at += v0;
    s2 = lw(at);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7DEC;                                       // Result = gPlayerOldPadButtons[0] (80078214)
    at += v0;
    a1 = lw(at);
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FC8;                                       // Result = MAYBE_gpButtonBindings_Player1 (80077FC8)
    at += v0;
    s1 = lw(at);
    v0 = 0xA;                                           // Result = 0000000A
    if (v1 != 0) goto loc_8002AA14;
    a0 = lw(s0 + 0x70);
    {
        const bool bJump = (a0 != v0)
        v0 = a0 << 2;
        if (bJump) goto loc_8002A874;
    }
    a0 = lw(s0 + 0x6C);
    v0 = a0 << 2;
loc_8002A874:
    at = 0x80070000;                                    // Result = 80070000
    at += 0x408C;                                       // Result = WeaponNumbers[0] (8007408C)
    at += v0;
    a0 = lw(at);
    v1 = lw(s1 + 0x18);
    v0 = s2 & v1;
    a2 = a0;
    if (v0 == 0) goto loc_8002A924;
    v0 = a1 & v1;
    if (v0 != 0) goto loc_8002A924;
    if (a0 != 0) goto loc_8002A8C4;
    v0 = lw(s0 + 0x94);
    if (v0 == 0) goto loc_8002A8C4;
    a2 = 1;                                             // Result = 00000001
    goto loc_8002A9E0;
loc_8002A8C4:
    if (i32(a0) <= 0) goto loc_8002A9E0;
    a0--;
    v0 = a0 << 2;
    v0 += s0;
    v0 = lw(v0 + 0x74);
    if (v0 != 0) goto loc_8002A9E0;
    if (i32(a0) <= 0) goto loc_8002A9E0;
    a0--;
    v0 = a0 << 2;
    v1 = v0 + s0;
    v0 = lw(v1 + 0x74);
loc_8002A900:
    if (v0 != 0) goto loc_8002A9E0;
    if (i32(a0) <= 0) goto loc_8002A9E0;
    v1 -= 4;
    v0 = lw(v1 + 0x74);
    a0--;
    goto loc_8002A900;
loc_8002A924:
    v1 = lw(s1 + 0x1C);
    v0 = s2 & v1;
    {
        const bool bJump = (v0 == 0)
        v0 = a1 & v1;
        if (bJump) goto loc_8002A9E0;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a0) < 8);
        if (bJump) goto loc_8002A9E0;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 8;                                         // Result = 00000008
        if (bJump) goto loc_8002A9B0;
    }
    a0++;
    v0 = a0 << 2;
    v0 += s0;
    v0 = lw(v0 + 0x74);
    {
        const bool bJump = (v0 != 0)
        v0 = 8;                                         // Result = 00000008
        if (bJump) goto loc_8002A9B0;
    }
    v0 = (i32(a0) < 8);
    {
        const bool bJump = (v0 == 0)
        v0 = 8;                                         // Result = 00000008
        if (bJump) goto loc_8002A9B0;
    }
    a0++;
    v0 = a0 << 2;
    v1 = v0 + s0;
    v0 = lw(v1 + 0x74);
    {
        const bool bJump = (v0 != 0)
        v0 = 8;                                         // Result = 00000008
        if (bJump) goto loc_8002A9B0;
    }
loc_8002A98C:
    v0 = (i32(a0) < 8);
    {
        const bool bJump = (v0 == 0)
        v0 = 8;                                         // Result = 00000008
        if (bJump) goto loc_8002A9B0;
    }
    v1 += 4;
    v0 = lw(v1 + 0x74);
    a0++;
    if (v0 == 0) goto loc_8002A98C;
    v0 = 8;                                             // Result = 00000008
loc_8002A9B0:
    if (a0 != v0) goto loc_8002A9E0;
    v0 = lw(s0 + 0x90);
    a0 = 7;                                             // Result = 00000007
    if (v0 != 0) goto loc_8002A9E0;
    v1 = s0 + 0x1C;
loc_8002A9CC:
    v1 -= 4;
    v0 = lw(v1 + 0x74);
    a0--;
    if (v0 == 0) goto loc_8002A9CC;
loc_8002A9E0:
    if (a0 == a2) goto loc_8002AA14;
    v0 = 8;                                             // Result = 00000008
    if (a0 != 0) goto loc_8002AA10;
    v1 = lw(s0 + 0x6C);
    if (v1 == v0) goto loc_8002AA10;
    v0 = lw(s0 + 0x94);
    v0 = (v0 > 0);
    a0 = v0 << 3;
loc_8002AA10:
    sw(a0, s0 + 0x70);
loc_8002AA14:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EC0);                               // Load from: gbGamePaused (80077EC0)
    if (v0 != 0) goto loc_8002ACCC;
    a0 = lw(s0);
    P_PlayerMobjThink();
    a0 = s0;
    P_BuildMove();
    v1 = lw(s0 + 0x4);
    v0 = 1;                                             // Result = 00000001
    if (v1 != v0) goto loc_8002AA5C;
    a0 = s0;
    P_DeathThink();
    goto loc_8002ACCC;
loc_8002AA5C:
    v0 = lw(s0);
    v0 = lw(v0 + 0x64);
    v0 &= 0x80;
    {
        const bool bJump = (v0 == 0)
        v0 = 0xC800;                                    // Result = 0000C800
        if (bJump) goto loc_8002AA98;
    }
    a0 = lw(s0);
    sw(0, s0 + 0x10);
    sw(v0, s0 + 0x8);
    sw(0, s0 + 0xC);
    v0 = lw(a0 + 0x64);
    v1 = -0x81;                                         // Result = FFFFFF7F
    v0 &= v1;
    sw(v0, a0 + 0x64);
loc_8002AA98:
    v1 = lw(s0);
    v0 = lw(v1 + 0x78);
    {
        const bool bJump = (v0 == 0)
        v0--;
        if (bJump) goto loc_8002AAB8;
    }
    sw(v0, v1 + 0x78);
    goto loc_8002AAC0;
loc_8002AAB8:
    a0 = s0;
    P_MovePlayer();
loc_8002AAC0:
    a0 = s0;
    P_CalcHeight();
    v0 = lw(s0);
    v0 = lw(v0 + 0xC);
    v0 = lw(v0);
    v0 = lw(v0 + 0x14);
    if (v0 == 0) goto loc_8002AB08;
    a0 = s0;
    P_PlayerInSpecialSector();
    v1 = lw(s0 + 0x4);
    v0 = 1;                                             // Result = 00000001
    if (v1 == v0) goto loc_8002ACCC;
loc_8002AB08:
    v0 = lw(s1 + 0x4);
    v0 &= s2;
    if (v0 == 0) goto loc_8002AB40;
    v0 = lw(s0 + 0xBC);
    if (v0 != 0) goto loc_8002AB44;
    a0 = s0;
    P_UseLines();
    v0 = 1;                                             // Result = 00000001
    sw(v0, s0 + 0xBC);
    goto loc_8002AB44;
loc_8002AB40:
    sw(0, s0 + 0xBC);
loc_8002AB44:
    v0 = lw(s1);
    v0 &= s2;
    if (v0 == 0) goto loc_8002ABC8;
    a0 = lw(s0);
    a1 = 0x9F;                                          // Result = 0000009F
    P_SetMObjState();
    v0 = lw(s0 + 0xB8);
    v0++;
    sw(v0, s0 + 0xB8);
    v0 = (i32(v0) < 0x1F);
    if (v0 != 0) goto loc_8002ABCC;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    {
        const bool bJump = (v1 != v0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_8002ABCC;
    }
    v1 = lw(s0 + 0x6C);
    {
        const bool bJump = (v1 == v0)
        v0 = 6;                                         // Result = 00000006
        if (bJump) goto loc_8002ABB4;
    }
    if (v1 != v0) goto loc_8002ABCC;
loc_8002ABB4:
    v0 = 7;                                             // Result = 00000007
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v0, at - 0x78E8);                                // Store to: gStatusBar[0] (80098718)
    goto loc_8002ABCC;
loc_8002ABC8:
    sw(0, s0 + 0xB8);
loc_8002ABCC:
    a0 = s0;
    P_MovePsprites();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    v0 = (i32(v0) < i32(v1));
    if (v0 == 0) goto loc_8002ACCC;
    v0 = lw(s0 + 0x34);
    {
        const bool bJump = (v0 == 0)
        v0++;
        if (bJump) goto loc_8002AC08;
    }
    sw(v0, s0 + 0x34);
loc_8002AC08:
    v0 = lw(s0 + 0x30);
    {
        const bool bJump = (v0 == 0)
        v0--;
        if (bJump) goto loc_8002AC1C;
    }
    sw(v0, s0 + 0x30);
loc_8002AC1C:
    v0 = lw(s0 + 0x38);
    v1 = v0 - 1;
    if (v0 == 0) goto loc_8002AC7C;
    sw(v1, s0 + 0x38);
    if (v1 != 0) goto loc_8002AC50;
    a0 = lw(s0);
    v1 = 0x8FFF0000;                                    // Result = 8FFF0000
    v0 = lw(a0 + 0x64);
    v1 |= 0xFFFF;                                       // Result = 8FFFFFFF
    v0 &= v1;
    sw(v0, a0 + 0x64);
    goto loc_8002AC7C;
loc_8002AC50:
    v0 = (i32(v1) < 0x3D);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 & 7;
        if (bJump) goto loc_8002AC7C;
    }
    a0 = 0x70000000;                                    // Result = 70000000
    if (v0 != 0) goto loc_8002AC7C;
    v0 = lw(s0);
    v1 = lw(v0 + 0x64);
    v1 ^= a0;
    sw(v1, v0 + 0x64);
loc_8002AC7C:
    v0 = lw(s0 + 0x44);
    {
        const bool bJump = (v0 == 0)
        v0--;
        if (bJump) goto loc_8002AC90;
    }
    sw(v0, s0 + 0x44);
loc_8002AC90:
    v0 = lw(s0 + 0x3C);
    {
        const bool bJump = (v0 == 0)
        v0--;
        if (bJump) goto loc_8002ACA4;
    }
    sw(v0, s0 + 0x3C);
loc_8002ACA4:
    v0 = lw(s0 + 0xD8);
    {
        const bool bJump = (v0 == 0)
        v0--;
        if (bJump) goto loc_8002ACB8;
    }
    sw(v0, s0 + 0xD8);
loc_8002ACB8:
    v0 = lw(s0 + 0xDC);
    {
        const bool bJump = (v0 == 0)
        v0--;
        if (bJump) goto loc_8002ACCC;
    }
    sw(v0, s0 + 0xDC);
loc_8002ACCC:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void R_BSP() noexcept {
loc_8002ACE8:
    sp -= 0x18;
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 -= 0x70B8;                                       // Result = 800A8F48
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x6E4C;                                       // Result = gpDrawSubsectors[0] (800A91B4)
    a1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x10);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7F9C);                                // Store to: gppEndDrawSubsector (80078064)
    a2 = 0x100;                                         // Result = 00000100
    D_memset();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E48);                               // Load from: gNumBspNodes (800781B8)
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7E0C);                                 // Store to: gbIsSkyVisible (800781F4)
    a0--;
    R_RenderBSPNode();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void R_RenderBSPNode() noexcept {
loc_8002AD3C:
    sp -= 0x18;
    v1 = a0;
    v0 = v1 & 0x8000;
    sw(ra, sp + 0x14);
    sw(s0, sp + 0x10);
    if (v0 == 0) goto loc_8002AD84;
    v0 = -1;                                            // Result = FFFFFFFF
    a0 = 0xFFFF0000;                                    // Result = FFFF0000
    if (v1 != v0) goto loc_8002AD70;
    a0 = 0;                                             // Result = 00000000
    R_Subsector();
    goto loc_8002AE60;
loc_8002AD70:
    a0 |= 0x7FFF;                                       // Result = FFFF7FFF
    a0 &= v1;
    R_Subsector();
    goto loc_8002AE60;
loc_8002AD84:
    v0 = v1 << 3;
    v0 -= v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EA4);                               // Load from: gpBspNodes (80077EA4)
    v0 <<= 3;
    s0 = v0 + v1;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    v1 = lw(s0 + 0x4);
    v0 -= v1;
    v1 = lh(s0 + 0xA);
    v0 = u32(i32(v0) >> 16);
    mult(v0, v1);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    v1 = lw(s0);
    v0 -= v1;
    v1 = lo;
    a0 = lh(s0 + 0xE);
    v0 = u32(i32(v0) >> 16);
    mult(a0, v0);
    v0 = lo;
    v1 = (i32(v1) < i32(v0));
    if (v1 == 0) goto loc_8002AE28;
    a0 = s0 + 0x10;
    R_CheckBBox();
    if (v0 == 0) goto loc_8002AE0C;
    a0 = lw(s0 + 0x30);
    R_RenderBSPNode();
loc_8002AE0C:
    a0 = s0 + 0x20;
    R_CheckBBox();
    if (v0 == 0) goto loc_8002AE60;
    a0 = lw(s0 + 0x34);
    goto loc_8002AE58;
loc_8002AE28:
    a0 = s0 + 0x20;
    R_CheckBBox();
    if (v0 == 0) goto loc_8002AE44;
    a0 = lw(s0 + 0x34);
    R_RenderBSPNode();
loc_8002AE44:
    a0 = s0 + 0x10;
    R_CheckBBox();
    if (v0 == 0) goto loc_8002AE60;
    a0 = lw(s0 + 0x30);
loc_8002AE58:
    R_RenderBSPNode();
loc_8002AE60:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void R_CheckBBox() noexcept {
loc_8002AE74:
    sp -= 0x50;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    a3 = a0;
    sw(ra, sp + 0x48);
    sw(s5, sp + 0x44);
    sw(s4, sp + 0x40);
    sw(s3, sp + 0x3C);
    sw(s2, sp + 0x38);
    sw(s1, sp + 0x34);
    sw(s0, sp + 0x30);
    v0 = lw(a3 + 0x8);
    v0 = (i32(v1) < i32(v0));
    if (v0 == 0) goto loc_8002AEBC;
    a1 = 0;                                             // Result = 00000000
    goto loc_8002AED4;
loc_8002AEBC:
    v0 = lw(a3 + 0xC);
    v0 = (i32(v0) < i32(v1));
    a1 = 2;                                             // Result = 00000002
    if (v0 != 0) goto loc_8002AED4;
    a1 = 1;                                             // Result = 00000001
loc_8002AED4:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    v0 = lw(a3);
    v0 = (i32(v0) < i32(a0));
    if (v0 == 0) goto loc_8002AEF8;
    v1 = 0;                                             // Result = 00000000
    goto loc_8002AF10;
loc_8002AEF8:
    v0 = lw(a3 + 0x4);
    v0 = (i32(a0) < i32(v0));
    v1 = 2;                                             // Result = 00000002
    if (v0 != 0) goto loc_8002AF10;
    v1 = 1;                                             // Result = 00000001
loc_8002AF10:
    v0 = v1 << 2;
    a2 = v0 + a1;
    v0 = 5;                                             // Result = 00000005
    a1 = a2 << 4;
    if (a2 == v0) goto loc_8002B1D8;
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7898;                                       // Result = 80067898
    at += a1;
    v0 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x789C;                                       // Result = 8006789C
    at += a1;
    v1 = lw(at);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x78A0;                                       // Result = 800678A0
    at += a1;
    a0 = lw(at);
    v0 <<= 2;
    v0 += a3;
    v1 <<= 2;
    v1 += a3;
    a0 <<= 2;
    a0 += a3;
    s4 = lw(v0);
    s2 = lw(v1);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x78A4;                                       // Result = 800678A4
    at += a1;
    v0 = lw(at);
    s5 = lw(a0);
    v0 <<= 2;
    v0 += a3;
    s3 = lw(v0);
    v0 = 4;                                             // Result = 00000004
    if (a2 == v0) goto loc_8002AFE8;
    v0 = (i32(a2) < 5);
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8002AFBC;
    }
    {
        const bool bJump = (a2 == v0)
        v0 = 0x20000;                                   // Result = 00020000
        if (bJump) goto loc_8002AFD8;
    }
    a0 = sp + 0x10;
    goto loc_8002B02C;
loc_8002AFBC:
    v0 = 6;                                             // Result = 00000006
    {
        const bool bJump = (a2 == v0)
        v0 = 9;                                         // Result = 00000009
        if (bJump) goto loc_8002AFFC;
    }
    v1 = 0xFFFE0000;                                    // Result = FFFE0000
    if (a2 == v0) goto loc_8002B010;
    a0 = sp + 0x10;
    goto loc_8002B02C;
loc_8002AFD8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    v1 -= s2;
    goto loc_8002B020;
loc_8002AFE8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    v1 = 0xFFFE0000;                                    // Result = FFFE0000
    v0 -= s4;
    goto loc_8002B020;
loc_8002AFFC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    v0 = 0x20000;                                       // Result = 00020000
    v1 -= s4;
    goto loc_8002B020;
loc_8002B010:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    v0 -= s2;
loc_8002B020:
    v0 = (i32(v0) < i32(v1));
    a0 = sp + 0x10;
    if (v0 == 0) goto loc_8002B1D8;
loc_8002B02C:
    s0 = sp + 0x18;
    a1 = s0;
    s1 = sp + 0x28;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    a2 = s1;
    sh(0, sp + 0x12);
    v1 = s4 - v1;
    v1 = u32(i32(v1) >> 16);
    v0 = s2 - v0;
    v0 = u32(i32(v0) >> 16);
    sh(v1, sp + 0x10);
    sh(v0, sp + 0x14);
    LIBGTE_RotTrans();
    a0 = sp + 0x10;
    a1 = s0;
    s4 = lw(sp + 0x18);
    s2 = lw(sp + 0x20);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    a2 = s1;
    sh(0, sp + 0x12);
    v1 = s5 - v1;
    v1 = u32(i32(v1) >> 16);
    v0 = s3 - v0;
    v0 = u32(i32(v0) >> 16);
    sh(v1, sp + 0x10);
    sh(v0, sp + 0x14);
    LIBGTE_RotTrans();
    v0 = -s2;
    v0 = (i32(s4) < i32(v0));
    s5 = lw(sp + 0x18);
    s3 = lw(sp + 0x20);
    {
        const bool bJump = (v0 == 0)
        v0 = -s3;
        if (bJump) goto loc_8002B0D4;
    }
    v0 = (i32(s5) < i32(v0));
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8002B2B0;
    }
loc_8002B0D4:
    v0 = (i32(s2) < i32(s4));
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(s3) < i32(s5));
        if (bJump) goto loc_8002B0E8;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8002B2B0;
    }
loc_8002B0E8:
    v0 = -s2;
    v0 = (i32(s4) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = -s3;
        if (bJump) goto loc_8002B154;
    }
    v0 = (i32(v0) < i32(s5));
    {
        const bool bJump = (v0 == 0)
        v0 = s4 + s2;
        if (bJump) goto loc_8002B154;
    }
    v1 = v0 << 16;
    v0 -= s5;
    v0 -= s3;
    div(v1, v0);
    if (v0 != 0) goto loc_8002B120;
    _break(0x1C00);
loc_8002B120:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B138;
    }
    if (v1 != at) goto loc_8002B138;
    tge(zero, zero, 0x5D);
loc_8002B138:
    v1 = lo;
    v0 = s3 - s2;
    mult(v1, v0);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    s2 += v0;
    s4 = -s2;
loc_8002B154:
    v0 = (i32(s4) < i32(s2));
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(s3) < i32(s5));
        if (bJump) goto loc_8002B1B8;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = s4 - s2;
        if (bJump) goto loc_8002B1B8;
    }
    v1 = v0 << 16;
    v0 -= s5;
    v0 += s3;
    div(v1, v0);
    if (v0 != 0) goto loc_8002B184;
    _break(0x1C00);
loc_8002B184:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B19C;
    }
    if (v1 != at) goto loc_8002B19C;
    tge(zero, zero, 0x5D);
loc_8002B19C:
    v1 = lo;
    v0 = s3 - s2;
    mult(v1, v0);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    s3 = s2 + v0;
    s5 = s3;
loc_8002B1B8:
    v0 = (i32(s2) < 2);
    if (i32(s2) >= 0) goto loc_8002B1C8;
    if (i32(s3) < 0) goto loc_8002B2AC;
loc_8002B1C8:
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(s3) < 2);
        if (bJump) goto loc_8002B1E0;
    }
    if (v0 == 0) goto loc_8002B1E0;
loc_8002B1D8:
    v0 = 1;                                             // Result = 00000001
    goto loc_8002B2B0;
loc_8002B1E0:
    if (i32(s2) > 0) goto loc_8002B1EC;
    s2 = 1;                                             // Result = 00000001
loc_8002B1EC:
    v1 = s4 << 7;
    if (i32(s3) > 0) goto loc_8002B1F8;
    s3 = 1;                                             // Result = 00000001
loc_8002B1F8:
    div(v1, s2);
    if (s2 != 0) goto loc_8002B208;
    _break(0x1C00);
loc_8002B208:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s2 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B220;
    }
    if (v1 != at) goto loc_8002B220;
    tge(zero, zero, 0x5D);
loc_8002B220:
    v1 = lo;
    v0 = s5 << 7;
    div(v0, s3);
    if (s3 != 0) goto loc_8002B238;
    _break(0x1C00);
loc_8002B238:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s3 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B250;
    }
    if (v0 != at) goto loc_8002B250;
    tge(zero, zero, 0x5D);
loc_8002B250:
    v0 = lo;
    v1 += 0x80;
    a1 = v0 + 0x80;
    if (i32(v1) >= 0) goto loc_8002B264;
    v1 = 0;                                             // Result = 00000000
loc_8002B264:
    v0 = (i32(a1) < 0x101);
    if (v0 != 0) goto loc_8002B274;
    a1 = 0x100;                                         // Result = 00000100
loc_8002B274:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x70B8;                                       // Result = 800A8F48
    a0 = v1 + v0;
    v0 = (i32(v1) < i32(a1));
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8002B2B0;
    }
loc_8002B28C:
    v0 = lbu(a0);
    a0++;
    if (v0 == 0) goto loc_8002B1D8;
    v1++;
    v0 = (i32(v1) < i32(a1));
    if (v0 != 0) goto loc_8002B28C;
loc_8002B2AC:
    v0 = 0;                                             // Result = 00000000
loc_8002B2B0:
    ra = lw(sp + 0x48);
    s5 = lw(sp + 0x44);
    s4 = lw(sp + 0x40);
    s3 = lw(sp + 0x3C);
    s2 = lw(sp + 0x38);
    s1 = lw(sp + 0x34);
    s0 = lw(sp + 0x30);
    sp += 0x50;
    return;
}

void R_Subsector() noexcept {
loc_8002B2D8:
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7DDC);                               // Load from: gNumSubsectors (80078224)
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x18);
    v0 = (i32(s0) < i32(a2));
    sw(s1, sp + 0x14);
    if (v0 != 0) goto loc_8002B30C;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1138;                                       // Result = STR_R_Subsector_Err[0] (80011138)
    a1 = s0;
    I_Error();
loc_8002B30C:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7F9C);                               // Load from: gppEndDrawSubsector (80078064)
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x6E4C;                                       // Result = gpDrawSubsectors[0] (800A91B4)
    v0 = a0 - v0;
    v0 = u32(i32(v0) >> 2);
    v0 = (i32(v0) < 0xC0);
    {
        const bool bJump = (v0 == 0)
        v0 = s0 << 4;
        if (bJump) goto loc_8002B3A0;
    }
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F40);                               // Load from: gpSubsectors (80077F40)
    v0 += v1;
    v1 = lw(v0);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0x7FF4);                                // Store to: gpCurSector (8007800C)
    sw(v0, a0);
    a0 = lh(v0 + 0x6);
    s0 = lh(v0 + 0x4);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F9C);                               // Load from: gppEndDrawSubsector (80078064)
    v1 = a0 << 2;
    v1 += a0;
    v1 <<= 3;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7DC8);                               // Load from: gpSegs (80078238)
    v0 += 4;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7F9C);                                // Store to: gppEndDrawSubsector (80078064)
    s1 = v1 + a0;
    if (s0 == 0) goto loc_8002B3A0;
loc_8002B38C:
    a0 = s1;
    R_AddLine();
    s0--;
    s1 += 0x28;
    if (s0 != 0) goto loc_8002B38C;
loc_8002B3A0:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void R_AddLine() noexcept {
loc_8002B3B8:
    sp -= 0x48;
    sw(s3, sp + 0x3C);
    s3 = a0;
    sw(ra, sp + 0x40);
    sw(s2, sp + 0x38);
    sw(s1, sp + 0x34);
    sw(s0, sp + 0x30);
    v0 = lhu(s3 + 0x20);
    s0 = lw(s3);
    v0 &= 0xFFFE;
    sh(v0, s3 + 0x20);
    v1 = lw(s0 + 0x18);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    a0 = sp + 0x10;
    if (v1 == v0) goto loc_8002B4BC;
    v0 = lw(s0);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    a1 = sp + 0x18;
    sh(0, sp + 0x12);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    sh(v0, sp + 0x10);
    v0 = lw(s0 + 0x4);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    a2 = sp + 0x28;
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    sh(v0, sp + 0x14);
    LIBGTE_RotTrans();
    v0 = lw(sp + 0x18);
    sw(v0, s0 + 0xC);
    v1 = lw(sp + 0x20);
    s2 = v0;
    s1 = v1;
    v0 = (i32(s1) < 4);
    sw(s1, s0 + 0x10);
    if (v0 != 0) goto loc_8002B4AC;
    v0 = 0x800000;                                      // Result = 00800000
    div(v0, s1);
    if (s1 != 0) goto loc_8002B474;
    _break(0x1C00);
loc_8002B474:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B48C;
    }
    if (v0 != at) goto loc_8002B48C;
    tge(zero, zero, 0x5D);
loc_8002B48C:
    v0 = lo;
    mult(s2, v0);
    sw(v0, s0 + 0x8);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v0 += 0x80;
    sw(v0, s0 + 0x14);
loc_8002B4AC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    sw(v0, s0 + 0x18);
    goto loc_8002B4C4;
loc_8002B4BC:
    s2 = lw(s0 + 0xC);
    s1 = lw(s0 + 0x10);
loc_8002B4C4:
    s0 = lw(s3 + 0x4);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    v1 = lw(s0 + 0x18);
    a0 = sp + 0x10;
    if (v1 == v0) goto loc_8002B5A0;
    v0 = lw(s0);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    a1 = sp + 0x18;
    sh(0, sp + 0x12);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    sh(v0, sp + 0x10);
    v0 = lw(s0 + 0x4);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    a2 = sp + 0x28;
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    sh(v0, sp + 0x14);
    LIBGTE_RotTrans();
    v0 = lw(sp + 0x18);
    sw(v0, s0 + 0xC);
    v1 = lw(sp + 0x20);
    a1 = v0;
    a0 = v1;
    v0 = (i32(a0) < 4);
    sw(a0, s0 + 0x10);
    if (v0 != 0) goto loc_8002B590;
    v0 = 0x800000;                                      // Result = 00800000
    div(v0, a0);
    if (a0 != 0) goto loc_8002B558;
    _break(0x1C00);
loc_8002B558:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B570;
    }
    if (v0 != at) goto loc_8002B570;
    tge(zero, zero, 0x5D);
loc_8002B570:
    v0 = lo;
    mult(a1, v0);
    sw(v0, s0 + 0x8);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v0 += 0x80;
    sw(v0, s0 + 0x14);
loc_8002B590:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    sw(v0, s0 + 0x18);
    goto loc_8002B5A8;
loc_8002B5A0:
    a1 = lw(s0 + 0xC);
    a0 = lw(s0 + 0x10);
loc_8002B5A8:
    v0 = -s1;
    a2 = (i32(s2) < i32(v0));
    v0 = -a0;
    if (a2 == 0) goto loc_8002B5C4;
    v0 = (i32(a1) < i32(v0));
    if (v0 != 0) goto loc_8002B988;
loc_8002B5C4:
    v0 = (i32(s1) < i32(s2));
    mult(a1, s1);
    if (v0 == 0) goto loc_8002B5DC;
    v0 = (i32(a0) < i32(a1));
    if (v0 != 0) goto loc_8002B988;
loc_8002B5DC:
    v0 = lo;
    mult(s2, a0);
    v1 = lo;
    v0 -= v1;
    if (i32(v0) <= 0) goto loc_8002B988;
    v0 = -a0;
    if (a2 == 0) goto loc_8002B658;
    v0 = (i32(v0) < i32(a1));
    {
        const bool bJump = (v0 == 0)
        v0 = s2 + s1;
        if (bJump) goto loc_8002B658;
    }
    v1 = v0 << 16;
    v0 -= a1;
    v0 -= a0;
    div(v1, v0);
    if (v0 != 0) goto loc_8002B624;
    _break(0x1C00);
loc_8002B624:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B63C;
    }
    if (v1 != at) goto loc_8002B63C;
    tge(zero, zero, 0x5D);
loc_8002B63C:
    v1 = lo;
    v0 = a0 - s1;
    mult(v1, v0);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    s1 += v0;
    s2 = -s1;
loc_8002B658:
    v0 = (i32(s2) < i32(s1));
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(a0) < i32(a1));
        if (bJump) goto loc_8002B6BC;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = s2 - s1;
        if (bJump) goto loc_8002B6BC;
    }
    v1 = v0 << 16;
    v0 -= a1;
    v0 += a0;
    div(v1, v0);
    if (v0 != 0) goto loc_8002B688;
    _break(0x1C00);
loc_8002B688:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B6A0;
    }
    if (v1 != at) goto loc_8002B6A0;
    tge(zero, zero, 0x5D);
loc_8002B6A0:
    v1 = lo;
    v0 = a0 - s1;
    mult(v1, v0);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    a0 = s1 + v0;
    a1 = a0;
loc_8002B6BC:
    v0 = (i32(s1) < 3);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(a0) < 3);
        if (bJump) goto loc_8002B6D0;
    }
    if (v0 != 0) goto loc_8002B988;
loc_8002B6D0:
    v0 = (i32(s1) < 2);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(a0) < 3);
        if (bJump) goto loc_8002B74C;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a0) < 2);
        if (bJump) goto loc_8002B750;
    }
    v0 = 2;                                             // Result = 00000002
    v0 -= s1;
    v0 <<= 16;
    v1 = a0 - s1;
    div(v0, v1);
    if (v1 != 0) goto loc_8002B704;
    _break(0x1C00);
loc_8002B704:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B71C;
    }
    if (v0 != at) goto loc_8002B71C;
    tge(zero, zero, 0x5D);
loc_8002B71C:
    v0 = lo;
    v1 = a1 - s2;
    mult(v0, v1);
    s1 = 2;                                             // Result = 00000002
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    s2 += v0;
    goto loc_8002B7B4;
loc_8002B73C:
    t0 = a0;
    goto loc_8002B898;
loc_8002B744:
    v1 = a0;
    goto loc_8002B8D4;
loc_8002B74C:
    v0 = (i32(a0) < 2);
loc_8002B750:
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(s1) < 3);
        if (bJump) goto loc_8002B7B4;
    }
    v1 = s2 << 7;
    if (v0 != 0) goto loc_8002B7B8;
    v0 = 2;                                             // Result = 00000002
    v0 -= a0;
    v0 <<= 16;
    v1 = s1 - a0;
    div(v0, v1);
    if (v1 != 0) goto loc_8002B780;
    _break(0x1C00);
loc_8002B780:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B798;
    }
    if (v0 != at) goto loc_8002B798;
    tge(zero, zero, 0x5D);
loc_8002B798:
    v0 = lo;
    v1 = s2 - a1;
    mult(v0, v1);
    a0 = 2;                                             // Result = 00000002
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    a1 += v0;
loc_8002B7B4:
    v1 = s2 << 7;
loc_8002B7B8:
    div(v1, s1);
    if (s1 != 0) goto loc_8002B7C8;
    _break(0x1C00);
loc_8002B7C8:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B7E0;
    }
    if (v1 != at) goto loc_8002B7E0;
    tge(zero, zero, 0x5D);
loc_8002B7E0:
    v1 = lo;
    v0 = a1 << 7;
    div(v0, a0);
    if (a0 != 0) goto loc_8002B7F8;
    _break(0x1C00);
loc_8002B7F8:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002B810;
    }
    if (v0 != at) goto loc_8002B810;
    tge(zero, zero, 0x5D);
loc_8002B810:
    v0 = lo;
    a2 = v1 + 0x80;
    a3 = v0 + 0x80;
    if (a2 == a3) goto loc_8002B988;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FF4);                               // Load from: gpCurSector (8007800C)
    v1 = lw(v0 + 0xC);
    v0 = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != v0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8002B848;
    }
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7E0C);                                // Store to: gbIsSkyVisible (800781F4)
loc_8002B848:
    v0 = (i32(a3) < 0x101);
    if (i32(a2) >= 0) goto loc_8002B854;
    a2 = 0;                                             // Result = 00000000
loc_8002B854:
    t0 = 0x100;                                         // Result = 00000100
    if (v0 != 0) goto loc_8002B860;
    a3 = 0x100;                                         // Result = 00000100
loc_8002B860:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x70B8;                                       // Result = 800A8F48
    a1 = a2 + v0;
    v0 = (i32(a2) < i32(a3));
    a0 = a2;
    if (v0 == 0) goto loc_8002B898;
loc_8002B878:
    v0 = lbu(a1);
    a1++;
    if (v0 == 0) goto loc_8002B73C;
    a0++;
    v0 = (i32(a0) < i32(a3));
    if (v0 != 0) goto loc_8002B878;
loc_8002B898:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x70B9;                                       // Result = 800A8F47
    a1 = a3 + v0;
    a0 = a3 - 1;
    v0 = (i32(a0) < i32(a2));
    v1 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_8002B8D4;
loc_8002B8B4:
    v0 = lbu(a1);
    a1--;
    if (v0 == 0) goto loc_8002B744;
    a0--;
    v0 = (i32(a0) < i32(a2));
    if (v0 == 0) goto loc_8002B8B4;
loc_8002B8D4:
    v0 = (i32(v1) < i32(t0));
    {
        const bool bJump = (v0 != 0)
        v0 = t0 - 1;                                    // Result = 000000FF
        if (bJump) goto loc_8002B8F8;
    }
    sh(v0, s3 + 0x22);
    v0 = lhu(s3 + 0x20);
    v1++;
    sh(v1, s3 + 0x24);
    v0 |= 1;
    sh(v0, s3 + 0x20);
loc_8002B8F8:
    v0 = lw(s3 + 0x14);
    v0 = lw(v0 + 0x10);
    v0 &= 0x200;
    if (v0 != 0) goto loc_8002B988;
    a0 = lw(s3 + 0x1C);
    if (a0 == 0) goto loc_8002B95C;
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7FF4);                               // Load from: gpCurSector (8007800C)
    v1 = lw(a0 + 0x4);
    v0 = lw(a1);
    v0 = (i32(v0) < i32(v1));
    if (v0 == 0) goto loc_8002B95C;
    v0 = lw(a0);
    v1 = lw(a1 + 0x4);
    v0 = (i32(v0) < i32(v1));
    if (v0 != 0) goto loc_8002B988;
loc_8002B95C:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x70B8;                                       // Result = 800A8F48
    a1 = a2 + v0;
    v0 = (i32(a2) < i32(a3));
    v1 = 1;                                             // Result = 00000001
    if (v0 == 0) goto loc_8002B988;
loc_8002B974:
    sb(v1, a1);
    a2++;
    v0 = (i32(a2) < i32(a3));
    a1++;
    if (v0 != 0) goto loc_8002B974;
loc_8002B988:
    ra = lw(sp + 0x40);
    s3 = lw(sp + 0x3C);
    s2 = lw(sp + 0x38);
    s1 = lw(sp + 0x34);
    s0 = lw(sp + 0x30);
    sp += 0x48;
    return;
}

void R_InitData() noexcept {
loc_8002B9A8:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    R_InitPalette();
    R_InitTextures();
    R_InitFlats();
    R_InitSprites();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void R_InitTextures() noexcept {
loc_8002B9E0:
    sp -= 0x20;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7B6C;                                       // Result = STR_LumpName_T_START[0] (80077B6C)
    sw(ra, sp + 0x18);
    W_GetNumForName();
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7B74;                                       // Result = STR_LumpName_T_END[0] (80077B74)
    v0++;
    sw(v0, gp + 0xD00);                                 // Store to: gFirstTexLumpNum (800782E0)
    W_GetNumForName();
    a2 = 1;                                             // Result = 00000001
    v0--;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v1 = lw(gp + 0xD00);                                // Load from: gFirstTexLumpNum (800782E0)
    a3 = 0;                                             // Result = 00000000
    sw(v0, gp + 0xBBC);                                 // Store to: gLastTexLumpNum (8007819C)
    v0 -= v1;
    v0++;
    v1 = v0 << 5;
    a1 = v0 << 2;
    sw(v0, gp + 0xBF4);                                 // Store to: gNumTexLumps (800781D4)
    a1 += v1;
    Z_Malloc2();
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x115C;                                       // Result = STR_LumpName_TEXTURE1[0] (8001115C)
    a1 = 0x20;                                          // Result = 00000020
    v1 = lw(gp + 0xBF4);                                // Load from: gNumTexLumps (800781D4)
    sw(v0, gp + 0xB48);                                 // Store to: gpTextures (80078128)
    v1 <<= 5;
    v1 += v0;
    sw(v1, gp + 0x98C);                                 // Store to: gpTextureTranslation (80077F6C)
    a2 = 1;                                             // Result = 00000001
    W_CacheLumpName();
    a1 = v0;
    a2 = lw(gp + 0xD00);                                // Load from: gFirstTexLumpNum (800782E0)
    v1 = lw(gp + 0xBBC);                                // Load from: gLastTexLumpNum (8007819C)
    a0 = lw(gp + 0xB48);                                // Load from: gpTextures (80078128)
    v0 = (i32(v1) < i32(a2));
    t1 = v1;
    if (v0 != 0) goto loc_8002BAF4;
    t0 = a1 + 6;
    a0 += 0x10;
loc_8002BA94:
    v0 = lhu(t0 - 0x2);
    sh(v0, a0 - 0xC);
    v0 = lhu(t0);
    a3 = lh(a0 - 0xC);
    sh(0, a0 - 0x6);
    v1 = a3 + 0xF;
    sh(v0, a0 - 0xA);
    if (i32(v1) >= 0) goto loc_8002BABC;
    v1 = a3 + 0x1E;
loc_8002BABC:
    a3 = lh(a0 - 0xA);
    v0 = u32(i32(v1) >> 4);
    sh(v0, a0 - 0x4);
    v0 = a3 + 0xF;
    sh(a2, a0);
    if (i32(v0) >= 0) goto loc_8002BAD8;
    v0 = a3 + 0x1E;
loc_8002BAD8:
    a2++;
    v0 = u32(i32(v0) >> 4);
    sh(v0, a0 - 0x2);
    a0 += 0x20;
    v0 = (i32(t1) < i32(a2));
    t0 += 8;
    if (v0 == 0) goto loc_8002BA94;
loc_8002BAF4:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    Z_Free2();
    a0 = lw(gp + 0xBF4);                                // Load from: gNumTexLumps (800781D4)
    a2 = 0;                                             // Result = 00000000
    if (i32(a0) <= 0) goto loc_8002BB30;
    v1 = lw(gp + 0x98C);                                // Load from: gpTextureTranslation (80077F6C)
loc_8002BB18:
    sw(a2, v1);
    a2++;
    v0 = (i32(a2) < i32(a0));
    v1 += 4;
    if (v0 != 0) goto loc_8002BB18;
loc_8002BB30:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a1 = 0x20;                                          // Result = 00000020
    Z_FreeTags();
    ra = lw(sp + 0x18);
    sp += 0x20;
    return;
}

void R_InitFlats() noexcept {
loc_8002BB50:
    sp -= 0x20;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7B7C;                                       // Result = STR_LumpName_F_START[0] (80077B7C)
    sw(ra, sp + 0x18);
    W_GetNumForName();
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7B84;                                       // Result = STR_LumpName_F_END[0] (80077B84)
    v0++;
    sw(v0, gp + 0xCD8);                                 // Store to: gFirstFlatLumpNum (800782B8)
    W_GetNumForName();
    v0--;
    a2 = 1;                                             // Result = 00000001
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v1 = lw(gp + 0xCD8);                                // Load from: gFirstFlatLumpNum (800782B8)
    a3 = 0;                                             // Result = 00000000
    sw(v0, gp + 0xB90);                                 // Store to: gLastFlatLumpNum (80078170)
    v0 -= v1;
    v0++;
    a1 = v0 << 5;
    sw(v0, gp + 0xBE0);                                 // Store to: gNumFlatLumps (800781C0)
    v0 <<= 2;
    a1 += v0;
    Z_Malloc2();
    a0 = lw(gp + 0xCD8);                                // Load from: gFirstFlatLumpNum (800782B8)
    v1 = lw(gp + 0xBE0);                                // Load from: gNumFlatLumps (800781C0)
    a1 = lw(gp + 0xB90);                                // Load from: gLastFlatLumpNum (80078170)
    sw(v0, gp + 0xB44);                                 // Store to: gpFlatTextures (80078124)
    v1 <<= 5;
    v1 += v0;
    sw(v1, gp + 0x980);                                 // Store to: gpFlatTranslation (80077F60)
    v1 = v0;
    v0 = (i32(a1) < i32(a0));
    if (v0 != 0) goto loc_8002BC18;
    a3 = 0x40;                                          // Result = 00000040
    a2 = 4;                                             // Result = 00000004
    v1 += 0x10;
loc_8002BBF0:
    sh(a0, v1);
    a0++;
    sh(a3, v1 - 0xC);
    sh(a3, v1 - 0xA);
    sh(0, v1 - 0x6);
    sh(a2, v1 - 0x4);
    sh(a2, v1 - 0x2);
    v0 = (i32(a1) < i32(a0));
    v1 += 0x20;
    if (v0 == 0) goto loc_8002BBF0;
loc_8002BC18:
    a1 = lw(gp + 0xBE0);                                // Load from: gNumFlatLumps (800781C0)
    a0 = 0;                                             // Result = 00000000
    if (i32(a1) <= 0) goto loc_8002BC44;
    v1 = lw(gp + 0x980);                                // Load from: gpFlatTranslation (80077F60)
loc_8002BC2C:
    sw(a0, v1);
    a0++;
    v0 = (i32(a0) < i32(a1));
    v1 += 4;
    if (v0 != 0) goto loc_8002BC2C;
loc_8002BC44:
    ra = lw(sp + 0x18);
    sp += 0x20;
    return;
}

void R_InitSprites() noexcept {
loc_8002BC54:
    sp -= 0x18;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7B8C;                                       // Result = STR_LumpName_S_START[0] (80077B8C)
    sw(ra, sp + 0x10);
    W_GetNumForName();
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7B94;                                       // Result = STR_LumpName_S_END[0] (80077B94)
    v0++;
    sw(v0, gp + 0xA34);                                 // Store to: gFirstSpriteLumpNum (80078014)
    W_GetNumForName();
    a2 = 1;                                             // Result = 00000001
    v0--;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v1 = lw(gp + 0xA34);                                // Load from: gFirstSpriteLumpNum (80078014)
    a3 = 0;                                             // Result = 00000000
    sw(v0, gp + 0x958);                                 // Store to: gLastSpriteLumpNum (80077F38)
    v0 -= v1;
    v0++;
    sw(v0, gp + 0x97C);                                 // Store to: gNumSpriteLumps (80077F5C)
    a1 = v0 << 5;
    Z_Malloc2();
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7B9C;                                       // Result = STR_LumpName_SPRITE1[0] (80077B9C)
    a1 = 0x20;                                          // Result = 00000020
    sw(v0, gp + 0x8E4);                                 // Store to: gpSprites (80077EC4)
    a2 = 1;                                             // Result = 00000001
    W_CacheLumpName();
    a1 = v0;
    t0 = lw(gp + 0xA34);                                // Load from: gFirstSpriteLumpNum (80078014)
    v1 = lw(gp + 0x958);                                // Load from: gLastSpriteLumpNum (80077F38)
    t1 = lw(gp + 0x8E4);                                // Load from: gpSprites (80077EC4)
    v0 = (i32(v1) < i32(t0));
    t2 = a1;
    if (v0 != 0) goto loc_8002BD74;
    t3 = v1;
    a3 = a1 + 6;
    a0 = t1 + 0x10;
loc_8002BCF4:
    v0 = lhu(t2);
    sh(v0, t1);
    v0 = lhu(a3 - 0x4);
    sh(v0, a0 - 0xE);
    v0 = lhu(a3 - 0x2);
    sh(v0, a0 - 0xC);
    v0 = lhu(a3);
    a2 = lh(a0 - 0xC);
    sh(0, a0 - 0x6);
    v1 = a2 + 0xF;
    sh(v0, a0 - 0xA);
    if (i32(v1) >= 0) goto loc_8002BD34;
    v1 = a2 + 0x1E;
loc_8002BD34:
    a2 = lh(a0 - 0xA);
    v0 = u32(i32(v1) >> 4);
    sh(v0, a0 - 0x4);
    v0 = a2 + 0xF;
    sh(t0, a0);
    if (i32(v0) >= 0) goto loc_8002BD50;
    v0 = a2 + 0x1E;
loc_8002BD50:
    t0++;
    v0 = u32(i32(v0) >> 4);
    sh(v0, a0 - 0x2);
    a0 += 0x20;
    t1 += 0x20;
    a3 += 8;
    v0 = (i32(t3) < i32(t0));
    t2 += 8;
    if (v0 == 0) goto loc_8002BCF4;
loc_8002BD74:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    Z_Free2();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a1 = 0x20;                                          // Result = 00000020
    Z_FreeTags();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void R_TextureNumForName() noexcept {
loc_8002BDA4:
    sp -= 0x10;
    a1 = sp;
    a2 = sp + 8;
    sw(0, sp);
    sw(0, sp + 0x4);
loc_8002BDB8:
    v0 = lbu(a0);
    v1 = v0;
    if (v0 == 0) goto loc_8002BDF0;
    v0 = v1 - 0x61;
    v0 = (v0 < 0x1A);
    a0++;
    if (v0 == 0) goto loc_8002BDDC;
    v1 -= 0x20;
loc_8002BDDC:
    sb(v1, a1);
    a1++;
    v0 = (i32(a1) < i32(a2));
    if (v0 != 0) goto loc_8002BDB8;
loc_8002BDF0:
    v0 = lw(gp + 0xD00);                                // Load from: gFirstTexLumpNum (800782E0)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7E3C);                               // Load from: gpLumpInfo (800781C4)
    a3 = lw(sp);
    v0 <<= 4;
    v0 += v1;
    v1 = lw(gp + 0xBF4);                                // Load from: gNumTexLumps (800781D4)
    a2 = lw(sp + 0x4);
    a0 = 0;                                             // Result = 00000000
    if (i32(v1) <= 0) goto loc_8002BE58;
    t0 = -0x81;                                         // Result = FFFFFF7F
    a1 = v1;
    v1 = v0 + 8;
loc_8002BE24:
    v0 = lw(v1 + 0x4);
    if (v0 != a2) goto loc_8002BE48;
    v0 = lw(v1);
    v0 &= t0;
    {
        const bool bJump = (v0 == a3)
        v0 = a0;
        if (bJump) goto loc_8002BE5C;
    }
loc_8002BE48:
    a0++;
    v0 = (i32(a0) < i32(a1));
    v1 += 0x10;
    if (v0 != 0) goto loc_8002BE24;
loc_8002BE58:
    v0 = -1;                                            // Result = FFFFFFFF
loc_8002BE5C:
    sp += 0x10;
    return;
}

void R_FlatNumForName() noexcept {
loc_8002BE68:
    sp -= 0x10;
    a1 = sp;
    a2 = sp + 8;
    sw(0, sp);
    sw(0, sp + 0x4);
loc_8002BE7C:
    v0 = lbu(a0);
    v1 = v0;
    if (v0 == 0) goto loc_8002BEB4;
    v0 = v1 - 0x61;
    v0 = (v0 < 0x1A);
    a0++;
    if (v0 == 0) goto loc_8002BEA0;
    v1 -= 0x20;
loc_8002BEA0:
    sb(v1, a1);
    a1++;
    v0 = (i32(a1) < i32(a2));
    if (v0 != 0) goto loc_8002BE7C;
loc_8002BEB4:
    v0 = lw(gp + 0xCD8);                                // Load from: gFirstFlatLumpNum (800782B8)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7E3C);                               // Load from: gpLumpInfo (800781C4)
    a3 = lw(sp);
    v0 <<= 4;
    v0 += v1;
    v1 = lw(gp + 0xBE0);                                // Load from: gNumFlatLumps (800781C0)
    a2 = lw(sp + 0x4);
    a0 = 0;                                             // Result = 00000000
    if (i32(v1) <= 0) goto loc_8002BF1C;
    t0 = -0x81;                                         // Result = FFFFFF7F
    a1 = v1;
    v1 = v0 + 8;
loc_8002BEE8:
    v0 = lw(v1 + 0x4);
    if (v0 != a2) goto loc_8002BF0C;
    v0 = lw(v1);
    v0 &= t0;
    {
        const bool bJump = (v0 == a3)
        v0 = a0;
        if (bJump) goto loc_8002BF20;
    }
loc_8002BF0C:
    a0++;
    v0 = (i32(a0) < i32(a1));
    v1 += 0x10;
    if (v0 != 0) goto loc_8002BEE8;
loc_8002BF1C:
    v0 = 0;                                             // Result = 00000000
loc_8002BF20:
    sp += 0x10;
    return;
}

void R_InitPalette() noexcept {
loc_8002BF2C:
    sp -= 0x28;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7BA4;                                       // Result = STR_LumpName_LIGHTS[0] (80077BA4)
    a1 = 1;                                             // Result = 00000001
    a2 = 1;                                             // Result = 00000001
    sw(ra, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    W_CacheLumpName();
    v1 = 0xFF;                                          // Result = 000000FF
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7F98);                                // Store to: gpLightsLump (80078068)
    sb(v1, v0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F98);                               // Load from: gpLightsLump (80078068)
    sb(v1, v0 + 0x1);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F98);                               // Load from: gpLightsLump (80078068)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7BAC;                                       // Result = STR_LumpName_PLAYPAL[0] (80077BAC)
    sb(v1, v0 + 0x2);
    W_GetNumForName();
    s0 = v0;
    a0 = s0;
    a1 = 0x20;                                          // Result = 00000020
    a2 = 1;                                             // Result = 00000001
    W_CacheLumpNum();
    a0 = s0;
    s1 = v0;
    W_LumpLength();
    v0 >>= 9;
    v1 = 0x14;                                          // Result = 00000014
    s0 = 0;                                             // Result = 00000000
    if (v0 == v1) goto loc_8002BFCC;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1168;                                       // Result = STR_R_InitPalette_PalFoulup_Err[0] (80011168)
    I_Error();
loc_8002BFCC:
    s2 = 0x800B0000;                                    // Result = 800B0000
    s2 -= 0x6F7C;                                       // Result = gPaletteClutId_Main (800A9084)
    v0 = 0x100;                                         // Result = 00000100
    sh(v0, sp + 0x14);
    v0 = 1;                                             // Result = 00000001
    sh(v0, sp + 0x16);
loc_8002BFE4:
    v0 = s0;
    if (i32(s0) >= 0) goto loc_8002BFF0;
    v0 = s0 + 0xF;
loc_8002BFF0:
    a0 = sp + 0x10;
    a1 = s1;
    v0 = u32(i32(v0) >> 4);
    v1 = v0 << 8;
    v0 <<= 4;
    v0 = s0 - v0;
    v0 += 0xF0;
    sh(v1, sp + 0x10);
    sh(v0, sp + 0x12);
    LIBGPU_LoadImage();
    s1 += 0x200;
    a0 = lh(sp + 0x10);
    a1 = lh(sp + 0x12);
    s0++;
    LIBGPU_GetClut();
    sh(v0, s2);
    v0 = (i32(s0) < 0x14);
    s2 += 2;
    if (v0 != 0) goto loc_8002BFE4;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lhu(v0 - 0x6F7C);                              // Load from: gPaletteClutId_Main (800A9084)
    at = 0x80070000;                                    // Result = 80070000
    sh(v0, at + 0x7F7C);                                // Store to: g3dViewPaletteClutId (80077F7C)
    a1 = 0x20;                                          // Result = 00000020
    Z_FreeTags();
    ra = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x28;
    return;
}

void R_DrawSky() noexcept {
loc_8002C07C:
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s0, sp + 0x20);
    v1 = lw(a1 + 0x1C);
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 != v0) goto loc_8002C120;
    v1 = lbu(a1 + 0x8);
    v0 = lhu(a1 + 0xA);
    v1 >>= 1;
    v0 &= 0xF;
    v0 <<= 6;
    v1 += v0;
    sh(v1, sp + 0x18);
    v1 = lhu(a1 + 0xA);
    a0 = lbu(a1 + 0x9);
    v0 = 0x20;                                          // Result = 00000020
    sh(v0, sp + 0x1C);
    v0 = 0x80;                                          // Result = 00000080
    sh(v0, sp + 0x1E);
    v1 &= 0x10;
    v1 <<= 4;
    a0 += v1;
    sh(a0, sp + 0x1A);
    v0 = lh(a1 + 0x10);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7DC4);                               // Load from: gpLumpCache (8007823C)
    v0 <<= 2;
    v0 += v1;
    a1 = lw(v0);
    a0 = sp + 0x18;
    a1 += 8;
    LIBGPU_LoadImage();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    sw(v0, v1 + 0x1C);
loc_8002C120:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    v0 = lbu(v1 + 0x8);
    a0 = s0;                                            // Result = 1F800200
    sh(v0, sp + 0x18);
    v0 = lbu(v1 + 0x9);
    a1 = 0;                                             // Result = 00000000
    sh(v0, sp + 0x1A);
    a2 = lbu(v1 + 0x4);
    v0 = 0x80;                                          // Result = 00000080
    sh(v0, sp + 0x1E);
    v0 = sp + 0x18;
    sh(a2, sp + 0x1C);
    a3 = lhu(v1 + 0xA);
    a2 = 0;                                             // Result = 00000000
    sw(v0, sp + 0x10);
    LIBGPU_SetDrawMode();
    s0 += 4;                                            // Result = 1F800204
    t3 = 0xFF0000;                                      // Result = 00FF0000
    t3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t8 = t7 & t3;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_8002C1A8:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8002C210;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_8002C2D4;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(t7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t8;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8002C210:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8002C2C4;
    if (v1 == a0) goto loc_8002C1A8;
loc_8002C234:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_8002C1A8;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t3;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_8002C2A0;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8002C284:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_8002C284;
loc_8002C2A0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002C1A8;
    goto loc_8002C234;
loc_8002C2C4:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_8002C2D4:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_8002C334;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8002C31C:
    v0 = lw(s0);
    s0 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_8002C31C;
loc_8002C334:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_8002C3E8;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8002C360:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8002C3E8;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8002C3CC;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8002C3B0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8002C3B0;
loc_8002C3CC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8002C360;
loc_8002C3E8:
    t0 = 4;                                             // Result = 00000004
    t1 = 0x1F800000;                                    // Result = 1F800000
    t1 += 0x204;                                        // Result = 1F800204
    t5 = 0x10;                                          // Result = 00000010
    t6 = 0x14;                                          // Result = 00000014
    t2 = 0xFF0000;                                      // Result = 00FF0000
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    s0 = 0x80080000;                                    // Result = 80080000
    s0 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t8 = s0 & t2;                                       // Result = 00086550
    t7 = 0x4000000;                                     // Result = 04000000
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    v0 = 4;                                             // Result = 00000004
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x65;                                          // Result = 00000065
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = 0x100;                                         // Result = 00000100
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x208);                                  // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x20A);                                  // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = lhu(a0 + 0x6);
    t4 = 0x80000000;                                    // Result = 80000000
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D6C);                               // Load from: gViewAngle (80078294)
    v1 = lbu(a0 + 0x8);
    v0 >>= 22;
    v1 -= v0;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v1, at + 0x20C);                                 // Store to: 1F80020C
    v1 = lbu(a0 + 0x9);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lhu(v0 - 0x7D34);                              // Load from: gPaletteClutId_CurMapSky (800782CC)
    t3 = -1;                                            // Result = FFFFFFFF
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20E);                                 // Store to: 1F80020E
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v1, at + 0x20D);                                 // Store to: 1F80020D
loc_8002C4A4:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t5 + a0;
        if (bJump) goto loc_8002C50C;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t6 + a0;
        if (bJump) goto loc_8002C5D0;
    }
    v0 = lw(a3);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t8;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8002C50C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t5 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8002C5C0;
    if (v1 == a0) goto loc_8002C4A4;
loc_8002C530:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t7;
    if (v0 == 0) goto loc_8002C4A4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t3) goto loc_8002C59C;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8002C580:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8002C580;
loc_8002C59C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002C4A4;
    goto loc_8002C530;
loc_8002C5C0:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t6;
loc_8002C5D0:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;                                               // Result = 00000003
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_8002C630;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8002C618:
    v0 = lw(t1);
    t1 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_8002C618;
loc_8002C630:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_8002C6E4;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8002C65C:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8002C6E4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8002C6C8;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8002C6AC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8002C6AC;
loc_8002C6C8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8002C65C;
loc_8002C6E4:
    ra = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x28;
    return;
}

void R_DrawSubsector() noexcept {
loc_8002C6F8:
    sp -= 0x78;
    sw(s5, sp + 0x6C);
    s5 = a0;
    v0 = 0x1F800000;                                    // Result = 1F800000
    v0 += 0xA8;                                         // Result = 1F8000A8
    sw(s1, sp + 0x5C);
    s1 = v0 + 4;                                        // Result = 1F8000AC
    sw(v0, sp + 0x28);
    v0 += 0xAC;                                         // Result = 1F800154
    sw(s2, sp + 0x60);
    s2 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x70);
    sw(s4, sp + 0x68);
    sw(s3, sp + 0x64);
    sw(s0, sp + 0x58);
    sw(v0, sp + 0x2C);
    v0 = lh(s5 + 0xA);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EF4);                               // Load from: gpLeafEdges (8007810C)
    s4 = lh(s5 + 0x8);
    v0 <<= 3;
    s3 = v0 + v1;
    if (i32(s4) <= 0) goto loc_8002C850;
loc_8002C754:
    v0 = lw(s3 + 0x4);
    s0 = lw(s3);
    sw(v0, s1 + 0x4);
    sw(s0, s1);
    v1 = lw(s0 + 0x18);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    a0 = sp + 0x10;
    if (v1 == v0) goto loc_8002C83C;
    v0 = lw(s0);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    a1 = sp + 0x18;
    sh(0, sp + 0x12);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    sh(v0, sp + 0x10);
    v0 = lw(s0 + 0x4);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    a2 = sp + 0x38;
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    sh(v0, sp + 0x14);
    LIBGTE_RotTrans();
    v0 = lw(sp + 0x18);
    sw(v0, s0 + 0xC);
    v1 = lw(sp + 0x20);
    v0 = (i32(v1) < 4);
    sw(v1, s0 + 0x10);
    if (v0 != 0) goto loc_8002C82C;
    v0 = 0x800000;                                      // Result = 00800000
    div(v0, v1);
    if (v1 != 0) goto loc_8002C7F0;
    _break(0x1C00);
loc_8002C7F0:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002C808;
    }
    if (v0 != at) goto loc_8002C808;
    tge(zero, zero, 0x5D);
loc_8002C808:
    v0 = lo;
    v1 = lw(s0 + 0xC);
    mult(v0, v1);
    sw(v0, s0 + 0x8);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v0 += 0x80;
    sw(v0, s0 + 0x14);
loc_8002C82C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    sw(v0, s0 + 0x18);
loc_8002C83C:
    s2++;
    s3 += 8;
    v0 = (i32(s2) < i32(s4));
    s1 += 8;
    if (v0 != 0) goto loc_8002C754;
loc_8002C850:
    v0 = lw(sp + 0x28);
    s2 = 0;                                             // Result = 00000000
    sw(s4, v0);
    v0 = lw(sp + 0x28);
    s3 = 0;                                             // Result = 00000000
    sw(0, gp + 0xC40);                                  // Store to: 80078220
    s0 = lw(v0);
    s1 = v0 + 4;
    if (i32(s0) <= 0) goto loc_8002C8D0;
    v1 = sp + 0x10;
loc_8002C87C:
    v0 = lw(s1);
    v0 = lw(v0 + 0x10);
    v0 = (i32(v0) < 4);
    a1 = sp + 0x28;
    if (v0 == 0) goto loc_8002C8C0;
    v0 = s3 << 2;                                       // Result = 00000000
    v0 += v1;
    if (s3 != 0) goto loc_8002C8A8;
    a1 = sp + 0x2C;
loc_8002C8A8:
    a0 = lw(v0 + 0x18);
    a1 = lw(a1);
    s3 ^= 1;                                            // Result = 00000001
    R_FrontZClip();
    v1 = s3 << 2;                                       // Result = 00000004
    goto loc_8002C8D4;
loc_8002C8C0:
    s2++;
    v0 = (i32(s2) < i32(s0));
    s1 += 8;
    if (v0 != 0) goto loc_8002C87C;
loc_8002C8D0:
    v1 = s3 << 2;                                       // Result = 00000000
loc_8002C8D4:
    v0 = sp + 0x10;
    s0 = v1 + v0;
    a1 = lw(s0 + 0x18);
    a0 = 0;                                             // Result = 00000000
    R_CheckEdgeVisible();
    if (i32(v0) < 0) goto loc_8002CA64;
    v1 = s3 << 2;
    if (i32(v0) <= 0) goto loc_8002C924;
    a1 = sp + 0x28;
    if (s3 != 0) goto loc_8002C904;
    a1 = sp + 0x2C;
loc_8002C904:
    a0 = lw(s0 + 0x18);
    a1 = lw(a1);
    R_LeftEdgeClip();
    v0 = (i32(v0) < 3);
    s3 ^= 1;                                            // Result = 00000001
    if (v0 != 0) goto loc_8002CA64;
    v1 = s3 << 2;                                       // Result = 00000004
loc_8002C924:
    v0 = sp + 0x10;
    s0 = v1 + v0;
    a1 = lw(s0 + 0x18);
    a0 = 1;                                             // Result = 00000001
    R_CheckEdgeVisible();
    if (i32(v0) < 0) goto loc_8002CA64;
    if (i32(v0) <= 0) goto loc_8002C970;
    a1 = sp + 0x28;
    if (s3 != 0) goto loc_8002C954;
    a1 = sp + 0x2C;
loc_8002C954:
    a0 = lw(s0 + 0x18);
    a1 = lw(a1);
    R_RightEdgeClip();
    v0 = (i32(v0) < 3);
    s3 ^= 1;
    if (v0 != 0) goto loc_8002CA64;
loc_8002C970:
    v0 = s3 << 2;
    v0 += sp;
    v1 = lw(v0 + 0x28);
    s0 = lw(v1);
    s1 = v1 + 4;
    v0 = s0 << 3;
    v0 += s1;
    a0 = lw(v1 + 0x4);
    a1 = lw(v1 + 0x8);
    sw(a0, v0);
    sw(a1, v0 + 0x4);
    s2 = 0;                                             // Result = 00000000
    if (i32(s0) <= 0) goto loc_8002C9E0;
loc_8002C9A8:
    v0 = lw(s1 + 0x4);
    s2++;
    if (v0 == 0) goto loc_8002C9D4;
    v0 = lhu(v0 + 0x20);
    v0 &= 1;
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(s2) < i32(s0));
        if (bJump) goto loc_8002C9D8;
    }
    a0 = s1;
    R_DrawSubsectorSeg();
loc_8002C9D4:
    v0 = (i32(s2) < i32(s0));
loc_8002C9D8:
    s1 += 8;
    if (v0 != 0) goto loc_8002C9A8;
loc_8002C9E0:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FF4);                               // Load from: gpCurSector (8007800C)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EEC);                               // Load from: gViewZ (80077EEC)
    v0 = lw(v0);
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = s3 << 2;                                   // Result = 00000000
        if (bJump) goto loc_8002CA14;
    }
    v0 += sp;
    a0 = lw(v0 + 0x28);
    a1 = 0;                                             // Result = 00000000
    R_DrawSubsectorFlat();
loc_8002CA14:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FF4);                               // Load from: gpCurSector (8007800C)
    v1 = lw(a0 + 0xC);
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 == v0) goto loc_8002CA5C;
    v1 = lw(a0 + 0x4);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EEC);                               // Load from: gViewZ (80077EEC)
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = s3 << 2;                                   // Result = 00000000
        if (bJump) goto loc_8002CA5C;
    }
    v0 += sp;
    a0 = lw(v0 + 0x28);
    a1 = 1;                                             // Result = 00000001
    R_DrawSubsectorFlat();
loc_8002CA5C:
    a0 = s5;
    R_DrawSubsectorSprites();
loc_8002CA64:
    ra = lw(sp + 0x70);
    s5 = lw(sp + 0x6C);
    s4 = lw(sp + 0x68);
    s3 = lw(sp + 0x64);
    s2 = lw(sp + 0x60);
    s1 = lw(sp + 0x5C);
    s0 = lw(sp + 0x58);
    sp += 0x78;
    return;
}

void R_FrontZClip() noexcept {
loc_8002CA8C:
    sp -= 0x50;
    sw(s3, sp + 0x34);
    s3 = a0 + 4;
    sw(s1, sp + 0x2C);
    sw(a1, sp + 0x18);
    s1 = a1 + 4;
    sw(s7, sp + 0x44);
    s7 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x4C);
    sw(fp, sp + 0x48);
    sw(s6, sp + 0x40);
    sw(s5, sp + 0x3C);
    sw(s4, sp + 0x38);
    sw(s2, sp + 0x30);
    sw(s0, sp + 0x28);
    sw(a0, sp + 0x10);
    fp = lw(a0);
    s2 = 0;                                             // Result = 00000000
    if (i32(fp) <= 0) goto loc_8002CD28;
loc_8002CADC:
    v0 = fp - 1;
    s4 = s3 + 8;
    if (s7 != v0) goto loc_8002CAF4;
    a2 = lw(sp + 0x10);
    s4 = a2 + 4;
loc_8002CAF4:
    a2 = 4;                                             // Result = 00000004
    v0 = lw(s3);
    v1 = lw(s4);
    v0 = lw(v0 + 0x10);
    v1 = lw(v1 + 0x10);
    s5 = a2 - v0;
    s6 = a2 - v1;
    if (s5 != 0) goto loc_8002CB28;
    v0 = lw(s3);
    v1 = lw(s3 + 0x4);
    sw(v0, s1);
    sw(v1, s1 + 0x4);
    goto loc_8002CCF8;
loc_8002CB28:
    if (i32(s5) >= 0) goto loc_8002CB60;
    v0 = lw(s3);
    v1 = lw(s3 + 0x4);
    sw(v0, s1);
    sw(v1, s1 + 0x4);
    s2++;                                               // Result = 00000001
    v0 = (i32(s2) < 0x15);                              // Result = 00000001
    s1 += 8;
    if (v0 != 0) goto loc_8002CB60;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1188;                                       // Result = STR_FrontZClip_PointOverflow_Err[0] (80011188)
    I_Error();
loc_8002CB60:
    v0 = ~s6;
    if (s6 == 0) goto loc_8002CD18;
    v0 >>= 31;
    v1 = s5 >> 31;
    if (v0 != v1) goto loc_8002CD18;
    v1 = lw(gp + 0xC40);                                // Load from: 80078220
    a0 = v1 + 1;
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x7CEC;                                       // Result = 80097CEC
    sw(a0, gp + 0xC40);                                 // Store to: 80078220
    a0 = (i32(a0) < 0x20);
    s0 = v0 + v1;
    if (a0 != 0) goto loc_8002CBB8;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x11A4;                                       // Result = STR_FrontZClip_TooManyVerts_Err[0] (800111A4)
    I_Error();
loc_8002CBB8:
    a0 = s5 << 16;
    v0 = s5 - s6;
    div(a0, v0);
    if (v0 != 0) goto loc_8002CBD0;
    _break(0x1C00);
loc_8002CBD0:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002CBE8;
    }
    if (a0 != at) goto loc_8002CBE8;
    tge(zero, zero, 0x5D);
loc_8002CBE8:
    a0 = lo;
    v0 = lw(s4);
    v1 = lw(s3);
    v0 = lw(v0 + 0xC);
    v1 = lw(v1 + 0xC);
    v0 -= v1;
    mult(a0, v0);
    a2 = 4;                                             // Result = 00000004
    sw(a2, s0 + 0x10);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v0 += v1;
    sw(v0, s0 + 0xC);
    v0 = lw(s4);
    v1 = lw(s3);
    v0 = lw(v0);
    v1 = lw(v1);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    mult(a0, v0);
    v0 = lo;
    v0 += v1;
    sw(v0, s0);
    v0 = lw(s4);
    v1 = lw(s3);
    v0 = lw(v0 + 0x4);
    a1 = lw(v1 + 0x4);
    v0 -= a1;
    v0 = u32(i32(v0) >> 16);
    mult(a0, v0);
    a0 = lo;
    v0 = lw(s0 + 0x10);
    v1 = 0x800000;                                      // Result = 00800000
    div(v1, v0);
    if (v0 != 0) goto loc_8002CC88;
    _break(0x1C00);
loc_8002CC88:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002CCA0;
    }
    if (v1 != at) goto loc_8002CCA0;
    tge(zero, zero, 0x5D);
loc_8002CCA0:
    v1 = lo;
    v0 = lw(s0 + 0xC);
    mult(v1, v0);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    a0 += a1;
    sw(a0, s0 + 0x4);
    sw(v1, s0 + 0x8);
    sw(v0, s0 + 0x18);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v0 += 0x80;
    sw(v0, s0 + 0x14);
    if (i32(s5) <= 0) goto loc_8002CCF0;
    if (i32(s6) >= 0) goto loc_8002CCF0;
    v0 = lw(s3 + 0x4);
    sw(v0, s1 + 0x4);
    goto loc_8002CCF4;
loc_8002CCF0:
    sw(0, s1 + 0x4);
loc_8002CCF4:
    sw(s0, s1);
loc_8002CCF8:
    s2++;                                               // Result = 00000001
    v0 = (i32(s2) < 0x15);                              // Result = 00000001
    s1 += 8;
    if (v0 != 0) goto loc_8002CD18;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1188;                                       // Result = STR_FrontZClip_PointOverflow_Err[0] (80011188)
    I_Error();
loc_8002CD18:
    s7++;
    v0 = (i32(s7) < i32(fp));
    s3 += 8;
    if (v0 != 0) goto loc_8002CADC;
loc_8002CD28:
    a2 = lw(sp + 0x18);
    sw(s2, a2);
    ra = lw(sp + 0x4C);
    fp = lw(sp + 0x48);
    s7 = lw(sp + 0x44);
    s6 = lw(sp + 0x40);
    s5 = lw(sp + 0x3C);
    s4 = lw(sp + 0x38);
    s3 = lw(sp + 0x34);
    s2 = lw(sp + 0x30);
    s1 = lw(sp + 0x2C);
    s0 = lw(sp + 0x28);
    sp += 0x50;
    return;
}

void R_CheckEdgeVisible() noexcept {
loc_8002CD68:
    t0 = a1 + 4;
    a3 = 0x1F800000;                                    // Result = 1F800000
    a1 = lw(a1);
    a2 = 0;                                             // Result = 00000000
    if (a0 != 0) goto loc_8002CDE0;
    v0 = (i32(a2) < i32(a1));
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8002CE38;
    t1 = 1;                                             // Result = 00000001
loc_8002CD90:
    v0 = lw(t0);
    v1 = lw(v0 + 0x10);
    v0 = lw(v0 + 0xC);
    v1 = -v1;
    v0 = (i32(v0) < i32(v1));
    if (v0 == 0) goto loc_8002CDBC;
    sw(t1, a3);
    a2--;
    goto loc_8002CDC4;
loc_8002CDBC:
    sw(0, a3);
    a2++;
loc_8002CDC4:
    a0++;
    t0 += 8;
    v0 = (i32(a0) < i32(a1));
    a3 += 4;
    if (v0 != 0) goto loc_8002CD90;
    goto loc_8002CE38;
loc_8002CDE0:
    v0 = (i32(a2) < i32(a1));
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8002CE38;
    t1 = 1;                                             // Result = 00000001
loc_8002CDF0:
    v0 = lw(t0);
    v1 = lw(v0 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 = (i32(v0) < i32(v1));
    if (v0 == 0) goto loc_8002CE1C;
    sw(t1, a3);
    a2--;
    goto loc_8002CE24;
loc_8002CE1C:
    sw(0, a3);
    a2++;
loc_8002CE24:
    a0++;
    t0 += 8;
    v0 = (i32(a0) < i32(a1));
    a3 += 4;
    if (v0 != 0) goto loc_8002CDF0;
loc_8002CE38:
    v0 = 0x1F800000;                                    // Result = 1F800000
    v0 = lw(v0);                                        // Load from: 1F800000
    sw(v0, a3);
    if (a2 != a1) goto loc_8002CE50;
    v0 = 0;                                             // Result = 00000000
    goto loc_8002CE60;
loc_8002CE50:
    v1 = -a1;
    v0 = -1;                                            // Result = FFFFFFFF
    if (a2 == v1) goto loc_8002CE60;
    v0 = 1;                                             // Result = 00000001
loc_8002CE60:
    return;
}

void R_LeftEdgeClip() noexcept {
loc_8002CE68:
    sp -= 0x48;
    sw(s3, sp + 0x2C);
    sw(a1, sp + 0x10);
    s3 = a1 + 4;
    sw(s6, sp + 0x38);
    s6 = 0;                                             // Result = 00000000
    sw(s4, sp + 0x30);
    s4 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x44);
    sw(fp, sp + 0x40);
    sw(s7, sp + 0x3C);
    sw(s5, sp + 0x34);
    sw(s2, sp + 0x28);
    sw(s1, sp + 0x24);
    sw(s0, sp + 0x20);
    s7 = lw(a0);
    fp = a0 + 4;
    if (i32(s7) <= 0) goto loc_8002D0CC;
    s1 = fp;
    s5 = 0x1F800000;                                    // Result = 1F800000
loc_8002CEC0:
    v0 = lw(s5);
    if (v0 != 0) goto loc_8002CEEC;
    v0 = lw(s1);
    v1 = lw(s1 + 0x4);
    sw(v0, s3);
    sw(v1, s3 + 0x4);
    s3 += 8;
    s4++;                                               // Result = 00000001
    v0 = lw(s5);
loc_8002CEEC:
    v1 = lw(s5 + 0x4);
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8002CF08;
    }
    {
        const bool bJump = (v1 != v0)
        v0 = s7 - 1;
        if (bJump) goto loc_8002D0B8;
    }
    goto loc_8002CF10;
loc_8002CF08:
    v0 = s7 - 1;
    if (v1 != 0) goto loc_8002D0B8;
loc_8002CF10:
    v0 = (i32(s6) < i32(v0));
    s2 = fp;
    if (v0 == 0) goto loc_8002CF20;
    s2 = s1 + 8;
loc_8002CF20:
    v1 = lw(gp + 0xC40);                                // Load from: 80078220
    a0 = v1 + 1;
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x7CEC;                                       // Result = 80097CEC
    sw(a0, gp + 0xC40);                                 // Store to: 80078220
    a0 = (i32(a0) < 0x20);
    s0 = v0 + v1;
    if (a0 != 0) goto loc_8002CF60;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x11CC;                                       // Result = STR_LeftEdgeClip_TooManyVerts_Err[0] (800111CC)
    I_Error();
loc_8002CF60:
    v1 = lw(s1);
    a0 = lw(s2);
    v0 = lw(v1 + 0xC);
    a1 = lw(v1 + 0x10);
    v1 = lw(a0 + 0xC);
    a0 = lw(a0 + 0x10);
    v0 += a1;
    v1 += a0;
    a2 = v0 << 16;
    v0 -= v1;
    div(a2, v0);
    if (v0 != 0) goto loc_8002CF98;
    _break(0x1C00);
loc_8002CF98:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002CFB0;
    }
    if (a2 != at) goto loc_8002CFB0;
    tge(zero, zero, 0x5D);
loc_8002CFB0:
    a2 = lo;
    a0 -= a1;
    mult(a2, a0);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v0 += a1;
    sw(v0, s0 + 0x10);
    v0 = -v0;
    sw(v0, s0 + 0xC);
    v0 = lw(s2);
    v1 = lw(s1);
    v0 = lw(v0);
    v1 = lw(v1);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    mult(a2, v0);
    v0 = lo;
    v0 += v1;
    sw(v0, s0);
    v0 = lw(s2);
    v1 = lw(s1);
    v0 = lw(v0 + 0x4);
    a1 = lw(v1 + 0x4);
    v0 -= a1;
    v0 = u32(i32(v0) >> 16);
    mult(a2, v0);
    a0 = lo;
    v0 = lw(s0 + 0x10);
    v1 = 0x800000;                                      // Result = 00800000
    div(v1, v0);
    if (v0 != 0) goto loc_8002D03C;
    _break(0x1C00);
loc_8002D03C:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002D054;
    }
    if (v1 != at) goto loc_8002D054;
    tge(zero, zero, 0x5D);
loc_8002D054:
    v1 = lo;
    v0 = lw(s0 + 0xC);
    mult(v1, v0);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    a0 += a1;
    sw(a0, s0 + 0x4);
    sw(v1, s0 + 0x8);
    sw(v0, s0 + 0x18);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v0 += 0x80;
    sw(v0, s0 + 0x14);
    sw(s0, s3);
    v0 = lw(s1 + 0x4);
    s4++;                                               // Result = 00000001
    sw(v0, s3 + 0x4);
    v0 = (i32(s4) < 0x15);                              // Result = 00000001
    s3 += 8;
    if (v0 != 0) goto loc_8002D0B8;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x11F8;                                       // Result = STR_LeftEdgeClip_PointOverflow_Err[0] (800111F8)
    I_Error();
loc_8002D0B8:
    s1 += 8;
    s6++;
    v0 = (i32(s6) < i32(s7));
    s5 += 4;
    if (v0 != 0) goto loc_8002CEC0;
loc_8002D0CC:
    a3 = lw(sp + 0x10);
    v0 = s4;                                            // Result = 00000000
    sw(s4, a3);
    ra = lw(sp + 0x44);
    fp = lw(sp + 0x40);
    s7 = lw(sp + 0x3C);
    s6 = lw(sp + 0x38);
    s5 = lw(sp + 0x34);
    s4 = lw(sp + 0x30);
    s3 = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x48;
    return;
}

void R_RightEdgeClip() noexcept {
loc_8002D10C:
    sp -= 0x48;
    sw(s3, sp + 0x2C);
    sw(a1, sp + 0x10);
    s3 = a1 + 4;
    sw(s6, sp + 0x38);
    s6 = 0;                                             // Result = 00000000
    sw(s4, sp + 0x30);
    s4 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x44);
    sw(fp, sp + 0x40);
    sw(s7, sp + 0x3C);
    sw(s5, sp + 0x34);
    sw(s2, sp + 0x28);
    sw(s1, sp + 0x24);
    sw(s0, sp + 0x20);
    s7 = lw(a0);
    fp = a0 + 4;
    if (i32(s7) <= 0) goto loc_8002D36C;
    s1 = fp;
    s5 = 0x1F800000;                                    // Result = 1F800000
loc_8002D164:
    v0 = lw(s5);
    if (v0 != 0) goto loc_8002D190;
    v0 = lw(s1);
    v1 = lw(s1 + 0x4);
    sw(v0, s3);
    sw(v1, s3 + 0x4);
    s3 += 8;
    s4++;                                               // Result = 00000001
    v0 = lw(s5);
loc_8002D190:
    v1 = lw(s5 + 0x4);
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8002D1AC;
    }
    {
        const bool bJump = (v1 != v0)
        v0 = s7 - 1;
        if (bJump) goto loc_8002D358;
    }
    goto loc_8002D1B4;
loc_8002D1AC:
    v0 = s7 - 1;
    if (v1 != 0) goto loc_8002D358;
loc_8002D1B4:
    v0 = (i32(s6) < i32(v0));
    s2 = fp;
    if (v0 == 0) goto loc_8002D1C4;
    s2 = s1 + 8;
loc_8002D1C4:
    v1 = lw(gp + 0xC40);                                // Load from: 80078220
    a0 = v1 + 1;
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x7CEC;                                       // Result = 80097CEC
    sw(a0, gp + 0xC40);                                 // Store to: 80078220
    a0 = (i32(a0) < 0x20);
    s0 = v0 + v1;
    if (a0 != 0) goto loc_8002D204;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1218;                                       // Result = STR_RightEdgeClip_TooManyVerts_Err[0] (80011218)
    I_Error();
loc_8002D204:
    v1 = lw(s1);
    a0 = lw(s2);
    v0 = lw(v1 + 0xC);
    a1 = lw(v1 + 0x10);
    v1 = lw(a0 + 0xC);
    a0 = lw(a0 + 0x10);
    v0 -= a1;
    v1 -= a0;
    a2 = v0 << 16;
    v0 -= v1;
    div(a2, v0);
    if (v0 != 0) goto loc_8002D23C;
    _break(0x1C00);
loc_8002D23C:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002D254;
    }
    if (a2 != at) goto loc_8002D254;
    tge(zero, zero, 0x5D);
loc_8002D254:
    a2 = lo;
    a0 -= a1;
    mult(a2, a0);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v0 += a1;
    sw(v0, s0 + 0x10);
    sw(v0, s0 + 0xC);
    v0 = lw(s2);
    v1 = lw(s1);
    v0 = lw(v0);
    v1 = lw(v1);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    mult(a2, v0);
    v0 = lo;
    v0 += v1;
    sw(v0, s0);
    v0 = lw(s2);
    v1 = lw(s1);
    v0 = lw(v0 + 0x4);
    a1 = lw(v1 + 0x4);
    v0 -= a1;
    v0 = u32(i32(v0) >> 16);
    mult(a2, v0);
    a0 = lo;
    v0 = lw(s0 + 0x10);
    v1 = 0x800000;                                      // Result = 00800000
    div(v1, v0);
    if (v0 != 0) goto loc_8002D2DC;
    _break(0x1C00);
loc_8002D2DC:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002D2F4;
    }
    if (v1 != at) goto loc_8002D2F4;
    tge(zero, zero, 0x5D);
loc_8002D2F4:
    v1 = lo;
    v0 = lw(s0 + 0xC);
    v1++;
    mult(v1, v0);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    a0 += a1;
    sw(a0, s0 + 0x4);
    sw(v1, s0 + 0x8);
    sw(v0, s0 + 0x18);
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v0 += 0x80;
    sw(v0, s0 + 0x14);
    sw(s0, s3);
    v0 = lw(s1 + 0x4);
    s4++;                                               // Result = 00000001
    sw(v0, s3 + 0x4);
    v0 = (i32(s4) < 0x15);                              // Result = 00000001
    s3 += 8;
    if (v0 != 0) goto loc_8002D358;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1244;                                       // Result = STR_RightEdgeClip_PointOverflow_Err[0] (80011244)
    I_Error();
loc_8002D358:
    s1 += 8;
    s6++;
    v0 = (i32(s6) < i32(s7));
    s5 += 4;
    if (v0 != 0) goto loc_8002D164;
loc_8002D36C:
    a3 = lw(sp + 0x10);
    v0 = s4;                                            // Result = 00000000
    sw(s4, a3);
    ra = lw(sp + 0x44);
    fp = lw(sp + 0x40);
    s7 = lw(sp + 0x3C);
    s6 = lw(sp + 0x38);
    s5 = lw(sp + 0x34);
    s4 = lw(sp + 0x30);
    s3 = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x48;
    return;
}

void R_DrawSubsectorSeg() noexcept {
loc_8002D3AC:
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7FF4);                               // Load from: gpCurSector (8007800C)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7EEC);                               // Load from: gViewZ (80077EEC)
    sp -= 0x58;
    sw(ra, sp + 0x54);
    sw(fp, sp + 0x50);
    sw(s7, sp + 0x4C);
    sw(s6, sp + 0x48);
    sw(s5, sp + 0x44);
    sw(s4, sp + 0x40);
    sw(s3, sp + 0x3C);
    sw(s2, sp + 0x38);
    sw(s1, sp + 0x34);
    sw(s0, sp + 0x30);
    sw(a0, sp + 0x28);
    s0 = lw(a0 + 0x4);
    v0 = lw(a2 + 0x4);
    a0 = lw(s0 + 0x14);
    v0 = a1 - v0;
    s4 = u32(i32(v0) >> 16);
    s5 = s4;
    s3 = lw(a0 + 0x10);
    v0 = lw(a2);
    v1 = s3 | 0x100;
    v0 = a1 - v0;
    s7 = u32(i32(v0) >> 16);
    sw(v1, a0 + 0x10);
    s1 = lw(s0 + 0x1C);
    fp = s7;
    if (s1 == 0) goto loc_8002D5B8;
    v1 = lw(s1 + 0x4);
    v0 = lw(s1);
    a0 = a1 - v1;
    s6 = u32(i32(a0) >> 16);
    v0 = a1 - v0;
    a0 = lw(a2 + 0x4);
    v1 = (i32(v1) < i32(a0));
    s2 = u32(i32(v0) >> 16);
    if (v1 == 0) goto loc_8002D4F4;
    v1 = lw(s1 + 0xC);
    v0 = -1;                                            // Result = FFFFFFFF
    a0 = s6 - s5;
    if (v1 == v0) goto loc_8002D4F4;
    v0 = (i32(a0) < 0x100);
    {
        const bool bJump = (v0 != 0)
        v0 = s3 & 8;
        if (bJump) goto loc_8002D474;
    }
    a0 = 0xFF;                                          // Result = 000000FF
loc_8002D474:
    if (v0 == 0) goto loc_8002D490;
    v0 = lw(s0 + 0x10);
    t0 = lh(v0 + 0x6);
    t1 = t0 + a0;
    goto loc_8002D4A8;
loc_8002D490:
    v0 = lw(s0 + 0x10);
    v0 = lh(v0 + 0x6);
    t1 = v0 + 0xFF;
    t0 = t1 - a0;
loc_8002D4A8:
    a2 = s4;
    a3 = s6;
    v0 = lw(s0 + 0x10);
    a0 = lw(sp + 0x28);
    v0 = lw(v0 + 0x8);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F6C);                               // Load from: gpTextureTranslation (80077F6C)
    v0 <<= 2;
    v0 += v1;
    a1 = lw(v0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7ED8);                               // Load from: gpTextures (80078128)
    s5 = a3;
    sw(t0, sp + 0x10);
    sw(t1, sp + 0x14);
    sw(0, sp + 0x18);
    a1 <<= 5;
    a1 += v0;
    R_DrawWallColumns();
loc_8002D4F4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FF4);                               // Load from: gpCurSector (8007800C)
    v1 = lw(s1);
    v0 = lw(v0);
    v0 = (i32(v0) < i32(v1));
    a0 = s7 - s2;
    if (v0 == 0) goto loc_8002D5AC;
    v0 = (i32(a0) < 0x100);
    {
        const bool bJump = (v0 != 0)
        v0 = s3 & 0x10;
        if (bJump) goto loc_8002D524;
    }
    a0 = 0xFF;                                          // Result = 000000FF
loc_8002D524:
    if (v0 == 0) goto loc_8002D54C;
    v0 = lw(s0 + 0x10);
    v1 = lh(v0 + 0x6);
    v0 = s2 - s4;
    v0 += v1;
    v1 = -0x81;                                         // Result = FFFFFF7F
    t0 = v0 & v1;
    goto loc_8002D558;
loc_8002D54C:
    v0 = lw(s0 + 0x10);
    t0 = lh(v0 + 0x6);
loc_8002D558:
    t1 = t0 + a0;
    a2 = s2;
    a3 = s7;
    v0 = lw(s0 + 0x10);
    a0 = lw(sp + 0x28);
    v0 = lw(v0 + 0xC);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F6C);                               // Load from: gpTextureTranslation (80077F6C)
    v0 <<= 2;
    v0 += v1;
    a1 = lw(v0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7ED8);                               // Load from: gpTextures (80078128)
    fp = a2;
    sw(t0, sp + 0x10);
    sw(t1, sp + 0x14);
    sw(0, sp + 0x18);
    a1 <<= 5;
    a1 += v0;
    R_DrawWallColumns();
loc_8002D5AC:
    v0 = s3 & 0x600;
    if (v0 == 0) goto loc_8002D650;
loc_8002D5B8:
    a0 = fp - s5;
    v0 = (i32(a0) < 0x100);
    {
        const bool bJump = (v0 != 0)
        v0 = s3 & 0x10;
        if (bJump) goto loc_8002D5CC;
    }
    a0 = 0xFF;                                          // Result = 000000FF
loc_8002D5CC:
    if (v0 == 0) goto loc_8002D5F0;
    v0 = lw(s0 + 0x10);
    v0 = lh(v0 + 0x6);
    t1 = v0 + 0xFF;
    t0 = t1 - a0;
    goto loc_8002D604;
loc_8002D5F0:
    v0 = lw(s0 + 0x10);
    t0 = lh(v0 + 0x6);
    t1 = t0 + a0;
loc_8002D604:
    a2 = s5;
    v0 = lw(s0 + 0x10);
    a0 = lw(sp + 0x28);
    v0 = lw(v0 + 0x10);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F6C);                               // Load from: gpTextureTranslation (80077F6C)
    v0 <<= 2;
    v0 += v1;
    a1 = lw(v0);
    v0 = s3 & 0x400;
    sw(v0, sp + 0x18);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7ED8);                               // Load from: gpTextures (80078128)
    a3 = fp;
    sw(t0, sp + 0x10);
    sw(t1, sp + 0x14);
    a1 <<= 5;
    a1 += v0;
    R_DrawWallColumns();
loc_8002D650:
    ra = lw(sp + 0x54);
    fp = lw(sp + 0x50);
    s7 = lw(sp + 0x4C);
    s6 = lw(sp + 0x48);
    s5 = lw(sp + 0x44);
    s4 = lw(sp + 0x40);
    s3 = lw(sp + 0x3C);
    s2 = lw(sp + 0x38);
    s1 = lw(sp + 0x34);
    s0 = lw(sp + 0x30);
    sp += 0x58;
    return;
}

void R_DrawWallColumns() noexcept {
loc_8002D684:
    sp -= 0x88;
    sw(s4, sp + 0x70);
    s4 = a0;
    sw(s1, sp + 0x64);
    s1 = a1;
    sw(fp, sp + 0x80);
    fp = a3;
    sw(ra, sp + 0x84);
    sw(s7, sp + 0x7C);
    sw(s6, sp + 0x78);
    sw(s5, sp + 0x74);
    sw(s3, sp + 0x6C);
    sw(s2, sp + 0x68);
    sw(s0, sp + 0x60);
    sw(a2, sp + 0x58);
    v0 = lw(s4);
    v1 = lw(s4 + 0x8);
    s5 = lw(v0 + 0x14);
    v1 = lw(v1 + 0x14);
    s6 = lw(sp + 0xA0);
    s2 = v1 - s5;
    sw(v1, sp + 0x18);
    if (i32(s2) <= 0) goto loc_8002E274;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F34);                               // Load from: gpViewPlayer (80077F34)
    v0 = lw(v0 + 0xC0);
    v0 &= 0x80;
    if (v0 == 0) goto loc_8002D704;
    s6 = 1;                                             // Result = 00000001
loc_8002D704:
    v1 = lw(s1 + 0x1C);
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 != v0) goto loc_8002D79C;
    s0 = 0x800A0000;                                    // Result = 800A0000
    s0 -= 0x78B8;                                       // Result = gTmpWadLumpBuffer[0] (80098748)
    v0 = lh(s1 + 0x10);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7DC4);                               // Load from: gpLumpCache (8007823C)
    v0 <<= 2;
    v0 += v1;
    a0 = lw(v0);
    a1 = s0;                                            // Result = gTmpWadLumpBuffer[0] (80098748)
    decode();
    a0 = sp + 0x10;
    a1 = s0 + 8;                                        // Result = gTmpWadLumpBuffer[2] (80098750)
    v1 = lbu(s1 + 0x8);
    v0 = lhu(s1 + 0xA);
    v1 >>= 1;
    v0 &= 0xF;
    v0 <<= 6;
    v1 += v0;
    sh(v1, sp + 0x10);
    v1 = lhu(s1 + 0xA);
    a2 = lbu(s1 + 0x9);
    v0 = 0x20;                                          // Result = 00000020
    sh(v0, sp + 0x14);
    v0 = 0x80;                                          // Result = 00000080
    sh(v0, sp + 0x16);
    v1 &= 0x10;
    v1 <<= 4;
    a2 += v1;
    sh(a2, sp + 0x12);
    LIBGPU_LoadImage();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    sw(v0, s1 + 0x1C);
loc_8002D79C:
    v0 = lbu(s1 + 0x8);
    sh(v0, sp + 0x10);
    v0 = lbu(s1 + 0x9);
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    sh(v0, sp + 0x12);
    v0 = lhu(s1 + 0x4);
    a0 = s0;                                            // Result = 1F800200
    sh(v0, sp + 0x14);
    v0 = lhu(s1 + 0x6);
    a1 = sp + 0x10;
    sh(v0, sp + 0x16);
    LIBGPU_SetTexWindow();
    s0 += 4;                                            // Result = 1F800204
    t2 = 0xFF0000;                                      // Result = 00FF0000
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    t6 = 0x80080000;                                    // Result = 80080000
    t6 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s3 = t6 & t2;                                       // Result = 00086550
    t5 = 0x4000000;                                     // Result = 04000000
    t4 = 0x80000000;                                    // Result = 80000000
    t3 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t7 = t1 + 4;
loc_8002D810:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8002D874;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8002DA74;
    v0 = lw(a2);
    at = 0x80070000;                                    // Result = 80070000
    sw(t6, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s3;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8002D874:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8002D928;
    if (v1 == a0) goto loc_8002D810;
loc_8002D898:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t5;
    if (v0 == 0) goto loc_8002D810;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t3) goto loc_8002D904;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8002D8E8:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_8002D8E8;
loc_8002D904:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002D810;
    goto loc_8002D898;
loc_8002D928:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t7;
loc_8002D938:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_8002D998;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8002D980:
    v0 = lw(s0);
    s0 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_8002D980;
loc_8002D998:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    {
        const bool bJump = (v1 == v0)
        v0 = 7;                                         // Result = 00000007
        if (bJump) goto loc_8002DA50;
    }
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8002D9C8:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t2;
    {
        const bool bJump = (v0 == 0)
        v0 = 7;                                         // Result = 00000007
        if (bJump) goto loc_8002DA50;
    }
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8002DA34;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8002DA18:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8002DA18;
loc_8002DA34:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    {
        const bool bJump = (v1 != v0)
        v0 = 7;                                         // Result = 00000007
        if (bJump) goto loc_8002D9C8;
    }
loc_8002DA50:
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x24;                                          // Result = 00000024
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = 0x26;                                          // Result = 00000026
    if (s6 == 0) goto loc_8002DA88;
    goto loc_8002DA80;
loc_8002DA74:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_8002D938;
loc_8002DA80:
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
loc_8002DA88:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lhu(v0 + 0x7F7C);                              // Load from: g3dViewPaletteClutId (80077F7C)
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20E);                                 // Store to: 1F80020E
    v0 = lhu(s1 + 0xA);
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x216);                                 // Store to: 1F800216
    v0 = lw(s4);
    v1 = lw(s4 + 0x8);
    s3 = lw(v0 + 0x8);
    v1 = lw(v1 + 0x8);
    v0 = v1 - s3;
    div(v0, s2);
    if (s2 != 0) goto loc_8002DAD4;
    _break(0x1C00);
loc_8002DAD4:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s2 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002DAEC;
    }
    if (v0 != at) goto loc_8002DAEC;
    tge(zero, zero, 0x5D);
loc_8002DAEC:
    s7 = lo;
    sw(s7, sp + 0x40);
    s7 = lw(sp + 0x58);
    mult(s7, s3);
    t3 = lo;
    mult(s7, v1);
    v0 = lo;
    v0 -= t3;
    div(v0, s2);
    if (s2 != 0) goto loc_8002DB24;
    _break(0x1C00);
loc_8002DB24:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s2 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002DB3C;
    }
    if (v0 != at) goto loc_8002DB3C;
    tge(zero, zero, 0x5D);
loc_8002DB3C:
    s7 = lo;
    mult(fp, s3);
    t2 = lo;
    mult(fp, v1);
    v0 = lo;
    v0 -= t2;
    sw(s7, sp + 0x28);
    div(v0, s2);
    if (s2 != 0) goto loc_8002DB68;
    _break(0x1C00);
loc_8002DB68:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s2 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002DB80;
    }
    if (v0 != at) goto loc_8002DB80;
    tge(zero, zero, 0x5D);
loc_8002DB80:
    s7 = lo;
    sw(s7, sp + 0x38);
    t1 = lw(s4 + 0x4);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    a1 = lw(t1 + 0xC);
    t0 = lw(t1);
    v0 = a1 >> 19;
    v0 <<= 2;
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += v0;
    a0 = lw(at);
    a2 = lw(t0);
    t4 = u32(i32(a0) >> 8);
    a2 -= v1;
    a2 = u32(i32(a2) >> 8);
    mult(a2, t4);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    v0 += a3;
    v0 = lw(v0);
    t5 = u32(i32(v0) >> 8);
    v0 = lw(t0 + 0x4);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    a0 = lo;
    v0 -= v1;
    v0 = u32(i32(v0) >> 8);
    mult(v0, t5);
    v1 = lo;
    mult(a2, t5);
    a2 = lo;
    mult(v0, t4);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D6C);                               // Load from: gViewAngle (80078294)
    a0 -= v1;
    a1 -= v0;
    v0 = 0x40000000;                                    // Result = 40000000
    a1 += v0;
    a1 >>= 19;
    a1 <<= 2;
    a3 += a1;
    v0 = lw(a3);
    a3 = lo;
    a0 = u32(i32(a0) >> 8);
    t5 = u32(i32(v0) >> 8);
    mult(a0, t5);
    v0 = lo;
    v1 = s5 - 0x80;
    fp = u32(i32(v0) >> 4);
    mult(v1, fp);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += a1;
    v0 = lw(at);
    a1 = lo;
    a0 <<= 3;
    t4 = u32(i32(v0) >> 8);
    mult(a0, t4);
    a0 = lo;
    s6 = u32(i32(v0) >> 12);
    mult(v1, s6);
    a2 += a3;
    v0 = 0x640000;                                      // Result = 00640000
    t3 += v0;
    t2 += v0;
    t9 = a1 + a0;
    v1 = t5 << 3;
    a0 = 0x10000;                                       // Result = 00010000
    v0 = lo;
    s1 = v0 - v1;
    v1 = lw(t1 + 0x10);
    v0 = lw(t1 + 0x8);
    v1 = lw(v1);
    v0 += a0;
    v0 += v1;
    v0 -= a2;
    a2 = lh(t1 + 0x22);
    v0 = u32(i32(v0) >> 8);
    sw(v0, sp + 0x48);
    a3 = lh(t1 + 0x24);
    v0 = (i32(s5) < i32(a2));
    {
        const bool bJump = (v0 == 0)
        v0 = a2 - s5;
        if (bJump) goto loc_8002DD24;
    }
    s7 = lw(sp + 0x28);
    mult(v0, s7);
    a1 = lo;
    s7 = lw(sp + 0x38);
    mult(v0, s7);
    a0 = lo;
    mult(v0, fp);
    v1 = lo;
    mult(v0, s6);
    s5 = a2;
    t3 += a1;
    t2 += a0;
    t9 += v1;
    v0 = lo;
    s1 += v0;
loc_8002DD24:
    s7 = lw(sp + 0x18);
    v0 = (i32(a3) < i32(s7));
    s0 = s5;
    if (v0 == 0) goto loc_8002DD40;
    sw(a3, sp + 0x18);
    s7 = lw(sp + 0x18);
loc_8002DD40:
    v0 = (i32(s0) < i32(s7));
    t8 = 0xFF0000;                                      // Result = 00FF0000
    if (v0 == 0) goto loc_8002E274;
    t8 |= 0xFFFF;                                       // Result = 00FFFFFF
    s7 = 0x80080000;                                    // Result = 80080000
    s7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s7 &= t8;                                           // Result = 00086550
    sw(s7, sp + 0x58);
    s5 = 0x4000000;                                     // Result = 04000000
    s4 = 0x80000000;                                    // Result = 80000000
loc_8002DD6C:
    a2 = u32(i32(t3) >> 16);
    v0 = (i32(a2) < 0xC9);
    t1 = u32(i32(t2) >> 16);
    if (v0 == 0) goto loc_8002E23C;
    if (i32(t1) < 0) goto loc_8002E23C;
    t6 = 0;                                             // Result = 00000000
    if (s1 == 0) goto loc_8002DDC8;
    div(t9, s1);
    if (s1 != 0) goto loc_8002DD9C;
    _break(0x1C00);
loc_8002DD9C:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002DDB4;
    }
    if (t9 != at) goto loc_8002DDB4;
    tge(zero, zero, 0x5D);
loc_8002DDB4:
    v0 = lo;
    s7 = lw(sp + 0x48);
    v0 += s7;
    t6 = u32(i32(v0) >> 8);
loc_8002DDC8:
    a0 = t1 - a2;
    v0 = (i32(a0) < 0x1FE);
    t4 = lw(sp + 0x98);
    t5 = lw(sp + 0x9C);
    {
        const bool bJump = (v0 != 0)
        v0 = 0x64;                                      // Result = 00000064
        if (bJump) goto loc_8002DE88;
    }
    v0 -= a2;
    v0 <<= 16;
    div(v0, a0);
    if (a0 != 0) goto loc_8002DDF8;
    _break(0x1C00);
loc_8002DDF8:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002DE10;
    }
    if (v0 != at) goto loc_8002DE10;
    tge(zero, zero, 0x5D);
loc_8002DE10:
    v0 = lo;
    a1 = t5 - t4;
    mult(v0, a1);
    v1 = lo;
    v0 = 0x640000;                                      // Result = 00640000
    div(v0, a0);
    if (a0 != 0) goto loc_8002DE34;
    _break(0x1C00);
loc_8002DE34:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002DE4C;
    }
    if (v0 != at) goto loc_8002DE4C;
    tge(zero, zero, 0x5D);
loc_8002DE4C:
    v0 = lo;
    mult(v0, a1);
    v1 = u32(i32(v1) >> 16);
    a0 = t4 + v1;
    v0 = lo;
    v1 = u32(i32(v0) >> 16);
    if (i32(a2) >= 0) goto loc_8002DE74;
    a2 = 0;                                             // Result = 00000000
    t4 = a0 - v1;
loc_8002DE74:
    v0 = (i32(t1) < 0xC9);
    if (v0 != 0) goto loc_8002DE88;
    t5 = a0 + v1;
    t1 = 0xC8;                                          // Result = 000000C8
loc_8002DE88:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D9C);                               // Load from: gbRenderViewFullbright (80078264)
    v1 = u32(i32(s3) >> 8);
    if (v0 == 0) goto loc_8002DF44;
    v0 = (i32(v1) < 0x40);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(v1) < 0xA1);
        if (bJump) goto loc_8002DEB0;
    }
    v1 = 0x40;                                          // Result = 00000040
    goto loc_8002DEBC;
loc_8002DEB0:
    if (v0 != 0) goto loc_8002DEBC;
    v1 = 0xA0;                                          // Result = 000000A0
loc_8002DEBC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7E8C);                               // Load from: gCurLightValR (80077E8C)
    mult(v1, v0);
    v0 = lo;
    a1 = u32(i32(v0) >> 7);
    v0 = (i32(a1) < 0x100);
    if (v0 != 0) goto loc_8002DEE4;
    a1 = 0xFF;                                          // Result = 000000FF
loc_8002DEE4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FCC);                               // Load from: gCurLightValG (80078034)
    mult(v1, v0);
    v0 = lo;
    a0 = u32(i32(v0) >> 7);
    v0 = (i32(a0) < 0x100);
    if (v0 != 0) goto loc_8002DF0C;
    a0 = 0xFF;                                          // Result = 000000FF
loc_8002DF0C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F70);                               // Load from: gCurLightValB (80077F70)
    mult(v1, v0);
    v0 = lo;
    v1 = u32(i32(v0) >> 7);
    v0 = (i32(v1) < 0x100);
    if (v0 != 0) goto loc_8002DF5C;
    v1 = 0xFF;                                          // Result = 000000FF
    goto loc_8002DF5C;
loc_8002DF38:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_8002E13C;
loc_8002DF44:
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7E8C);                               // Load from: gCurLightValR (80077E8C)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FCC);                               // Load from: gCurLightValG (80078034)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F70);                               // Load from: gCurLightValB (80077F70)
loc_8002DF5C:
    s7 = 0x1F800000;                                    // Result = 1F800000
    s7 += 0x200;                                        // Result = 1F800200
    t7 = s7 + 4;                                        // Result = 1F800204
    s2 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = a2 - 1;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
    v0 = s0 + 1;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = t1 + 1;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(a1, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(a0, at + 0x205);                                 // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v1, at + 0x206);                                 // Store to: 1F800206
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s0, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s0, at + 0x218);                                 // Store to: 1F800218
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x21A);                                 // Store to: 1F80021A
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t4, at + 0x20D);                                 // Store to: 1F80020D
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t5, at + 0x215);                                 // Store to: 1F800215
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t5, at + 0x21D);                                 // Store to: 1F80021D
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t6, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t6, at + 0x214);                                 // Store to: 1F800214
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t6, at + 0x21C);                                 // Store to: 1F80021C
    t1 = t0 << 2;
    t4 = t1 + 4;
loc_8002E008:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8002E078;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8002DF38;
    s7 = 0x80080000;                                    // Result = 80080000
    s7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(s7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    s7 = lw(sp + 0x58);
    v0 &= v1;
    v0 |= s7;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8002E078:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8002E12C;
    if (v1 == a0) goto loc_8002E008;
loc_8002E09C:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= s5;
    if (v0 == 0) goto loc_8002E008;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t8;
    v0 |= s4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == s2) goto loc_8002E108;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8002E0EC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8002E0EC;
loc_8002E108:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002E008;
    goto loc_8002E09C;
loc_8002E12C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t4;
loc_8002E13C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t8;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_8002E194;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8002E17C:
    v0 = lw(t7);
    t7 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_8002E17C;
loc_8002E194:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002E23C;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8002E1B4:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= s5;
    if (v0 == 0) goto loc_8002E23C;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t8;
    v0 |= s4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == a3) goto loc_8002E220;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8002E204:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8002E204;
loc_8002E220:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8002E1B4;
loc_8002E23C:
    s7 = lw(sp + 0x40);
    s3 += s7;
    s7 = lw(sp + 0x28);
    t9 += fp;
    t3 += s7;
    s7 = lw(sp + 0x38);
    t2 += s7;
    s7 = lw(sp + 0x18);
    s0++;
    v0 = (i32(s0) < i32(s7));
    s1 += s6;
    if (v0 != 0) goto loc_8002DD6C;
loc_8002E274:
    ra = lw(sp + 0x84);
    fp = lw(sp + 0x80);
    s7 = lw(sp + 0x7C);
    s6 = lw(sp + 0x78);
    s5 = lw(sp + 0x74);
    s4 = lw(sp + 0x70);
    s3 = lw(sp + 0x6C);
    s2 = lw(sp + 0x68);
    s1 = lw(sp + 0x64);
    s0 = lw(sp + 0x60);
    sp += 0x88;
    return;
}

void R_DrawSubsectorFlat() noexcept {
loc_8002E2A8:
    sp -= 0x30;
    sw(s3, sp + 0x24);
    s3 = a0;
    sw(s2, sp + 0x20);
    s2 = a1;
    sw(ra, sp + 0x28);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    if (s2 == 0) goto loc_8002E2E4;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FF4);                               // Load from: gpCurSector (8007800C)
    v0 = lw(v0 + 0xC);
    goto loc_8002E2F4;
loc_8002E2E4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FF4);                               // Load from: gpCurSector (8007800C)
    v0 = lw(v0 + 0x8);
loc_8002E2F4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F60);                               // Load from: gpFlatTranslation (80077F60)
    v0 <<= 2;
    v0 += v1;
    v0 = lw(v0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EDC);                               // Load from: gpFlatTextures (80078124)
    v0 <<= 5;
    s1 = v0 + v1;
    v1 = lw(s1 + 0x1C);
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 != v0) goto loc_8002E3F8;
    a0 = lh(s1 + 0x10);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D10);                               // Load from: gpbIsMainWadLump (800782F0)
    v0 += a0;
    v0 = lbu(v0);
    {
        const bool bJump = (v0 != 0)
        v0 = a0 << 2;
        if (bJump) goto loc_8002E384;
    }
    v1 = a0 << 2;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7DC4);                               // Load from: gpLumpCache (8007823C)
    s0 = 0x800A0000;                                    // Result = 800A0000
    s0 -= 0x78B8;                                       // Result = gTmpWadLumpBuffer[0] (80098748)
    v1 += v0;
    a0 = lw(v1);
    a1 = s0;                                            // Result = gTmpWadLumpBuffer[0] (80098748)
    decode();
    a0 = sp + 0x10;
    goto loc_8002E39C;
loc_8002E378:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_8002E58C;
loc_8002E384:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7DC4);                               // Load from: gpLumpCache (8007823C)
    v0 += v1;
    s0 = lw(v0);
    a0 = sp + 0x10;
loc_8002E39C:
    a1 = s0 + 8;
    v1 = lbu(s1 + 0x8);
    v0 = lhu(s1 + 0xA);
    v1 >>= 1;
    v0 &= 0xF;
    v0 <<= 6;
    v1 += v0;
    sh(v1, sp + 0x10);
    v1 = lhu(s1 + 0xA);
    a2 = lbu(s1 + 0x9);
    v0 = 0x20;                                          // Result = 00000020
    sh(v0, sp + 0x14);
    v0 = 0x40;                                          // Result = 00000040
    sh(v0, sp + 0x16);
    v1 &= 0x10;
    v1 <<= 4;
    a2 += v1;
    sh(a2, sp + 0x12);
    LIBGPU_LoadImage();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    sw(v0, s1 + 0x1C);
loc_8002E3F8:
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    a0 = s0;                                            // Result = 1F800200
    v0 = lbu(s1 + 0x8);
    a1 = sp + 0x10;
    sh(v0, sp + 0x10);
    v1 = lbu(s1 + 0x9);
    v0 = 0x40;                                          // Result = 00000040
    sh(v0, sp + 0x14);
    sh(v0, sp + 0x16);
    sh(v1, sp + 0x12);
    LIBGPU_SetTexWindow();
    s0 += 4;                                            // Result = 1F800204
    t2 = 0xFF0000;                                      // Result = 00FF0000
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    t6 = 0x80080000;                                    // Result = 80080000
    t6 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t8 = t6 & t2;                                       // Result = 00086550
    t5 = 0x4000000;                                     // Result = 04000000
    t4 = 0x80000000;                                    // Result = 80000000
    t3 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t7 = t1 + 4;
loc_8002E464:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8002E4C8;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8002E378;
    v0 = lw(a2);
    at = 0x80070000;                                    // Result = 80070000
    sw(t6, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t8;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8002E4C8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8002E57C;
    if (v1 == a0) goto loc_8002E464;
loc_8002E4EC:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t5;
    if (v0 == 0) goto loc_8002E464;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t3) goto loc_8002E558;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8002E53C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_8002E53C;
loc_8002E558:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002E464;
    goto loc_8002E4EC;
loc_8002E57C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t7;
loc_8002E58C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_8002E5EC;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8002E5D4:
    v0 = lw(s0);
    s0 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_8002E5D4;
loc_8002E5EC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002E6A4;
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8002E61C:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8002E6A4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8002E688;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8002E66C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8002E66C;
loc_8002E688:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8002E61C;
loc_8002E6A4:
    if (s2 == 0) goto loc_8002E6C8;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FF4);                               // Load from: gpCurSector (8007800C)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EEC);                               // Load from: gViewZ (80077EEC)
    v0 = lw(v0 + 0x4);
    v0 -= v1;
    goto loc_8002E6E4;
loc_8002E6C8:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FF4);                               // Load from: gpCurSector (8007800C)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EEC);                               // Load from: gViewZ (80077EEC)
    v0 = lw(v0);
    v0 -= v1;
loc_8002E6E4:
    a1 = u32(i32(v0) >> 16);
    a0 = s3;
    a2 = s1;
    R_DrawFlatSpans();
    ra = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x30;
    return;
}

void R_DrawFlatSpans() noexcept {
loc_8002E714:
    sp -= 0x60;
    v1 = a0 + 4;
    a3 = 0x1F800000;                                    // Result = 1F800000
    a3 += 0x280;                                        // Result = 1F800280
    t0 = a3 + 0x54;                                     // Result = 1F8002D4
    sw(fp, sp + 0x58);
    sw(s7, sp + 0x54);
    sw(s6, sp + 0x50);
    sw(s5, sp + 0x4C);
    sw(s4, sp + 0x48);
    sw(s3, sp + 0x44);
    sw(s2, sp + 0x40);
    sw(s1, sp + 0x3C);
    sw(s0, sp + 0x38);
    sw(a1, sp);
    t2 = lw(a0);
    t8 = 0;                                             // Result = 00000000
    if (i32(t2) <= 0) goto loc_8002E7B4;
    a0 = 0x63;                                          // Result = 00000063
loc_8002E764:
    v0 = lw(v1);
    v0 = lw(v0 + 0x14);
    sw(v0, a3);
    v0 = lw(v1);
    s4 = lw(sp);
    v0 = lw(v0 + 0x8);
    mult(s4, v0);
    t8++;
    a3 += 4;
    v1 += 8;
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v0 = a0 - v0;
    sw(v0, t0);
    v0 = (i32(t8) < i32(t2));
    t0 += 4;
    if (v0 != 0) goto loc_8002E764;
loc_8002E7B4:
    t5 = 0xC8;                                          // Result = 000000C8
    t8 = 0;                                             // Result = 00000000
    sw(0, sp + 0x8);
    if (i32(t2) <= 0) goto loc_8002E918;
    t4 = 0x1F800000;                                    // Result = 1F800000
    t4 += 0x2D4;                                        // Result = 1F8002D4
    t6 = t4 - 0x54;                                     // Result = 1F800280
    t3 = t4;                                            // Result = 1F8002D4
loc_8002E7D4:
    v0 = t2 - 1;
    v1 = t8 + 1;
    if (t8 != v0) goto loc_8002E7E4;
    v1 = 0;                                             // Result = 00000000
loc_8002E7E4:
    v0 = v1 << 2;
    v0 += t4;
    a0 = lw(v0);
    v0 = lw(t3);
    {
        const bool bJump = (a0 == v0)
        v0 = (i32(v0) < i32(a0));
        if (bJump) goto loc_8002E908;
    }
    a0 = t8;
    if (v0 == 0) goto loc_8002E810;
    t1 = 1;                                             // Result = 00000001
    goto loc_8002E81C;
loc_8002E810:
    a0 = v1;
    v1 = t8;
    t1 = 0;                                             // Result = 00000000
loc_8002E81C:
    a0 <<= 2;
    v0 = a0 + t4;
    v1 <<= 2;
    a3 = lw(v0);
    v0 = v1 + t4;
    a0 += t6;
    v1 += t6;
    t0 = lw(v0);
    v0 = lw(a0);
    v1 = lw(v1);
    t7 = v0 << 16;
    a1 = v1 << 16;
    v1 = a1 - t7;
    v0 = t0 - a3;
    div(v1, v0);
    if (v0 != 0) goto loc_8002E864;
    _break(0x1C00);
loc_8002E864:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002E87C;
    }
    if (v1 != at) goto loc_8002E87C;
    tge(zero, zero, 0x5D);
loc_8002E87C:
    s6 = lo;
    v0 = (i32(t0) < 0xC9);
    if (i32(a3) >= 0) goto loc_8002E89C;
    mult(a3, s6);
    a3 = 0;                                             // Result = 00000000
    v0 = lo;
    t7 -= v0;
    v0 = (i32(t0) < 0xC9);
loc_8002E89C:
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a3) < i32(t5));
        if (bJump) goto loc_8002E8A8;
    }
    t0 = 0xC8;                                          // Result = 000000C8
loc_8002E8A8:
    if (v0 == 0) goto loc_8002E8B4;
    t5 = a3;
loc_8002E8B4:
    s4 = lw(sp + 0x8);
    v0 = (i32(s4) < i32(t0));
    a0 = a3 << 3;
    if (v0 == 0) goto loc_8002E8CC;
    sw(t0, sp + 0x8);
loc_8002E8CC:
    v0 = t1 << 2;                                       // Result = 00000000
    v1 = 0x800A0000;                                    // Result = 800A0000
    v1 -= 0x7F30;                                       // Result = 800980D0
    v0 += v1;                                           // Result = 800980D0
    s3 = a0 + v0;
    v0 = (i32(a3) < i32(t0));
    if (v0 == 0) goto loc_8002E908;
loc_8002E8EC:
    v0 = u32(i32(t7) >> 16);
    sw(v0, s3);
    s3 += 8;
    a3++;
    v0 = (i32(a3) < i32(t0));
    t7 += s6;
    if (v0 != 0) goto loc_8002E8EC;
loc_8002E908:
    t8++;
    v0 = (i32(t8) < i32(t2));
    t3 += 4;
    if (v0 != 0) goto loc_8002E7D4;
loc_8002E918:
    v1 = t5 << 3;                                       // Result = 00000640
    v0 = 0x800A0000;                                    // Result = 800A0000
    v0 -= 0x7F30;                                       // Result = 800980D0
    s3 = v1 + v0;                                       // Result = 80098710
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lhu(v1 + 0x7F7C);                              // Load from: g3dViewPaletteClutId (80077F7C)
    s4 = lw(sp + 0x8);
    v0 = 7;                                             // Result = 00000007
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x24;                                          // Result = 00000024
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x20E);                                 // Store to: 1F80020E
    v0 = lhu(a2 + 0xA);
    s1 = t5;                                            // Result = 000000C8
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x216);                                 // Store to: 1F800216
    v0 = (i32(s1) < i32(s4));
    s2 = 0xFF0000;                                      // Result = 00FF0000
    if (v0 == 0) goto loc_8002F300;
    s2 |= 0xFFFF;                                       // Result = 00FFFFFF
    s4 = 0x80080000;                                    // Result = 80080000
    s4 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s4 &= s2;                                           // Result = 00086550
    sw(s4, sp + 0x10);
    fp = -1;                                            // Result = FFFFFFFF
loc_8002E988:
    t7 = lw(s3);
    s3 += 4;
    a1 = lw(s3);
    s3 += 4;
    if (t7 == a1) goto loc_8002F2EC;
    v0 = (i32(a1) < i32(t7));
    {
        const bool bJump = (v0 == 0)
        v0 = t7;
        if (bJump) goto loc_8002E9B4;
    }
    t7 = a1;
    a1 = v0;
loc_8002E9B4:
    v0 = s1 << 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x395C;                                       // Result = 8007395C
    at += v0;
    v0 = lw(at);
    s4 = lw(sp);
    mult(s4, v0);
    v0 = lo;
    a3 = 0x80080000;                                    // Result = 80080000
    a3 = lw(a3 - 0x7F64);                               // Load from: gViewCos (8007809C)
    t0 = u32(i32(v0) >> 16);
    mult(t0, a3);
    a0 = lo;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F48);                               // Load from: gViewSin (800780B8)
    mult(t0, v0);
    t7 -= 2;
    a1 += 2;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    v0 = lo;
    a2 = v0;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    t3 = a2 + v1;
    t2 = a0 + v0;
    if (i32(a2) >= 0) goto loc_8002EA2C;
    a2 += 0x7F;
loc_8002EA2C:
    v0 = -a3;
    mult(v0, t0);
    v0 = lo;
    s5 = u32(i32(a2) >> 7);
    if (i32(v0) >= 0) goto loc_8002EA44;
    v0 += 0x7F;
loc_8002EA44:
    a2 = t7 - 0x80;
    mult(a2, s5);
    a0 = lo;
    v0 = u32(i32(v0) >> 7);
    mult(a2, v0);
    v1 = lo;
    a2 = a1 - 0x80;
    mult(a2, s5);
    sw(v0, sp + 0x30);
    v0 = lo;
    s4 = lw(sp + 0x30);
    mult(a2, s4);
    a0 += t2;
    a0 = u32(i32(a0) >> 16);
    v1 += t3;
    v0 += t2;
    t4 = u32(i32(v0) >> 16);
    v0 = lo;
    v0 += t3;
    t5 = u32(i32(v0) >> 16);
    v0 = (i32(a0) < i32(t4));
    t1 = u32(i32(v1) >> 16);
    if (v0 == 0) goto loc_8002EAB8;
    s4 = -0x40;                                         // Result = FFFFFFC0
    t6 = a0 & s4;
    a0 -= t6;
    t4 -= t6;
    goto loc_8002EAC8;
loc_8002EAB8:
    s4 = -0x40;                                         // Result = FFFFFFC0
    t6 = t4 & s4;
    t4 -= t6;
    a0 -= t6;
loc_8002EAC8:
    v0 = (i32(t1) < i32(t5));
    s4 = -0x40;                                         // Result = FFFFFFC0
    if (v0 == 0) goto loc_8002EAE4;
    t3 = t1 & s4;
    t1 -= t3;
    t5 -= t3;
    goto loc_8002EAF0;
loc_8002EAE4:
    t3 = t5 & s4;
    t5 -= t3;
    t1 -= t3;
loc_8002EAF0:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D9C);                               // Load from: gbRenderViewFullbright (80078264)
    {
        const bool bJump = (v0 == 0)
        v0 = u32(i32(t0) >> 1);
        if (bJump) goto loc_8002EBB4;
    }
    v1 = 0xA0;                                          // Result = 000000A0
    v1 -= v0;
    v0 = (i32(v1) < 0x40);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(v1) < 0xA1);
        if (bJump) goto loc_8002EB20;
    }
    v1 = 0x40;                                          // Result = 00000040
    goto loc_8002EB2C;
loc_8002EB20:
    if (v0 != 0) goto loc_8002EB2C;
    v1 = 0xA0;                                          // Result = 000000A0
loc_8002EB2C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7E8C);                               // Load from: gCurLightValR (80077E8C)
    mult(v1, v0);
    v0 = lo;
    a3 = u32(i32(v0) >> 7);
    v0 = (i32(a3) < 0x100);
    if (v0 != 0) goto loc_8002EB54;
    a3 = 0xFF;                                          // Result = 000000FF
loc_8002EB54:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FCC);                               // Load from: gCurLightValG (80078034)
    mult(v1, v0);
    v0 = lo;
    a2 = u32(i32(v0) >> 7);
    v0 = (i32(a2) < 0x100);
    if (v0 != 0) goto loc_8002EB7C;
    a2 = 0xFF;                                          // Result = 000000FF
loc_8002EB7C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F70);                               // Load from: gCurLightValB (80077F70)
    mult(v1, v0);
    v0 = lo;
    v1 = u32(i32(v0) >> 7);
    v0 = (i32(v1) < 0x100);
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a0) < 0x100);
        if (bJump) goto loc_8002EBD0;
    }
    v1 = 0xFF;                                          // Result = 000000FF
    goto loc_8002EBD0;
loc_8002EBA8:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_8002EE08;
loc_8002EBB4:
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7E8C);                               // Load from: gCurLightValR (80077E8C)
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7FCC);                               // Load from: gCurLightValG (80078034)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F70);                               // Load from: gCurLightValB (80077F70)
    v0 = (i32(a0) < 0x100);
loc_8002EBD0:
    at = 0x1F800000;                                    // Result = 1F800000
    sb(a3, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(a2, at + 0x205);                                 // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v1, at + 0x206);                                 // Store to: 1F800206
    t9 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8002EC0C;
    v0 = (i32(t4) < 0x100);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(t1) < 0x100);
        if (bJump) goto loc_8002EC0C;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(t5) < 0x100);
        if (bJump) goto loc_8002EC0C;
    }
    if (v0 != 0) goto loc_8002EC44;
loc_8002EC0C:
    v0 = t4 - a0;
    if (i32(v0) >= 0) goto loc_8002EC1C;
    v0 = -v0;
loc_8002EC1C:
    t9 = u32(i32(v0) >> 7);
    v0 = t5 - t1;
    if (i32(v0) >= 0) goto loc_8002EC30;
    v0 = -v0;
loc_8002EC30:
    v1 = u32(i32(v0) >> 7);
    v0 = (i32(t9) < i32(v1));
    if (v0 == 0) goto loc_8002EC44;
    t9 = v1;
loc_8002EC44:
    v0 = a1 - t7;
    if (t9 != 0) goto loc_8002EEEC;
    s4 = 0x1F800000;                                    // Result = 1F800000
    s4 += 0x200;                                        // Result = 1F800200
    t3 = s4 + 4;                                        // Result = 1F800204
    t2 = 0x1F800000;                                    // Result = 1F800000
    t2 = lbu(t2 + 0x203);                               // Load from: 1F800203
    t0 = 0x80070000;                                    // Result = 80070000
    t0 = lw(t0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = s1 + 1;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t7, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s1, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a1, at + 0x210);                                 // Store to: 1F800210
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s1, at + 0x212);                                 // Store to: 1F800212
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a1, at + 0x218);                                 // Store to: 1F800218
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x21A);                                 // Store to: 1F80021A
    at = 0x1F800000;                                    // Result = 1F800000
    sb(a0, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t1, at + 0x20D);                                 // Store to: 1F80020D
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t4, at + 0x214);                                 // Store to: 1F800214
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t5, at + 0x215);                                 // Store to: 1F800215
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t4, at + 0x21C);                                 // Store to: 1F80021C
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t5, at + 0x21D);                                 // Store to: 1F80021D
    t1 = t2 << 2;
    t4 = t1 + 4;
loc_8002ECD4:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8002ED44;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8002EBA8;
    s4 = 0x80080000;                                    // Result = 80080000
    s4 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    v0 = lw(t0);
    at = 0x80070000;                                    // Result = 80070000
    sw(s4, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    s4 = lw(sp + 0x10);
    v0 &= v1;
    v0 |= s4;
    sw(v0, t0);
    sb(0, t0 + 0x3);
    t0 = 0x80070000;                                    // Result = 80070000
    t0 = lw(t0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8002ED44:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8002EDF8;
    if (v1 == a0) goto loc_8002ECD4;
loc_8002ED68:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    s4 = 0x4000000;                                     // Result = 04000000
    v0 &= s4;
    if (v0 == 0) goto loc_8002ECD4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    s4 = 0x80000000;                                    // Result = 80000000
    a2 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a2--;
    v0 &= s2;
    v0 |= s4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a2 == fp) goto loc_8002EDD4;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8002EDB8:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a2--;
    sw(v1, v0);
    if (a2 != a3) goto loc_8002EDB8;
loc_8002EDD4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002ECD4;
    goto loc_8002ED68;
loc_8002EDF8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t4;
loc_8002EE08:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(t0);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= s2;
    v1 |= v0;
    sw(v1, t0);
    sb(t2, t0 + 0x3);
    t2--;
    t0 += 4;
    if (t2 == fp) goto loc_8002EE5C;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8002EE44:
    v0 = lw(t3);
    t3 += 4;
    t2--;
    sw(v0, t0);
    t0 += 4;
    if (t2 != v1) goto loc_8002EE44;
loc_8002EE5C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002F2EC;
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    s4 = 0x4000000;                                     // Result = 04000000
    v0 &= s4;
    s4 = 0x80000000;                                    // Result = 80000000
    if (v0 == 0) goto loc_8002F2EC;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a2 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a2--;
    v0 &= s2;
    v0 |= s4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a2 == fp) goto loc_8002EE5C;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8002EEC8:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a2--;
    sw(v1, v0);
    if (a2 == a3) goto loc_8002EE5C;
    goto loc_8002EEC8;
loc_8002EEEC:
    t9++;
    div(v0, t9);
    if (t9 != 0) goto loc_8002EF00;
    _break(0x1C00);
loc_8002EF00:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (t9 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002EF18;
    }
    if (v0 != at) goto loc_8002EF18;
    tge(zero, zero, 0x5D);
loc_8002EF18:
    s6 = lo;
    v0 = t4 - a0;
    div(v0, t9);
    if (t9 != 0) goto loc_8002EF30;
    _break(0x1C00);
loc_8002EF30:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (t9 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002EF48;
    }
    if (v0 != at) goto loc_8002EF48;
    tge(zero, zero, 0x5D);
loc_8002EF48:
    s5 = lo;
    v0 = t5 - t1;
    div(v0, t9);
    if (t9 != 0) goto loc_8002EF60;
    _break(0x1C00);
loc_8002EF60:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (t9 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002EF78;
    }
    if (v0 != at) goto loc_8002EF78;
    tge(zero, zero, 0x5D);
loc_8002EF78:
    s4 = lo;
    t8 = 0;                                             // Result = 00000000
    sw(s4, sp + 0x30);
    if (i32(t9) <= 0) goto loc_8002F2EC;
    s7 = -0x80;                                         // Result = FFFFFF80
loc_8002EF8C:
    a1 = t7 + s6;
    t4 = a0 + s5;
    s4 = lw(sp + 0x30);
    t6 = 0;                                             // Result = 00000000
    v0 = (i32(a0) < i32(t4));
    t5 = t1 + s4;
    if (v0 == 0) goto loc_8002EFC4;
    v0 = (i32(t4) < 0x100);
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(t4) < i32(a0));
        if (bJump) goto loc_8002EFC8;
    }
    t6 = a0 & s7;
    a0 -= t6;
    t4 -= t6;
    goto loc_8002EFE4;
loc_8002EFC4:
    v0 = (i32(t4) < i32(a0));
loc_8002EFC8:
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(a0) < 0x100);
        if (bJump) goto loc_8002EFE4;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(t1) < i32(t5));
        if (bJump) goto loc_8002EFE8;
    }
    t6 = t4 & s7;
    t4 -= t6;
    a0 -= t6;
loc_8002EFE4:
    v0 = (i32(t1) < i32(t5));
loc_8002EFE8:
    t3 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8002F018;
    v0 = (i32(t5) < 0x100);
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(t5) < i32(t1));
        if (bJump) goto loc_8002F01C;
    }
    t3 = t1 & s7;
    t1 -= t3;
    t5 -= t3;
    goto loc_8002F038;
loc_8002F00C:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_8002F1F4;
loc_8002F018:
    v0 = (i32(t5) < i32(t1));
loc_8002F01C:
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(t1) < 0x100);
        if (bJump) goto loc_8002F038;
    }
    if (v0 != 0) goto loc_8002F038;
    t3 = t5 & s7;
    t5 -= t3;
    t1 -= t3;
loc_8002F038:
    s4 = 0x1F800000;                                    // Result = 1F800000
    s4 += 0x200;                                        // Result = 1F800200
    s0 = s4 + 4;                                        // Result = 1F800204
    t2 = 0x1F800000;                                    // Result = 1F800000
    t2 = lbu(t2 + 0x203);                               // Load from: 1F800203
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = s1 + 1;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t7, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s1, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a1, at + 0x210);                                 // Store to: 1F800210
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s1, at + 0x212);                                 // Store to: 1F800212
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a1, at + 0x218);                                 // Store to: 1F800218
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x21A);                                 // Store to: 1F80021A
    at = 0x1F800000;                                    // Result = 1F800000
    sb(a0, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t1, at + 0x20D);                                 // Store to: 1F80020D
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t4, at + 0x214);                                 // Store to: 1F800214
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t5, at + 0x215);                                 // Store to: 1F800215
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t4, at + 0x21C);                                 // Store to: 1F80021C
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t5, at + 0x21D);                                 // Store to: 1F80021D
    t1 = t2 << 2;
    t7 = t1 + 4;
loc_8002F0C0:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8002F130;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8002F00C;
    s4 = 0x80080000;                                    // Result = 80080000
    s4 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(s4, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    s4 = lw(sp + 0x10);
    v0 &= v1;
    v0 |= s4;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8002F130:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8002F1E4;
    if (v1 == a0) goto loc_8002F0C0;
loc_8002F154:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    s4 = 0x4000000;                                     // Result = 04000000
    v0 &= s4;
    if (v0 == 0) goto loc_8002F0C0;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    s4 = 0x80000000;                                    // Result = 80000000
    a2 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a2--;
    v0 &= s2;
    v0 |= s4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a2 == fp) goto loc_8002F1C0;
    t0 = -1;                                            // Result = FFFFFFFF
loc_8002F1A4:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a2--;
    sw(v1, v0);
    if (a2 != t0) goto loc_8002F1A4;
loc_8002F1C0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002F0C0;
    goto loc_8002F154;
loc_8002F1E4:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t7;
loc_8002F1F4:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= v0;
    a0 &= s2;
    v1 |= a0;
    sw(v1, a3);
    sb(t2, a3 + 0x3);
    t2--;
    a3 += 4;
    if (t2 == fp) goto loc_8002F2BC;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8002F230:
    v0 = lw(s0);
    s0 += 4;
    t2--;
    sw(v0, a3);
    a3 += 4;
    if (t2 != v1) goto loc_8002F230;
    goto loc_8002F2BC;
loc_8002F250:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    s4 = 0x4000000;                                     // Result = 04000000
    v0 &= s4;
    t7 = a1;
    if (v0 == 0) goto loc_8002F2D8;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    s4 = 0x80000000;                                    // Result = 80000000
    a2 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a2--;
    v0 &= s2;
    v0 |= s4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a2 == fp) goto loc_8002F2BC;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8002F2A0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a2--;
    sw(v1, v0);
    if (a2 != a3) goto loc_8002F2A0;
loc_8002F2BC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t7 = a1;
    if (v1 != v0) goto loc_8002F250;
loc_8002F2D8:
    a0 = t4 + t6;
    t8++;
    v0 = (i32(t8) < i32(t9));
    t1 = t5 + t3;
    if (v0 != 0) goto loc_8002EF8C;
loc_8002F2EC:
    s4 = lw(sp + 0x8);
    s1++;
    v0 = (i32(s1) < i32(s4));
    if (v0 != 0) goto loc_8002E988;
loc_8002F300:
    fp = lw(sp + 0x58);
    s7 = lw(sp + 0x54);
    s6 = lw(sp + 0x50);
    s5 = lw(sp + 0x4C);
    s4 = lw(sp + 0x48);
    s3 = lw(sp + 0x44);
    s2 = lw(sp + 0x40);
    s1 = lw(sp + 0x3C);
    s0 = lw(sp + 0x38);
    sp += 0x60;
    return;
}

void R_DrawSubsectorSprites() noexcept {
loc_8002F330:
    sp -= 0x58;
    sw(s5, sp + 0x4C);
    s5 = a0;
    v0 = 0x80090000;                                    // Result = 80090000
    v0 += 0x6D78;                                       // Result = 80096D78
    v1 = v0 - 0xC;                                      // Result = 80096D6C
    sw(ra, sp + 0x54);
    sw(s6, sp + 0x50);
    sw(s4, sp + 0x48);
    sw(s3, sp + 0x44);
    sw(s2, sp + 0x40);
    sw(s1, sp + 0x3C);
    sw(s0, sp + 0x38);
    sw(v1, v0);                                         // Store to: 80096D78
    v0 = lw(s5);
    s1 = lw(v0 + 0x4C);
    s3 = 0x800B0000;                                    // Result = 800B0000
    s3 -= 0x7584;                                       // Result = 800A8A7C
    s4 = 0;                                             // Result = 00000000
    if (s1 == 0) goto loc_8002F4CC;
    s0 = s3 + 0xC;                                      // Result = 800A8A88
loc_8002F388:
    v0 = lw(s1 + 0xC);
    a2 = sp + 0x30;
    if (v0 != s5) goto loc_8002F4BC;
    a0 = sp + 0x10;
    v0 = lw(s1);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    a1 = sp + 0x18;
    sh(0, sp + 0x12);
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    sh(v0, sp + 0x10);
    v0 = lw(s1 + 0x4);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    v0 -= v1;
    v0 = u32(i32(v0) >> 16);
    sh(v0, sp + 0x14);
    LIBGTE_RotTrans();
    v1 = lw(sp + 0x20);
    v0 = (i32(v1) < 4);
    if (v0 != 0) goto loc_8002F4BC;
    a0 = v1 << 1;
    v1 = lw(sp + 0x18);
    v0 = -a0;
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a0) < i32(v1));
        if (bJump) goto loc_8002F4BC;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = 0x800000;                                  // Result = 00800000
        if (bJump) goto loc_8002F4BC;
    }
    sw(v1, s3);                                         // Store to: 800A8A7C
    v1 = lw(sp + 0x20);
    div(v0, v1);
    if (v1 != 0) goto loc_8002F42C;
    _break(0x1C00);
loc_8002F42C:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8002F444;
    }
    if (v0 != at) goto loc_8002F444;
    tge(zero, zero, 0x5D);
loc_8002F444:
    v0 = lo;
    sw(s1, s0 - 0x4);                                   // Store to: 800A8A84
    sw(v0, s0 - 0x8);                                   // Store to: 800A8A80
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x6D78);                               // Load from: 80096D78
    s2 = 0x80090000;                                    // Result = 80090000
    s2 += 0x6D6C;                                       // Result = 80096D6C
    if (v0 == s2) goto loc_8002F49C;
    a0 = lw(s0 - 0x8);                                  // Load from: 800A8A80
    a1 = s2;                                            // Result = 80096D6C
loc_8002F470:
    v1 = lw(s2 + 0xC);
    v0 = lw(v1 + 0x4);
    v0 = (i32(v0) < i32(a0));
    if (v0 == 0) goto loc_8002F49C;
    v0 = lw(v1 + 0xC);
    s2 = v1;
    if (v0 != a1) goto loc_8002F470;
loc_8002F49C:
    v0 = lw(s2 + 0xC);
    s4++;                                               // Result = 00000001
    sw(v0, s0);                                         // Store to: 800A8A88
    s0 += 0x10;                                         // Result = 800A8A98
    sw(s3, s2 + 0xC);
    v0 = (i32(s4) < 0x40);                              // Result = 00000001
    s3 += 0x10;                                         // Result = 800A8A8C
    if (v0 == 0) goto loc_8002F4CC;
loc_8002F4BC:
    s1 = lw(s1 + 0x1C);
    if (s1 != 0) goto loc_8002F388;
loc_8002F4CC:
    a1 = sp + 0x28;
    if (s4 == 0) goto loc_8002FE08;
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    a0 = s0;                                            // Result = 1F800200
    sh(0, sp + 0x28);
    sh(0, sp + 0x2A);
    sh(0, sp + 0x2C);
    sh(0, sp + 0x2E);
    LIBGPU_SetTexWindow();
    s0 += 4;                                            // Result = 1F800204
    t3 = 0xFF0000;                                      // Result = 00FF0000
    t3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = t7 & t3;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_8002F530:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8002F598;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_8002F65C;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(t7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8002F598:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8002F64C;
    if (v1 == a0) goto loc_8002F530;
loc_8002F5BC:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_8002F530;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t3;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_8002F628;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8002F60C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_8002F60C;
loc_8002F628:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002F530;
    goto loc_8002F5BC;
loc_8002F64C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_8002F65C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_8002F6BC;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8002F6A4:
    v0 = lw(s0);
    s0 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_8002F6A4;
loc_8002F6BC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002F774;
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8002F6EC:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8002F774;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8002F758;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8002F73C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8002F73C;
loc_8002F758:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8002F6EC;
loc_8002F774:
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6D78;                                       // Result = 80096D78
    s2 = lw(v1);                                        // Load from: 80096D78
    v0 = 9;                                             // Result = 00000009
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x2C;                                          // Result = 0000002C
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lhu(a0 + 0x7F7C);                              // Load from: g3dViewPaletteClutId (80077F7C)
    v1 -= 0xC;                                          // Result = 80096D6C
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a0, at + 0x20E);                                 // Store to: 1F80020E
    s4 = 0xFF0000;                                      // Result = 00FF0000
    if (s2 == v1) goto loc_8002FE08;
    s6 = 0x1F800000;                                    // Result = 1F800000
    s6 += 0x200;                                        // Result = 1F800200
    s5 = 0x80080000;                                    // Result = 80080000
    s5 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s4 |= 0xFFFF;                                       // Result = 00FFFFFF
loc_8002F7C8:
    s1 = lw(s2 + 0x8);
    a0 = lw(s1 + 0x28);
    v1 = lw(s1 + 0x2C);
    a0 <<= 3;
    v1 &= 0x7FFF;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    at = 0x80060000;                                    // Result = 80060000
    at += 0x6BFC;                                       // Result = 80066BFC
    at += a0;
    v1 = lw(at);
    v0 <<= 2;
    s0 = v0 + v1;
    v0 = lw(s0);
    if (v0 == 0) goto loc_8002F86C;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7EE0);                               // Load from: gViewX (80077EE0)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7EE4);                               // Load from: gViewY (80077EE4)
    a2 = lw(s1);
    a3 = lw(s1 + 0x4);
    R_PointToAngle2();
    v1 = lw(s1 + 0x24);
    v0 -= v1;
    v1 = 0x90000000;                                    // Result = 90000000
    v0 += v1;
    v0 >>= 29;
    v1 = v0 << 2;
    v1 += s0;
    v0 += s0;
    v1 = lw(v1 + 0x4);
    s3 = lbu(v0 + 0x24);
    goto loc_8002F874;
loc_8002F86C:
    v1 = lw(s0 + 0x4);
    s3 = lbu(s0 + 0x24);
loc_8002F874:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FEC);                               // Load from: gFirstSpriteLumpNum (80078014)
    v0 = v1 - v0;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EC4);                               // Load from: gpSprites (80077EC4)
    v0 <<= 5;
    s0 = v0 + v1;
    a0 = s0;
    I_CacheTex();
    v0 = lw(s1 + 0x64);
    v0 >>= 28;
    v1 = v0 & 7;
    if (v1 == 0) goto loc_8002F8C4;
    v0 = 0x1F800000;                                    // Result = 1F800000
    v0 = lbu(v0 + 0x207);                               // Load from: 1F800207
    v0 |= 2;
    goto loc_8002F8D4;
loc_8002F8C4:
    v0 = 0x1F800000;                                    // Result = 1F800000
    v0 = lbu(v0 + 0x207);                               // Load from: 1F800207
    v0 &= 0xFD;
loc_8002F8D4:
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = u32(i32(v1) >> 1);
    v1 = lhu(s0 + 0xA);
    v0 <<= 5;
    v1 |= v0;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x216);                                 // Store to: 1F800216
    v0 = lw(s1 + 0x2C);
    v0 &= 0x8000;
    {
        const bool bJump = (v0 == 0)
        v0 = 0xA0;                                      // Result = 000000A0
        if (bJump) goto loc_8002F928;
    }
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x205);                                 // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x206);                                 // Store to: 1F800206
    goto loc_8002F958;
loc_8002F928:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x7E8C);                              // Load from: gCurLightValR (80077E8C)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lbu(v1 - 0x7FCC);                              // Load from: gCurLightValG (80078034)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lbu(a0 + 0x7F70);                              // Load from: gCurLightValB (80077F70)
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v1, at + 0x205);                                 // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(a0, at + 0x206);                                 // Store to: 1F800206
loc_8002F958:
    a1 = lw(s2 + 0x4);
    v0 = lw(s1 + 0x8);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EEC);                               // Load from: gViewZ (80077EEC)
    a0 = -a1;
    v0 -= v1;
    v1 = lh(s0 + 0x2);
    v0 = u32(i32(v0) >> 16);
    v0 += v1;
    mult(a0, v0);
    v1 = lh(s0 + 0x4);
    v0 = v1 << 1;
    v0 += v1;
    v1 = v0 << 4;
    v0 += v1;
    v1 = v0 << 8;
    v0 += v1;
    v1 = lo;
    v0 <<= 2;
    v0 = u32(i32(v0) >> 16);
    mult(v0, a1);
    a0 = lo;
    v0 = lh(s0 + 0x6);
    mult(v0, a1);
    v1 = u32(i32(v1) >> 16);
    a2 = v1 + 0x64;
    a3 = u32(i32(a0) >> 16);
    v0 = lo;
    t1 = u32(i32(v0) >> 16);
    if (s3 != 0) goto loc_8002FA74;
    v0 = lbu(s0 + 0x8);
    v1 = lh(s0);
    a0 = lw(s2);
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    v0 = v1 << 1;
    v0 += v1;
    v1 = v0 << 4;
    v0 += v1;
    v1 = v0 << 8;
    v0 += v1;
    v0 <<= 2;
    v0 = u32(i32(v0) >> 16);
    a0 -= v0;
    v0 = lbu(s0 + 0x8);
    v1 = lbu(s0 + 0x4);
    mult(a0, a1);
    v0 += v1;
    v0--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x214);                                 // Store to: 1F800214
    v0 = lbu(s0 + 0x8);
    v1 = lbu(s0 + 0x4);
    v0 += v1;
    v0--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x224);                                 // Store to: 1F800224
    v0 = lbu(s0 + 0x8);
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x21C);                                 // Store to: 1F80021C
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v1 = v0 + 0x80;
    goto loc_8002FB08;
loc_8002FA68:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_8002FCEC;
loc_8002FA74:
    v1 = lh(s0);
    a0 = lbu(s0 + 0x4);
    v0 = v1 << 1;
    v0 += v1;
    v1 = v0 << 4;
    v0 += v1;
    v1 = v0 << 8;
    v0 += v1;
    v0 <<= 2;
    v1 = lw(s2);
    v0 = u32(i32(v0) >> 16);
    v0 += v1;
    v1 = lbu(s0 + 0x8);
    mult(v0, a1);
    v1 += a0;
    v1--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v1, at + 0x20C);                                 // Store to: 1F80020C
    v0 = lbu(s0 + 0x8);
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x214);                                 // Store to: 1F800214
    v0 = lbu(s0 + 0x8);
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x224);                                 // Store to: 1F800224
    v0 = lbu(s0 + 0x8);
    v1 = lbu(s0 + 0x4);
    v0 += v1;
    v0--;
    v1 = a3 - 0x80;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x21C);                                 // Store to: 1F80021C
    v0 = lo;
    v0 = u32(i32(v0) >> 16);
    v1 = v0 - v1;
loc_8002FB08:
    t2 = s6 + 4;                                        // Result = 1F800204
    t4 = s5 & s4;                                       // Result = 00086550
    t7 = 0x4000000;                                     // Result = 04000000
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    v0 = v1 + a3;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x220);                                 // Store to: 1F800220
    v0 = a2 + t1;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a2, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a2, at + 0x212);                                 // Store to: 1F800212
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x222);                                 // Store to: 1F800222
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x218);                                 // Store to: 1F800218
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x21A);                                 // Store to: 1F80021A
    v0 = lbu(s0 + 0x9);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t6 = 0x80000000;                                    // Result = 80000000
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    v0 = lbu(s0 + 0x9);
    t5 = -1;                                            // Result = FFFFFFFF
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x215);                                 // Store to: 1F800215
    v0 = lbu(s0 + 0x9);
    v1 = lbu(s0 + 0x6);
    t1 = t0 << 2;
    v0 += v1;
    v0--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x225);                                 // Store to: 1F800225
    v0 = lbu(s0 + 0x9);
    v1 = lbu(s0 + 0x6);
    t3 = t1 + 4;
    v0 += v1;
    v0--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x21D);                                 // Store to: 1F80021D
loc_8002FBC4:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8002FC28;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8002FA68;
    v0 = lw(a2);
    at = 0x80070000;                                    // Result = 80070000
    sw(s5, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t4;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8002FC28:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8002FCDC;
    if (v1 == a0) goto loc_8002FBC4;
loc_8002FC4C:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t7;
    if (v0 == 0) goto loc_8002FBC4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= s4;
    v0 |= t6;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_8002FCB8;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8002FC9C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_8002FC9C;
loc_8002FCB8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002FBC4;
    goto loc_8002FC4C;
loc_8002FCDC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t3;
loc_8002FCEC:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= s4;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_8002FD44;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8002FD2C:
    v0 = lw(t2);
    t2 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_8002FD2C;
loc_8002FD44:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002FDF4;
    t1 = 0x4000000;                                     // Result = 04000000
    t0 = 0x80000000;                                    // Result = 80000000
    a3 = -1;                                            // Result = FFFFFFFF
loc_8002FD6C:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= t1;
    if (v0 == 0) goto loc_8002FDF4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= s4;
    v0 |= t0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == a3) goto loc_8002FDD8;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8002FDBC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8002FDBC;
loc_8002FDD8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8002FD6C;
loc_8002FDF4:
    s2 = lw(s2 + 0xC);
    v0 = 0x80090000;                                    // Result = 80090000
    v0 += 0x6D6C;                                       // Result = 80096D6C
    if (s2 != v0) goto loc_8002F7C8;
loc_8002FE08:
    ra = lw(sp + 0x54);
    s6 = lw(sp + 0x50);
    s5 = lw(sp + 0x4C);
    s4 = lw(sp + 0x48);
    s3 = lw(sp + 0x44);
    s2 = lw(sp + 0x40);
    s1 = lw(sp + 0x3C);
    s0 = lw(sp + 0x38);
    sp += 0x58;
    return;
}

void R_DrawWeapon() noexcept {
loc_8002FE34:
    sp -= 0x48;
    sw(s6, sp + 0x38);
    s6 = 0;                                             // Result = 00000000
    sw(fp, sp + 0x40);
    fp = 0x1F800000;                                    // Result = 1F800000
    fp += 0x200;                                        // Result = 1F800200
    sw(s1, sp + 0x24);
    s1 = 0xFF0000;                                      // Result = 00FF0000
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F34);                               // Load from: gpViewPlayer (80077F34)
    s1 |= 0xFFFF;                                       // Result = 00FFFFFF
    sw(s7, sp + 0x3C);
    s7 = 0x80080000;                                    // Result = 80080000
    s7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    sw(s5, sp + 0x34);
    s5 = s7 & s1;                                       // Result = 00086550
    sw(s4, sp + 0x30);
    s4 = 0x4000000;                                     // Result = 04000000
    sw(ra, sp + 0x44);
    sw(s3, sp + 0x2C);
    sw(s2, sp + 0x28);
    sw(s0, sp + 0x20);
    sh(0, sp + 0x18);
    sh(0, sp + 0x1A);
    sh(0, sp + 0x1C);
    sh(0, sp + 0x1E);
    s2 = v0 + 0xF0;
loc_8002FEA0:
    v0 = lw(s2);
    if (v0 == 0) goto loc_8003056C;
    a0 = lw(v0);
    v1 = lw(v0 + 0x4);
    a0 <<= 3;
    v1 &= 0x7FFF;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    at = 0x80060000;                                    // Result = 80060000
    at += 0x6BFC;                                       // Result = 80066BFC
    at += a0;
    v1 = lw(at);
    v0 <<= 2;
    v0 += v1;
    v1 = lw(v0 + 0x4);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FEC);                               // Load from: gFirstSpriteLumpNum (80078014)
    v1 -= v0;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EC4);                               // Load from: gpSprites (80077EC4)
    v1 <<= 5;
    s0 = v1 + v0;
    a0 = s0;
    I_CacheTex();
    a0 = fp;                                            // Result = 1F800200
    a1 = 0;                                             // Result = 00000000
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F34);                               // Load from: gpViewPlayer (80077F34)
    a2 = 0;                                             // Result = 00000000
    v0 = lw(v0);
    t0 = lhu(s0 + 0xA);
    v1 = lw(v0 + 0x64);
    v0 = sp + 0x18;
    sw(v0, sp + 0x10);
    v0 = 0x70000000;                                    // Result = 70000000
    v1 &= v0;
    s3 = (v1 > 0);
    a3 = s3 << 5;
    a3 |= t0;
    LIBGPU_SetDrawMode();
    t2 = fp + 4;                                        // Result = 1F800204
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t3 = t1 + 4;
loc_8002FF78:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8002FFDC;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_800301C8;
    v0 = lw(a2);
    at = 0x80070000;                                    // Result = 80070000
    sw(s7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s5;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8002FFDC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80030090;
    if (v1 == a0) goto loc_8002FF78;
loc_80030000:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= s4;
    if (v0 == 0) goto loc_8002FF78;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= s1;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_8003006C;
    a3 = -1;                                            // Result = FFFFFFFF
loc_80030050:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_80030050;
loc_8003006C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8002FF78;
    goto loc_80030000;
loc_80030090:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t3;
loc_800300A0:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= s1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_800300F8;
    v1 = -1;                                            // Result = FFFFFFFF
loc_800300E0:
    v0 = lw(t2);
    t2 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_800300E0;
loc_800300F8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    {
        const bool bJump = (v1 == v0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_800301A4;
    }
    t0 = 0x80000000;                                    // Result = 80000000
    a3 = -1;                                            // Result = FFFFFFFF
loc_8003011C:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= s4;
    {
        const bool bJump = (v0 == 0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_800301A4;
    }
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= s1;
    v0 |= t0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == a3) goto loc_80030188;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003016C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003016C;
loc_80030188:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    {
        const bool bJump = (v1 != v0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_8003011C;
    }
loc_800301A4:
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x64;                                          // Result = 00000064
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = 0x66;                                          // Result = 00000066
    if (s3 == 0) goto loc_800301DC;
    goto loc_800301D4;
loc_800301C8:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_800300A0;
loc_800301D4:
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
loc_800301DC:
    v0 = lh(s2 + 0xA);
    v1 = lhu(s0);
    v0 += 0x80;
    v0 -= v1;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x208);                                 // Store to: 1F800208
    v0 = lh(s2 + 0xE);
    v1 = lhu(s0 + 0x2);
    v0 += 0xC7;
    v0 -= v1;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
    v0 = lhu(s0 + 0x4);
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = lhu(s0 + 0x6);
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
    v0 = lbu(s0 + 0x8);
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lhu(v0 + 0x7F7C);                              // Load from: g3dViewPaletteClutId (80077F7C)
    v1 = lbu(s0 + 0x9);
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20E);                                 // Store to: 1F80020E
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v1, at + 0x20D);                                 // Store to: 1F80020D
    v0 = lw(s2);
    v0 = lw(v0 + 0x4);
    v0 &= 0x8000;
    if (v0 == 0) goto loc_800302E8;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FAC);                               // Load from: gpCurLightsLumpEntry (80078054)
    v1 = lbu(a0);
    v0 = v1 << 2;
    v0 += v1;
    v0 >>= 3;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    v1 = lbu(a0 + 0x1);
    v0 = v1 << 2;
    v0 += v1;
    v0 >>= 3;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x205);                                 // Store to: 1F800205
    v1 = lbu(a0 + 0x2);
    v0 = v1 << 2;
    v0 += v1;
    v0 >>= 3;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x206);                                 // Store to: 1F800206
    goto loc_80030318;
loc_800302DC:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_80030468;
loc_800302E8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x7E8C);                              // Load from: gCurLightValR (80077E8C)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lbu(v1 - 0x7FCC);                              // Load from: gCurLightValG (80078034)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lbu(a0 + 0x7F70);                              // Load from: gCurLightValB (80077F70)
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v1, at + 0x205);                                 // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(a0, at + 0x206);                                 // Store to: 1F800206
loc_80030318:
    t2 = 0x1F800000;                                    // Result = 1F800000
    t2 += 0x204;                                        // Result = 1F800204
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t3 = t1 + 4;
loc_80030340:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_800303A4;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_800302DC;
    v0 = lw(a2);
    at = 0x80070000;                                    // Result = 80070000
    sw(s7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s5;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_800303A4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80030458;
    if (v1 == a0) goto loc_80030340;
loc_800303C8:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= s4;
    if (v0 == 0) goto loc_80030340;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= s1;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_80030434;
    a3 = -1;                                            // Result = FFFFFFFF
loc_80030418:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_80030418;
loc_80030434:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80030340;
    goto loc_800303C8;
loc_80030458:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t3;
loc_80030468:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= s1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_800304C0;
    v1 = -1;                                            // Result = FFFFFFFF
loc_800304A8:
    v0 = lw(t2);
    t2 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_800304A8;
loc_800304C0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003056C;
    t0 = 0x80000000;                                    // Result = 80000000
    a3 = -1;                                            // Result = FFFFFFFF
loc_800304E4:
    v0 = lw(gp + 0x5D8);                                // Load from: GPU_REG_GP1 (80077BB8)
    v0 = lw(v0);
    v0 &= s4;
    if (v0 == 0) goto loc_8003056C;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= s1;
    v0 |= t0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == a3) goto loc_80030550;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80030534:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5D4);                                // Load from: GPU_REG_GP0 (80077BB4)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80030534;
loc_80030550:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_800304E4;
loc_8003056C:
    s6++;
    v0 = (i32(s6) < 2);
    s2 += 0x10;
    if (v0 != 0) goto loc_8002FEA0;
    ra = lw(sp + 0x44);
    fp = lw(sp + 0x40);
    s7 = lw(sp + 0x3C);
    s6 = lw(sp + 0x38);
    s5 = lw(sp + 0x34);
    s4 = lw(sp + 0x30);
    s3 = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x48;
    return;
}

void R_Init() noexcept {
loc_800305B0:
    sp -= 0x20;
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    R_InitData();
    s0 = 0x80080000;                                    // Result = 80080000
    s0 += 0x6544;                                       // Result = 80086544
    s1 = s0 - 0x14;                                     // Result = gViewSinDiv16 (80086530)
    sw(0, s0);                                          // Store to: 80086544
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at + 0x6548);                                 // Store to: 80086548
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at + 0x654C);                                 // Store to: 8008654C
    a0 = s1;                                            // Result = gViewSinDiv16 (80086530)
    LIBGTE_SetTransMatrix();
    a0 = s1;                                            // Result = gViewSinDiv16 (80086530)
    v0 = 0x1000;                                        // Result = 00001000
    sh(0, s0 - 0x14);                                   // Store to: gViewSinDiv16 (80086530)
    sh(0, s0 - 0x12);                                   // Store to: gViewSinDiv16 + 2 (80086532) (80086532)
    sh(0, s0 - 0x10);                                   // Store to: gMinusViewCosDiv16 (80086534)
    sh(0, s0 - 0xE);                                    // Store to: gMinusViewCosDiv16 + 2 (80086536) (80086536)
    sh(v0, s0 - 0xC);                                   // Store to: 80086538
    sh(0, s0 - 0xA);                                    // Store to: 8008653A
    sh(0, s0 - 0x8);                                    // Store to: gViewCosDiv16 (8008653C)
    sh(0, s0 - 0x6);                                    // Store to: gViewCosDiv16 + 2 (8008653E) (8008653E)
    sh(0, s0 - 0x4);                                    // Store to: gViewSinDiv16_2 (80086540)
    LIBGTE_SetRotMatrix();
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void R_RenderPlayerView() noexcept {
loc_80030634:
    v0 = lw(gp + 0xC84);                                // Load from: gbRenderViewFullbright (80078264)
    sp -= 0x20;
    sw(ra, sp + 0x1C);
    sw(s0, sp + 0x18);
    if (v0 != 0) goto loc_80030660;
    v1 = lw(gp + 0xA88);                                // Load from: gpLightsLump (80078068)
    v0 = 0x80;                                          // Result = 00000080
    sw(v0, gp + 0x990);                                 // Store to: gCurLightValB (80077F70)
    sw(v0, gp + 0xA54);                                 // Store to: gCurLightValG (80078034)
    sw(v0, gp + 0x8AC);                                 // Store to: gCurLightValR (80077E8C)
    sw(v1, gp + 0xA74);                                 // Store to: gpCurLightsLumpEntry (80078054)
loc_80030660:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    v0 = v1 << 2;
    v0 += v1;
    v1 = v0 << 4;
    v1 -= v0;
    v1 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    v1 += v0;
    v0 = lw(v1 + 0x14);
    a1 = lw(v1);
    a3 = 0xFFFF0000;                                    // Result = FFFF0000
    sw(v1, gp + 0x954);                                 // Store to: gpViewPlayer (80077F34)
    t0 = lw(a1 + 0x24);
    v0 &= a3;
    sw(v0, gp + 0x90C);                                 // Store to: gViewZ (80077EEC)
    v0 = lw(v1);
    a1 = t0 >> 19;
    a1 <<= 2;
    a2 += a1;
    v0 = lw(v0);
    at = 0x80060000;                                    // Result = 80060000
    at += 0x7958;                                       // Result = FineSine[0] (80067958)
    at += a1;
    a1 = lw(at);
    v0 &= a3;
    sw(v0, gp + 0x900);                                 // Store to: gViewX (80077EE0)
    v0 = lw(v1);
    v1 = lw(a2);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 += 0x6530;                                       // Result = gViewSinDiv16 (80086530)
    sw(t0, gp + 0xCB4);                                 // Store to: gViewAngle (80078294)
    sw(a1, gp + 0xAD8);                                 // Store to: gViewSin (800780B8)
    v0 = lw(v0 + 0x4);
    a1 = u32(i32(a1) >> 4);
    sw(v1, gp + 0xABC);                                 // Store to: gViewCos (8007809C)
    sh(a1, a0);                                         // Store to: gViewSinDiv16 (80086530)
    at = 0x80080000;                                    // Result = 80080000
    sh(a1, at + 0x6540);                                // Store to: gViewSinDiv16_2 (80086540)
    v0 &= a3;
    sw(v0, gp + 0x904);                                 // Store to: gViewY (80077EE4)
    v0 = -v1;
    v0 = u32(i32(v0) >> 4);
    v1 = u32(i32(v1) >> 4);
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at + 0x6534);                                // Store to: gMinusViewCosDiv16 (80086534)
    at = 0x80080000;                                    // Result = 80080000
    sh(v1, at + 0x653C);                                // Store to: gViewCosDiv16 (8008653C)
    LIBGTE_SetRotMatrix();
    R_BSP();
    v0 = lw(gp + 0xA84);                                // Load from: gppEndDrawSubsector (80078064)
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 -= 0x6E4C;                                       // Result = gpDrawSubsectors[0] (800A91B4)
    v0 -= s0;
    v0 = u32(i32(v0) >> 2);
    sw(v0, gp + 0xB0C);                                 // Store to: gNumDrawSubsectors (800780EC)
    I_DrawPresent();
    v0 = lw(gp + 0xC14);                                // Load from: gbIsSkyVisible (800781F4)
    if (v0 == 0) goto loc_80030774;
    R_DrawSky();
loc_80030774:
    v1 = lw(gp + 0xA84);                                // Load from: gppEndDrawSubsector (80078064)
    v0 = s0 - 4;                                        // Result = gCheatSequenceBtns[6] (800A91B0)
    v1 -= 4;
    v0 = (v0 < v1);
    sw(v1, gp + 0xA84);                                 // Store to: gppEndDrawSubsector (80078064)
    s0 = 0xFF;                                          // Result = 000000FF
    if (v0 == 0) goto loc_8003089C;
loc_80030790:
    v0 = lw(gp + 0xA84);                                // Load from: gppEndDrawSubsector (80078064)
    t0 = lw(v0);
    v0 = lw(gp + 0xC84);                                // Load from: gbRenderViewFullbright (80078264)
    a1 = lw(t0);
    sw(a1, gp + 0xA2C);                                 // Store to: gpCurSector (8007800C)
    if (v0 == 0) goto loc_80030874;
    v1 = lh(a1 + 0x10);
    v0 = lw(gp + 0xA88);                                // Load from: gpLightsLump (80078068)
    a0 = lh(a1 + 0x12);
    v1 <<= 2;
    v1 += v0;
    sw(v1, gp + 0xA74);                                 // Store to: gpCurLightsLumpEntry (80078054)
    v0 = lbu(v1);
    mult(a0, v0);
    a0 = lh(a1 + 0x12);
    v0 = lo;
    a3 = u32(i32(v0) >> 8);
    sw(a3, gp + 0x8AC);                                 // Store to: gCurLightValR (80077E8C)
    v0 = lbu(v1 + 0x1);
    mult(a0, v0);
    a0 = lh(a1 + 0x12);
    v0 = lo;
    a2 = u32(i32(v0) >> 8);
    sw(a2, gp + 0xA54);                                 // Store to: gCurLightValG (80078034)
    v0 = lbu(v1 + 0x2);
    mult(a0, v0);
    a0 = lw(gp + 0x954);                                // Load from: gpViewPlayer (80077F34)
    v1 = lw(a0 + 0xE4);
    v0 = lo;
    a1 = u32(i32(v0) >> 8);
    sw(a1, gp + 0x990);                                 // Store to: gCurLightValB (80077F70)
    v0 = a3 + v1;
    if (v1 == 0) goto loc_80030874;
    sw(v0, gp + 0x8AC);                                 // Store to: gCurLightValR (80077E8C)
    v0 = (i32(v0) < 0x100);
    v1 = lw(a0 + 0xE4);
    a0 = lw(a0 + 0xE4);
    v1 += a2;
    a0 += a1;
    sw(v1, gp + 0xA54);                                 // Store to: gCurLightValG (80078034)
    sw(a0, gp + 0x990);                                 // Store to: gCurLightValB (80077F70)
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(v1) < 0x100);
        if (bJump) goto loc_8003085C;
    }
    sw(s0, gp + 0x8AC);                                 // Store to: gCurLightValR (80077E8C)
loc_8003085C:
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a0) < 0x100);
        if (bJump) goto loc_80030868;
    }
    sw(s0, gp + 0xA54);                                 // Store to: gCurLightValG (80078034)
loc_80030868:
    if (v0 != 0) goto loc_80030874;
    sw(s0, gp + 0x990);                                 // Store to: gCurLightValB (80077F70)
loc_80030874:
    a0 = t0;
    R_DrawSubsector();
    v1 = lw(gp + 0xA84);                                // Load from: gppEndDrawSubsector (80078064)
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x6E50;                                       // Result = gCheatSequenceBtns[6] (800A91B0)
    v1 -= 4;
    v0 = (v0 < v1);
    sw(v1, gp + 0xA84);                                 // Store to: gppEndDrawSubsector (80078064)
    if (v0 != 0) goto loc_80030790;
loc_8003089C:
    R_DrawWeapon();
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    a0 = s0;                                            // Result = 1F800200
    a1 = sp + 0x10;
    sh(0, sp + 0x10);
    sh(0, sp + 0x12);
    sh(0, sp + 0x14);
    sh(0, sp + 0x16);
    LIBGPU_SetTexWindow();
    s0 += 4;                                            // Result = 1F800204
    t3 = 0xFF0000;                                      // Result = 00FF0000
    t3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t8 = t7 & t3;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_80030904:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8003096C;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_80030A30;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(t7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t8;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003096C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80030A20;
    if (v1 == a0) goto loc_80030904;
loc_80030990:
    v0 = lw(gp + 0x5E0);                                // Load from: GPU_REG_GP1 (80077BC0)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_80030904;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t3;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_800309FC;
    a3 = -1;                                            // Result = FFFFFFFF
loc_800309E0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5DC);                                // Load from: GPU_REG_GP0 (80077BBC)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_800309E0;
loc_800309FC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80030904;
    goto loc_80030990;
loc_80030A20:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_80030A30:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_80030A90;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80030A78:
    v0 = lw(s0);
    s0 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80030A78;
loc_80030A90:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_80030B44;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_80030ABC:
    v0 = lw(gp + 0x5E0);                                // Load from: GPU_REG_GP1 (80077BC0)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_80030B44;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_80030B28;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80030B0C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x5DC);                                // Load from: GPU_REG_GP0 (80077BBC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80030B0C;
loc_80030B28:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80030ABC;
loc_80030B44:
    ra = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x20;
    return;
}

void R_SlopeDiv() noexcept {
    v0 = (a1 < 0x200);
    {
        const bool bJump = (v0 != 0)
        v0 = 0x800;                                     // Result = 00000800
        if (bJump) goto loc_80030B98;
    }
    v1 = a0 << 3;
    v0 = a1 >> 8;
    divu(v1, v0);
    if (v0 != 0) goto loc_80030B7C;
    _break(0x1C00);
loc_80030B7C:
    v1 = lo;
    v0 = (v1 < 0x801);
    {
        const bool bJump = (v0 != 0)
        v0 = v1;
        if (bJump) goto loc_80030B98;
    }
    v1 = 0x800;                                         // Result = 00000800
    v0 = v1;                                            // Result = 00000800
loc_80030B98:
    return;
}

void R_PointToAngle2() noexcept {
loc_80030BA0:
    a2 -= a0;
    a3 -= a1;
    if (a2 != 0) goto loc_80030BB4;
    v0 = 0;                                             // Result = 00000000
    if (a3 == 0) goto loc_80030EAC;
loc_80030BB4:
    if (i32(a2) < 0) goto loc_80030D30;
    v0 = (i32(a3) < i32(a2));
    if (i32(a3) < 0) goto loc_80030C68;
    {
        const bool bJump = (v0 == 0)
        v0 = (a2 < 0x200);
        if (bJump) goto loc_80030C24;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = 0x800;                                     // Result = 00000800
        if (bJump) goto loc_80030C08;
    }
    v1 = a3 << 3;
    v0 = a2 >> 8;
    divu(v1, v0);
    if (v0 != 0) goto loc_80030BEC;
    _break(0x1C00);
loc_80030BEC:
    v1 = lo;
    v0 = (v1 < 0x801);
    {
        const bool bJump = (v0 != 0)
        v0 = v1;
        if (bJump) goto loc_80030C08;
    }
    v1 = 0x800;                                         // Result = 00000800
    v0 = v1;                                            // Result = 00000800
loc_80030C08:
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x1958;                                       // Result = TanToAngle[0] (80071958)
    at += v0;
    v0 = lw(at);
    goto loc_80030EAC;
loc_80030C24:
    v0 = (a3 < 0x200);
    v1 = 0x800;                                         // Result = 00000800
    if (v0 != 0) goto loc_80030C60;
    v1 = a2 << 3;
    v0 = a3 >> 8;
    divu(v1, v0);
    if (v0 != 0) goto loc_80030C48;
    _break(0x1C00);
loc_80030C48:
    v1 = lo;
    v0 = (v1 < 0x801);
    {
        const bool bJump = (v0 != 0)
        v0 = 0x3FFF0000;                                // Result = 3FFF0000
        if (bJump) goto loc_80030E90;
    }
    v1 = 0x800;                                         // Result = 00000800
loc_80030C60:
    v0 = 0x3FFF0000;                                    // Result = 3FFF0000
    goto loc_80030E90;
loc_80030C68:
    a3 = -a3;
    v0 = (i32(a3) < i32(a2));
    {
        const bool bJump = (v0 == 0)
        v0 = (a2 < 0x200);
        if (bJump) goto loc_80030CD0;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = 0x800;                                     // Result = 00000800
        if (bJump) goto loc_80030CB4;
    }
    v1 = a3 << 3;
    v0 = a2 >> 8;
    divu(v1, v0);
    if (v0 != 0) goto loc_80030C98;
    _break(0x1C00);
loc_80030C98:
    v1 = lo;
    v0 = (v1 < 0x801);
    if (v0 != 0) goto loc_80030CB0;
    v1 = 0x800;                                         // Result = 00000800
loc_80030CB0:
    v0 = v1;
loc_80030CB4:
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x1958;                                       // Result = TanToAngle[0] (80071958)
    at += v0;
    v0 = lw(at);
    v0 = -v0;
    goto loc_80030EAC;
loc_80030CD0:
    v0 = (a3 < 0x200);
    {
        const bool bJump = (v0 != 0)
        v0 = 0x800;                                     // Result = 00000800
        if (bJump) goto loc_80030D10;
    }
    v1 = a2 << 3;
    v0 = a3 >> 8;
    divu(v1, v0);
    if (v0 != 0) goto loc_80030CF4;
    _break(0x1C00);
loc_80030CF4:
    v1 = lo;
    v0 = (v1 < 0x801);
    if (v0 != 0) goto loc_80030D0C;
    v1 = 0x800;                                         // Result = 00000800
loc_80030D0C:
    v0 = v1;
loc_80030D10:
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x1958;                                       // Result = TanToAngle[0] (80071958)
    at += v0;
    v1 = lw(at);
    v0 = 0xC0000000;                                    // Result = C0000000
    v0 += v1;
    goto loc_80030EAC;
loc_80030D30:
    a2 = -a2;
    if (i32(a3) < 0) goto loc_80030DE4;
    v0 = (i32(a3) < i32(a2));
    {
        const bool bJump = (v0 == 0)
        v0 = (a2 < 0x200);
        if (bJump) goto loc_80030D84;
    }
    v1 = 0x800;                                         // Result = 00000800
    if (v0 != 0) goto loc_80030D7C;
    v1 = a3 << 3;
    v0 = a2 >> 8;
    divu(v1, v0);
    if (v0 != 0) goto loc_80030D64;
    _break(0x1C00);
loc_80030D64:
    v1 = lo;
    v0 = (v1 < 0x801);
    {
        const bool bJump = (v0 != 0)
        v0 = 0x7FFF0000;                                // Result = 7FFF0000
        if (bJump) goto loc_80030E90;
    }
    v1 = 0x800;                                         // Result = 00000800
loc_80030D7C:
    v0 = 0x7FFF0000;                                    // Result = 7FFF0000
    goto loc_80030E90;
loc_80030D84:
    v0 = (a3 < 0x200);
    {
        const bool bJump = (v0 != 0)
        v0 = 0x800;                                     // Result = 00000800
        if (bJump) goto loc_80030DC4;
    }
    v1 = a2 << 3;
    v0 = a3 >> 8;
    divu(v1, v0);
    if (v0 != 0) goto loc_80030DA8;
    _break(0x1C00);
loc_80030DA8:
    v1 = lo;
    v0 = (v1 < 0x801);
    if (v0 != 0) goto loc_80030DC0;
    v1 = 0x800;                                         // Result = 00000800
loc_80030DC0:
    v0 = v1;
loc_80030DC4:
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x1958;                                       // Result = TanToAngle[0] (80071958)
    at += v0;
    v1 = lw(at);
    v0 = 0x40000000;                                    // Result = 40000000
    v0 += v1;
    goto loc_80030EAC;
loc_80030DE4:
    a3 = -a3;
    v0 = (i32(a3) < i32(a2));
    {
        const bool bJump = (v0 == 0)
        v0 = (a2 < 0x200);
        if (bJump) goto loc_80030E50;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = 0x800;                                     // Result = 00000800
        if (bJump) goto loc_80030E30;
    }
    v1 = a3 << 3;
    v0 = a2 >> 8;
    divu(v1, v0);
    if (v0 != 0) goto loc_80030E14;
    _break(0x1C00);
loc_80030E14:
    v1 = lo;
    v0 = (v1 < 0x801);
    if (v0 != 0) goto loc_80030E2C;
    v1 = 0x800;                                         // Result = 00000800
loc_80030E2C:
    v0 = v1;
loc_80030E30:
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x1958;                                       // Result = TanToAngle[0] (80071958)
    at += v0;
    v1 = lw(at);
    v0 = 0x80000000;                                    // Result = 80000000
    v0 = v1 - v0;
    goto loc_80030EAC;
loc_80030E50:
    v0 = (a3 < 0x200);
    v1 = 0x800;                                         // Result = 00000800
    if (v0 != 0) goto loc_80030E8C;
    v1 = a2 << 3;
    v0 = a3 >> 8;
    divu(v1, v0);
    if (v0 != 0) goto loc_80030E74;
    _break(0x1C00);
loc_80030E74:
    v1 = lo;
    v0 = (v1 < 0x801);
    {
        const bool bJump = (v0 != 0)
        v0 = 0xBFFF0000;                                // Result = BFFF0000
        if (bJump) goto loc_80030E90;
    }
    v1 = 0x800;                                         // Result = 00000800
loc_80030E8C:
    v0 = 0xBFFF0000;                                    // Result = BFFF0000
loc_80030E90:
    v1 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x1958;                                       // Result = TanToAngle[0] (80071958)
    at += v1;
    v1 = lw(at);
    v0 |= 0xFFFF;
    v0 -= v1;
loc_80030EAC:
    return;
}

void R_PointOnSide() noexcept {
    a3 = lw(a2 + 0x8);
    if (a3 != 0) goto loc_80030EF0;
    v0 = lw(a2);
    v0 = (i32(v0) < i32(a0));
    if (v0 != 0) goto loc_80030EE4;
    v0 = lw(a2 + 0xC);
    v0 = (i32(v0) > 0);
    goto loc_80030F54;
loc_80030EE4:
    v0 = lw(a2 + 0xC);
    v0 >>= 31;
    goto loc_80030F54;
loc_80030EF0:
    v1 = lw(a2 + 0xC);
    if (v1 != 0) goto loc_80030F1C;
    v0 = lw(a2 + 0x4);
    v0 = (i32(v0) < i32(a1));
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a3) > 0);
        if (bJump) goto loc_80030F54;
    }
    v0 = a3 >> 31;
    goto loc_80030F54;
loc_80030F1C:
    v0 = lw(a2);
    v1 = u32(i32(v1) >> 16);
    v0 = a0 - v0;
    v0 = u32(i32(v0) >> 16);
    mult(v1, v0);
    v1 = u32(i32(a3) >> 16);
    v0 = lw(a2 + 0x4);
    a0 = lo;
    v0 = a1 - v0;
    v0 = u32(i32(v0) >> 16);
    mult(v0, v1);
    v0 = lo;
    v0 = (i32(v0) < i32(a0));
    v0 ^= 1;
loc_80030F54:
    return;
}

void R_PointInSubsector() noexcept {
loc_80030F5C:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E48);                               // Load from: gNumBspNodes (800781B8)
    t0 = a0;
    if (v0 != 0) goto loc_80030F80;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F40);                               // Load from: gpSubsectors (80077F40)
    goto loc_80031080;
loc_80030F80:
    v1 = v0 - 1;
    v0 = v1 & 0x8000;
    {
        const bool bJump = (v0 != 0)
        v0 = 0xFFFF0000;                                // Result = FFFF0000
        if (bJump) goto loc_80031068;
    }
    t1 = 0x80070000;                                    // Result = 80070000
    t1 = lw(t1 + 0x7EA4);                               // Load from: gpBspNodes (80077EA4)
    v0 = v1 << 3;
loc_80030F9C:
    v0 -= v1;
    v0 <<= 3;
    a2 = v0 + t1;
    a3 = lw(a2 + 0x8);
    if (a3 != 0) goto loc_80030FE4;
    v0 = lw(a2);
    v0 = (i32(v0) < i32(t0));
    if (v0 != 0) goto loc_80030FD8;
    v0 = lw(a2 + 0xC);
    v0 = (i32(v0) > 0);
    goto loc_80031048;
loc_80030FD8:
    v0 = lw(a2 + 0xC);
    v0 >>= 31;
    goto loc_80031048;
loc_80030FE4:
    v1 = lw(a2 + 0xC);
    if (v1 != 0) goto loc_80031010;
    v0 = lw(a2 + 0x4);
    v0 = (i32(v0) < i32(a1));
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(a3) > 0);
        if (bJump) goto loc_80031048;
    }
    v0 = a3 >> 31;
    goto loc_80031048;
loc_80031010:
    v0 = lw(a2);
    v1 = u32(i32(v1) >> 16);
    v0 = t0 - v0;
    v0 = u32(i32(v0) >> 16);
    mult(v1, v0);
    v0 = u32(i32(a3) >> 16);
    v1 = lw(a2 + 0x4);
    a0 = lo;
    v1 = a1 - v1;
    v1 = u32(i32(v1) >> 16);
    mult(v1, v0);
    v0 = lo;
    v0 = (i32(v0) < i32(a0));
    v0 ^= 1;
loc_80031048:
    v0 <<= 2;
    v0 += a2;
    v1 = lw(v0 + 0x30);
    v0 = v1 & 0x8000;
    {
        const bool bJump = (v0 == 0)
        v0 = v1 << 3;
        if (bJump) goto loc_80030F9C;
    }
    v0 = 0xFFFF0000;                                    // Result = FFFF0000
loc_80031068:
    v0 |= 0x7FFF;                                       // Result = FFFF7FFF
    v0 &= v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F40);                               // Load from: gpSubsectors (80077F40)
    v0 <<= 4;
    v0 += v1;
loc_80031080:
    return;
}

void D_mystrlen() noexcept {
    v1 = 0;                                             // Result = 00000000
    if (a0 == 0) goto loc_800310BC;
    v0 = lbu(a0);
    a0++;
    if (v0 == 0) goto loc_800310C0;
loc_800310A0:
    v1++;
    v0 = lbu(a0);
    a0++;
    if (v0 != 0) goto loc_800310A0;
    goto loc_800310C0;
loc_800310BC:
    v1 = -1;                                            // Result = FFFFFFFF
loc_800310C0:
    v0 = v1;
    return;
}

void D_vsprintf() noexcept {
loc_800310C8:
    v0 = lbu(a1);
    t6 = a0;
    if (v0 == 0) goto loc_80031384;
    t5 = 0x75;                                          // Result = 00000075
loc_800310DC:
    v1 = lbu(a1);
    v0 = 0x25;                                          // Result = 00000025
    {
        const bool bJump = (v1 == v0)
        v0 = 0x30;                                      // Result = 00000030
        if (bJump) goto loc_800310F8;
    }
    v0 = lbu(a1);
    a1++;
    goto loc_80031180;
loc_800310F8:
    a1++;
    v1 = lbu(a1);
    t4 = 0x20;                                          // Result = 00000020
    if (v1 != v0) goto loc_80031114;
    t4 = 0x30;                                          // Result = 00000030
    a1++;
loc_80031114:
    v0 = lbu(a1);
    t2 = 0;                                             // Result = 00000000
    goto loc_8003113C;
loc_80031120:
    v0 = lbu(a1);
    a1++;
    v1 += t2;
    v1 <<= 1;
    v1 += v0;
    v0 = lbu(a1);
    t2 = v1 - 0x30;
loc_8003113C:
    v0 -= 0x30;
    v0 = (v0 < 0xA);
    v1 = t2 << 2;
    if (v0 != 0) goto loc_80031120;
    v1 = lbu(a1);
    v0 = 0x6C;                                          // Result = 0000006C
    a3 = 0;                                             // Result = 00000000
    if (v1 != v0) goto loc_80031168;
    a3 = 1;                                             // Result = 00000001
    a1++;
    v1 = lbu(a1);
loc_80031168:
    v0 = 0x63;                                          // Result = 00000063
    {
        const bool bJump = (v1 != v0)
        v0 = 0x73;                                      // Result = 00000073
        if (bJump) goto loc_8003118C;
    }
    v0 = lbu(a2);
    a2 += 4;
    a1++;
loc_80031180:
    sb(v0, a0);
    a0++;
    goto loc_80031374;
loc_8003118C:
    if (v1 != v0) goto loc_80031228;
    t1 = lw(a2);
    a2 += 4;
    a3 = 0;                                             // Result = 00000000
    if (t1 == 0) goto loc_800311D0;
    v0 = lbu(t1);
    v1 = t1 + 1;
    if (v0 == 0) goto loc_800311D4;
loc_800311B4:
    a3++;
    v0 = lbu(v1);
    v1++;
    if (v0 != 0) goto loc_800311B4;
    t0 = a3;
    goto loc_800311E4;
loc_800311D0:
    a3 = -1;                                            // Result = FFFFFFFF
loc_800311D4:
    t0 = a3;
    goto loc_800311E4;
loc_800311DC:
    sb(t4, a0);
    a0++;
loc_800311E4:
    v0 = t2;
    v0 = (i32(t0) < i32(v0));
    t2--;
    if (v0 != 0) goto loc_800311DC;
    v0 = lbu(t1);
    if (v0 == 0) goto loc_80031370;
loc_80031204:
    v0 = lbu(t1);
    t1++;
    sb(v0, a0);
    v0 = lbu(t1);
    a0++;
    if (v0 != 0) goto loc_80031204;
    a1++;
    goto loc_80031374;
loc_80031228:
    v0 = 0x6F;                                          // Result = 0000006F
    {
        const bool bJump = (v1 != v0)
        v0 = 0x78;                                      // Result = 00000078
        if (bJump) goto loc_8003123C;
    }
    t3 = 8;                                             // Result = 00000008
    goto loc_80031250;
loc_8003123C:
    t3 = 0x10;                                          // Result = 00000010
    if (v1 == v0) goto loc_80031250;
    v0 = 0x58;                                          // Result = 00000058
    {
        const bool bJump = (v1 != v0)
        v0 = 0x69;                                      // Result = 00000069
        if (bJump) goto loc_8003125C;
    }
loc_80031250:
    a3 = lw(a2);
    a2 += 4;
    goto loc_800312B4;
loc_8003125C:
    t3 = 0xA;                                           // Result = 0000000A
    if (v1 == v0) goto loc_80031278;
    v0 = 0x64;                                          // Result = 00000064
    if (v1 == v0) goto loc_80031278;
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 != t5) goto loc_8003138C;
loc_80031278:
    v1 = lw(a2);
    a2 += 4;
    if (i32(v1) >= 0) goto loc_800312B0;
    v0 = lbu(a1);
    {
        const bool bJump = (v0 == t5)
        v0 = 0x2D;                                      // Result = 0000002D
        if (bJump) goto loc_800312B0;
    }
    sb(v0, a0);
    a0++;
    a3 = -v1;
    if (t2 == 0) goto loc_800312B4;
    t2--;
    goto loc_800312B4;
loc_800312B0:
    a3 = v1;
loc_800312B4:
    t0 = 0;                                             // Result = 00000000
loc_800312B8:
    v1 = t0 + a0;
    if (t0 == 0) goto loc_800312FC;
    t1 = a0;
loc_800312C4:
    v0 = lbu(v1 - 0x1);
    sb(v0, v1);
    v1--;
    if (v1 != t1) goto loc_800312C4;
    if (t0 == 0) goto loc_800312FC;
    if (t2 == 0) goto loc_800312FC;
    if (a3 != 0) goto loc_800312FC;
    sb(t4, a0);
    goto loc_80031348;
loc_800312FC:
    divu(a3, t3);
    if (t3 != 0) goto loc_8003130C;
    _break(0x1C00);
loc_8003130C:
    v0 = hi;
    sb(v0, a0);
    v1 = lbu(a0);
    v0 = (v1 < 0xA);
    {
        const bool bJump = (v0 != 0)
        v0 = v1 + 0x30;
        if (bJump) goto loc_80031330;
    }
    v0 = v1 + 0x37;
loc_80031330:
    sb(v0, a0);
    divu(a3, t3);
    if (t3 != 0) goto loc_80031344;
    _break(0x1C00);
loc_80031344:
    a3 = lo;
loc_80031348:
    t0++;
    if (t2 == 0) goto loc_80031354;
    t2--;
loc_80031354:
    if (a3 != 0) goto loc_800312B8;
    if (t2 != 0) goto loc_800312B8;
    if (t0 == 0) goto loc_800312B8;
    a0 += t0;
loc_80031370:
    a1++;
loc_80031374:
    v0 = lbu(a1);
    if (v0 != 0) goto loc_800310DC;
loc_80031384:
    sb(0, a0);
    v0 = t6 - a0;
loc_8003138C:
    return;
}

void W_Init() noexcept {
loc_80031394:
    sp -= 0x38;
    sw(ra, sp + 0x30);
    InitOpenFileSlots();
    a0 = 7;                                             // Result = 00000007
    OpenFile();
    a0 = v0;
    a1 = sp + 0x10;
    sw(v0, gp + 0xC74);                                 // Store to: gMainWadFileIdx (80078254)
    a2 = 0xC;                                           // Result = 0000000C
    ReadFile();
    a0 = sp + 0x10;
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7BE8;                                       // Result = STR_IWAD[0] (80077BE8)
    a2 = 4;                                             // Result = 00000004
    D_strncasecmp();
    if (v0 == 0) goto loc_800313EC;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1264;                                       // Result = STR_W_Init_InvalidIWADId_Err[0] (80011264)
    I_Error();
loc_800313EC:
    a2 = 1;                                             // Result = 00000001
    a3 = 0;                                             // Result = 00000000
    v0 = lw(sp + 0x14);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    sw(v0, gp + 0xC0C);                                 // Store to: gNumLumps (800781EC)
    a1 = v0 << 4;
    Z_Malloc2();
    a0 = lw(gp + 0xC74);                                // Load from: gMainWadFileIdx (80078254)
    a1 = lw(sp + 0x18);
    sw(v0, gp + 0xBE4);                                 // Store to: gpLumpInfo (800781C4)
    a2 = 0;                                             // Result = 00000000
    SeekAndTellFile();
    a0 = lw(gp + 0xC74);                                // Load from: gMainWadFileIdx (80078254)
    a2 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    a1 = lw(gp + 0xBE4);                                // Load from: gpLumpInfo (800781C4)
    a2 <<= 4;
    ReadFile();
    a2 = 1;                                             // Result = 00000001
    a3 = 0;                                             // Result = 00000000
    a1 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a1 <<= 2;
    Z_Malloc2();
    a2 = 1;                                             // Result = 00000001
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a1 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    sw(v0, gp + 0xC5C);                                 // Store to: gpLumpCache (8007823C)
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2();
    a0 = lw(gp + 0xC5C);                                // Load from: gpLumpCache (8007823C)
    a2 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    a1 = 0;                                             // Result = 00000000
    sw(v0, gp + 0xD10);                                 // Store to: gpbIsMainWadLump (800782F0)
    a2 <<= 2;
    D_memset();
    a0 = lw(gp + 0xD10);                                // Load from: gpbIsMainWadLump (800782F0)
    a2 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    a1 = 0;                                             // Result = 00000000
    D_memset();
    ra = lw(sp + 0x30);
    sp += 0x38;
    return;
}

void W_CheckNumForName() noexcept {
    sp -= 0x10;
    a1 = sp;
    a2 = sp + 8;
    sw(0, sp);
    sw(0, sp + 0x4);
loc_800314B8:
    v0 = lbu(a0);
    v1 = v0;
    if (v0 == 0) goto loc_800314F0;
    v0 = v1 - 0x61;
    v0 = (v0 < 0x1A);
    a0++;
    if (v0 == 0) goto loc_800314DC;
    v1 -= 0x20;
loc_800314DC:
    sb(v1, a1);
    a1++;
    v0 = (i32(a1) < i32(a2));
    if (v0 != 0) goto loc_800314B8;
loc_800314F0:
    a3 = lw(sp);
    a2 = lw(sp + 0x4);
    v1 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    v0 = lw(gp + 0xBE4);                                // Load from: gpLumpInfo (800781C4)
    a0 = 0;                                             // Result = 00000000
    if (i32(v1) <= 0) goto loc_80031548;
    t0 = -0x81;                                         // Result = FFFFFF7F
    a1 = v1;
    v1 = v0 + 8;
loc_80031514:
    v0 = lw(v1 + 0x4);
    if (v0 != a2) goto loc_80031538;
    v0 = lw(v1);
    v0 &= t0;
    {
        const bool bJump = (v0 == a3)
        v0 = a0;
        if (bJump) goto loc_8003154C;
    }
loc_80031538:
    a0++;
    v0 = (i32(a0) < i32(a1));
    v1 += 0x10;
    if (v0 != 0) goto loc_80031514;
loc_80031548:
    v0 = -1;                                            // Result = FFFFFFFF
loc_8003154C:
    sp += 0x10;
    return;
}

void W_GetNumForName() noexcept {
loc_80031558:
    sp -= 0x28;
    a1 = a0;
    a0 = sp + 0x10;
    a2 = a1;
    a3 = sp + 0x18;
    sw(ra, sp + 0x20);
    sw(0, sp + 0x10);
    sw(0, sp + 0x14);
loc_80031578:
    v0 = lbu(a2);
    v1 = v0;
    if (v0 == 0) goto loc_800315B0;
    v0 = v1 - 0x61;
    v0 = (v0 < 0x1A);
    a2++;
    if (v0 == 0) goto loc_8003159C;
    v1 -= 0x20;
loc_8003159C:
    sb(v1, a0);
    a0++;
    v0 = (i32(a0) < i32(a3));
    if (v0 != 0) goto loc_80031578;
loc_800315B0:
    t0 = lw(sp + 0x10);
    a3 = lw(sp + 0x14);
    v1 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    v0 = lw(gp + 0xBE4);                                // Load from: gpLumpInfo (800781C4)
    a0 = 0;                                             // Result = 00000000
    if (i32(v1) <= 0) goto loc_80031608;
    t1 = -0x81;                                         // Result = FFFFFF7F
    a2 = v1;
    v1 = v0 + 8;
loc_800315D4:
    v0 = lw(v1 + 0x4);
    if (v0 != a3) goto loc_800315F8;
    v0 = lw(v1);
    v0 &= t1;
    if (v0 == t0) goto loc_80031620;
loc_800315F8:
    a0++;
    v0 = (i32(a0) < i32(a2));
    v1 += 0x10;
    if (v0 != 0) goto loc_800315D4;
loc_80031608:
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003160C:
    v0 = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 == v0)
        v0 = v1;
        if (bJump) goto loc_80031628;
    }
    goto loc_80031638;
loc_80031620:
    v1 = a0;
    goto loc_8003160C;
loc_80031628:
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1284;                                       // Result = STR_W_GetNumForName_NotFound_Err[0] (80011284)
    I_Error();
loc_80031638:
    ra = lw(sp + 0x20);
    sp += 0x28;
    return;
}

void W_LumpLength() noexcept {
loc_80031648:
    v0 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    v0 = (i32(s0) < i32(v0));
    sw(ra, sp + 0x14);
    if (v0 != 0) goto loc_80031674;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x12A4;                                       // Result = STR_W_LumpLength_OutOfBounds_Err[0] (800112A4)
    a1 = s0;
    I_Error();
loc_80031674:
    v1 = lw(gp + 0xBE4);                                // Load from: gpLumpInfo (800781C4)
    v0 = s0 << 4;
    v0 += v1;
    v0 = lw(v0 + 0x4);
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void W_ReadLump() noexcept {
    v0 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    sp -= 0x38;
    sw(s0, sp + 0x20);
    s0 = a0;
    sw(s3, sp + 0x2C);
    s3 = a1;
    sw(s2, sp + 0x28);
    s2 = a2;
    sw(ra, sp + 0x30);
    v0 = (i32(s0) < i32(v0));
    sw(s1, sp + 0x24);
    if (v0 != 0) goto loc_800316D8;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x12C4;                                       // Result = STR_W_ReadLump_InvalidLumpIdx_Err[0] (800112C4)
    a1 = s0;
    I_Error();
loc_800316D8:
    v1 = lw(gp + 0xBE4);                                // Load from: gpLumpInfo (800781C4)
    v0 = s0 << 4;
    s1 = v0 + v1;
    if (s2 == 0) goto loc_80031764;
    v0 = lbu(s1 + 0x8);
    v0 &= 0x80;
    if (v0 == 0) goto loc_80031764;
    a2 = 1;                                             // Result = 00000001
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a1 = lw(s1 + 0x4);
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2_b();
    a2 = 0;                                             // Result = 00000000
    a0 = lw(gp + 0xC74);                                // Load from: gMainWadFileIdx (80078254)
    a1 = lw(s1);
    s0 = v0;
    SeekAndTellFile();
    a1 = s0;
    v0 = lw(s1 + 0x10);
    a2 = lw(s1);
    a0 = lw(gp + 0xC74);                                // Load from: gMainWadFileIdx (80078254)
    a2 = v0 - a2;
    ReadFile();
    a0 = s0;
    a1 = s3;
    decode();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a1 = s0;
    Z_Free2();
    goto loc_8003178C;
loc_80031764:
    a0 = lw(gp + 0xC74);                                // Load from: gMainWadFileIdx (80078254)
    a1 = lw(s1);
    a2 = 0;                                             // Result = 00000000
    SeekAndTellFile();
    a1 = s3;
    v0 = lw(s1 + 0x10);
    a2 = lw(s1);
    a0 = lw(gp + 0xC74);                                // Load from: gMainWadFileIdx (80078254)
    a2 = v0 - a2;
    ReadFile();
loc_8003178C:
    ra = lw(sp + 0x30);
    s3 = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x38;
    return;
}

void W_CacheLumpNum() noexcept {
loc_800317AC:
    v0 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    sp -= 0x48;
    sw(s2, sp + 0x38);
    s2 = a0;
    sw(s1, sp + 0x34);
    s1 = a1;
    sw(s4, sp + 0x40);
    s4 = a2;
    sw(ra, sp + 0x44);
    sw(s3, sp + 0x3C);
    v0 = (s2 < v0);
    sw(s0, sp + 0x30);
    if (v0 != 0) goto loc_800317F0;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x12E0;                                       // Result = STR_W_CacheLumpNum_InvalidLumpIdx_Err[0] (800112E0)
    a1 = s2;
    I_Error();
loc_800317F0:
    v0 = lw(gp + 0xC5C);                                // Load from: gpLumpCache (8007823C)
    s0 = s2 << 2;
    v0 += s0;
    v0 = lw(v0);
    if (v0 != 0) goto loc_800319B0;
    v0 = lw(gp + 0x604);                                // Load from: gbIsLevelDataCached (80077BE4)
    if (v0 == 0) goto loc_8003182C;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1300;                                       // Result = STR_CacheMissOnLump_Msg[0] (80011300)
    a1 = s2;
    I_Error();
loc_8003182C:
    a2 = s1;
    if (s4 == 0) goto loc_80031858;
    v1 = s2 << 4;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v0 = lw(gp + 0xBE4);                                // Load from: gpLumpInfo (800781C4)
    a3 = lw(gp + 0xC5C);                                // Load from: gpLumpCache (8007823C)
    v1 += v0;
    a1 = lw(v1 + 0x4);
    a3 += s0;
    goto loc_80031880;
loc_80031858:
    v0 = s2 << 4;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v1 = lw(gp + 0xBE4);                                // Load from: gpLumpInfo (800781C4)
    a3 = lw(gp + 0xC5C);                                // Load from: gpLumpCache (8007823C)
    v0 += v1;
    v1 = lw(v0 + 0x10);
    a1 = lw(v0);
    a3 += s0;
    a1 = v1 - a1;
loc_80031880:
    Z_Malloc2();
    v0 = s2 << 2;
    a0 = lw(gp + 0xC5C);                                // Load from: gpLumpCache (8007823C)
    v1 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    v0 += a0;
    v1 = (i32(s2) < i32(v1));
    s3 = lw(v0);
    if (v1 != 0) goto loc_800318B8;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x12C4;                                       // Result = STR_W_ReadLump_InvalidLumpIdx_Err[0] (800112C4)
    a1 = s2;
    I_Error();
loc_800318B8:
    v1 = lw(gp + 0xBE4);                                // Load from: gpLumpInfo (800781C4)
    v0 = s2 << 4;
    s1 = v0 + v1;
    if (s4 == 0) goto loc_80031944;
    v0 = lbu(s1 + 0x8);
    v0 &= 0x80;
    if (v0 == 0) goto loc_80031944;
    a2 = 1;                                             // Result = 00000001
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a1 = lw(s1 + 0x4);
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2_b();
    a2 = 0;                                             // Result = 00000000
    a0 = lw(gp + 0xC74);                                // Load from: gMainWadFileIdx (80078254)
    a1 = lw(s1);
    s0 = v0;
    SeekAndTellFile();
    a1 = s0;
    v0 = lw(s1 + 0x10);
    a2 = lw(s1);
    a0 = lw(gp + 0xC74);                                // Load from: gMainWadFileIdx (80078254)
    a2 = v0 - a2;
    ReadFile();
    a0 = s0;
    a1 = s3;
    decode();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a1 = s0;
    Z_Free2();
    goto loc_8003196C;
loc_80031944:
    a0 = lw(gp + 0xC74);                                // Load from: gMainWadFileIdx (80078254)
    a1 = lw(s1);
    a2 = 0;                                             // Result = 00000000
    SeekAndTellFile();
    a1 = s3;
    v0 = lw(s1 + 0x10);
    a2 = lw(s1);
    a0 = lw(gp + 0xC74);                                // Load from: gMainWadFileIdx (80078254)
    a2 = v0 - a2;
    ReadFile();
loc_8003196C:
    v0 = lw(gp + 0xBE4);                                // Load from: gpLumpInfo (800781C4)
    v1 = s2 << 4;
    v1 += v0;
    v0 = lbu(v1 + 0x8);
    v0 &= 0x80;
    v1 = 1;                                             // Result = 00000001
    if (v0 == 0) goto loc_800319A0;
    v0 = lw(gp + 0xD10);                                // Load from: gpbIsMainWadLump (800782F0)
    v0 += s2;
    sb(s4, v0);
    goto loc_800319B0;
loc_800319A0:
    v0 = lw(gp + 0xD10);                                // Load from: gpbIsMainWadLump (800782F0)
    v0 += s2;
    sb(v1, v0);
loc_800319B0:
    v1 = lw(gp + 0xC5C);                                // Load from: gpLumpCache (8007823C)
    v0 = s2 << 2;
    v0 += v1;
    v0 = lw(v0);
    ra = lw(sp + 0x44);
    s4 = lw(sp + 0x40);
    s3 = lw(sp + 0x3C);
    s2 = lw(sp + 0x38);
    s1 = lw(sp + 0x34);
    s0 = lw(sp + 0x30);
    sp += 0x48;
    return;
}

void W_CacheLumpName() noexcept {
loc_800319E4:
    sp -= 0x30;
    t1 = a0;
    sw(s1, sp + 0x24);
    s1 = a1;
    sw(s2, sp + 0x28);
    s2 = a2;
    a0 = sp + 0x10;
    a1 = t1;
    a2 = sp + 0x18;
    sw(ra, sp + 0x2C);
    sw(s0, sp + 0x20);
    sw(0, sp + 0x10);
    sw(0, sp + 0x14);
loc_80031A18:
    v0 = lbu(a1);
    v1 = v0;
    if (v0 == 0) goto loc_80031A50;
    v0 = v1 - 0x61;
    v0 = (v0 < 0x1A);
    a1++;
    if (v0 == 0) goto loc_80031A3C;
    v1 -= 0x20;
loc_80031A3C:
    sb(v1, a0);
    a0++;
    v0 = (i32(a0) < i32(a2));
    if (v0 != 0) goto loc_80031A18;
loc_80031A50:
    a3 = lw(sp + 0x10);
    a2 = lw(sp + 0x14);
    v1 = lw(gp + 0xC0C);                                // Load from: gNumLumps (800781EC)
    v0 = lw(gp + 0xBE4);                                // Load from: gpLumpInfo (800781C4)
    a0 = 0;                                             // Result = 00000000
    if (i32(v1) <= 0) goto loc_80031AA8;
    t0 = -0x81;                                         // Result = FFFFFF7F
    a1 = v1;
    v1 = v0 + 8;
loc_80031A74:
    v0 = lw(v1 + 0x4);
    if (v0 != a2) goto loc_80031A98;
    v0 = lw(v1);
    v0 &= t0;
    if (v0 == a3) goto loc_80031AC0;
loc_80031A98:
    a0++;
    v0 = (i32(a0) < i32(a1));
    v1 += 0x10;
    if (v0 != 0) goto loc_80031A74;
loc_80031AA8:
    v1 = -1;                                            // Result = FFFFFFFF
loc_80031AAC:
    v0 = -1;                                            // Result = FFFFFFFF
    if (v1 == v0) goto loc_80031AC8;
    s0 = v1;
    goto loc_80031AD8;
loc_80031AC0:
    v1 = a0;
    goto loc_80031AAC;
loc_80031AC8:
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1284;                                       // Result = STR_W_GetNumForName_NotFound_Err[0] (80011284)
    a1 = t1;
    I_Error();
loc_80031AD8:
    a0 = s0;
    a1 = s1;
    a2 = s2;
    W_CacheLumpNum();
    ra = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x30;
    return;
}

void W_OpenMapWad() noexcept {
loc_80031B04:
    sp -= 0x20;
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    OpenFile();
    s0 = v0;
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    a2 = 2;                                             // Result = 00000002
    SeekAndTellFile();
    s1 = v0;
    a1 = s1;
    a2 = 1;                                             // Result = 00000001
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2_b();
    a0 = s0;
    a1 = 0;                                             // Result = 00000000
    sw(v0, gp + 0x938);                                 // Store to: gpMapWadFileData (80077F18)
    a2 = 0;                                             // Result = 00000000
    SeekAndTellFile();
    a0 = s0;
    a1 = lw(gp + 0x938);                                // Load from: gpMapWadFileData (80077F18)
    a2 = s1;
    ReadFile();
    a0 = s0;
    CloseFile();
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7BE8;                                       // Result = STR_IWAD[0] (80077BE8)
    a0 = lw(gp + 0x938);                                // Load from: gpMapWadFileData (80077F18)
    a2 = 4;                                             // Result = 00000004
    D_strncasecmp();
    if (v0 == 0) goto loc_80031BA0;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1318;                                       // Result = STR_W_OpenMapWad_InvalidIWADId_Err[0] (80011318)
    I_Error();
loc_80031BA0:
    v0 = lw(gp + 0x938);                                // Load from: gpMapWadFileData (80077F18)
    v1 = lw(v0 + 0x4);
    a0 = lw(v0 + 0x8);
    sw(v1, gp + 0xB3C);                                 // Store to: gNumMapWadLumps (8007811C)
    v1 = v0 + a0;
    sw(v1, gp + 0xAE8);                                 // Store to: gpMapWadDirectory (800780C8)
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void W_MapLumpLength() noexcept {
loc_80031BD4:
    v0 = lw(gp + 0xB3C);                                // Load from: gNumMapWadLumps (8007811C)
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    v0 = (i32(s0) < i32(v0));
    sw(ra, sp + 0x14);
    if (v0 != 0) goto loc_80031C00;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x133C;                                       // Result = STR_W_MapLumpLength_OutOfRange_Err[0] (8001133C)
    a1 = s0;
    I_Error();
loc_80031C00:
    v1 = lw(gp + 0xAE8);                                // Load from: gpMapWadDirectory (800780C8)
    v0 = s0 << 4;
    v0 += v1;
    v0 = lw(v0 + 0x4);
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void W_MapGetNumForName() noexcept {
loc_80031C24:
    sp -= 0x10;
    a1 = sp;
    a2 = sp + 8;
    sw(0, sp);
    sw(0, sp + 0x4);
loc_80031C38:
    v0 = lbu(a0);
    if (v0 == 0) goto loc_80031C78;
    v1 = lbu(a0);
    v0 = v1 - 0x61;
    v0 = (v0 < 0x1A);
    a0++;
    if (v0 == 0) goto loc_80031C64;
    v1 -= 0x20;
loc_80031C64:
    sb(v1, a1);
    a1++;
    v0 = (i32(a1) < i32(a2));
    if (v0 != 0) goto loc_80031C38;
loc_80031C78:
    a3 = lw(sp);
    a2 = lw(sp + 0x4);
    v1 = lw(gp + 0xB3C);                                // Load from: gNumMapWadLumps (8007811C)
    v0 = lw(gp + 0xAE8);                                // Load from: gpMapWadDirectory (800780C8)
    a0 = 0;                                             // Result = 00000000
    if (i32(v1) <= 0) goto loc_80031CD0;
    t0 = -0x81;                                         // Result = FFFFFF7F
    a1 = v1;
    v1 = v0 + 8;
loc_80031C9C:
    v0 = lw(v1 + 0x4);
    if (v0 != a2) goto loc_80031CC0;
    v0 = lw(v1);
    v0 &= t0;
    {
        const bool bJump = (v0 == a3)
        v0 = a0;
        if (bJump) goto loc_80031CD4;
    }
loc_80031CC0:
    a0++;
    v0 = (i32(a0) < i32(a1));
    v1 += 0x10;
    if (v0 != 0) goto loc_80031C9C;
loc_80031CD0:
    v0 = -1;                                            // Result = FFFFFFFF
loc_80031CD4:
    sp += 0x10;
    return;
}

void W_ReadMapLump() noexcept {
loc_80031CE0:
    v0 = lw(gp + 0xB3C);                                // Load from: gNumMapWadLumps (8007811C)
    sp -= 0x30;
    sw(s0, sp + 0x20);
    s0 = a0;
    sw(s2, sp + 0x28);
    s2 = a1;
    sw(s1, sp + 0x24);
    s1 = a2;
    v0 = (i32(s0) < i32(v0));
    sw(ra, sp + 0x2C);
    if (v0 != 0) goto loc_80031D1C;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1360;                                       // Result = STR_W_ReadMapLump_OutOfRange_Err[0] (80011360)
    a1 = s0;
    I_Error();
loc_80031D1C:
    v1 = lw(gp + 0xAE8);                                // Load from: gpMapWadDirectory (800780C8)
    v0 = s0 << 4;
    v1 += v0;
    if (s1 == 0) goto loc_80031D58;
    v0 = lbu(v1 + 0x8);
    v0 &= 0x80;
    a1 = s2;
    if (v0 == 0) goto loc_80031D58;
    v0 = lw(gp + 0x938);                                // Load from: gpMapWadFileData (80077F18)
    a0 = lw(v1);
    a0 += v0;
    decode();
    goto loc_80031D74;
loc_80031D58:
    a0 = s2;
    a1 = lw(gp + 0x938);                                // Load from: gpMapWadFileData (80077F18)
    v0 = lw(v1);
    a2 = lw(v1 + 0x10);
    a1 += v0;
    a2 -= v0;
    D_memcpy();
loc_80031D74:
    ra = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x30;
    return;
}

void decode() noexcept {
loc_80031D90:
    sp -= 8;
    a2 = a0;
    t0 = 0;                                             // Result = 00000000
    t1 = 0;                                             // Result = 00000000
    t2 = 1;                                             // Result = 00000001
loc_80031DA4:
    v0 = t1 + 1;
    if (t1 != 0) goto loc_80031DB4;
    t0 = lbu(a2);
    a2++;
loc_80031DB4:
    t1 = v0 & 7;
    v0 = t0 & 1;
    if (v0 == 0) goto loc_80031E24;
    v0 = lbu(a2);
    a2++;
    v1 = lbu(a2);
    a0 = lbu(a2);
    a2++;
    v0 <<= 4;
    v1 >>= 4;
    v0 |= v1;
    v0 = a1 - v0;
    a0 &= 0xF;
    a0++;
    a3 = v0 - 1;
    if (a0 == t2) goto loc_80031E3C;
    v1 = 0;                                             // Result = 00000000
    if (a0 == 0) goto loc_80031E34;
loc_80031E00:
    v0 = lbu(a3);
    a3++;
    v1++;
    sb(v0, a1);
    v0 = (i32(v1) < i32(a0));
    a1++;
    if (v0 != 0) goto loc_80031E00;
    t0 = u32(i32(t0) >> 1);                             // Result = 00000000
    goto loc_80031DA4;
loc_80031E24:
    v0 = lbu(a2);
    a2++;
    sb(v0, a1);
    a1++;
loc_80031E34:
    t0 = u32(i32(t0) >> 1);                             // Result = 00000000
    goto loc_80031DA4;
loc_80031E3C:
    sp += 8;
    return;
}

void getDecodedSize() noexcept {
loc_80031E48:
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    v1 = 0;                                             // Result = 00000000
    a3 = 1;                                             // Result = 00000001
loc_80031E58:
    v0 = a2 + 1;
    if (a2 != 0) goto loc_80031E68;
    a1 = lbu(a0);
    a0++;
loc_80031E68:
    a2 = v0 & 7;
    v0 = a1 & 1;
    if (v0 == 0) goto loc_80031E9C;
    a0++;
    v0 = lbu(a0);
    v0 &= 0xF;
    v0++;
    a0++;
    if (v0 == a3) goto loc_80031EAC;
    v1 += v0;
    goto loc_80031EA4;
loc_80031E9C:
    v1++;
    a0++;
loc_80031EA4:
    a1 = u32(i32(a1) >> 1);                             // Result = 00000000
    goto loc_80031E58;
loc_80031EAC:
    v0 = v1;
    return;
}

void InitOpenFileSlots() noexcept {
loc_80031EB4:
    v0 = 0x78;                                          // Result = 00000078
loc_80031EB8:
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x626C;                                       // Result = gOpenPsxCdFiles[1] (800A9D94)
    at += v0;
    sw(0, at);
    v0 -= 0x28;
    if (i32(v0) >= 0) goto loc_80031EB8;
    return;
}

void OpenFile() noexcept {
loc_80031EDC:
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    psxcd_open();
    s1 = v0;
    if (s1 != 0) goto loc_80031F10;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1384;                                       // Result = STR_CannotOpen_Err[0] (80011384)
    a1 = s0;
    I_Error();
loc_80031F10:
    s0 = 0;                                             // Result = 00000000
    v1 = 0;                                             // Result = 00000000
loc_80031F18:
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x626C;                                       // Result = gOpenPsxCdFiles[1] (800A9D94)
    at += v1;
    v0 = lw(at);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(s0) < 4);
        if (bJump) goto loc_80031F48;
    }
    s0++;
    v0 = (i32(s0) < 4);
    v1 += 0x28;
    if (v0 != 0) goto loc_80031F18;
    v0 = (i32(s0) < 4);
loc_80031F48:
    if (v0 != 0) goto loc_80031F60;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1394;                                       // Result = STR_OpenFile_TooManyFiles_Err[0] (80011394)
    I_Error();
loc_80031F60:
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 -= 0x6270;                                       // Result = gOpenPsxCdFiles[0] (800A9D90)
    v0 = s0 << 2;
    v0 += s0;
    v0 <<= 3;
    a3 = v0 + v1;
    a2 = s1;
    t0 = a2 + 0x20;
loc_80031F80:
    v0 = lw(a2);
    v1 = lw(a2 + 0x4);
    a0 = lw(a2 + 0x8);
    a1 = lw(a2 + 0xC);
    sw(v0, a3);
    sw(v1, a3 + 0x4);
    sw(a0, a3 + 0x8);
    sw(a1, a3 + 0xC);
    a2 += 0x10;
    a3 += 0x10;
    if (a2 != t0) goto loc_80031F80;
    v0 = lw(a2);
    v1 = lw(a2 + 0x4);
    sw(v0, a3);
    sw(v1, a3 + 0x4);
    v0 = s0;                                            // Result = 00000000
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void CloseFile() noexcept {
loc_80031FD8:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0 << 2;
    s0 += a0;
    s0 <<= 3;
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 -= 0x6270;                                       // Result = gOpenPsxCdFiles[0] (800A9D90)
    sw(ra, sp + 0x14);
    a0 += s0;
    psxcd_close();
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x626C;                                       // Result = gOpenPsxCdFiles[1] (800A9D94)
    at += s0;
    sw(0, at);
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void SeekAndTellFile() noexcept {
loc_80032024:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0 << 2;
    s0 += a0;
    s0 <<= 3;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x6270;                                       // Result = gOpenPsxCdFiles[0] (800A9D90)
    s0 += v0;
    sw(ra, sp + 0x14);
    a0 = s0;
    psxcd_seek();
    a0 = s0;
    psxcd_tell();
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void ReadFile() noexcept {
loc_8003206C:
    sp -= 0x28;
    sw(s4, sp + 0x20);
    s4 = a1;
    sw(s2, sp + 0x18);
    s2 = a2;
    v0 = a0 << 2;
    v0 += a0;
    v0 <<= 3;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 -= 0x6270;                                       // Result = gOpenPsxCdFiles[0] (800A9D90)
    sw(s1, sp + 0x14);
    s1 = v0 + v1;
    a0 = s1;
    sw(ra, sp + 0x24);
    sw(s3, sp + 0x1C);
    sw(s0, sp + 0x10);
    psxcd_tell();
    s3 = v0;
    v0 = (s2 < 0x2001);
    s0 = s2;
    if (v0 != 0) goto loc_800320C4;
    s0 = 0x2000;                                        // Result = 00002000
loc_800320C4:
    a0 = s1;
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    psxcd_seek();
    a0 = s4;
    a1 = s0;
    a2 = s1;
    psxcd_read();
    a0 = s1;
    a1 = s3;
    a2 = 0;                                             // Result = 00000000
    psxcd_seek();
    a0 = s4;
    a1 = s2;
    a2 = s1;
    psxcd_read();
    s0 = v0;
    a1 = s0;
    if (s0 == s2) goto loc_80032120;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x13B4;                                       // Result = STR_ReadFile_Read_Err[0] (800113B4)
    a2 = s2;
    I_Error();
loc_80032120:
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void Z_Init() noexcept {
loc_80032144:
    sp -= 0x18;
    v1 = 0x1FFF0000;                                    // Result = 1FFF0000
    v1 |= 0xFFFF;                                       // Result = 1FFFFFFF
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x4C00);                               // Load from: I_ZoneBase (80074C00)
    a1 = lw(gp + 0x618);                                // Load from: StackEndAddr (80077BF8)
    v0 = lw(gp + 0x61C);                                // Load from: StackSize (80077BFC)
    a2 = -4;                                            // Result = FFFFFFFC
    sw(ra, sp + 0x10);
    a0 += 3;
    a0 &= a2;
    a1 -= v0;
    v1 &= a0;
    a1 -= v1;
    a1 += 3;
    a1 &= a2;
    Z_InitZone();
    sw(v0, gp + 0xBB8);                                 // Store to: gpMainMemZone (80078198)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void Z_InitZone() noexcept {
loc_8003219C:
    v0 = a0;
    v1 = v0 + 8;
    sw(a1, v0);
    a1 -= 8;
    sw(v1, v0 + 0x4);
    v1 = 0x1D4A;                                        // Result = 00001D4A
    sw(a1, v0 + 0x8);
    sw(0, v0 + 0xC);
    sh(0, v0 + 0x10);
    sh(v1, v0 + 0x12);
    sw(0, v0 + 0x18);
    sw(0, v0 + 0x1C);
    return;
}

void Z_Malloc2() noexcept {
loc_800321D0:
    sp -= 0x30;
    sw(s3, sp + 0x1C);
    s3 = a0;
    sw(s6, sp + 0x28);
    s6 = a2;
    sw(s4, sp + 0x20);
    s4 = a3;
    a1 += 0x1B;
    v0 = -4;                                            // Result = FFFFFFFC
    sw(ra, sp + 0x2C);
    sw(s5, sp + 0x24);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    s1 = lw(s3 + 0x4);
    s2 = a1 & v0;
    v1 = lw(s1 + 0x4);
    s5 = s1;
    goto loc_800322DC;
loc_8003221C:
    s0 = s1;
    if (v1 != 0) goto loc_80032228;
    s0 = lw(s1 + 0x10);
loc_80032228:
    if (s0 == 0) goto loc_80032268;
    v0 = lw(s0 + 0x4);
    if (v0 == 0) goto loc_8003229C;
    v0 = lh(s0 + 0x8);
    v0 = (i32(v0) < 0x10);
    a0 = s3;
    if (v0 == 0) goto loc_80032294;
    s1 = lw(s0 + 0x10);
    if (s1 != 0) goto loc_8003226C;
loc_80032268:
    s1 = s3 + 8;
loc_8003226C:
    if (s1 != s5) goto loc_800322D8;
    Z_DumpHeap();
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x13DC;                                       // Result = STR_Z_Malloc_AllocFailed_Err[0] (800113DC)
    a1 = s2;
    I_Error();
    goto loc_800322D8;
loc_80032294:
    a1 = s0 + 0x18;
    Z_Free2();
loc_8003229C:
    if (s1 == s0) goto loc_800322D8;
    v0 = lw(s1);
    v1 = lw(s0);
    v0 += v1;
    sw(v0, s1);
    v0 = lw(s0 + 0x10);
    sw(v0, s1 + 0x10);
    v1 = lw(s0 + 0x10);
    if (v1 == 0) goto loc_800322D8;
    sw(s1, v1 + 0x14);
loc_800322D8:
    v1 = lw(s1 + 0x4);
loc_800322DC:
    s0 = s1;
    if (v1 != 0) goto loc_80032228;
    v0 = lw(s1);
    v0 = (i32(v0) < i32(s2));
    if (v0 != 0) goto loc_8003221C;
    v0 = lw(s1);
    a0 = v0 - s2;
    v0 = (i32(a0) < 0x41);
    {
        const bool bJump = (v0 != 0)
        v0 = s1 + s2;
        if (bJump) goto loc_80032340;
    }
    sw(s1, v0 + 0x14);
    v1 = lw(s1 + 0x10);
    sw(v1, v0 + 0x10);
    if (v1 == 0) goto loc_8003232C;
    sw(v0, v1 + 0x14);
loc_8003232C:
    sw(v0, s1 + 0x10);
    sw(s2, s1);
    sw(a0, v0);
    sw(0, v0 + 0x4);
    sh(0, v0 + 0x8);
loc_80032340:
    v0 = s1 + 0x18;
    if (s4 == 0) goto loc_80032354;
    sw(s4, s1 + 0x4);
    sw(v0, s4);
    goto loc_80032378;
loc_80032354:
    v0 = (i32(s6) < 0x10);
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80032374;
    }
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1400;                                       // Result = STR_Z_Malloc_NoBlockOwner_Err[0] (80011400)
    I_Error();
    v0 = 1;                                             // Result = 00000001
loc_80032374:
    sw(v0, s1 + 0x4);
loc_80032378:
    v1 = lw(s1 + 0x10);
    v0 = 0x1D4A;                                        // Result = 00001D4A
    sh(s6, s1 + 0x8);
    sh(v0, s1 + 0xA);
    sw(v1, s3 + 0x4);
    if (v1 != 0) goto loc_80032398;
    v0 = s3 + 8;
    sw(v0, s3 + 0x4);
loc_80032398:
    v0 = s1 + 0x18;
    ra = lw(sp + 0x2C);
    s6 = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x30;
    return;
}

void Z_Malloc2_b() noexcept {
loc_800323C8:
    sp -= 0x30;
    sw(s3, sp + 0x1C);
    s3 = a0;
    sw(s2, sp + 0x18);
    s2 = a1;
    sw(s5, sp + 0x24);
    s5 = a2;
    sw(s4, sp + 0x20);
    s4 = a3;
    sw(ra, sp + 0x28);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v0 = lw(s3 + 0x18);
    s1 = s3 + 8;
    if (v0 == 0) goto loc_80032420;
loc_80032408:
    s1 = lw(s1 + 0x10);
    v0 = lw(s1 + 0x10);
    if (v0 != 0) goto loc_80032408;
loc_80032420:
    a0 = lw(s1 + 0x4);
    v1 = s2 + 0x1B;
    v0 = -4;                                            // Result = FFFFFFFC
    s2 = v1 & v0;
    goto loc_800324F8;
loc_80032434:
    if (a0 == 0) goto loc_80032444;
loc_8003243C:
    s0 = s1;
    goto loc_80032464;
loc_80032444:
    s0 = lw(s1 + 0x14);
    if (s0 != 0) goto loc_80032464;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x13DC;                                       // Result = STR_Z_Malloc_AllocFailed_Err[0] (800113DC)
    a1 = s2;
    I_Error();
loc_80032464:
    v0 = lw(s0 + 0x4);
    if (v0 == 0) goto loc_800324B8;
    v0 = lh(s0 + 0x8);
    v0 = (i32(v0) < 0x10);
    a0 = s3;
    if (v0 == 0) goto loc_800324B0;
    s1 = lw(s0 + 0x14);
    if (s1 != 0) goto loc_800324F4;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x13DC;                                       // Result = STR_Z_Malloc_AllocFailed_Err[0] (800113DC)
    a1 = s2;
    I_Error();
    goto loc_800324F4;
loc_800324B0:
    a1 = s0 + 0x18;
    Z_Free2();
loc_800324B8:
    if (s1 == s0) goto loc_800324F4;
    v0 = lw(s0);
    v1 = lw(s1);
    v0 += v1;
    sw(v0, s0);
    v0 = lw(s1 + 0x10);
    sw(v0, s0 + 0x10);
    v0 = lw(s1 + 0x10);
    s1 = s0;
    if (v0 == 0) goto loc_800324F4;
    sw(s0, v0 + 0x14);
loc_800324F4:
    a0 = lw(s1 + 0x4);
loc_800324F8:
    if (a0 != 0) goto loc_8003243C;
    v0 = lw(s1);
    v0 = (i32(v0) < i32(s2));
    if (v0 != 0) goto loc_80032434;
    v0 = lw(s1);
    a0 = v0 - s2;
    v0 = (i32(a0) < 0x41);
    v1 = s1;
    if (v0 != 0) goto loc_80032560;
    s1 += a0;
    sw(v1, s1 + 0x14);
    v0 = lw(v1 + 0x10);
    sw(v0, s1 + 0x10);
    if (v0 == 0) goto loc_8003254C;
    sw(s1, v0 + 0x14);
loc_8003254C:
    sw(s1, v1 + 0x10);
    sw(s2, s1);
    sw(a0, v1);
    sw(0, v1 + 0x4);
    sh(0, v1 + 0x8);
loc_80032560:
    v0 = s1 + 0x18;
    if (s4 == 0) goto loc_80032574;
    sw(s4, s1 + 0x4);
    sw(v0, s4);
    goto loc_80032598;
loc_80032574:
    v0 = (i32(s5) < 0x10);
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80032594;
    }
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1400;                                       // Result = STR_Z_Malloc_NoBlockOwner_Err[0] (80011400)
    I_Error();
    v0 = 1;                                             // Result = 00000001
loc_80032594:
    sw(v0, s1 + 0x4);
loc_80032598:
    v0 = 0x1D4A;                                        // Result = 00001D4A
    sh(v0, s1 + 0xA);
    v0 = s3 + 8;
    sh(s5, s1 + 0x8);
    sw(v0, s3 + 0x4);
    v0 = s1 + 0x18;
    ra = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x30;
    return;
}

void Z_Free2() noexcept {
loc_800325D8:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a1;
    sw(ra, sp + 0x14);
    v1 = lh(s0 - 0xE);
    v0 = 0x1D4A;                                        // Result = 00001D4A
    if (v1 == v0) goto loc_80032608;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1434;                                       // Result = STR_Z_Free_PtrNoZoneId_Err[0] (80011434)
    I_Error();
loc_80032608:
    v1 = lw(s0 - 0x14);
    v0 = (v1 < 0x101);
    if (v0 != 0) goto loc_80032620;
    sw(0, v1);
loc_80032620:
    sw(0, s0 - 0x14);
    sh(0, s0 - 0x10);
    sh(0, s0 - 0xE);
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void Z_FreeTags() noexcept {
loc_80032640:
    sp -= 0x28;
    sw(s2, sp + 0x18);
    s2 = a0;
    sw(s3, sp + 0x1C);
    s3 = a1;
    sw(s0, sp + 0x10);
    s0 = s2 + 8;
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s1, sp + 0x14);
    if (s0 == 0) goto loc_800326E8;
    s4 = 0x1D4A;                                        // Result = 00001D4A
loc_80032670:
    v0 = lw(s0 + 0x4);
    s1 = lw(s0 + 0x10);
    if (v0 == 0) goto loc_800326D8;
    v0 = lh(s0 + 0x8);
    v0 &= s3;
    if (v0 == 0) goto loc_800326D8;
    v0 = lh(s0 + 0xA);
    if (v0 == s4) goto loc_800326B4;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1434;                                       // Result = STR_Z_Free_PtrNoZoneId_Err[0] (80011434)
    I_Error();
loc_800326B4:
    v1 = lw(s0 + 0x4);
    v0 = (v1 < 0x101);
    if (v0 != 0) goto loc_800326CC;
    sw(0, v1);
loc_800326CC:
    sw(0, s0 + 0x4);
    sh(0, s0 + 0x8);
    sh(0, s0 + 0xA);
loc_800326D8:
    s0 = s1;
    if (s0 != 0) goto loc_80032670;
    s0 = s2 + 8;
loc_800326E8:
    v0 = s2 + 8;
    if (s0 == 0) goto loc_80032748;
loc_800326F0:
    v0 = lw(s0 + 0x4);
    s1 = lw(s0 + 0x10);
    if (v0 != 0) goto loc_8003273C;
    if (s1 == 0) goto loc_8003273C;
    v0 = lw(s1 + 0x4);
    if (v0 != 0) goto loc_8003273C;
    v0 = lw(s0);
    v1 = lw(s1);
    v0 += v1;
    sw(v0, s0);
    v0 = lw(s1 + 0x10);
    s1 = s0;
    sw(v0, s0 + 0x10);
    sw(s1, v0 + 0x14);
loc_8003273C:
    s0 = s1;
    v0 = s2 + 8;
    if (s0 != 0) goto loc_800326F0;
loc_80032748:
    sw(v0, s2 + 0x4);
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void Z_CheckHeap() noexcept {
loc_80032770:
    sp -= 0x20;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(s0, sp + 0x10);
    s0 = s1 + 8;
    sw(ra, sp + 0x18);
    if (s0 == 0) goto loc_80032820;
loc_8003278C:
    v1 = lw(s0 + 0x10);
    if (v1 != 0) goto loc_800327C4;
    v0 = lw(s0);
    v1 = lw(s1);
    v0 += s0;
    v0 -= s1;
    if (v0 == v1) goto loc_80032810;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x145C;                                       // Result = STR_Z_CheckHeap_ZoneSizeChanged_Err[0] (8001145C)
    goto loc_80032808;
loc_800327C4:
    v0 = lw(s0);
    v0 += s0;
    if (v0 == v1) goto loc_800327E8;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x147C;                                       // Result = STR_Z_CheckHeap_BlockNotTouching_Err[0] (8001147C)
    I_Error();
loc_800327E8:
    v0 = lw(s0 + 0x10);
    v0 = lw(v0 + 0x14);
    if (v0 == s0) goto loc_80032810;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x14B4;                                       // Result = STR_Z_CheckHeap_BadBlockBackLink_Err[0] (800114B4)
loc_80032808:
    I_Error();
loc_80032810:
    s0 = lw(s0 + 0x10);
    if (s0 != 0) goto loc_8003278C;
loc_80032820:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void Z_ChangeTag() noexcept {
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(s1, sp + 0x14);
    s1 = a1;
    sw(s2, sp + 0x18);
    sw(ra, sp + 0x1C);
    v1 = lh(s0 - 0xE);
    v0 = 0x1D4A;                                        // Result = 00001D4A
    s2 = s0 - 0x18;
    if (v1 == v0) goto loc_80032874;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x14EC;                                       // Result = STR_Z_ChangeTag_PtrNoZoneId_Err[0] (800114EC)
    I_Error();
loc_80032874:
    v0 = (i32(s1) < 0x10);
    if (v0 != 0) goto loc_800328A4;
    v0 = lw(s0 - 0x14);
    v0 = (v0 < 0x100);
    if (v0 == 0) goto loc_800328A4;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1518;                                       // Result = STR_Z_ChangeTag_NoBlockOwner_Err[0] (80011518)
    I_Error();
loc_800328A4:
    sh(s1, s2 + 0x8);
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void Z_FreeMemory() noexcept {
loc_800328C4:
    a0 += 8;
    v1 = 0;                                             // Result = 00000000
    if (a0 == 0) goto loc_800328FC;
loc_800328D0:
    v0 = lw(a0 + 0x4);
    if (v0 != 0) goto loc_800328EC;
    v0 = lw(a0);
    v1 += v0;
loc_800328EC:
    a0 = lw(a0 + 0x10);
    if (a0 != 0) goto loc_800328D0;
loc_800328FC:
    v0 = v1;                                            // Result = 00000000
    return;
}

void Z_DumpHeap() noexcept {
loc_80032904:
    return;
}

void StartGame() noexcept {
loc_8003290C:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    LIBSN__main();
    D_DoomMain();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void init_sony_system() noexcept {
loc_80032934:
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    LIBETC_ResetCallback();
    a0 = 0;                                             // Result = 00000000
    LIBGPU_ResetGraph();
    a0 = 0;                                             // Result = 00000000
    LIBGPU_SetGraphDebug();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7788;                                       // Result = gPadInputBuffer_1[0] (80097788)
    a1 = 0x22;                                          // Result = 00000022
    a2 = 0x80090000;                                    // Result = 80090000
    a2 += 0x78EC;                                       // Result = gPadInputBuffer_2[0] (800978EC)
    a3 = 0x22;                                          // Result = 00000022
    LIBAPI_InitPAD();
    s0 = 0xF0;                                          // Result = 000000F0
    LIBAPI_StartPAD();
    a0 = 0;                                             // Result = 00000000
    LIBAPI_ChangeClearPAD();
    s2 = 1;                                             // Result = 00000001
    LIBGTE_InitGeom();
    a0 = 0x80;                                          // Result = 00000080
    LIBGTE_SetGeomScreen();
    a0 = 0x80;                                          // Result = 00000080
    a1 = 0x64;                                          // Result = 00000064
    LIBGTE_SetGeomOffset();
    s1 = 0x800B0000;                                    // Result = 800B0000
    s1 -= 0x6F54;                                       // Result = gDrawEnv1[0] (800A90AC)
    a0 = s1;                                            // Result = gDrawEnv1[0] (800A90AC)
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    a3 = 0x100;                                         // Result = 00000100
    sw(s0, sp + 0x10);
    LIBGPU_SetDefDrawEnv();
    a0 = s1 + 0x5C;                                     // Result = gDrawEnv2[0] (800A9108)
    a1 = 0x100;                                         // Result = 00000100
    a2 = 0;                                             // Result = 00000000
    a3 = 0x100;                                         // Result = 00000100
    at = 0x800B0000;                                    // Result = 800B0000
    sb(s2, at - 0x6F3C);                                // Store to: gDrawEnv1[C] (800A90C4)
    at = 0x800B0000;                                    // Result = 800B0000
    sb(0, at - 0x6F3E);                                 // Store to: gDrawEnv1[B] (800A90C2)
    sw(s0, sp + 0x10);
    LIBGPU_SetDefDrawEnv();
    s1 = 0x800B0000;                                    // Result = 800B0000
    s1 -= 0x6E9C;                                       // Result = gDispEnv1[0] (800A9164)
    a0 = s1;                                            // Result = gDispEnv1[0] (800A9164)
    a1 = 0x100;                                         // Result = 00000100
    a2 = 0;                                             // Result = 00000000
    a3 = 0x100;                                         // Result = 00000100
    at = 0x800B0000;                                    // Result = 800B0000
    sb(s2, at - 0x6EE0);                                // Store to: gDrawEnv2[C] (800A9120)
    at = 0x800B0000;                                    // Result = 800B0000
    sb(0, at - 0x6EE2);                                 // Store to: gDrawEnv2[B] (800A911E)
    sw(s0, sp + 0x10);
    LIBGPU_SetDefDispEnv();
    a0 = s1 + 0x14;                                     // Result = gDispEnv2[0] (800A9178)
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    a3 = 0x100;                                         // Result = 00000100
    sw(s0, sp + 0x10);
    LIBGPU_SetDefDispEnv();
    sw(0, gp + 0xB18);                                  // Store to: gCurDrawDispBufferIdx (800780F8)
    LIBAPI_EnterCriticalSection();
    LIBAPI_ExitCriticalSection();
    LIBCOMB_AddCOMB();
    a0 = 0xF0000000;                                    // Result = F0000000
    a0 |= 0xB;                                          // Result = F000000B
    a1 = 0x400;                                         // Result = 00000400
    a2 = 0x2000;                                        // Result = 00002000
    a3 = 0;                                             // Result = 00000000
    LIBAPI_OpenEvent();
    a0 = v0;
    sw(a0, gp + 0x944);                                 // Store to: gSioErrorEvent (80077F24)
    LIBAPI_EnableEvent();
    a0 = 0xF0000000;                                    // Result = F0000000
    a0 |= 0xB;                                          // Result = F000000B
    a1 = 0x800;                                         // Result = 00000800
    a2 = 0x2000;                                        // Result = 00002000
    a3 = 0;                                             // Result = 00000000
    LIBAPI_OpenEvent();
    a0 = v0;
    sw(a0, gp + 0xA60);                                 // Store to: gSioWriteDoneEvent (80078040)
    LIBAPI_EnableEvent();
    s0 = 0x80070000;                                    // Result = 80070000
    s0 += 0x7C1C;                                       // Result = STR_sio_3[0] (80077C1C)
    a0 = s0;                                            // Result = STR_sio_3[0] (80077C1C)
    a1 = 2;                                             // Result = 00000002
    LIBAPI_open();
    a0 = s0;                                            // Result = STR_sio_3[0] (80077C1C)
    sw(v0, gp + 0x934);                                 // Store to: gNetOutputFd (80077F14)
    a1 = 0x8001;                                        // Result = 00008001
    LIBAPI_open();
    a0 = 1;                                             // Result = 00000001
    a1 = 3;                                             // Result = 00000003
    sw(v0, gp + 0xC54);                                 // Store to: gNetInputFd (80078234)
    a2 = 0x9600;                                        // Result = 00009600
    LIBCOMB__comb_control();
    I_DrawPresent();
    I_DrawPresent();
    a0 = 1;                                             // Result = 00000001
    LIBGPU_SetDispMask();
    ra = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x28;
    return;
}

void I_Error() noexcept {
loc_80032B0C:
    sw(a0, sp);
    sw(a1, sp + 0x4);
    sw(a2, sp + 0x8);
    sw(a3, sp + 0xC);
    sp -= 0x120;
    a1 = a0;
    a0 = sp + 0x18;
    a2 = sp + 0x124;
    sw(ra, sp + 0x11C);
    sw(s0, sp + 0x118);
    sw(a1, sp + 0x120);
    D_vsprintf();
    I_DrawPresent();
    a0 = 0x3C0;                                         // Result = 000003C0
    a1 = 0x100;                                         // Result = 00000100
    LIBGPU_FntLoad();
    a0 = 0;                                             // Result = 00000000
    a1 = 0;                                             // Result = 00000000
    a2 = 0x100;                                         // Result = 00000100
    v0 = 0x100;                                         // Result = 00000100
    a3 = 0xC8;                                          // Result = 000000C8
    sw(0, sp + 0x10);
    sw(v0, sp + 0x14);
    LIBGPU_FntOpen();
    s0 = v0;
    a0 = s0;
    LIBGPU_SetDumpFnt();
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7C24;                                       // Result = STR_I_Error_PrintToScreenFmtStr[0] (80077C24)
    a1 = sp + 0x18;
    LIBGPU_FntPrint();
    a0 = s0;
    LIBGPU_FntFlush();
    I_DrawPresent();
loc_80032B9C:
    goto loc_80032B9C;
    ra = lw(sp + 0x11C);
    s0 = lw(sp + 0x118);
    sp += 0x120;
    return;
}

void I_ReadGamepad() noexcept {
loc_80032BB8:
    v1 = 0x80090000;                                    // Result = 80090000
    v1 = lw(v1 + 0x7788);                               // Load from: gPadInputBuffer_1[0] (80097788)
    v0 = 0xFFFF0000;                                    // Result = FFFF0000
    a0 = v1 ^ v0;
    v1 = a0 & 0xF0FF;
    v0 = 0x4000;                                        // Result = 00004000
    {
        const bool bJump = (v1 != v0)
        v1 = a0 >> 24;
        if (bJump) goto loc_80032BE8;
    }
    v0 = a0 >> 8;
    v0 &= 0xFF00;
    a0 = v0 | v1;
    goto loc_80032BEC;
loc_80032BE8:
    a0 = 0;                                             // Result = 00000000
loc_80032BEC:
    v0 = a0;
    return;
}

void I_CacheTexForLumpName() noexcept {
loc_80032BF4:
    sp -= 0x20;
    sw(s1, sp + 0x14);
    s1 = a0;
    a0 = a1;
    sw(s2, sp + 0x18);
    s2 = a2;
    sw(ra, sp + 0x1C);
    sw(s0, sp + 0x10);
    if (a0 == 0) goto loc_80032C24;
    W_GetNumForName();
    s2 = v0;
loc_80032C24:
    a0 = s2;
    a1 = 0x20;                                          // Result = 00000020
    a2 = 0;                                             // Result = 00000000
    W_CacheLumpNum();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D10);                               // Load from: gpbIsMainWadLump (800782F0)
    v1 += s2;
    v1 = lbu(v1);
    a0 = v0;
    if (v1 != 0) goto loc_80032C68;
    s0 = 0x800A0000;                                    // Result = 800A0000
    s0 -= 0x78B8;                                       // Result = gTmpWadLumpBuffer[0] (80098748)
    a1 = s0;                                            // Result = gTmpWadLumpBuffer[0] (80098748)
    decode();
    a0 = s0;                                            // Result = gTmpWadLumpBuffer[0] (80098748)
loc_80032C68:
    v0 = lhu(a0);
    sh(v0, s1);
    v0 = lhu(a0 + 0x2);
    sh(v0, s1 + 0x2);
    v0 = lhu(a0 + 0x4);
    sh(v0, s1 + 0x4);
    v0 = lhu(a0 + 0x6);
    sh(v0, s1 + 0x6);
    v1 = lh(a0 + 0x4);
    v0 = v1 + 0xF;
    {
        const bool bJump = (i32(v0) >= 0)
        v0 = u32(i32(v0) >> 4);
        if (bJump) goto loc_80032CB4;
    }
    v0 = v1 + 0x1E;
    v0 = u32(i32(v0) >> 4);
loc_80032CB4:
    sh(v0, s1 + 0xC);
    a0 = lh(a0 + 0x6);
    v0 = a0 + 0xF;
    if (i32(v0) >= 0) goto loc_80032CD0;
    v0 = a0 + 0x1E;
loc_80032CD0:
    a0 = s1;
    v0 = u32(i32(v0) >> 4);
    sh(v0, a0 + 0xE);
    sh(0, a0 + 0xA);
    sh(s2, a0 + 0x10);
    I_CacheTex();
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void I_CacheAndDrawSprite() noexcept {
loc_80032D04:
    sp -= 0x38;
    sw(s0, sp + 0x20);
    s0 = a0;
    sw(s2, sp + 0x28);
    s2 = a1;
    sw(s3, sp + 0x2C);
    s3 = a2;
    sw(s1, sp + 0x24);
    sw(ra, sp + 0x30);
    s1 = a3;
    I_CacheTex();
    v0 = lbu(s0 + 0x8);
    a0 = lhu(s0 + 0xA);
    sw(v0, sp + 0x10);
    v0 = lbu(s0 + 0x9);
    a1 = s1;
    sw(v0, sp + 0x14);
    v0 = lh(s0 + 0x4);
    a2 = s2;
    sw(v0, sp + 0x18);
    v0 = lh(s0 + 0x6);
    a3 = s3;
    sw(v0, sp + 0x1C);
    I_DrawSprite();
    ra = lw(sp + 0x30);
    s3 = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x38;
    return;
}

void I_DrawSprite() noexcept {
loc_80032D84:
    sp -= 0x40;
    v0 = a0;
    sw(s3, sp + 0x24);
    s3 = a1;
    sw(s1, sp + 0x1C);
    s1 = a2;
    sw(s2, sp + 0x20);
    s2 = a3;
    sw(s0, sp + 0x18);
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    sw(s4, sp + 0x28);
    s4 = lw(sp + 0x50);
    a0 = s0;                                            // Result = 1F800200
    sw(s5, sp + 0x2C);
    s5 = lw(sp + 0x54);
    a1 = 0;                                             // Result = 00000000
    sw(s6, sp + 0x30);
    s6 = lw(sp + 0x58);
    a2 = 0;                                             // Result = 00000000
    sw(s7, sp + 0x34);
    s7 = lw(sp + 0x5C);
    a3 = v0;
    sw(ra, sp + 0x38);
    sw(0, sp + 0x10);
    LIBGPU_SetDrawMode();
    s0 += 4;                                            // Result = 1F800204
    t3 = 0xFF0000;                                      // Result = 00FF0000
    t3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t8 = t7 & t3;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_80032E24:
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80032E78;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_80032F24;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    sw(t7, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t8;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
loc_80032E78:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80032F18;
    if (v1 == a0) goto loc_80032E24;
loc_80032E98:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_80032E24;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t3;
    v0 |= t5;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_80032EFC;
    a3 = -1;                                            // Result = FFFFFFFF
loc_80032EE0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_80032EE0;
loc_80032EFC:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80032E24;
    goto loc_80032E98;
loc_80032F18:
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_80032F24:
    sw(v0, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_80032F7C;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80032F64:
    v0 = lw(s0);
    s0 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80032F64;
loc_80032F7C:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_80033018;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_80032FA0:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_80033018;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_80033004;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80032FE8:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80032FE8;
loc_80033004:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80032FA0;
loc_80033018:
    t0 = 4;                                             // Result = 00000004
    t2 = 0x1F800000;                                    // Result = 1F800000
    t2 += 0x204;                                        // Result = 1F800204
    t3 = 0x10;                                          // Result = 00000010
    t4 = 0x14;                                          // Result = 00000014
    t1 = 0xFF0000;                                      // Result = 00FF0000
    t1 |= 0xFFFF;                                       // Result = 00FFFFFF
    s0 = 0x80080000;                                    // Result = 80080000
    s0 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t8 = s0 & t1;                                       // Result = 00086550
    t7 = 0x4000000;                                     // Result = 04000000
    t6 = 0x80000000;                                    // Result = 80000000
    t5 = -1;                                            // Result = FFFFFFFF
    a3 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 4;                                             // Result = 00000004
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x64;                                          // Result = 00000064
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = 0x80;                                          // Result = 00000080
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x205);                                 // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x206);                                 // Store to: 1F800206
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s1, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s2, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sb(s4, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sb(s5, at + 0x20D);                                 // Store to: 1F80020D
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s6, at + 0x210);                                 // Store to: 1F800210
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s7, at + 0x212);                                 // Store to: 1F800212
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s3, at + 0x20E);                                 // Store to: 1F80020E
loc_800330BC:
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t3 + a0;
        if (bJump) goto loc_80033110;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t4 + a0;
        if (bJump) goto loc_800331BC;
    }
    v0 = lw(a3);
    v1 = 0xFF000000;                                    // Result = FF000000
    sw(s0, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t8;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
loc_80033110:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t3 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_800331B0;
    if (v1 == a0) goto loc_800330BC;
loc_80033130:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t7;
    if (v0 == 0) goto loc_800330BC;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t1;
    v0 |= t6;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_80033194;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80033178:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80033178;
loc_80033194:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_800330BC;
    goto loc_80033130;
loc_800331B0:
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t4;
loc_800331BC:
    sw(v0, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;                                               // Result = 00000003
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_80033214;
    v1 = -1;                                            // Result = FFFFFFFF
loc_800331FC:
    v0 = lw(t2);
    t2 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_800331FC;
loc_80033214:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_800332B0;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_80033238:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_800332B0;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8003329C;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80033280:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80033280;
loc_8003329C:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80033238;
loc_800332B0:
    ra = lw(sp + 0x38);
    s7 = lw(sp + 0x34);
    s6 = lw(sp + 0x30);
    s5 = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x40;
    return;
}

void I_DrawPlaque() noexcept {
loc_800332E0:
    sp -= 0x40;
    sw(s0, sp + 0x28);
    s0 = a0;
    sw(s2, sp + 0x30);
    s2 = a1;
    sw(s3, sp + 0x34);
    s3 = a2;
    sw(s1, sp + 0x2C);
    s1 = a3;
    sw(ra, sp + 0x38);
    a0 = 0;                                             // Result = 00000000
    LIBGPU_DrawSync();
    a3 = lw(gp + 0xB18);                                // Load from: gCurDrawDispBufferIdx (800780F8)
    v1 = a3 ^ 1;
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 2;
    a0 = a3 << 2;
    a0 += a3;
    a0 <<= 2;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6E9C;                                       // Result = gDispEnv1[0] (800A9164)
    at += v0;
    a1 = lh(at);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6E9A;                                       // Result = gDispEnv1[1] (800A9166)
    at += v0;
    a2 = lh(at);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x6E9C;                                       // Result = gDispEnv1[0] (800A9164)
    a0 += v0;
    LIBGPU_MoveImage();
    I_IncDrawnFrameCount();
    a0 = s0;
    I_CacheTex();
    v0 = lbu(s0 + 0x8);
    a0 = lhu(s0 + 0xA);
    sw(v0, sp + 0x10);
    v0 = lbu(s0 + 0x9);
    a1 = s1;
    sw(v0, sp + 0x14);
    v0 = lh(s0 + 0x4);
    a2 = s2;
    sw(v0, sp + 0x18);
    v0 = lh(s0 + 0x6);
    a3 = s3;
    sw(v0, sp + 0x1C);
    I_DrawSprite();
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x38);
    s3 = lw(sp + 0x34);
    s2 = lw(sp + 0x30);
    s1 = lw(sp + 0x2C);
    s0 = lw(sp + 0x28);
    sp += 0x40;
    return;
}

void I_IncDrawnFrameCount() noexcept {
loc_800333D8:
    v0 = lw(gp + 0x630);                                // Load from: gNumFramesDrawn (80077C10)
    v0++;
    sw(v0, gp + 0x630);                                 // Store to: gNumFramesDrawn (80077C10)
    return;
}

void I_DrawPresent() noexcept {
loc_800333F0:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    a0 = 0;                                             // Result = 00000000
    LIBGPU_DrawSync();
    a0 = 0;                                             // Result = 00000000
    LIBETC_VSync();
    v1 = lw(gp + 0xB18);                                // Load from: gCurDrawDispBufferIdx (800780F8)
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x6F54;                                       // Result = gDrawEnv1[0] (800A90AC)
    v1 ^= 1;
    a0 = v1 << 1;
    a0 += v1;
    a0 <<= 3;
    a0 -= v1;
    a0 <<= 2;
    sw(v1, gp + 0xB18);                                 // Store to: gCurDrawDispBufferIdx (800780F8)
    a0 += v0;
    LIBGPU_PutDrawEnv();
    v0 = lw(gp + 0xB18);                                // Load from: gCurDrawDispBufferIdx (800780F8)
    a0 = v0 << 2;
    a0 += v0;
    a0 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x6E9C;                                       // Result = gDispEnv1[0] (800A9164)
    a0 += v0;
    LIBGPU_PutDispEnv();
loc_8003345C:
    a0 = -1;                                            // Result = FFFFFFFF
    LIBETC_VSync();
    v1 = lw(gp + 0xB34);                                // Load from: gLastTotalVBlanks (80078114)
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7E98);                                // Store to: gTotalVBlanks (80077E98)
    v0 -= v1;
    sw(v0, gp + 0xBDC);                                 // Store to: gElapsedVBlanks (800781BC)
    v0 = (v0 < 2);
    if (v0 != 0) goto loc_8003345C;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F80);                               // Load from: gbDemoPlayback (80078080)
    if (v0 != 0) goto loc_800334AC;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E54);                               // Load from: gbDemoRecording (800781AC)
    if (v0 == 0) goto loc_800334EC;
loc_800334AC:
    v0 = lw(gp + 0xBDC);                                // Load from: gElapsedVBlanks (800781BC)
    v0 = (v0 < 4);
    {
        const bool bJump = (v0 == 0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_800334E8;
    }
loc_800334C0:
    a0 = -1;                                            // Result = FFFFFFFF
    LIBETC_VSync();
    v1 = lw(gp + 0xB34);                                // Load from: gLastTotalVBlanks (80078114)
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7E98);                                // Store to: gTotalVBlanks (80077E98)
    v0 -= v1;
    sw(v0, gp + 0xBDC);                                 // Store to: gElapsedVBlanks (800781BC)
    v0 = (v0 < 4);
    {
        const bool bJump = (v0 != 0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_800334C0;
    }
loc_800334E8:
    sw(v0, gp + 0xBDC);                                 // Store to: gElapsedVBlanks (800781BC)
loc_800334EC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7E98);                               // Load from: gTotalVBlanks (80077E98)
    sw(v0, gp + 0xB34);                                 // Store to: gLastTotalVBlanks (80078114)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void I_VsyncCallback() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7E98);                               // Load from: gTotalVBlanks (80077E98)
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7E98);                                // Store to: gTotalVBlanks (80077E98)
    return;
}

void I_Init() noexcept {
loc_8003352C:
    sp -= 0x18;
    a1 = 0x2C00;                                        // Result = 00002C00
    a2 = 1;                                             // Result = 00000001
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    sw(ra, sp + 0x10);
    a3 = 0;                                             // Result = 00000000
    Z_Malloc2();
    a0 = v0;
    a1 = 0;                                             // Result = 00000000
    sw(a0, gp + 0x994);                                 // Store to: gpTexCacheEntries (80077F74)
    a2 = 0x2C00;                                        // Result = 00002C00
    D_memset();
    I_ResetTexCache();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void I_CacheTex() noexcept {
loc_80033578:
    v0 = lw(gp + 0x630);                                // Load from: gNumFramesDrawn (80077C10)
    sp -= 0x58;
    sw(s3, sp + 0x44);
    s3 = a0;
    sw(ra, sp + 0x50);
    sw(s5, sp + 0x4C);
    sw(s4, sp + 0x48);
    sw(s2, sp + 0x40);
    sw(s1, sp + 0x3C);
    sw(s0, sp + 0x38);
    v1 = lhu(s3 + 0xA);
    sw(v0, s3 + 0x1C);
    if (v1 != 0) goto loc_800338E4;
    s5 = lw(gp + 0xA48);                                // Load from: gTexCacheFillPage (80078028)
loc_800335B4:
    v0 = lh(s3 + 0xC);
    v1 = lw(gp + 0xD04);                                // Load from: gTexCacheFillBlockX (800782E4)
    v0 += v1;
    v0 = (i32(v0) < 0x11);
    if (v0 != 0) goto loc_800335E8;
    v0 = lw(gp + 0xD08);                                // Load from: gTexCacheFillBlockY (800782E8)
    v1 = lw(gp + 0xC98);                                // Load from: gTexCacheRowBlockH (80078278)
    sw(0, gp + 0xD04);                                  // Store to: gTexCacheFillBlockX (800782E4)
    sw(0, gp + 0xC98);                                  // Store to: gTexCacheRowBlockH (80078278)
    v0 += v1;
    sw(v0, gp + 0xD08);                                 // Store to: gTexCacheFillBlockY (800782E8)
loc_800335E8:
    v0 = lh(s3 + 0xE);
    v1 = lw(gp + 0xD08);                                // Load from: gTexCacheFillBlockY (800782E8)
    v0 += v1;
    v0 = (i32(v0) < 0x11);
    s2 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_8003367C;
    a2 = 0x2E8B0000;                                    // Result = 2E8B0000
    a2 |= 0xA2E9;                                       // Result = 2E8BA2E9
    a1 = lw(gp + 0x628);                                // Load from: gLockedTexPagesMask (80077C08)
loc_80033610:
    a0 = lw(gp + 0xA48);                                // Load from: gTexCacheFillPage (80078028)
    a0++;
    mult(a0, a2);
    v0 = u32(i32(a0) >> 31);
    v1 = hi;
    v1 = u32(i32(v1) >> 1);
    v1 -= v0;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    a0 -= v0;
    v0 = i32(a1) >> a0;
    v0 &= 1;
    sw(a0, gp + 0xA48);                                 // Store to: gTexCacheFillPage (80078028)
    if (v0 != 0) goto loc_80033610;
    s2 = 0;                                             // Result = 00000000
    if (a0 != s5) goto loc_80033670;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1550;                                       // Result = STR_TextureCacheOverflow_Err[0] (80011550)
    I_Error();
loc_80033670:
    sw(0, gp + 0xD04);                                  // Store to: gTexCacheFillBlockX (800782E4)
    sw(0, gp + 0xD08);                                  // Store to: gTexCacheFillBlockY (800782E8)
    sw(0, gp + 0xC98);                                  // Store to: gTexCacheRowBlockH (80078278)
loc_8003367C:
    v1 = lw(gp + 0xA48);                                // Load from: gTexCacheFillPage (80078028)
    v0 = lw(gp + 0x994);                                // Load from: gpTexCacheEntries (80077F74)
    a0 = lw(gp + 0xD08);                                // Load from: gTexCacheFillBlockY (800782E8)
    v1 <<= 10;
    v1 += v0;
    a0 <<= 6;
    v0 = lw(gp + 0xD04);                                // Load from: gTexCacheFillBlockX (800782E4)
    v1 += a0;
    v0 <<= 2;
    s4 = v1 + v0;
    v0 = lh(s3 + 0xE);
    s1 = s4;
    if (i32(v0) <= 0) goto loc_80033758;
loc_800336B4:
    v0 = lh(s3 + 0xC);
    s0 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80033734;
loc_800336C4:
    a1 = lw(s1);
    s1 += 4;
    if (a1 == 0) goto loc_80033720;
    v1 = lw(a1 + 0x1C);
    v0 = lw(gp + 0x630);                                // Load from: gNumFramesDrawn (80077C10)
    if (v1 != v0) goto loc_80033718;
    v0 = lh(a1 + 0xC);
    a0 = lw(gp + 0xD04);                                // Load from: gTexCacheFillBlockX (800782E4)
    a1 = lh(a1 + 0xE);
    v1 = lw(gp + 0xC98);                                // Load from: gTexCacheRowBlockH (80078278)
    v0 += a0;
    v1 = (i32(v1) < i32(a1));
    sw(v0, gp + 0xD04);                                 // Store to: gTexCacheFillBlockX (800782E4)
    if (v1 == 0) goto loc_800335B4;
    sw(a1, gp + 0xC98);                                 // Store to: gTexCacheRowBlockH (80078278)
    goto loc_800335B4;
loc_80033718:
    a0 = a1;
    I_RemoveTexCacheEntry();
loc_80033720:
    v0 = lh(s3 + 0xC);
    s0++;
    v0 = (i32(s0) < i32(v0));
    if (v0 != 0) goto loc_800336C4;
loc_80033734:
    v0 = 0x10;                                          // Result = 00000010
    v0 -= s0;
    v0 <<= 2;
    s1 += v0;
    v0 = lh(s3 + 0xE);
    s2++;
    v0 = (i32(s2) < i32(v0));
    if (v0 != 0) goto loc_800336B4;
loc_80033758:
    s1 = s4;
    v0 = lh(s3 + 0xE);
    s2 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_800337B8;
    v1 = 0x10;                                          // Result = 00000010
loc_80033770:
    v0 = lh(s3 + 0xC);
    s0 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80033798;
loc_80033780:
    sw(s3, s1);
    v0 = lh(s3 + 0xC);
    s0++;
    v0 = (i32(s0) < i32(v0));
    s1 += 4;
    if (v0 != 0) goto loc_80033780;
loc_80033798:
    v0 = v1 - s0;
    v0 <<= 2;
    s1 += v0;
    v0 = lh(s3 + 0xE);
    s2++;
    v0 = (i32(s2) < i32(v0));
    if (v0 != 0) goto loc_80033770;
loc_800337B8:
    a1 = 0x20;                                          // Result = 00000020
    a0 = lh(s3 + 0x10);
    a2 = 0;                                             // Result = 00000000
    W_CacheLumpNum();
    v1 = lh(s3 + 0x10);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7D10);                               // Load from: gpbIsMainWadLump (800782F0)
    a0 += v1;
    v1 = lbu(a0);
    s0 = v0;
    if (v1 != 0) goto loc_80033800;
    a0 = s0;
    s0 = 0x800A0000;                                    // Result = 800A0000
    s0 -= 0x78B8;                                       // Result = gTmpWadLumpBuffer[0] (80098748)
    a1 = s0;                                            // Result = gTmpWadLumpBuffer[0] (80098748)
    decode();
loc_80033800:
    a0 = lw(gp + 0xA48);                                // Load from: gTexCacheFillPage (80078028)
    v0 = lw(gp + 0xD04);                                // Load from: gTexCacheFillBlockX (800782E4)
    sw(s4, s3 + 0x14);
    a0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3C7C;                                       // Result = TexPageVramTexCoords[0] (80073C7C)
    at += a0;
    v1 = lhu(at);
    v0 <<= 3;
    v1 += v0;
    v0 = lw(gp + 0xD08);                                // Load from: gTexCacheFillBlockY (800782E8)
    sh(v1, sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3C80;                                       // Result = TexPageVramTexCoords[1] (80073C80)
    at += a0;
    v1 = lhu(at);
    v0 <<= 4;
    v1 += v0;
    sh(v1, sp + 0x12);
    v0 = lhu(s3 + 0x4);
    a1 = s0 + 8;
    v0 <<= 16;
    v0 = u32(i32(v0) >> 17);
    sh(v0, sp + 0x14);
    v0 = lhu(s3 + 0x6);
    a0 = sp + 0x10;
    sh(v0, sp + 0x16);
    LIBGPU_LoadImage();
    v0 = lw(gp + 0xD04);                                // Load from: gTexCacheFillBlockX (800782E4)
    v0 <<= 4;
    sb(v0, s3 + 0x8);
    v0 = lw(gp + 0xD08);                                // Load from: gTexCacheFillBlockY (800782E8)
    a0 = 1;                                             // Result = 00000001
    v0 <<= 4;
    sb(v0, s3 + 0x9);
    v0 = lw(gp + 0xA48);                                // Load from: gTexCacheFillPage (80078028)
    a1 = 0;                                             // Result = 00000000
    a2 = v0 + 4;
    v0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3C80;                                       // Result = TexPageVramTexCoords[1] (80073C80)
    at += v0;
    a3 = lw(at);
    a2 <<= 7;
    LIBGPU_GetTPage();
    v1 = lh(s3 + 0xC);
    a0 = lw(gp + 0xD04);                                // Load from: gTexCacheFillBlockX (800782E4)
    a1 = lh(s3 + 0xE);
    sh(v0, s3 + 0xA);
    v0 = lw(gp + 0xC98);                                // Load from: gTexCacheRowBlockH (80078278)
    v1 += a0;
    v0 = (i32(v0) < i32(a1));
    sw(v1, gp + 0xD04);                                 // Store to: gTexCacheFillBlockX (800782E4)
    if (v0 == 0) goto loc_800338E4;
    sw(a1, gp + 0xC98);                                 // Store to: gTexCacheRowBlockH (80078278)
loc_800338E4:
    ra = lw(sp + 0x50);
    s5 = lw(sp + 0x4C);
    s4 = lw(sp + 0x48);
    s3 = lw(sp + 0x44);
    s2 = lw(sp + 0x40);
    s1 = lw(sp + 0x3C);
    s0 = lw(sp + 0x38);
    sp += 0x58;
    return;
}

void I_RemoveTexCacheEntry() noexcept {
loc_8003390C:
    sp -= 0x10;
    a1 = lw(a0 + 0x14);
    v0 = lh(a0 + 0xE);
    a2 = 0;                                             // Result = 00000000
    sh(0, a0 + 0xA);
    if (i32(v0) <= 0) goto loc_80033970;
    a3 = 0x10;                                          // Result = 00000010
loc_80033928:
    v0 = lh(a0 + 0xC);
    v1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80033950;
loc_80033938:
    sw(0, a1);
    v0 = lh(a0 + 0xC);
    v1++;
    v0 = (i32(v1) < i32(v0));
    a1 += 4;
    if (v0 != 0) goto loc_80033938;
loc_80033950:
    v0 = a3 - v1;
    v0 <<= 2;
    a1 += v0;
    v0 = lh(a0 + 0xE);
    a2++;
    v0 = (i32(a2) < i32(v0));
    if (v0 != 0) goto loc_80033928;
loc_80033970:
    sp += 0x10;
    return;
}

void I_ResetTexCache() noexcept {
loc_8003397C:
    sp -= 0x10;
    a3 = 0;                                             // Result = 00000000
    t2 = 0x10;                                          // Result = 00000010
loc_80033988:
    v1 = lw(gp + 0x628);                                // Load from: gLockedTexPagesMask (80077C08)
    v0 = i32(v1) >> a3;
    goto loc_80033998;
loc_80033994:
    v0 = i32(v1) >> a3;
loc_80033998:
    v0 &= 1;
    a3++;
    if (v0 != 0) goto loc_80033994;
    a3--;
    t1 = 0;                                             // Result = 00000000
    v1 = lw(gp + 0x994);                                // Load from: gpTexCacheEntries (80077F74)
    v0 = a3 << 10;
    t0 = v0 + v1;
loc_800339B8:
    v0 = lw(t0);
    if (v0 == 0) goto loc_80033A28;
    a1 = v0;
    a0 = lw(v0 + 0x14);
    v0 = lh(a1 + 0xE);
    a2 = 0;                                             // Result = 00000000
    sh(0, a1 + 0xA);
    if (i32(v0) <= 0) goto loc_80033A28;
loc_800339E0:
    v0 = lh(a1 + 0xC);
    v1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80033A08;
loc_800339F0:
    sw(0, a0);
    v0 = lh(a1 + 0xC);
    v1++;
    v0 = (i32(v1) < i32(v0));
    a0 += 4;
    if (v0 != 0) goto loc_800339F0;
loc_80033A08:
    v0 = t2 - v1;
    v0 <<= 2;
    a0 += v0;
    v0 = lh(a1 + 0xE);
    a2++;
    v0 = (i32(a2) < i32(v0));
    if (v0 != 0) goto loc_800339E0;
loc_80033A28:
    t1++;
    v0 = (i32(t1) < 0x100);
    t0 += 4;
    if (v0 != 0) goto loc_800339B8;
    a3++;
    v0 = (i32(a3) < 0xB);
    if (v0 != 0) goto loc_80033988;
    a1 = lw(gp + 0x628);                                // Load from: gLockedTexPagesMask (80077C08)
    sw(0, gp + 0xA48);                                  // Store to: gTexCacheFillPage (80078028)
    v0 = a1 & 1;
    if (v0 == 0) goto loc_80033AAC;
    a2 = 0x2E8B0000;                                    // Result = 2E8B0000
    a2 |= 0xA2E9;                                       // Result = 2E8BA2E9
loc_80033A64:
    a0 = lw(gp + 0xA48);                                // Load from: gTexCacheFillPage (80078028)
    a0++;
    mult(a0, a2);
    v0 = u32(i32(a0) >> 31);
    v1 = hi;
    v1 = u32(i32(v1) >> 1);
    v1 -= v0;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    a0 -= v0;
    sw(a0, gp + 0xA48);                                 // Store to: gTexCacheFillPage (80078028)
    a0 = i32(a1) >> a0;
    a0 &= 1;
    if (a0 != 0) goto loc_80033A64;
loc_80033AAC:
    sw(0, gp + 0xD04);                                  // Store to: gTexCacheFillBlockX (800782E4)
    sw(0, gp + 0xD08);                                  // Store to: gTexCacheFillBlockY (800782E8)
    sw(0, gp + 0xC98);                                  // Store to: gTexCacheRowBlockH (80078278)
    sp += 0x10;
    return;
}

void I_VramViewerDraw() noexcept {
loc_80033AC4:
    sp -= 0x30;
    sw(s2, sp + 0x18);
    s2 = a0;
    v0 = 9;                                             // Result = 00000009
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x2C;                                          // Result = 0000002C
    v1 = 0x100;                                         // Result = 00000100
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = 0xF0;                                          // Result = 000000F0
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x21A);                                 // Store to: 1F80021A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x222);                                 // Store to: 1F800222
    v0 = 0xFF;                                          // Result = 000000FF
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x214);                                 // Store to: 1F800214
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x21D);                                 // Store to: 1F80021D
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x224);                                 // Store to: 1F800224
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x225);                                 // Store to: 1F800225
    v0 = 0x80;                                          // Result = 00000080
    a2 = s2 + 4;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x205);                                 // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x206);                                 // Store to: 1F800206
    v0 = s2 << 3;
    a0 = 1;                                             // Result = 00000001
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x210);                                 // Store to: 1F800210
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x220);                                 // Store to: 1F800220
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lhu(v1 - 0x6F7C);                              // Load from: gPaletteClutId_Main (800A9084)
    a1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x2C);
    sw(s6, sp + 0x28);
    sw(s5, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x208);                                  // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x20A);                                  // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x212);                                  // Store to: 1F800212
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x218);                                  // Store to: 1F800218
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x20C);                                  // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x20D);                                  // Store to: 1F80020D
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x215);                                  // Store to: 1F800215
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x21C);                                  // Store to: 1F80021C
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x20E);                                 // Store to: 1F80020E
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3C80;                                       // Result = TexPageVramTexCoords[1] (80073C80)
    at += v0;
    a3 = lw(at);
    a2 <<= 7;
    LIBGPU_GetTPage();
    t4 = 0x1F800000;                                    // Result = 1F800000
    t4 += 0x204;                                        // Result = 1F800204
    t3 = 0xFF0000;                                      // Result = 00FF0000
    t3 |= 0xFFFF;                                       // Result = 00FFFFFF
    s0 = 0x80080000;                                    // Result = 80080000
    s0 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = s0 & t3;                                       // Result = 00086550
    t7 = 0x4000000;                                     // Result = 04000000
    t6 = 0x80000000;                                    // Result = 80000000
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    t5 = -1;                                            // Result = FFFFFFFF
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x216);                                 // Store to: 1F800216
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_80033C28:
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80033C7C;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_80033D28;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    sw(s0, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
loc_80033C7C:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80033D1C;
    if (v1 == a0) goto loc_80033C28;
loc_80033C9C:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t7;
    if (v0 == 0) goto loc_80033C28;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t3;
    v0 |= t6;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_80033D00;
    a3 = -1;                                            // Result = FFFFFFFF
loc_80033CE4:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_80033CE4;
loc_80033D00:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80033C28;
    goto loc_80033C9C;
loc_80033D1C:
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_80033D28:
    sw(v0, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_80033D80;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80033D68:
    v0 = lw(t4);
    t4 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80033D68;
loc_80033D80:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    s5 = 0;                                             // Result = 00000000
    if (v1 == v0) goto loc_80033E20;
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_80033DA8:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t2;
    s5 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_80033E20;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_80033E0C;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80033DF0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80033DF0;
loc_80033E0C:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    s5 = 0;                                             // Result = 00000000
    if (v1 != v0) goto loc_80033DA8;
loc_80033E20:
    s6 = 0x1F800000;                                    // Result = 1F800000
    s6 += 0x200;                                        // Result = 1F800200
    t4 = 0xFF0000;                                      // Result = 00FF0000
    t4 |= 0xFFFF;                                       // Result = 00FFFFFF
    s3 = 0x80080000;                                    // Result = 80080000
    s3 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = s3 & t4;                                       // Result = 00086550
    t9 = 0x4000000;                                     // Result = 04000000
    t8 = 0x80000000;                                    // Result = 80000000
    t5 = -1;                                            // Result = FFFFFFFF
    v1 = lw(gp + 0x994);                                // Load from: gpTexCacheEntries (80077F74)
    v0 = s2 << 10;
    s4 = v0 + v1;
loc_80033E54:
    a1 = lw(s4);
    v0 = 3;                                             // Result = 00000003
    if (a1 == 0) goto loc_800346F0;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x40;                                          // Result = 00000040
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = 0xFF;                                          // Result = 000000FF
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x205);                                  // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x206);                                  // Store to: 1F800206
    v1 = lbu(a1 + 0x9);
    t7 = lbu(a1 + 0x8);
    v0 = v1 << 4;
    v0 -= v1;
    a0 = v0 << 4;
    if (i32(a0) >= 0) goto loc_80033EB4;
    a0 += 0xFF;
loc_80033EB4:
    v1 = lh(a1 + 0x6);
    s0 = lh(a1 + 0x4);
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 4;
    t6 = u32(i32(a0) >> 8);
    if (i32(v0) >= 0) goto loc_80033ED4;
    v0 += 0xFF;
loc_80033ED4:
    s2 = u32(i32(v0) >> 8);
    t0 = 3;                                             // Result = 00000003
    t1 = s6 + 4;                                        // Result = 1F800204
    t2 = 0xC;                                           // Result = 0000000C
    t3 = 0x10;                                          // Result = 00000010
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = t7 + s0;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t7, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t6, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t6, at + 0x20E);                                 // Store to: 1F80020E
loc_80033F10:
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_80033F64;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t3 + a0;
        if (bJump) goto loc_80034010;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    sw(s3, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
loc_80033F64:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t2 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80034004;
    if (v1 == a0) goto loc_80033F10;
loc_80033F84:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t9;
    if (v0 == 0) goto loc_80033F10;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t8;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_80033FE8;
    a3 = -1;                                            // Result = FFFFFFFF
loc_80033FCC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_80033FCC;
loc_80033FE8:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80033F10;
    goto loc_80033F84;
loc_80034004:
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t3;
loc_80034010:
    sw(v0, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t4;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;                                               // Result = 00000002
    a2 += 4;
    if (t0 == t5) goto loc_800340C8;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80034044:
    v0 = lw(t1);
    t1 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80034044;
    goto loc_800340C8;
loc_80034064:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t9;
    t3 = s6 + 4;                                        // Result = 1F800204
    if (v0 == 0) goto loc_800340DC;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t8;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800340C8;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800340AC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800340AC;
loc_800340C8:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    t3 = s6 + 4;                                        // Result = 1F800204
    if (v1 != v0) goto loc_80034064;
loc_800340DC:
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = t7 + s0;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20C);                                 // Store to: 1F80020C
    v0 = t6 + s2;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t6, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20E);                                 // Store to: 1F80020E
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_80034118:
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8003416C;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_80034218;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    sw(s3, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
loc_8003416C:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003420C;
    if (v1 == a0) goto loc_80034118;
loc_8003418C:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t9;
    if (v0 == 0) goto loc_80034118;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t8;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800341F0;
    a3 = -1;                                            // Result = FFFFFFFF
loc_800341D4:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_800341D4;
loc_800341F0:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80034118;
    goto loc_8003418C;
loc_8003420C:
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_80034218:
    sw(v0, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t4;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    a2 += 4;
    if (t0 == t5) goto loc_800342D0;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003424C:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_8003424C;
    goto loc_800342D0;
loc_8003426C:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t9;
    t3 = s6 + 4;                                        // Result = 1F800204
    if (v0 == 0) goto loc_800342E4;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t8;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800342D0;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800342B4:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800342B4;
loc_800342D0:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    t3 = s6 + 4;                                        // Result = 1F800204
    if (v1 != v0) goto loc_8003426C;
loc_800342E4:
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = t7 + s0;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x208);                                 // Store to: 1F800208
    v0 = t6 + s2;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t7, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20E);                                 // Store to: 1F80020E
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_80034320:
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80034374;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_80034420;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    sw(s3, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
loc_80034374:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80034414;
    if (v1 == a0) goto loc_80034320;
loc_80034394:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t9;
    if (v0 == 0) goto loc_80034320;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t8;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800343F8;
    a3 = -1;                                            // Result = FFFFFFFF
loc_800343DC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_800343DC;
loc_800343F8:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80034320;
    goto loc_80034394;
loc_80034414:
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_80034420:
    sw(v0, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t4;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    a2 += 4;
    if (t0 == t5) goto loc_800344D8;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80034454:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80034454;
    goto loc_800344D8;
loc_80034474:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t9;
    t3 = s6 + 4;                                        // Result = 1F800204
    if (v0 == 0) goto loc_800344EC;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t8;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800344D8;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800344BC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800344BC;
loc_800344D8:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    t3 = s6 + 4;                                        // Result = 1F800204
    if (v1 != v0) goto loc_80034474;
loc_800344EC:
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = t6 + s2;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t7, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t7, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t6, at + 0x20E);                                 // Store to: 1F80020E
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_80034524:
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80034578;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_80034624;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    sw(s3, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    a0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
loc_80034578:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80034618;
    if (v1 == a0) goto loc_80034524;
loc_80034598:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t9;
    if (v0 == 0) goto loc_80034524;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t8;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800345FC;
    a3 = -1;                                            // Result = FFFFFFFF
loc_800345E0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_800345E0;
loc_800345FC:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80034524;
    goto loc_80034598;
loc_80034618:
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_80034624:
    sw(v0, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t4;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    a2 += 4;
    if (t0 == t5) goto loc_800346DC;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80034658:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80034658;
    goto loc_800346DC;
loc_80034678:
    v0 = lw(gp + 0x624);                                // Load from: GPU_REG_GP1 (80077C04)
    v0 = lw(v0);
    v0 &= t9;
    if (v0 == 0) goto loc_800346F0;
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t8;
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800346DC;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800346C0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x620);                                // Load from: GPU_REG_GP0 (80077C00)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800346C0;
loc_800346DC:
    v1 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v0 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80034678;
loc_800346F0:
    s5++;
    v0 = (i32(s5) < 0x100);
    s4 += 4;
    if (v0 != 0) goto loc_80033E54;
    ra = lw(sp + 0x2C);
    s6 = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x30;
    return;
}

void I_NetSetup() noexcept {
loc_8003472C:
    sp -= 0x20;
    v0 = 0xAA;                                          // Result = 000000AA
    a0 = 3;                                             // Result = 00000003
    a1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    sb(v0, gp + 0x9D0);                                 // Store to: gNetOutputPacket[0] (80077FB0)
    a2 = 0;                                             // Result = 00000000
    LIBCOMB__comb_control();
    a2 = 8;                                             // Result = 00000008
    if (v0 == 0) goto loc_800347EC;
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7FB0;                                       // Result = gNetOutputPacket[0] (80077FB0)
    s1 = 0xFFFF0000;                                    // Result = FFFF0000
    a0 = lw(gp + 0x934);                                // Load from: gNetOutputFd (80077F14)
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7618);                                // Store to: gCurPlayerIndex (80077618)
    s0 = 0x4000;                                        // Result = 00004000
    LIBAPI_write();
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7EA8;                                       // Result = gNetInputPacket[0] (80077EA8)
    a0 = lw(gp + 0xC54);                                // Load from: gNetInputFd (80078234)
    a2 = 8;                                             // Result = 00000008
    LIBAPI_read();
loc_80034794:
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7788);                               // Load from: gPadInputBuffer_1[0] (80097788)
    v1 = v0 ^ s1;
    v0 = v1 & 0xF0FF;
    {
        const bool bJump = (v0 != s0)
        v0 = v1 >> 8;
        if (bJump) goto loc_800347C0;
    }
    v0 &= 0xFF00;
    v1 >>= 24;
    v1 |= v0;
    goto loc_800347C4;
loc_800347C0:
    v1 = 0;                                             // Result = 00000000
loc_800347C4:
    v0 = v1 & 0x100;
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8003496C;
    }
    a0 = lw(gp + 0x944);                                // Load from: gSioErrorEvent (80077F24)
    LIBAPI_TestEvent();
    if (v0 == 0) goto loc_80034794;
    goto loc_80034884;
loc_800347EC:
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7EA8;                                       // Result = gNetInputPacket[0] (80077EA8)
    s1 = 0xFFFF0000;                                    // Result = FFFF0000
    a0 = lw(gp + 0xC54);                                // Load from: gNetInputFd (80078234)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7618);                                 // Store to: gCurPlayerIndex (80077618)
    s0 = 0x4000;                                        // Result = 00004000
    LIBAPI_read();
loc_8003480C:
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lw(v0 + 0x7788);                               // Load from: gPadInputBuffer_1[0] (80097788)
    v1 = v0 ^ s1;
    v0 = v1 & 0xF0FF;
    {
        const bool bJump = (v0 != s0)
        v0 = v1 >> 8;
        if (bJump) goto loc_80034838;
    }
    v0 &= 0xFF00;
    v1 >>= 24;
    v1 |= v0;
    goto loc_8003483C;
loc_80034838:
    v1 = 0;                                             // Result = 00000000
loc_8003483C:
    v0 = v1 & 0x100;
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8003496C;
    }
    a0 = lw(gp + 0x944);                                // Load from: gSioErrorEvent (80077F24)
    LIBAPI_TestEvent();
    a0 = 3;                                             // Result = 00000003
    if (v0 == 0) goto loc_8003480C;
loc_8003485C:
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    LIBCOMB__comb_control();
    a0 = 3;                                             // Result = 00000003
    if (v0 == 0) goto loc_8003485C;
    a0 = lw(gp + 0x934);                                // Load from: gNetOutputFd (80077F14)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7FB0;                                       // Result = gNetOutputPacket[0] (80077FB0)
    a2 = 8;                                             // Result = 00000008
    LIBAPI_write();
loc_80034884:
    I_NetHandshake();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    if (v0 != 0) goto loc_80034988;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x7604);                              // Load from: gStartGameType (80077604)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lbu(v1 + 0x75FC);                              // Load from: gStartSkill (800775FC)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lbu(a1 + 0x7600);                              // Load from: gStartMapOrEpisode (80077600)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x3E0C;                                       // Result = gBtnBinding_Attack (80073E0C)
    at = 0x80070000;                                    // Result = 80070000
    sb(v0, at + 0x7FB1);                                // Store to: gNetOutputPacket[1] (80077FB1)
    at = 0x80070000;                                    // Result = 80070000
    sb(v1, at + 0x7FB2);                                // Store to: gNetOutputPacket[2] (80077FB2)
    at = 0x80070000;                                    // Result = 80070000
    sb(a1, at + 0x7FB3);                                // Store to: gNetOutputPacket[3] (80077FB3)
    I_LocalButtonsToNet();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7FB4);                                // Store to: gNetOutputPacket[4] (80077FB4)
    a0 = 3;                                             // Result = 00000003
loc_800348EC:
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    LIBCOMB__comb_control();
    a0 = 3;                                             // Result = 00000003
    if (v0 == 0) goto loc_800348EC;
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7FB0;                                       // Result = gNetOutputPacket[0] (80077FB0)
    a0 = lw(gp + 0x934);                                // Load from: gNetOutputFd (80077F14)
    a2 = 8;                                             // Result = 00000008
    LIBAPI_write();
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7EA8;                                       // Result = gNetInputPacket[0] (80077EA8)
    a0 = lw(gp + 0xC54);                                // Load from: gNetInputFd (80078234)
    a2 = 8;                                             // Result = 00000008
    LIBAPI_read();
loc_80034928:
    a0 = lw(gp + 0x944);                                // Load from: gSioErrorEvent (80077F24)
    LIBAPI_TestEvent();
    if (v0 == 0) goto loc_80034928;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7EAC);                               // Load from: gNetInputPacket[4] (80077EAC)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x3E0C;                                       // Result = gBtnBinding_Attack (80073E0C)
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7FC8);                                // Store to: MAYBE_gpButtonBindings_Player1 (80077FC8)
    I_NetButtonsToLocal();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7FCC);                                // Store to: MAYBE_gpButtonBindings_Player2 (80077FCC)
    goto loc_80034A44;
loc_8003496C:
    sw(v0, gp + 0x62C);                                 // Store to: gbDidAbortGame (80077C0C)
    a0 = 2;                                             // Result = 00000002
    a1 = 3;                                             // Result = 00000003
    a2 = 0;                                             // Result = 00000000
    LIBCOMB__comb_control();
    goto loc_80034A48;
loc_80034988:
    a0 = lw(gp + 0xC54);                                // Load from: gNetInputFd (80078234)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7EA8;                                       // Result = gNetInputPacket[0] (80077EA8)
    a2 = 8;                                             // Result = 00000008
    LIBAPI_read();
loc_8003499C:
    a0 = lw(gp + 0x944);                                // Load from: gSioErrorEvent (80077F24)
    LIBAPI_TestEvent();
    if (v0 == 0) goto loc_8003499C;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7EAC);                               // Load from: gNetInputPacket[4] (80077EAC)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x7EA9);                              // Load from: gNetInputPacket[1] (80077EA9)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lbu(v1 + 0x7EAA);                              // Load from: gNetInputPacket[2] (80077EAA)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lbu(a1 + 0x7EAB);                              // Load from: gNetInputPacket[3] (80077EAB)
    s0 = 0x80070000;                                    // Result = 80070000
    s0 += 0x3E0C;                                       // Result = gBtnBinding_Attack (80073E0C)
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x7FCC);                                // Store to: MAYBE_gpButtonBindings_Player2 (80077FCC)
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7604);                                // Store to: gStartGameType (80077604)
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x75FC);                                // Store to: gStartSkill (800775FC)
    at = 0x80070000;                                    // Result = 80070000
    sw(a1, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
    I_NetButtonsToLocal();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7FC8);                                // Store to: MAYBE_gpButtonBindings_Player1 (80077FC8)
    a0 = s0;                                            // Result = gBtnBinding_Attack (80073E0C)
    I_LocalButtonsToNet();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7FB4);                                // Store to: gNetOutputPacket[4] (80077FB4)
    a0 = 3;                                             // Result = 00000003
loc_80034A1C:
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    LIBCOMB__comb_control();
    a0 = 3;                                             // Result = 00000003
    if (v0 == 0) goto loc_80034A1C;
    a0 = lw(gp + 0x934);                                // Load from: gNetOutputFd (80077F14)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7FB0;                                       // Result = gNetOutputPacket[0] (80077FB0)
    a2 = 8;                                             // Result = 00000008
    LIBAPI_write();
loc_80034A44:
    sw(0, gp + 0x62C);                                  // Store to: gbDidAbortGame (80077C0C)
loc_80034A48:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void I_NetUpdate() noexcept {
loc_80034A60:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x7814);                               // Load from: gPlayer1[0] (800A87EC)
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x76E8);                               // Load from: gPlayer2[0] (800A8918)
    sp -= 0x48;
    sw(ra, sp + 0x40);
    sw(s1, sp + 0x3C);
    sw(s0, sp + 0x38);
    v1 = lbu(v0);
    a1 = lbu(v0 + 0x4);
    a2 = lbu(a0);
    a0 = lbu(a0 + 0x4);
    v0 = 0xAA;                                          // Result = 000000AA
    sb(v0, gp + 0x9D0);                                 // Store to: gNetOutputPacket[0] (80077FB0)
    v1 ^= a1;
    v1 ^= a2;
    v1 ^= a0;
    v0 = v1 >> 8;
    v0 ^= v1;
    v1 >>= 16;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v0 ^= v1;
    at = 0x80070000;                                    // Result = 80070000
    sb(v0, at + 0x7FB1);                                // Store to: gNetOutputPacket[1] (80077FB1)
    a0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += a0;
    v0 = lbu(at);
    at = 0x80070000;                                    // Result = 80070000
    sb(v0, at + 0x7FB2);                                // Store to: gNetOutputPacket[2] (80077FB2)
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at += a0;
    v0 = lw(at);
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7FB4);                                // Store to: gNetOutputPacket[4] (80077FB4)
    I_NetSendRecv();
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    s0 = 0x80070000;                                    // Result = 80070000
    s0 += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    v1 = lbu(gp + 0x8C8);                               // Load from: gNetInputPacket[0] (80077EA8)
    v0 = 0xAA;                                          // Result = 000000AA
    if (v1 != v0) goto loc_80034B44;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lbu(v1 + 0x7EA9);                              // Load from: gNetInputPacket[1] (80077EA9)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x7FB1);                              // Load from: gNetOutputPacket[1] (80077FB1)
    if (v1 == v0) goto loc_80034C48;
loc_80034B44:
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 = lh(s0 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    a0 = 0;                                             // Result = 00000000
    LIBGPU_DrawSync();
    a3 = lw(gp + 0xB18);                                // Load from: gCurDrawDispBufferIdx (800780F8)
    v1 = a3 ^ 1;
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 2;
    a0 = a3 << 2;
    a0 += a3;
    a0 <<= 2;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6E9C;                                       // Result = gDispEnv1[0] (800A9164)
    at += v0;
    a1 = lh(at);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6E9A;                                       // Result = gDispEnv1[1] (800A9166)
    at += v0;
    a2 = lh(at);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x6E9C;                                       // Result = gDispEnv1[0] (800A9164)
    a0 += v0;
    LIBGPU_MoveImage();
    I_IncDrawnFrameCount();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7AF0;                                       // Result = gTexInfo_NETERR[0] (80097AF0)
    I_CacheTex();
    a1 = s0;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 = lhu(a0 + 0x7AFA);                              // Load from: gTexInfo_NETERR[2] (80097AFA)
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lbu(v0 + 0x7AF8);                              // Load from: gTexInfo_NETERR[2] (80097AF8)
    v1 = 0x80090000;                                    // Result = 80090000
    v1 = lbu(v1 + 0x7AF9);                              // Load from: gTexInfo_NETERR[2] (80097AF9)
    a3 = 0x80090000;                                    // Result = 80090000
    a3 = lh(a3 + 0x7AF4);                               // Load from: gTexInfo_NETERR[1] (80097AF4)
    t0 = 0x80090000;                                    // Result = 80090000
    t0 = lh(t0 + 0x7AF6);                               // Load from: gTexInfo_NETERR[1] (80097AF6)
    a2 = 0x54;                                          // Result = 00000054
    sw(a3, sp + 0x18);
    a3 = 0x6D;                                          // Result = 0000006D
    sw(v0, sp + 0x10);
    sw(v1, sp + 0x14);
    sw(t0, sp + 0x1C);
    I_DrawSprite();
    I_SubmitGpuCmds();
    I_DrawPresent();
    I_NetHandshake();
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7F48);                                 // Store to: gPlayerPadButtons[1] (80077F48)
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7DEC);                                 // Store to: gPlayerOldPadButtons[0] (80078214)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7F48);                                 // Store to: gPlayerPadButtons[1] (80077F48)
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7DEC);                                 // Store to: gPlayerOldPadButtons[0] (80078214)
    v0 = 1;                                             // Result = 00000001
    goto loc_80034CA0;
loc_80034C48:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v1 = s0;                                            // Result = gPlayerPadButtons[0] (80077F44)
    if (v0 != 0) goto loc_80034C64;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 += 0x7F48;                                       // Result = gPlayerPadButtons[1] (80077F48)
loc_80034C64:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EAC);                               // Load from: gNetInputPacket[4] (80077EAC)
    sw(v0, v1);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a0 = s1;                                            // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    if (v0 != 0) goto loc_80034C90;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7FC0;                                       // Result = gPlayersElapsedVBlanks[1] (80077FC0)
loc_80034C90:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lbu(v1 + 0x7EAA);                              // Load from: gNetInputPacket[2] (80077EAA)
    v0 = 0;                                             // Result = 00000000
    sw(v1, a0);
loc_80034CA0:
    ra = lw(sp + 0x40);
    s1 = lw(sp + 0x3C);
    s0 = lw(sp + 0x38);
    sp += 0x48;
    return;
}

void I_NetHandshake() noexcept {
loc_80034CB8:
    sp -= 0x18;
    sw(ra, sp + 0x14);
    sw(s0, sp + 0x10);
    s0 = 0;                                             // Result = 00000000
loc_80034CC8:
    sb(s0, gp + 0x9D0);                                 // Store to: gNetOutputPacket[0] (80077FB0)
    I_NetSendRecv();
    v1 = lbu(gp + 0x8C8);                               // Load from: gNetInputPacket[0] (80077EA8)
    v0 = lbu(gp + 0x9D0);                               // Load from: gNetOutputPacket[0] (80077FB0)
    {
        const bool bJump = (v1 != v0)
        v0 = (i32(s0) < 8);                             // Result = 00000001
        if (bJump) goto loc_80034CF8;
    }
    s0++;                                               // Result = 00000001
    v0 = (i32(s0) < 8);                                 // Result = 00000001
    if (v0 != 0) goto loc_80034CC8;
loc_80034CF8:
    s0 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80034CC8;
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void I_NetSendRecv() noexcept {
loc_80034D14:
    sp -= 0x18;
    sw(ra, sp + 0x14);
    sw(s0, sp + 0x10);
loc_80034D20:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    if (v0 == 0) goto loc_80034DB8;
    a0 = lw(gp + 0xC54);                                // Load from: gNetInputFd (80078234)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7EA8;                                       // Result = gNetInputPacket[0] (80077EA8)
    a2 = 8;                                             // Result = 00000008
    LIBAPI_read();
    a0 = -1;                                            // Result = FFFFFFFF
    LIBETC_VSync();
    s0 = v0;
loc_80034D54:
    a0 = lw(gp + 0x944);                                // Load from: gSioErrorEvent (80077F24)
    LIBAPI_TestEvent();
    a0 = 3;                                             // Result = 00000003
    if (v0 != 0) goto loc_80034D88;
    a0 = -1;                                            // Result = FFFFFFFF
    LIBETC_VSync();
    v0 -= s0;
    v0 = (i32(v0) < 0x12C);
    a0 = 2;                                             // Result = 00000002
    if (v0 != 0) goto loc_80034D54;
    goto loc_80034E30;
loc_80034D88:
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    LIBCOMB__comb_control();
    a0 = 3;                                             // Result = 00000003
    if (v0 == 0) goto loc_80034D88;
    a0 = lw(gp + 0x934);                                // Load from: gNetOutputFd (80077F14)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7FB0;                                       // Result = gNetOutputPacket[0] (80077FB0)
    a2 = 8;                                             // Result = 00000008
    LIBAPI_write();
    goto loc_80034E44;
loc_80034DB8:
    a0 = 3;                                             // Result = 00000003
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    LIBCOMB__comb_control();
    if (v0 == 0) goto loc_80034DB8;
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7FB0;                                       // Result = gNetOutputPacket[0] (80077FB0)
    a0 = lw(gp + 0x934);                                // Load from: gNetOutputFd (80077F14)
    a2 = 8;                                             // Result = 00000008
    LIBAPI_write();
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7EA8;                                       // Result = gNetInputPacket[0] (80077EA8)
    a0 = lw(gp + 0xC54);                                // Load from: gNetInputFd (80078234)
    a2 = 8;                                             // Result = 00000008
    LIBAPI_read();
    a0 = -1;                                            // Result = FFFFFFFF
    LIBETC_VSync();
    s0 = v0;
loc_80034E04:
    a0 = lw(gp + 0x944);                                // Load from: gSioErrorEvent (80077F24)
    LIBAPI_TestEvent();
    if (v0 != 0) goto loc_80034E44;
    a0 = -1;                                            // Result = FFFFFFFF
    LIBETC_VSync();
    v0 -= s0;
    v0 = (i32(v0) < 0x12C);
    a0 = 2;                                             // Result = 00000002
    if (v0 != 0) goto loc_80034E04;
loc_80034E30:
    a1 = 1;                                             // Result = 00000001
    a2 = 0;                                             // Result = 00000000
    LIBCOMB__comb_control();
    goto loc_80034D20;
loc_80034E44:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void I_SubmitGpuCmds() noexcept {
loc_80034E58:
    v0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    v1 = lw(gp + 0x638);                                // Load from: gpGpuPrimsEnd (80077C18)
    sp -= 0x18;
    sw(ra, sp + 0x10);
    if (v0 == v1) goto loc_80034E84;
    v0 = 0xFF0000;                                      // Result = 00FF0000
    v0 |= 0xFFFF;                                       // Result = 00FFFFFF
    sw(v0, v1);
    a0 = lw(gp + 0x634);                                // Load from: gpGpuPrimsBeg (80077C14)
    LIBGPU_DrawOTag();
loc_80034E84:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    sw(v0, gp + 0x634);                                 // Store to: gpGpuPrimsBeg (80077C14)
    sw(v0, gp + 0x638);                                 // Store to: gpGpuPrimsEnd (80077C18)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void I_LocalButtonsToNet() noexcept {
loc_80034EA4:
    t1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    t2 = 0x80070000;                                    // Result = 80070000
    t2 += 0x3DEC;                                       // Result = gBtnSprite_Triangle_ButtonMask (80073DEC)
loc_80034EB4:
    a1 = 0;                                             // Result = 00000000
    t0 = a2 << 2;
    a3 = lw(a0);
    v1 = t2;                                            // Result = gBtnSprite_Triangle_ButtonMask (80073DEC)
loc_80034EC4:
    v0 = lw(v1);
    {
        const bool bJump = (a3 == v0)
        v0 = a1 << t0;
        if (bJump) goto loc_80034EE8;
    }
    a1++;                                               // Result = 00000001
    v0 = (i32(a1) < 8);                                 // Result = 00000001
    v1 += 4;                                            // Result = gBtnSprite_Circle_ButtonMask (80073DF0)
    if (v0 != 0) goto loc_80034EC4;
    v0 = a1 << t0;
loc_80034EE8:
    t1 |= v0;
    a2++;
    v0 = (i32(a2) < 8);
    a0 += 4;
    if (v0 != 0) goto loc_80034EB4;
    v0 = t1;
    return;
}

void I_NetButtonsToLocal() noexcept {
loc_80034F04:
    v1 = 0;                                             // Result = 00000000
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x3DEC;                                       // Result = gBtnSprite_Triangle_ButtonMask (80073DEC)
    a1 = 0x80080000;                                    // Result = 80080000
    a1 -= 0x7D04;                                       // Result = 800782FC
loc_80034F18:
    v0 = v1 << 2;
    v0 = i32(a0) >> v0;
    v0 &= 0xF;
    v0 <<= 2;
    v0 += a2;
    v0 = lw(v0);
    v1++;
    sw(v0, a1);
    v0 = (i32(v1) < 8);
    a1 += 4;
    if (v0 != 0) goto loc_80034F18;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 -= 0x7D04;                                       // Result = 800782FC
    return;
}

void START_Legals() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    I_ResetTexCache();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7BD0;                                       // Result = gTexInfo_LEGALS[0] (80097BD0)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7C44;                                       // Result = STR_LumpName_LEGALS[0] (80077C44)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = 0;                                             // Result = 00000000
    a1 = 1;                                             // Result = 00000001
    S_StartSound();
    v0 = 0xF0;                                          // Result = 000000F0
    sw(v0, gp + 0xBB0);                                 // Store to: gTitleScreenSpriteY (80078190)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void STOP_Legals() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    a0 = 0;                                             // Result = 00000000
    a1 = 5;                                             // Result = 00000005
    S_StartSound();
    I_CrossFadeFrameBuffers();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void TIC_Legals() noexcept {
    v0 = lw(gp + 0xBB0);                                // Load from: gTitleScreenSpriteY (80078190)
    {
        const bool bJump = (i32(v0) <= 0)
        v0--;
        if (bJump) goto loc_80035000;
    }
    sw(v0, gp + 0xBB0);                                 // Store to: gTitleScreenSpriteY (80078190)
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80035044;
    }
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    sw(v0, gp + 0x92C);                                 // Store to: gMenuTimeoutStartTicCon (80077F0C)
    v0 = 0;                                             // Result = 00000000
    goto loc_80035044;
loc_80035000:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    v1 = lw(gp + 0x92C);                                // Load from: gMenuTimeoutStartTicCon (80077F0C)
    v1 = v0 - v1;
    v0 = (i32(v1) < 0x79);
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80035044;
    }
    v0 = (i32(v1) < 0xB4);
    {
        const bool bJump = (v0 == 0)
        v0 = 7;                                         // Result = 00000007
        if (bJump) goto loc_80035044;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F44);                               // Load from: gPlayerPadButtons[0] (80077F44)
    v0 = (v0 > 0);
    v0 = -v0;
    v0 &= 9;
loc_80035044:
    return;
}

void DRAW_Legals() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    I_IncDrawnFrameCount();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7BD0;                                       // Result = gTexInfo_LEGALS[0] (80097BD0)
    a2 = lw(gp + 0xBB0);                                // Load from: gTitleScreenSpriteY (80078190)
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    a1 = 0;                                             // Result = 00000000
    I_CacheAndDrawSprite();
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void START_Title() noexcept {
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    I_ResetTexCache();
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x7C4C;                                       // Result = STR_LumpName_LOADING[0] (80077C4C)
    a0 = s1;                                            // Result = STR_LumpName_LOADING[0] (80077C4C)
    a1 = 1;                                             // Result = 00000001
    a2 = 0;                                             // Result = 00000000
    W_CacheLumpName();
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x7A90;                                       // Result = gTexInfo_LOADING[0] (80097A90)
    a0 = s0;                                            // Result = gTexInfo_LOADING[0] (80097A90)
    a1 = s1;                                            // Result = STR_LumpName_LOADING[0] (80077C4C)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0;                                            // Result = gTexInfo_LOADING[0] (80097A90)
    a1 = 0x5F;                                          // Result = 0000005F
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    a2 = 0x6D;                                          // Result = 0000006D
    I_DrawPlaque();
    a0 = 0;                                             // Result = 00000000
    S_LoadSoundAndMusic();
    s4 = 0x80070000;                                    // Result = 80070000
    s4 += 0x7C54;                                       // Result = STR_LumpName_MARB01[0] (80077C54)
    a0 = s4;                                            // Result = STR_LumpName_MARB01[0] (80077C54)
    a1 = 1;                                             // Result = 00000001
    a2 = 0;                                             // Result = 00000000
    W_CacheLumpName();
    s3 = 0x80070000;                                    // Result = 80070000
    s3 += 0x7C5C;                                       // Result = STR_LumpName_BUTTONS[0] (80077C5C)
    a0 = s3;                                            // Result = STR_LumpName_BUTTONS[0] (80077C5C)
    a1 = 1;                                             // Result = 00000001
    a2 = 0;                                             // Result = 00000000
    W_CacheLumpName();
    s2 = 0x80070000;                                    // Result = 80070000
    s2 += 0x7C64;                                       // Result = STR_LumpName_NETERR[0] (80077C64)
    a0 = s2;                                            // Result = STR_LumpName_NETERR[0] (80077C64)
    a1 = 1;                                             // Result = 00000001
    a2 = 0;                                             // Result = 00000000
    W_CacheLumpName();
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x7C6C;                                       // Result = STR_LumpName_PAUSE[0] (80077C6C)
    a0 = s1;                                            // Result = STR_LumpName_PAUSE[0] (80077C6C)
    a1 = 1;                                             // Result = 00000001
    a2 = 0;                                             // Result = 00000000
    W_CacheLumpName();
    a0 = s0 + 0x20;                                     // Result = gTexInfo_MARB01[0] (80097AB0)
    a1 = s4;                                            // Result = STR_LumpName_MARB01[0] (80077C54)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0 + 0x40;                                     // Result = gTexInfo_BUTTONS[0] (80097AD0)
    a1 = s3;                                            // Result = STR_LumpName_BUTTONS[0] (80077C5C)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0 + 0x60;                                     // Result = gTexInfo_NETERR[0] (80097AF0)
    a1 = s2;                                            // Result = STR_LumpName_NETERR[0] (80077C64)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0 - 0x20;                                     // Result = gTexInfo_PAUSE[0] (80097A70)
    a1 = s1;                                            // Result = STR_LumpName_PAUSE[0] (80077C6C)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0 - 0x60;                                     // Result = gTexInfo_TITLE[0] (80097A30)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7C74;                                       // Result = STR_LumpName_TITLE[0] (80077C74)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7C7C;                                       // Result = STR_LumpName_SKY09[0] (80077C7C)
    R_TextureNumForName();
    a1 = 0x20;                                          // Result = 00000020
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7ED8);                               // Load from: gpTextures (80078128)
    v0 <<= 5;
    v0 += v1;
    a0 = lh(v0 + 0x10);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7FB0);                                // Store to: gpSkyTexture (80078050)
    a2 = 1;                                             // Result = 00000001
    W_CacheLumpNum();
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lhu(v0 - 0x6F5E);                              // Load from: gPaletteClutId_Sky (800A90A2)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0x7D34);                                // Store to: gPaletteClutId_CurMapSky (800782CC)
    I_CacheTex();
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x3E4C);                               // Load from: CDTrackNum_TitleScreen (80073E4C)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x75F8);                               // Load from: gCdMusicVol (800775F8)
    v0 = 0xFA;                                          // Result = 000000FA
    sw(v0, gp + 0xBB0);                                 // Store to: gTitleScreenSpriteY (80078190)
    psxcd_play();
loc_80035234:
    psxcd_elapsed_sectors();
    if (v0 == 0) goto loc_80035234;
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void STOP_Title() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    a0 = 0;                                             // Result = 00000000
    a1 = 5;                                             // Result = 00000005
    S_StartSound();
    psxcd_stop();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void TIC_Title() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F44);                               // Load from: gPlayerPadButtons[0] (80077F44)
    sp -= 0x18;
    sw(ra, sp + 0x10);
    if (v0 == 0) goto loc_800352B0;
    v0 = 9;                                             // Result = 00000009
    goto loc_800353FC;
loc_800352B0:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v1 = lw(gp + 0x6A4);                                // Load from: gVBlanksUntilTitleSprMove (80077C84)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    v0 = lw(at);
    v1 -= v0;
    sw(v1, gp + 0x6A4);                                 // Store to: gVBlanksUntilTitleSprMove (80077C84)
    v0 = 2;                                             // Result = 00000002
    if (i32(v1) > 0) goto loc_80035310;
    v1 = lw(gp + 0xBB0);                                // Load from: gTitleScreenSpriteY (80078190)
    sw(v0, gp + 0x6A4);                                 // Store to: gVBlanksUntilTitleSprMove (80077C84)
    v0 = v1 - 1;
    if (v1 == 0) goto loc_80035310;
    sw(v0, gp + 0xBB0);                                 // Store to: gTitleScreenSpriteY (80078190)
    if (v0 != 0) goto loc_80035310;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    sw(v0, gp + 0x92C);                                 // Store to: gMenuTimeoutStartTicCon (80077F0C)
loc_80035310:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v1 = lw(gp + 0x6A8);                                // Load from: gVBlanksUntilTitleFireMove (80077C88)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FBC;                                       // Result = gPlayersElapsedVBlanks[0] (80077FBC)
    at += v0;
    v0 = lw(at);
    v1 -= v0;
    sw(v1, gp + 0x6A8);                                 // Store to: gVBlanksUntilTitleFireMove (80077C88)
    {
        const bool bJump = (i32(v1) > 0)
        v1 = 2;                                         // Result = 00000002
        if (bJump) goto loc_800353C8;
    }
    v0 = lw(gp + 0xBB0);                                // Load from: gTitleScreenSpriteY (80078190)
    sw(v1, gp + 0x6A8);                                 // Store to: gVBlanksUntilTitleFireMove (80077C88)
    v1 = (i32(v0) < 0x32);
    v0 ^= 1;
    v0 &= 1;
    v1 &= v0;
    if (v1 == 0) goto loc_800353B8;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    v0 = lh(v0 + 0x10);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7DC4);                               // Load from: gpLumpCache (8007823C)
    v0 <<= 2;
    v0 += v1;
    a1 = lw(v0);
    v0 = lbu(a1 + 0x1FC8);
    a0 = v0 - 1;
    v1 = 0x3F;                                          // Result = 0000003F
    if (i32(a0) >= 0) goto loc_800353A4;
    a0 = 0;                                             // Result = 00000000
loc_800353A4:
    v0 = a1 + 0x2007;
loc_800353A8:
    sb(a0, v0);
    v1--;
    v0--;
    if (i32(v1) >= 0) goto loc_800353A8;
loc_800353B8:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    P_UpdateFireSky();
loc_800353C8:
    v1 = lw(gp + 0xBB0);                                // Load from: gTitleScreenSpriteY (80078190)
    v0 = 0;                                             // Result = 00000000
    if (v1 != 0) goto loc_800353FC;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    v1 = lw(gp + 0x92C);                                // Load from: gMenuTimeoutStartTicCon (80077F0C)
    v0 -= v1;
    v0 = (i32(v0) < 0x708);
    v0 ^= 1;
    v0 = -v0;
    v0 &= 7;
loc_800353FC:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void DRAW_Title() noexcept {
    sp -= 0x48;
    sw(ra, sp + 0x44);
    sw(s0, sp + 0x40);
    I_IncDrawnFrameCount();
    t0 = 9;                                             // Result = 00000009
    t1 = sp + 0x14;
    t3 = 0x24;                                          // Result = 00000024
    t4 = 0x28;                                          // Result = 00000028
    t2 = 0xFF0000;                                      // Result = 00FF0000
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    t8 = 0x80080000;                                    // Result = 80080000
    t8 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s0 = t8 & t2;                                       // Result = 00086550
    t7 = 0x4000000;                                     // Result = 04000000
    t6 = 0x80000000;                                    // Result = 80000000
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 = 0xFF;                                          // Result = 000000FF
    sb(v1, sp + 0x24);
    sb(v1, sp + 0x34);
    v1 = lhu(gp + 0xBB0);                               // Load from: gTitleScreenSpriteY (80078190)
    v0 = 9;                                             // Result = 00000009
    sb(v0, sp + 0x13);
    v0 = 0x2C;                                          // Result = 0000002C
    sb(v0, sp + 0x17);
    v0 = 0xFF;                                          // Result = 000000FF
    sh(v0, sp + 0x20);
    sh(v0, sp + 0x30);
    v0 = 0xEF;                                          // Result = 000000EF
    sb(v0, sp + 0x2D);
    sb(v0, sp + 0x35);
    v0 = 0x80;                                          // Result = 00000080
    sb(v0, sp + 0x14);
    sb(v0, sp + 0x15);
    sb(v0, sp + 0x16);
    v0 = 0x80090000;                                    // Result = 80090000
    v0 = lhu(v0 + 0x7A3A);                              // Load from: gTexInfo_TITLE[2] (80097A3A)
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lhu(a0 - 0x6F5A);                              // Load from: gPaletteClutId_Title (800A90A6)
    t5 = -1;                                            // Result = FFFFFFFF
    sh(0, sp + 0x18);
    sh(0, sp + 0x28);
    sb(0, sp + 0x1C);
    sb(0, sp + 0x1D);
    sb(0, sp + 0x25);
    sb(0, sp + 0x2C);
    sh(v1, sp + 0x1A);
    sh(v1, sp + 0x22);
    v1 += 0xEF;
    sh(v1, sp + 0x2A);
    sh(v1, sp + 0x32);
    sh(v0, sp + 0x26);
    sh(a0, sp + 0x1E);
loc_800354E0:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t3 + a0;
        if (bJump) goto loc_80035548;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t4 + a0;
        if (bJump) goto loc_8003560C;
    }
    v0 = lw(a3);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(t8, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s0;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80035548:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t3 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_800355FC;
    if (v1 == a0) goto loc_800354E0;
loc_8003556C:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= t7;
    if (v0 == 0) goto loc_800354E0;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t6;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800355D8;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800355BC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800355BC;
loc_800355D8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_800354E0;
    goto loc_8003556C;
loc_800355FC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t4;
loc_8003560C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;                                               // Result = 00000008
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_8003566C;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80035654:
    v0 = lw(t1);
    t1 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_80035654;
loc_8003566C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80035724;
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8003569C:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_80035724;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_80035708;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800356EC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800356EC;
loc_80035708:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003569C;
loc_80035724:
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    v1 = lw(a1 + 0x1C);
    v0 = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != v0)
        v0 = 9;                                         // Result = 00000009
        if (bJump) goto loc_800357C4;
    }
    v1 = lbu(a1 + 0x8);
    v0 = lhu(a1 + 0xA);
    v1 >>= 1;
    v0 &= 0xF;
    v0 <<= 6;
    v1 += v0;
    sh(v1, sp + 0x38);
    v1 = lhu(a1 + 0xA);
    a0 = lbu(a1 + 0x9);
    v0 = 0x20;                                          // Result = 00000020
    sh(v0, sp + 0x3C);
    v0 = 0x80;                                          // Result = 00000080
    sh(v0, sp + 0x3E);
    v1 &= 0x10;
    v1 <<= 4;
    a0 += v1;
    sh(a0, sp + 0x3A);
    v0 = lh(a1 + 0x10);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7DC4);                               // Load from: gpLumpCache (8007823C)
    v0 <<= 2;
    v0 += v1;
    a1 = lw(v0);
    a0 = sp + 0x38;
    a1 += 8;
    LIBGPU_LoadImage();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C10);                               // Load from: gNumFramesDrawn (80077C10)
    sw(v0, v1 + 0x1C);
    v0 = 9;                                             // Result = 00000009
loc_800357C4:
    sb(v0, sp + 0x13);
    v0 = 0x2C;                                          // Result = 0000002C
    sb(v0, sp + 0x17);
    v0 = 0x74;                                          // Result = 00000074
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FB0);                               // Load from: gpSkyTexture (80078050)
    v1 = 0x3F;                                          // Result = 0000003F
    sh(v0, sp + 0x1A);
    sh(v0, sp + 0x22);
    v0 = 0xF3;                                          // Result = 000000F3
    sh(0, sp + 0x18);
    sh(v1, sp + 0x20);
    sh(0, sp + 0x28);
    sh(v0, sp + 0x2A);
    sh(v1, sp + 0x30);
    sh(v0, sp + 0x32);
    v0 = lbu(a0 + 0x8);
    t6 = 0;                                             // Result = 00000000
    sb(v0, sp + 0x1C);
    v0 = lbu(a0 + 0x9);
    t4 = 0xFF0000;                                      // Result = 00FF0000
    sb(v0, sp + 0x1D);
    v0 = lbu(a0 + 0x8);
    t4 |= 0xFFFF;                                       // Result = 00FFFFFF
    v0 += 0x3F;
    sb(v0, sp + 0x24);
    v0 = lbu(a0 + 0x9);
    s0 = 0x80080000;                                    // Result = 80080000
    s0 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    sb(v0, sp + 0x25);
    v0 = lbu(a0 + 0x8);
    t9 = s0 & t4;                                       // Result = 00086550
    sb(v0, sp + 0x2C);
    v0 = lbu(a0 + 0x9);
    t8 = 0x4000000;                                     // Result = 04000000
    v0 += 0x7F;
    sb(v0, sp + 0x2D);
    v0 = lbu(a0 + 0x8);
    t7 = 0x80000000;                                    // Result = 80000000
    v0 += 0x3F;
    sb(v0, sp + 0x34);
    v1 = lbu(a0 + 0x9);
    v0 = 0x80;                                          // Result = 00000080
    sb(v0, sp + 0x14);
    sb(v0, sp + 0x15);
    sb(v0, sp + 0x16);
    v1 += 0x7F;
    sb(v1, sp + 0x35);
    v0 = lhu(a0 + 0xA);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lhu(v1 - 0x7D34);                              // Load from: gPaletteClutId_CurMapSky (800782CC)
    t5 = -1;                                            // Result = FFFFFFFF
    sh(v0, sp + 0x26);
    sh(v1, sp + 0x1E);
loc_8003589C:
    t3 = sp + 0x14;
    t0 = lbu(sp + 0x13);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_800358B4:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8003591C;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_800359E0;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t9;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003591C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_800359D0;
    if (v1 == a0) goto loc_800358B4;
loc_80035940:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= t8;
    if (v0 == 0) goto loc_800358B4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t7;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800359AC;
    a3 = -1;                                            // Result = FFFFFFFF
loc_80035990:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_80035990;
loc_800359AC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_800358B4;
    goto loc_80035940;
loc_800359D0:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_800359E0:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t4;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    a2 += 4;
    if (t0 == t5) goto loc_80035AA8;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80035A1C:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80035A1C;
    goto loc_80035AA8;
loc_80035A3C:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= t8;
    if (v0 == 0) goto loc_80035AC4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t7;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_80035AA8;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80035A8C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80035A8C;
loc_80035AA8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80035A3C;
loc_80035AC4:
    t6++;
    v0 = lhu(sp + 0x18);
    v1 = lhu(sp + 0x20);
    v0 += 0x3F;
    sh(v0, sp + 0x18);
    v0 = lhu(sp + 0x28);
    v1 += 0x3F;
    sh(v1, sp + 0x20);
    v1 = lhu(sp + 0x30);
    v0 += 0x3F;
    v1 += 0x3F;
    sh(v0, sp + 0x28);
    v0 = (i32(t6) < 4);
    sh(v1, sp + 0x30);
    if (v0 != 0) goto loc_8003589C;
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x44);
    s0 = lw(sp + 0x40);
    sp += 0x48;
    return;
}

void RunMenu() noexcept {
loc_80035B24:
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 -= 0x6F7C;                                       // Result = gPaletteClutId_Main (800A9084)
    sw(s1, sp + 0x14);
    s1 = 0x80090000;                                    // Result = 80090000
    s1 += 0x7A10;                                       // Result = gTexInfo_BACK[0] (80097A10)
    sw(s2, sp + 0x18);
    s2 = s1 + 0x40;                                     // Result = gTexInfo_DOOM[0] (80097A50)
    sw(ra, sp + 0x1C);
loc_80035B4C:
    a0 = 0x80030000;                                    // Result = 80030000
    a0 += 0x5C94;                                       // Result = M_Start (80035C94)
    a1 = 0x80030000;                                    // Result = 80030000
    a1 += 0x5E40;                                       // Result = M_Stop (80035E40)
    a2 = 0x80030000;                                    // Result = 80030000
    a2 += 0x5EC4;                                       // Result = M_Ticker (80035EC4)
    a3 = 0x80030000;                                    // Result = 80030000
    a3 += 0x6258;                                       // Result = M_Drawer (80036258)
    MiniLoop();
    v1 = 7;                                             // Result = 00000007
    {
        const bool bJump = (v0 == v1)
        v0 = 7;                                         // Result = 00000007
        if (bJump) goto loc_80035C78;
    }
    I_IncDrawnFrameCount();
    a0 = s1;                                            // Result = gTexInfo_BACK[0] (80097A10)
    a1 = 0;                                             // Result = 00000000
    a3 = lh(s0);                                        // Load from: gPaletteClutId_Main (800A9084)
    a2 = 0;                                             // Result = 00000000
    I_CacheAndDrawSprite();
    a0 = s2;                                            // Result = gTexInfo_DOOM[0] (80097A50)
    a1 = 0x4B;                                          // Result = 0000004B
    a3 = lh(s0 + 0x22);                                 // Load from: gPaletteClutId_Title (800A90A6)
    a2 = 0x14;                                          // Result = 00000014
    I_CacheAndDrawSprite();
    I_SubmitGpuCmds();
    I_DrawPresent();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7604);                               // Load from: gStartGameType (80077604)
    a0 = s1 + 0x100;                                    // Result = gTexInfo_CONNECT[0] (80097B10)
    if (v0 == 0) goto loc_80035C4C;
    a1 = 0x36;                                          // Result = 00000036
    a3 = lh(s0);                                        // Load from: gPaletteClutId_Main (800A9084)
    a2 = 0x67;                                          // Result = 00000067
    I_DrawPlaque();
    I_NetSetup();
    I_IncDrawnFrameCount();
    a0 = s1;                                            // Result = gTexInfo_BACK[0] (80097A10)
    a1 = 0;                                             // Result = 00000000
    a3 = lh(s0);                                        // Load from: gPaletteClutId_Main (800A9084)
    a2 = 0;                                             // Result = 00000000
    I_CacheAndDrawSprite();
    a0 = s2;                                            // Result = gTexInfo_DOOM[0] (80097A50)
    a1 = 0x4B;                                          // Result = 0000004B
    a3 = lh(s0 + 0x22);                                 // Load from: gPaletteClutId_Title (800A90A6)
    a2 = 0x14;                                          // Result = 00000014
    I_CacheAndDrawSprite();
    I_SubmitGpuCmds();
    I_DrawPresent();
    a0 = 0;                                             // Result = 00000000
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C0C);                               // Load from: gbDidAbortGame (80077C0C)
    if (v0 != 0) goto loc_80035B4C;
loc_80035C4C:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x75FC);                               // Load from: gStartSkill (800775FC)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x7600);                               // Load from: gStartMapOrEpisode (80077600)
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7604);                               // Load from: gStartGameType (80077604)
    G_InitNew();
    G_RunGame();
    v0 = 0;                                             // Result = 00000000
loc_80035C78:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void M_Start() noexcept {
    sp -= 0x28;
    v0 = 1;                                             // Result = 00000001
    sw(ra, sp + 0x24);
    sw(s0, sp + 0x20);
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7FA4);                                 // Store to: gNetGame (8007805C)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7618);                                 // Store to: gCurPlayerIndex (80077618)
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7F54);                                // Store to: gbPlayerInGame[0] (800780AC)
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7F50);                                 // Store to: gbPlayerInGame[1] (800780B0)
    I_ResetTexCache();
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x7A90;                                       // Result = gTexInfo_LOADING[0] (80097A90)
    a0 = s0;                                            // Result = gTexInfo_LOADING[0] (80097A90)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7C4C;                                       // Result = STR_LumpName_LOADING[0] (80077C4C)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0;                                            // Result = gTexInfo_LOADING[0] (80097A90)
    a1 = 0x5F;                                          // Result = 0000005F
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    a2 = 0x6D;                                          // Result = 0000006D
    I_DrawPlaque();
    a0 = 0;                                             // Result = 00000000
    S_LoadSoundAndMusic();
    a0 = s0 - 0x80;                                     // Result = gTexInfo_BACK[0] (80097A10)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7C8C;                                       // Result = STR_LumpName_BACK[0] (80077C8C)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0 - 0x40;                                     // Result = gTexInfo_DOOM[0] (80097A50)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7C94;                                       // Result = STR_LumpName_DOOM[0] (80077C94)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0 + 0x80;                                     // Result = gTexInfo_CONNECT[0] (80097B10)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7C9C;                                       // Result = STR_LumpName_CONNECT[0] (80077C9C)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7604);                               // Load from: gStartGameType (80077604)
    sw(0, gp + 0xBF8);                                  // Store to: gCursorFrame (800781D8)
    sw(0, gp + 0xA20);                                  // Store to: gCursorPos (80078000)
    sw(0, gp + 0x918);                                  // Store to: gVBlanksUntilMenuMove (80077EF8)
    {
        const bool bJump = (v0 != 0)
        v0 = 0x36;                                      // Result = 00000036
        if (bJump) goto loc_80035D64;
    }
    v0 = 2;                                             // Result = 00000002
loc_80035D64:
    sw(v0, gp + 0xB9C);                                 // Store to: gMaxStartEpisodeOrMap (8007817C)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7600);                               // Load from: gStartMapOrEpisode (80077600)
    v0 = lw(gp + 0xB9C);                                // Load from: gMaxStartEpisodeOrMap (8007817C)
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80035D8C;
    }
    v0 = 2;                                             // Result = 00000002
    if (i32(v1) >= 0) goto loc_80035D94;
loc_80035D8C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
loc_80035D94:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x3E50;                                       // Result = CDTrackNum_MainMenu (80073E50)
    a0 = lw(v0);                                        // Load from: CDTrackNum_MainMenu (80073E50)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x75F8);                               // Load from: gCdMusicVol (800775F8)
    a2 = 0;                                             // Result = 00000000
    sw(0, sp + 0x18);
    sw(0, sp + 0x1C);
    v0 = lw(v0);                                        // Load from: CDTrackNum_MainMenu (80073E50)
    a3 = 0;                                             // Result = 00000000
    sw(v0, sp + 0x10);
    sw(a1, sp + 0x14);
    psxcd_play_at_andloop();
loc_80035DC8:
    psxcd_elapsed_sectors();
    if (v0 == 0) goto loc_80035DC8;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F08);                               // Load from: gCurDrawDispBufferIdx (800780F8)
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 -= 0x6F3C;                                       // Result = gDrawEnv1[C] (800A90C4)
    sb(0, s0);                                          // Store to: gDrawEnv1[C] (800A90C4)
    at = 0x800B0000;                                    // Result = 800B0000
    sb(0, at - 0x6EE0);                                 // Store to: gDrawEnv2[C] (800A9120)
    v0 ^= 1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7F08);                                // Store to: gCurDrawDispBufferIdx (800780F8)
    M_Drawer();
    I_CrossFadeFrameBuffers();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    v0 = 1;                                             // Result = 00000001
    sb(v0, s0);                                         // Store to: gDrawEnv1[C] (800A90C4)
    at = 0x800B0000;                                    // Result = 800B0000
    sb(v0, at - 0x6EE0);                                // Store to: gDrawEnv2[C] (800A9120)
    sw(v1, gp + 0x92C);                                 // Store to: gMenuTimeoutStartTicCon (80077F0C)
    ra = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x28;
    return;
}

void M_Stop() noexcept {
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    a0 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x14);
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
    psxcd_stop();
    v0 = 9;                                             // Result = 00000009
    if (s0 != v0) goto loc_80035EB0;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7604);                               // Load from: gStartGameType (80077604)
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80035EB0;
    }
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7600);                               // Load from: gStartMapOrEpisode (80077600)
    {
        const bool bJump = (v1 != v0)
        v0 = 0x1F;                                      // Result = 0000001F
        if (bJump) goto loc_80035EA8;
    }
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
    goto loc_80035EB0;
loc_80035EA8:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
loc_80035EB0:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void M_Ticker() noexcept {
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = 0x80070000;                                    // Result = 80070000
    s0 = lw(s0 + 0x7F44);                               // Load from: gPlayerPadButtons[0] (80077F44)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7DEC);                               // Load from: gPlayerOldPadButtons[0] (80078214)
    sw(ra, sp + 0x14);
    if (s0 == 0) goto loc_80035EF4;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    sw(v0, gp + 0x92C);                                 // Store to: gMenuTimeoutStartTicCon (80077F0C)
loc_80035EF4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    v1 = lw(gp + 0x92C);                                // Load from: gMenuTimeoutStartTicCon (80077F0C)
    v0 -= v1;
    v0 = (i32(v0) < 0x708);
    {
        const bool bJump = (v0 == 0)
        v0 = 7;                                         // Result = 00000007
        if (bJump) goto loc_80036244;
    }
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = v1 & 3;
        if (bJump) goto loc_80035F4C;
    }
    if (v0 != 0) goto loc_80035F4C;
    v0 = lw(gp + 0xBF8);                                // Load from: gCursorFrame (800781D8)
    v0 ^= 1;
    sw(v0, gp + 0xBF8);                                 // Store to: gCursorFrame (800781D8)
loc_80035F4C:
    v0 = s0 & 0x800;
    if (s0 == a0) goto loc_80035FCC;
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0xF0;
        if (bJump) goto loc_80035F64;
    }
    v0 = 9;                                             // Result = 00000009
    goto loc_80036244;
loc_80035F64:
    if (v0 == 0) goto loc_80035FCC;
    v1 = lw(gp + 0xA20);                                // Load from: gCursorPos (80078000)
    v0 = (i32(v1) < 3);
    if (i32(v1) < 0) goto loc_80035FCC;
    {
        const bool bJump = (v0 != 0)
        v0 = 9;                                         // Result = 00000009
        if (bJump) goto loc_80036244;
    }
    v0 = 3;                                             // Result = 00000003
    {
        const bool bJump = (v1 != v0)
        v0 = s0 & 0xF000;
        if (bJump) goto loc_80035FD0;
    }
    a0 = 0x80040000;                                    // Result = 80040000
    a0 -= 0x16F0;                                       // Result = O_Init (8003E910)
    a1 = 0x80040000;                                    // Result = 80040000
    a1 -= 0x1630;                                       // Result = O_Shutdown (8003E9D0)
    a2 = 0x80040000;                                    // Result = 80040000
    a2 -= 0x160C;                                       // Result = O_Control (8003E9F4)
    a3 = 0x80040000;                                    // Result = 80040000
    a3 -= 0x1138;                                       // Result = O_Drawer (8003EEC8)
    MiniLoop();
    v1 = 4;                                             // Result = 00000004
    {
        const bool bJump = (v0 != v1)
        v0 = s0 & 0xF000;
        if (bJump) goto loc_80035FD0;
    }
    v0 = 4;                                             // Result = 00000004
    goto loc_80036244;
loc_80035FCC:
    v0 = s0 & 0xF000;
loc_80035FD0:
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80035FE4;
    }
    sw(0, gp + 0x918);                                  // Store to: gVBlanksUntilMenuMove (80077EF8)
    goto loc_80036244;
loc_80035FE4:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7EF8;                                       // Result = gVBlanksUntilMenuMove (80077EF8)
    v0 = lw(a0);                                        // Load from: gVBlanksUntilMenuMove (80077EF8)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7FBC);                               // Load from: gPlayersElapsedVBlanks[0] (80077FBC)
    v0 -= v1;
    sw(v0, a0);                                         // Store to: gVBlanksUntilMenuMove (80077EF8)
    if (i32(v0) > 0) goto loc_80036240;
    v0 = 0xF;                                           // Result = 0000000F
    sw(v0, a0);                                         // Store to: gVBlanksUntilMenuMove (80077EF8)
    v0 = s0 & 0x4000;
    v1 = 4;                                             // Result = 00000004
    if (v0 == 0) goto loc_80036040;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0x8000;                                       // Result = gCursorPos (80078000)
    v0 = lw(a0);                                        // Load from: gCursorPos (80078000)
    v0++;
    sw(v0, a0);                                         // Store to: gCursorPos (80078000)
    if (v0 != v1) goto loc_80036070;
    sw(0, a0);                                          // Store to: gCursorPos (80078000)
    goto loc_80036070;
loc_80036040:
    v0 = s0 & 0x1000;
    v1 = -1;                                            // Result = FFFFFFFF
    if (v0 == 0) goto loc_8003607C;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0x8000;                                       // Result = gCursorPos (80078000)
    v0 = lw(a0);                                        // Load from: gCursorPos (80078000)
    v0--;
    sw(v0, a0);                                         // Store to: gCursorPos (80078000)
    if (v0 != v1) goto loc_80036070;
    v0 = 3;                                             // Result = 00000003
    sw(v0, a0);                                         // Store to: gCursorPos (80078000)
loc_80036070:
    a0 = 0;                                             // Result = 00000000
    a1 = 0x12;                                          // Result = 00000012
    S_StartSound();
loc_8003607C:
    v1 = lw(gp + 0xA20);                                // Load from: gCursorPos (80078000)
    a0 = 1;                                             // Result = 00000001
    v0 = (i32(v1) < 2);
    if (v1 == a0) goto loc_80036178;
    if (v0 == 0) goto loc_800360A4;
    v0 = s0 & 0x2000;
    if (v1 == 0) goto loc_800360B8;
    v0 = 0;                                             // Result = 00000000
    goto loc_80036244;
loc_800360A4:
    v0 = 2;                                             // Result = 00000002
    {
        const bool bJump = (v1 == v0)
        v0 = s0 & 0x2000;
        if (bJump) goto loc_800361E8;
    }
    v0 = 0;                                             // Result = 00000000
    goto loc_80036244;
loc_800360B8:
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x8000;
        if (bJump) goto loc_800360F0;
    }
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7604);                               // Load from: gStartGameType (80077604)
    v0 = (v1 < 2);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 + 1;
        if (bJump) goto loc_80036130;
    }
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7604);                                // Store to: gStartGameType (80077604)
    if (v0 == a0) goto loc_8003611C;
    a0 = 0;                                             // Result = 00000000
    goto loc_80036128;
loc_800360F0:
    if (v0 == 0) goto loc_80036130;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7604);                               // Load from: gStartGameType (80077604)
    {
        const bool bJump = (v0 == 0)
        v0--;
        if (bJump) goto loc_80036144;
    }
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7604);                                // Store to: gStartGameType (80077604)
    if (v0 != 0) goto loc_80036124;
loc_8003611C:
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
loc_80036124:
    a0 = 0;                                             // Result = 00000000
loc_80036128:
    a1 = 0x17;                                          // Result = 00000017
    S_StartSound();
loc_80036130:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7604);                               // Load from: gStartGameType (80077604)
    {
        const bool bJump = (v0 != 0)
        v0 = 0x36;                                      // Result = 00000036
        if (bJump) goto loc_80036148;
    }
loc_80036144:
    v0 = 2;                                             // Result = 00000002
loc_80036148:
    sw(v0, gp + 0xB9C);                                 // Store to: gMaxStartEpisodeOrMap (8007817C)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7600);                               // Load from: gStartMapOrEpisode (80077600)
    v0 = lw(gp + 0xB9C);                                // Load from: gMaxStartEpisodeOrMap (8007817C)
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80036240;
    }
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
    v0 = 0;                                             // Result = 00000000
    goto loc_80036244;
loc_80036178:
    v0 = s0 & 0x2000;
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x8000;
        if (bJump) goto loc_800361B0;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7600);                               // Load from: gStartMapOrEpisode (80077600)
    v1 = lw(gp + 0xB9C);                                // Load from: gMaxStartEpisodeOrMap (8007817C)
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
    v0 = (i32(v1) < i32(v0));
    a0 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_800361D8;
    goto loc_80036238;
loc_800361B0:
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80036244;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7600);                               // Load from: gStartMapOrEpisode (80077600)
    v0--;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
    a0 = 0;                                             // Result = 00000000
    if (i32(v0) > 0) goto loc_80036238;
loc_800361D8:
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
    v0 = 0;                                             // Result = 00000000
    goto loc_80036244;
loc_800361E8:
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x8000;
        if (bJump) goto loc_80036210;
    }
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x75FC);                               // Load from: gStartSkill (800775FC)
    v0 = (v1 < 3);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 + 1;
        if (bJump) goto loc_80036240;
    }
    goto loc_8003622C;
loc_80036210:
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80036244;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x75FC);                               // Load from: gStartSkill (800775FC)
    {
        const bool bJump = (v0 == 0)
        v0--;
        if (bJump) goto loc_80036240;
    }
loc_8003622C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x75FC);                                // Store to: gStartSkill (800775FC)
    a0 = 0;                                             // Result = 00000000
loc_80036238:
    a1 = 0x17;                                          // Result = 00000017
    S_StartSound();
loc_80036240:
    v0 = 0;                                             // Result = 00000000
loc_80036244:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void M_Drawer() noexcept {
loc_80036258:
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s0, sp + 0x20);
    I_IncDrawnFrameCount();
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x7A10;                                       // Result = gTexInfo_BACK[0] (80097A10)
    a0 = s0;                                            // Result = gTexInfo_BACK[0] (80097A10)
    a1 = 0;                                             // Result = 00000000
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F7C);                               // Load from: gPaletteClutId_Main (800A9084)
    a2 = 0;                                             // Result = 00000000
    I_CacheAndDrawSprite();
    a0 = s0 + 0x40;                                     // Result = gTexInfo_DOOM[0] (80097A50)
    a1 = 0x4B;                                          // Result = 0000004B
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F5A);                               // Load from: gPaletteClutId_Title (800A90A6)
    a2 = 0x14;                                          // Result = 00000014
    I_CacheAndDrawSprite();
    a2 = 0x32;                                          // Result = 00000032
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lhu(a0 - 0x6B0E);                              // Load from: gTexInfo_STATUS[2] (800A94F2)
    a1 = 0x800B0000;                                    // Result = 800B0000
    a1 = lh(a1 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    v1 = lw(gp + 0xA20);                                // Load from: gCursorPos (80078000)
    v0 = lw(gp + 0xBF8);                                // Load from: gCursorFrame (800781D8)
    v1 <<= 1;
    v0 <<= 4;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7C34;                                       // Result = MainMenu_GameMode_YPos (80077C34)
    at += v1;
    a3 = lh(at);
    v0 += 0x84;
    sw(v0, sp + 0x10);
    v0 = 0xC0;                                          // Result = 000000C0
    sw(v0, sp + 0x14);
    v0 = 0x10;                                          // Result = 00000010
    sw(v0, sp + 0x18);
    v0 = 0x12;                                          // Result = 00000012
    sw(v0, sp + 0x1C);
    a3 -= 2;
    I_DrawSprite();
    a1 = lh(gp + 0x654);                                // Load from: MainMenu_GameMode_YPos (80077C34)
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1568;                                       // Result = STR_GameMode[0] (80011568)
    a0 = 0x4A;                                          // Result = 0000004A
    I_DrawString();
    a0 = 0x5A;                                          // Result = 0000005A
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x3CDC;                                       // Result = STR_MenuOpt_SinglePlayer[0] (80073CDC)
    a1 = lh(gp + 0x654);                                // Load from: MainMenu_GameMode_YPos (80077C34)
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7604);                               // Load from: gStartGameType (80077604)
    a1 += 0x14;
    a2 <<= 4;
    a2 += v0;
    I_DrawString();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7604);                               // Load from: gStartGameType (80077604)
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80036398;
    }
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7600);                               // Load from: gStartMapOrEpisode (80077600)
    if (v1 != v0) goto loc_8003637C;
    a1 = lh(gp + 0x656);                                // Load from: MainMenu_Episode_YPos (80077C36)
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1574;                                       // Result = STR_UltimateDoom[0] (80011574)
    a0 = 0x4A;                                          // Result = 0000004A
    I_DrawString();
    goto loc_800363D4;
loc_8003637C:
    a1 = lh(gp + 0x656);                                // Load from: MainMenu_Episode_YPos (80077C36)
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7CA4;                                       // Result = STR_Doom2[0] (80077CA4)
    a0 = 0x4A;                                          // Result = 0000004A
    I_DrawString();
    goto loc_800363D4;
loc_80036398:
    a1 = lh(gp + 0x656);                                // Load from: MainMenu_Episode_YPos (80077C36)
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7CAC;                                       // Result = STR_Level[0] (80077CAC)
    a0 = 0x4A;                                          // Result = 0000004A
    I_DrawString();
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7600);                               // Load from: gStartMapOrEpisode (80077600)
    v0 = (i32(a2) < 0xA);
    a0 = 0x88;                                          // Result = 00000088
    if (v0 != 0) goto loc_800363C8;
    a0 = 0x94;                                          // Result = 00000094
loc_800363C8:
    a1 = lh(gp + 0x656);                                // Load from: MainMenu_Episode_YPos (80077C36)
    I_DrawNumber();
loc_800363D4:
    a1 = lh(gp + 0x658);                                // Load from: MainMenu_Difficulty_YPos (80077C38)
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1584;                                       // Result = STR_Difficulty[0] (80011584)
    a0 = 0x4A;                                          // Result = 0000004A
    I_DrawString();
    a0 = 0x5A;                                          // Result = 0000005A
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x3D0C;                                       // Result = STR_MenuOpt_IAmAWimp[0] (80073D0C)
    a1 = lh(gp + 0x658);                                // Load from: MainMenu_Difficulty_YPos (80077C38)
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x75FC);                               // Load from: gStartSkill (800775FC)
    a1 += 0x14;
    a2 <<= 4;
    a2 += v0;
    I_DrawString();
    a1 = lh(gp + 0x65A);                                // Load from: MainMenu_Options_YPos (80077C3A)
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7CB4;                                       // Result = STR_Options[0] (80077CB4)
    a0 = 0x4A;                                          // Result = 0000004A
    I_DrawString();
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x28;
    return;
}

void I_CrossFadeFrameBuffers() noexcept {
loc_80036448:
    sp -= 0x188;
    sw(ra, sp + 0x184);
    sw(s6, sp + 0x180);
    sw(s5, sp + 0x17C);
    sw(s4, sp + 0x178);
    sw(s3, sp + 0x174);
    sw(s2, sp + 0x170);
    sw(s1, sp + 0x16C);
    sw(s0, sp + 0x168);
    I_ResetTexCache();
    s3 = sp + 0x68;
    a0 = s3;
    a1 = 0x200;                                         // Result = 00000200
    a2 = 0x100;                                         // Result = 00000100
    a3 = 0x100;                                         // Result = 00000100
    s1 = 0xF0;                                          // Result = 000000F0
    sw(s1, sp + 0x10);
    LIBGPU_SetDefDrawEnv();
    a0 = sp + 0xC4;
    a1 = 0x300;                                         // Result = 00000300
    a2 = 0x100;                                         // Result = 00000100
    a3 = 0x100;                                         // Result = 00000100
    s0 = 1;                                             // Result = 00000001
    sb(s0, sp + 0x80);
    sb(0, sp + 0x7E);
    sb(s0, sp + 0x7F);
    sw(s1, sp + 0x10);
    LIBGPU_SetDefDrawEnv();
    s2 = sp + 0x120;
    a0 = s2;
    a1 = 0x300;                                         // Result = 00000300
    a2 = 0x100;                                         // Result = 00000100
    a3 = 0x100;                                         // Result = 00000100
    sb(s0, sp + 0xDC);
    sb(0, sp + 0xDA);
    sb(s0, sp + 0xDB);
    sw(s1, sp + 0x10);
    LIBGPU_SetDefDispEnv();
    a0 = sp + 0x134;
    a1 = 0x200;                                         // Result = 00000200
    a2 = 0x100;                                         // Result = 00000100
    a3 = 0x100;                                         // Result = 00000100
    sw(s1, sp + 0x10);
    LIBGPU_SetDefDispEnv();
    a1 = 0x300;                                         // Result = 00000300
    a2 = 0x100;                                         // Result = 00000100
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F08);                               // Load from: gCurDrawDispBufferIdx (800780F8)
    s4 = 0;                                             // Result = 00000000
    a0 = v0 << 2;
    a0 += v0;
    a0 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x6E9C;                                       // Result = gDispEnv1[0] (800A9164)
    a0 += v0;
    LIBGPU_MoveImage();
    a0 = 0;                                             // Result = 00000000
    LIBGPU_DrawSync();
    a0 = 0;                                             // Result = 00000000
    LIBETC_VSync();
    a0 = s3;
    LIBGPU_PutDrawEnv();
    a0 = s2;
    LIBGPU_PutDispEnv();
    v0 = 9;                                             // Result = 00000009
    sb(v0, sp + 0x1B);
    v0 = 0x2C;                                          // Result = 0000002C
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7F08);                               // Load from: gCurDrawDispBufferIdx (800780F8)
    v1 = 0xFF;                                          // Result = 000000FF
    sb(v0, sp + 0x1F);
    v0 = 0xEF;                                          // Result = 000000EF
    sh(v1, sp + 0x28);
    sh(v1, sp + 0x38);
    v1 = 0xFF;                                          // Result = 000000FF
    sh(v0, sp + 0x32);
    sh(v0, sp + 0x3A);
    v0 = 0xEF;                                          // Result = 000000EF
    sh(0, sp + 0x20);
    sh(0, sp + 0x22);
    sh(0, sp + 0x2A);
    sh(0, sp + 0x30);
    sb(0, sp + 0x24);
    sb(0, sp + 0x25);
    sb(v1, sp + 0x2C);
    sb(0, sp + 0x2D);
    sb(0, sp + 0x34);
    sb(v0, sp + 0x35);
    sb(v1, sp + 0x3C);
    sb(v0, sp + 0x3D);
    if (a0 != 0) goto loc_800365C4;
    a0 = 2;                                             // Result = 00000002
    a1 = 0;                                             // Result = 00000000
    a2 = 0x100;                                         // Result = 00000100
    goto loc_800365D0;
loc_800365C4:
    a0 = 2;                                             // Result = 00000002
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
loc_800365D0:
    a3 = 0;                                             // Result = 00000000
    LIBGPU_GetTPage();
    sh(v0, sp + 0x2E);
    v0 = 9;                                             // Result = 00000009
    sb(v0, sp + 0x43);
    v0 = 0x2E;                                          // Result = 0000002E
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7F08);                               // Load from: gCurDrawDispBufferIdx (800780F8)
    v1 = 0xFF;                                          // Result = 000000FF
    sb(v0, sp + 0x47);
    v0 = 0xEF;                                          // Result = 000000EF
    sh(v1, sp + 0x50);
    sh(v1, sp + 0x60);
    v1 = 0xFF;                                          // Result = 000000FF
    sh(v0, sp + 0x5A);
    sh(v0, sp + 0x62);
    v0 = 0xEF;                                          // Result = 000000EF
    sh(0, sp + 0x26);
    sh(0, sp + 0x48);
    sh(0, sp + 0x4A);
    sh(0, sp + 0x52);
    sh(0, sp + 0x58);
    sb(0, sp + 0x4C);
    sb(0, sp + 0x4D);
    sb(v1, sp + 0x54);
    sb(0, sp + 0x55);
    sb(0, sp + 0x5C);
    sb(v0, sp + 0x5D);
    sb(v1, sp + 0x64);
    sb(v0, sp + 0x65);
    if (a0 == 0) goto loc_8003665C;
    a0 = 2;                                             // Result = 00000002
    a1 = 0;                                             // Result = 00000000
    a2 = 0x100;                                         // Result = 00000100
    goto loc_80036668;
loc_8003665C:
    a0 = 2;                                             // Result = 00000002
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
loc_80036668:
    a3 = 0;                                             // Result = 00000000
    LIBGPU_GetTPage();
    sh(v0, sp + 0x56);
    sh(0, sp + 0x4E);
    s1 = 0xFF;                                          // Result = 000000FF
    s0 = 0xFF0000;                                      // Result = 00FF0000
    s0 |= 0xFFFF;                                       // Result = 00FFFFFF
    s6 = 0x80080000;                                    // Result = 80080000
    s6 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s5 = s6 & s0;                                       // Result = 00086550
    s3 = 0x4000000;                                     // Result = 04000000
    s2 = 0x80000000;                                    // Result = 80000000
    t3 = sp + 0x1C;
loc_8003669C:
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = lbu(sp + 0x1B);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = ~s1;
    sb(s1, sp + 0x1C);
    sb(s1, sp + 0x1D);
    sb(s1, sp + 0x1E);
    sb(v0, sp + 0x44);
    sb(v0, sp + 0x45);
    sb(v0, sp + 0x46);
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_800366D0:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80036738;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_800367FC;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(s6, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s5;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80036738:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_800367EC;
    if (v1 == a0) goto loc_800366D0;
loc_8003675C:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= s3;
    if (v0 == 0) goto loc_800366D0;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= s0;
    v0 |= s2;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_800367C8;
    a3 = -1;                                            // Result = FFFFFFFF
loc_800367AC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_800367AC;
loc_800367C8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_800366D0;
    goto loc_8003675C;
loc_800367EC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_800367FC:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= s0;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_80036854;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003683C:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_8003683C;
loc_80036854:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_800368FC;
    a3 = -1;                                            // Result = FFFFFFFF
loc_80036874:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= s3;
    if (v0 == 0) goto loc_800368FC;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= s0;
    v0 |= s2;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == a3) goto loc_800368E0;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800368C4:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800368C4;
loc_800368E0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80036874;
loc_800368FC:
    t3 = sp + 0x44;
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = lbu(sp + 0x43);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_80036918:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80036980;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_80036A44;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(s6, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s5;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80036980:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80036A34;
    if (v1 == a0) goto loc_80036918;
loc_800369A4:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= s3;
    if (v0 == 0) goto loc_80036918;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= s0;
    v0 |= s2;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_80036A10;
    a3 = -1;                                            // Result = FFFFFFFF
loc_800369F4:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_800369F4;
loc_80036A10:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80036918;
    goto loc_800369A4;
loc_80036A34:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_80036A44:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= s0;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_80036A9C;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80036A84:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80036A84;
loc_80036A9C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a3 = -1;                                            // Result = FFFFFFFF
    if (v1 == v0) goto loc_80036B40;
loc_80036AB8:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= s3;
    if (v0 == 0) goto loc_80036B40;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= s0;
    v0 |= s2;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == a3) goto loc_80036B24;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80036B08:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80036B08;
loc_80036B24:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80036AB8;
loc_80036B40:
    s4 ^= 1;
    I_SubmitGpuCmds();
    a0 = 0;                                             // Result = 00000000
    LIBGPU_DrawSync();
    a0 = 0;                                             // Result = 00000000
    LIBETC_VSync();
    v0 = sp + 0x68;
    a0 = s4 << 1;
    a0 += s4;
    a0 <<= 3;
    a0 -= s4;
    a0 <<= 2;
    a0 += v0;
    LIBGPU_PutDrawEnv();
    v0 = sp + 0x120;
    a0 = s4 << 2;
    a0 += s4;
    a0 <<= 2;
    a0 += v0;
    LIBGPU_PutDispEnv();
    s1 -= 5;
    t3 = sp + 0x1C;
    if (i32(s1) >= 0) goto loc_8003669C;
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x184);
    s6 = lw(sp + 0x180);
    s5 = lw(sp + 0x17C);
    s4 = lw(sp + 0x178);
    s3 = lw(sp + 0x174);
    s2 = lw(sp + 0x170);
    s1 = lw(sp + 0x16C);
    s0 = lw(sp + 0x168);
    sp += 0x188;
    return;
}

void START_Credits() noexcept {
    sp -= 0x28;
    sw(s0, sp + 0x20);
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x7B30;                                       // Result = gTexInfo_IDCRED1[0] (80097B30)
    a0 = s0;                                            // Result = gTexInfo_IDCRED1[0] (80097B30)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7CBC;                                       // Result = STR_LumpName_IDCRED1[0] (80077CBC)
    sw(ra, sp + 0x24);
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0 + 0x20;                                     // Result = gTexInfo_IDCRED2[0] (80097B50)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7CC4;                                       // Result = STR_LumpName_IDCRED2[0] (80077CC4)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0 + 0x40;                                     // Result = gTexInfo_WMSCRED1[0] (80097B70)
    a1 = 0x80010000;                                    // Result = 80010000
    a1 += 0x1590;                                       // Result = STR_LumpName_WMSCRED1[0] (80011590)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = s0 + 0x60;                                     // Result = gTexInfo_WMSCRED2[0] (80097B90)
    a1 = 0x80010000;                                    // Result = 80010000
    a1 += 0x159C;                                       // Result = STR_LumpName_WMSCRED2[0] (8001159C)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    v1 = 0x80070000;                                    // Result = 80070000
    v1 += 0x3E54;                                       // Result = CDTrackNum_Credits_Demo (80073E54)
    a2 = 0;                                             // Result = 00000000
    a0 = lw(v1);                                        // Load from: CDTrackNum_Credits_Demo (80073E54)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x75F8);                               // Load from: gCdMusicVol (800775F8)
    v0 = 0xF0;                                          // Result = 000000F0
    sw(v0, gp + 0xC7C);                                 // Store to: gCreditsScrollYPos (8007825C)
    sw(0, sp + 0x18);
    sw(0, sp + 0x1C);
    v0 = lw(v1);                                        // Load from: CDTrackNum_Credits_Demo (80073E54)
    a3 = 0;                                             // Result = 00000000
    sw(0, gp + 0xBC4);                                  // Store to: gCreditsPage (800781A4)
    sw(v0, sp + 0x10);
    sw(a1, sp + 0x14);
    psxcd_play_at_andloop();
loc_80036C7C:
    psxcd_elapsed_sectors();
    if (v0 == 0) goto loc_80036C7C;
    ra = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x28;
    return;
}

void STOP_Credits() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxcd_stop();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void TIC_Credits() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F44);                               // Load from: gPlayerPadButtons[0] (80077F44)
    {
        const bool bJump = (v0 != 0)
        v0 = 9;                                         // Result = 00000009
        if (bJump) goto loc_80036D50;
    }
    v0 = lw(gp + 0x6EC);                                // Load from: gVBlanksUntilCreditScreenUpdate (80077CCC)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7FBC);                               // Load from: gPlayersElapsedVBlanks[0] (80077FBC)
    v0 -= v1;
    sw(v0, gp + 0x6EC);                                 // Store to: gVBlanksUntilCreditScreenUpdate (80077CCC)
    {
        const bool bJump = (i32(v0) > 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80036D50;
    }
    v0 = 2;                                             // Result = 00000002
    sw(v0, gp + 0x6EC);                                 // Store to: gVBlanksUntilCreditScreenUpdate (80077CCC)
    v0 = lw(gp + 0xC7C);                                // Load from: gCreditsScrollYPos (8007825C)
    a0 = lw(gp + 0xBC4);                                // Load from: gCreditsPage (800781A4)
    v1 = v0 - 1;
    sw(v1, gp + 0xC7C);                                 // Store to: gCreditsScrollYPos (8007825C)
    v0 = 1;                                             // Result = 00000001
    if (a0 == 0) goto loc_80036D24;
    {
        const bool bJump = (a0 == v0)
        v0 = (i32(v1) < -0xE4);
        if (bJump) goto loc_80036D44;
    }
    v0 = 0;                                             // Result = 00000000
    goto loc_80036D50;
loc_80036D24:
    v0 = (i32(v1) < -0xB6);
    {
        const bool bJump = (v0 == 0)
        v0 = 0xF0;                                      // Result = 000000F0
        if (bJump) goto loc_80036D4C;
    }
    sw(v0, gp + 0xC7C);                                 // Store to: gCreditsScrollYPos (8007825C)
    v0 = 1;                                             // Result = 00000001
    sw(v0, gp + 0xBC4);                                 // Store to: gCreditsPage (800781A4)
    v0 = 0;                                             // Result = 00000000
    goto loc_80036D50;
loc_80036D44:
    {
        const bool bJump = (v0 != 0)
        v0 = 5;                                         // Result = 00000005
        if (bJump) goto loc_80036D50;
    }
loc_80036D4C:
    v0 = 0;                                             // Result = 00000000
loc_80036D50:
    return;
}

void DRAW_Credits() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x14);
    sw(s0, sp + 0x10);
    I_IncDrawnFrameCount();
    v1 = lw(gp + 0xBC4);                                // Load from: gCreditsPage (800781A4)
    v0 = 1;                                             // Result = 00000001
    if (v1 == 0) goto loc_80036D88;
    a1 = 0;                                             // Result = 00000000
    if (v1 == v0) goto loc_80036DC0;
    goto loc_80036DF8;
loc_80036D88:
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x7B30;                                       // Result = gTexInfo_IDCRED1[0] (80097B30)
    a0 = s0;                                            // Result = gTexInfo_IDCRED1[0] (80097B30)
    a1 = 0;                                             // Result = 00000000
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F58);                               // Load from: gPaletteClutId_IdCredits1 (800A90A8)
    a2 = 0;                                             // Result = 00000000
    I_CacheAndDrawSprite();
    a0 = s0 + 0x20;                                     // Result = gTexInfo_IDCRED2[0] (80097B50)
    a2 = lw(gp + 0xC7C);                                // Load from: gCreditsScrollYPos (8007825C)
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    a1 = 9;                                             // Result = 00000009
    goto loc_80036DF0;
loc_80036DC0:
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x7B70;                                       // Result = gTexInfo_WMSCRED1[0] (80097B70)
    a0 = s0;                                            // Result = gTexInfo_WMSCRED1[0] (80097B70)
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F56);                               // Load from: gPaletteClutId_WilliamsCredits1 (800A90AA)
    a2 = 0;                                             // Result = 00000000
    I_CacheAndDrawSprite();
    a0 = s0 + 0x20;                                     // Result = gTexInfo_WMSCRED2[0] (80097B90)
    a2 = lw(gp + 0xC7C);                                // Load from: gCreditsScrollYPos (8007825C)
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    a1 = 7;                                             // Result = 00000007
loc_80036DF0:
    I_CacheAndDrawSprite();
loc_80036DF8:
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void START_PasswordScreen() noexcept {
    sp -= 0x18;
    a0 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x10);
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7F44);                               // Load from: gPlayerPadButtons[0] (80077F44)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F48);                               // Load from: gPlayerPadButtons[1] (80077F48)
    sw(0, gp + 0xA4C);                                  // Store to: gInvalidPasswordFlashTicsLeft (8007802C)
    sw(0, gp + 0xB94);                                  // Store to: gCurPasswordCharIdx (80078174)
    sw(0, gp + 0x918);                                  // Store to: gVBlanksUntilMenuMove (80077EF8)
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7DEC);                                // Store to: gPlayerOldPadButtons[0] (80078214)
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0x7DE8);                                // Store to: gPlayerOldPadButtons[1] (80078218)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void STOP_PasswordScreen() noexcept {
    sp -= 0x18;
    a0 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x10);
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
    v0 = 0x20;                                          // Result = 00000020
    sw(v0, gp + 0xB94);                                 // Store to: gCurPasswordCharIdx (80078174)
    DRAW_PasswordScreen();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void TIC_PasswordScreen() noexcept {
    a0 = lw(gp + 0xA4C);                                // Load from: gInvalidPasswordFlashTicsLeft (8007802C)
    sp -= 0x28;
    sw(ra, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    if (a0 == 0) goto loc_80036EF4;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = a0 - 1;
        if (bJump) goto loc_80036EF4;
    }
    sw(v0, gp + 0xA4C);                                 // Store to: gInvalidPasswordFlashTicsLeft (8007802C)
    v0 &= 7;
    v1 = 4;                                             // Result = 00000004
    a0 = 0;                                             // Result = 00000000
    if (v0 != v1) goto loc_80036EF4;
    a1 = 0x18;                                          // Result = 00000018
    S_StartSound();
loc_80036EF4:
    s0 = 0x80070000;                                    // Result = 80070000
    s0 = lw(s0 + 0x7F44);                               // Load from: gPlayerPadButtons[0] (80077F44)
    s1 = 0x80080000;                                    // Result = 80080000
    s1 = lw(s1 - 0x7DEC);                               // Load from: gPlayerOldPadButtons[0] (80078214)
    v0 = s0 & 0xF000;
    {
        const bool bJump = (v0 != 0)
        v0 = s0 & 0x900;
        if (bJump) goto loc_80036F1C;
    }
    sw(0, gp + 0x918);                                  // Store to: gVBlanksUntilMenuMove (80077EF8)
    goto loc_8003700C;
loc_80036F1C:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7EF8;                                       // Result = gVBlanksUntilMenuMove (80077EF8)
    v0 = lw(a0);                                        // Load from: gVBlanksUntilMenuMove (80077EF8)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7FBC);                               // Load from: gPlayersElapsedVBlanks[0] (80077FBC)
    v0 -= v1;
    sw(v0, a0);                                         // Store to: gVBlanksUntilMenuMove (80077EF8)
    if (i32(v0) > 0) goto loc_80037008;
    v0 = 0xF;                                           // Result = 0000000F
    sw(v0, a0);                                         // Store to: gVBlanksUntilMenuMove (80077EF8)
    v0 = s0 & 0x1000;
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x4000;
        if (bJump) goto loc_80036F70;
    }
    v1 = lw(gp + 0xB94);                                // Load from: gCurPasswordCharIdx (80078174)
    v0 = (i32(v1) < 8);
    {
        const bool bJump = (v0 != 0)
        v0 = s0 & 0x8000;
        if (bJump) goto loc_80036FA0;
    }
    v0 = v1 - 8;
    goto loc_80036F8C;
loc_80036F70:
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x8000;
        if (bJump) goto loc_80036FA0;
    }
    v1 = lw(gp + 0xB94);                                // Load from: gCurPasswordCharIdx (80078174)
    v0 = (i32(v1) < 0x18);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 + 8;
        if (bJump) goto loc_80036F9C;
    }
loc_80036F8C:
    sw(v0, gp + 0xB94);                                 // Store to: gCurPasswordCharIdx (80078174)
    a0 = 0;                                             // Result = 00000000
    a1 = 0x12;                                          // Result = 00000012
    S_StartSound();
loc_80036F9C:
    v0 = s0 & 0x8000;
loc_80036FA0:
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x2000;
        if (bJump) goto loc_80036FCC;
    }
    v0 = lw(gp + 0xB94);                                // Load from: gCurPasswordCharIdx (80078174)
    v0--;
    sw(v0, gp + 0xB94);                                 // Store to: gCurPasswordCharIdx (80078174)
    a0 = 0;                                             // Result = 00000000
    if (i32(v0) >= 0) goto loc_80037000;
    sw(0, gp + 0xB94);                                  // Store to: gCurPasswordCharIdx (80078174)
    v0 = s0 & 0x900;
    goto loc_8003700C;
loc_80036FCC:
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x900;
        if (bJump) goto loc_8003700C;
    }
    v0 = lw(gp + 0xB94);                                // Load from: gCurPasswordCharIdx (80078174)
    v0++;
    sw(v0, gp + 0xB94);                                 // Store to: gCurPasswordCharIdx (80078174)
    v0 = (i32(v0) < 0x20);
    a0 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80037000;
    v0 = 0x1F;                                          // Result = 0000001F
    sw(v0, gp + 0xB94);                                 // Store to: gCurPasswordCharIdx (80078174)
    v0 = s0 & 0x900;
    goto loc_8003700C;
loc_80037000:
    a1 = 0x12;                                          // Result = 00000012
    S_StartSound();
loc_80037008:
    v0 = s0 & 0x900;
loc_8003700C:
    {
        const bool bJump = (v0 != 0)
        v0 = 9;                                         // Result = 00000009
        if (bJump) goto loc_8003711C;
    }
    v0 = s0 & 0xE0;
    if (s0 == s1) goto loc_80037118;
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_800370D0;
    a1 = 0x17;                                          // Result = 00000017
    S_StartSound();
    a0 = lw(gp + 0x660);                                // Load from: gNumPasswordCharsEntered (80077C40)
    v0 = (i32(a0) < 0xA);
    a2 = sp + 0x14;
    if (v0 == 0) goto loc_80037070;
    v1 = lbu(gp + 0xB94);                               // Load from: gCurPasswordCharIdx (80078174)
    v0 = a0 + 1;
    sw(v0, gp + 0x660);                                 // Store to: gNumPasswordCharsEntered (80077C40)
    at = 0x80090000;                                    // Result = 80090000
    at += 0x6560;                                       // Result = gPasswordChars[0] (80096560)
    at += a0;
    sb(v1, at);
    v0 = lw(gp + 0x660);                                // Load from: gNumPasswordCharsEntered (80077C40)
    v0 = (i32(v0) < 0xA);
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8003711C;
    }
loc_80037070:
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x6560;                                       // Result = gPasswordChars[0] (80096560)
    a1 = sp + 0x10;
    a3 = 0;                                             // Result = 00000000
    P_ProcessPassword();
    a0 = 1;                                             // Result = 00000001
    if (v0 == 0) goto loc_800370C0;
    v1 = lw(sp + 0x10);
    a1 = lw(sp + 0x14);
    sw(a0, gp + 0x65C);                                 // Store to: gbUsingAPassword (80077C3C)
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0x7FB8);                                // Store to: gGameMap (80078048)
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x7600);                                // Store to: gStartMapOrEpisode (80077600)
    at = 0x80080000;                                    // Result = 80080000
    sw(a1, at - 0x7DA8);                                // Store to: gGameSkill (80078258)
    at = 0x80070000;                                    // Result = 80070000
    sw(a1, at + 0x75FC);                                // Store to: gStartSkill (800775FC)
    v0 = 4;                                             // Result = 00000004
    goto loc_8003711C;
loc_800370C0:
    v0 = 0x10;                                          // Result = 00000010
    sw(v0, gp + 0xA4C);                                 // Store to: gInvalidPasswordFlashTicsLeft (8007802C)
    v0 = 0;                                             // Result = 00000000
    goto loc_8003711C;
loc_800370D0:
    v0 = s0 & 0x10;
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8003711C;
    }
    a1 = 0x17;                                          // Result = 00000017
    S_StartSound();
    v0 = lw(gp + 0x660);                                // Load from: gNumPasswordCharsEntered (80077C40)
    v0--;
    sw(v0, gp + 0x660);                                 // Store to: gNumPasswordCharsEntered (80077C40)
    if (i32(v0) >= 0) goto loc_80037100;
    sw(0, gp + 0x660);                                  // Store to: gNumPasswordCharsEntered (80077C40)
loc_80037100:
    v0 = lw(gp + 0x660);                                // Load from: gNumPasswordCharsEntered (80077C40)
    at = 0x80090000;                                    // Result = 80090000
    at += 0x6560;                                       // Result = gPasswordChars[0] (80096560)
    at += v0;
    sb(0, at);
loc_80037118:
    v0 = 0;                                             // Result = 00000000
loc_8003711C:
    ra = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x28;
    return;
}

void DRAW_PasswordScreen() noexcept {
loc_80037134:
    sp -= 0x40;
    sw(ra, sp + 0x38);
    sw(s3, sp + 0x34);
    sw(s2, sp + 0x30);
    sw(s1, sp + 0x2C);
    sw(s0, sp + 0x28);
    I_IncDrawnFrameCount();
    s1 = 0;                                             // Result = 00000000
    s0 = 0;                                             // Result = 00000000
loc_80037158:
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7AB0;                                       // Result = gTexInfo_MARB01[0] (80097AB0)
    a1 = s0 << 6;
    a2 = s1 << 6;
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F7C);                               // Load from: gPaletteClutId_Main (800A9084)
    s0++;
    I_CacheAndDrawSprite();
    v0 = (i32(s0) < 4);
    if (v0 != 0) goto loc_80037158;
    s1++;                                               // Result = 00000001
    v0 = (i32(s1) < 4);                                 // Result = 00000001
    s0 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80037158;
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    a0 = s0;                                            // Result = 1F800200
    a1 = 0;                                             // Result = 00000000
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lhu(a3 - 0x6B0E);                              // Load from: gTexInfo_STATUS[2] (800A94F2)
    a2 = 0;                                             // Result = 00000000
    sw(0, sp + 0x10);
    LIBGPU_SetDrawMode();
    s0 += 4;                                            // Result = 1F800204
    t3 = 0xFF0000;                                      // Result = 00FF0000
    t3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = t7 & t3;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_800371F4:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8003725C;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_80037320;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(t7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003725C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80037310;
    if (v1 == a0) goto loc_800371F4;
loc_80037280:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_800371F4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t3;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_800372EC;
    a3 = -1;                                            // Result = FFFFFFFF
loc_800372D0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_800372D0;
loc_800372EC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_800371F4;
    goto loc_80037280;
loc_80037310:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_80037320:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_80037380;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80037368:
    v0 = lw(s0);
    s0 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80037368;
loc_80037380:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    s2 = 0;                                             // Result = 00000000
    if (v1 == v0) goto loc_80037438;
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_800373B0:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= t2;
    s2 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_80037438;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8003741C;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80037400:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80037400;
loc_8003741C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    s2 = 0;                                             // Result = 00000000
    if (v1 != v0) goto loc_800373B0;
loc_80037438:
    s3 = 0x1F800000;                                    // Result = 1F800000
    s3 += 0x200;                                        // Result = 1F800200
    t4 = 0xFF0000;                                      // Result = 00FF0000
    t4 |= 0xFFFF;                                       // Result = 00FFFFFF
    t9 = 0x80080000;                                    // Result = 80080000
    t9 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t8 = t9 & t4;                                       // Result = 00086550
    t7 = 0x4000000;                                     // Result = 04000000
    t6 = 0x80000000;                                    // Result = 80000000
    t5 = -1;                                            // Result = FFFFFFFF
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lhu(v1 - 0x6F5C);                              // Load from: gPaletteClutId_UI (800A90A4)
    v0 = 4;                                             // Result = 00000004
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x64;                                          // Result = 00000064
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = 0x80;                                          // Result = 00000080
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x205);                                 // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x206);                                 // Store to: 1F800206
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x20E);                                 // Store to: 1F80020E
loc_800374A4:
    a0 = s2;
    if (i32(s2) >= 0) goto loc_800374B0;
    a0 = s2 + 7;
loc_800374B0:
    a0 = u32(i32(a0) >> 3);
    v1 = a0 << 3;
    v1 = s2 - v1;
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 2;
    s0 = v0 + 0x30;
    v0 = a0 << 2;
    v0 += a0;
    a0 = v0 << 2;
    v0 = lw(gp + 0xB94);                                // Load from: gCurPasswordCharIdx (80078174)
    s1 = a0 + 0x3C;
    if (v0 != s2) goto loc_80037518;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    v0 &= 4;
    {
        const bool bJump = (v0 != 0)
        v0 = 0xFF;                                      // Result = 000000FF
        if (bJump) goto loc_80037828;
    }
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x205);                                  // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x206);                                  // Store to: 1F800206
loc_80037518:
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3D4C;                                       // Result = STR_PasswordChars[0] (80073D4C)
    at += s2;
    v1 = lbu(at);
    v0 = v1 - 0x61;
    v0 = (v0 < 0x1A);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 - 0x39;
        if (bJump) goto loc_80037548;
    }
    v1 = v0 << 2;
    s1 = a0 + 0x3F;
    goto loc_80037578;
loc_80037548:
    a0 = v1 - 0x30;
    v0 = (a0 < 0xA);
    {
        const bool bJump = (v0 == 0)
        v0 = 0x21;                                      // Result = 00000021
        if (bJump) goto loc_8003756C;
    }
    v1 = a0 << 2;
    goto loc_80037578;
loc_80037560:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_8003772C;
loc_8003756C:
    if (v1 != v0) goto loc_80037578;
    v1 = 0x30;                                          // Result = 00000030
loc_80037578:
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s0, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s1, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F84;                                       // Result = BigFontTexcoords_0[0] (80073F84)
    at += v1;
    v0 = lbu(at);
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F85;                                       // Result = BigFontTexcoords_0[1] (80073F85)
    at += v1;
    v0 = lbu(at);
    t2 = s3 + 4;                                        // Result = 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F86;                                       // Result = BigFontTexcoords_0[2] (80073F86)
    at += v1;
    v0 = lbu(at);
    t1 = t0 << 2;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F87;                                       // Result = BigFontTexcoords_0[3] (80073F87)
    at += v1;
    v0 = lbu(at);
    t3 = t1 + 4;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
loc_80037604:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80037668;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_80037560;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(t9, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t8;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80037668:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003771C;
    if (v1 == a0) goto loc_80037604;
loc_8003768C:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= t7;
    if (v0 == 0) goto loc_80037604;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t6;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800376F8;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800376DC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800376DC;
loc_800376F8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80037604;
    goto loc_8003768C;
loc_8003771C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t3;
loc_8003772C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t4;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;
    a3 += 4;
    if (t0 == t5) goto loc_800377F4;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80037768:
    v0 = lw(t2);
    t2 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_80037768;
    goto loc_800377F4;
loc_80037788:
    v0 = lw(gp + 0x650);                                // Load from: GPU_REG_GP1 (80077C30)
    v0 = lw(v0);
    v0 &= t7;
    {
        const bool bJump = (v0 == 0)
        v0 = 0x80;                                      // Result = 00000080
        if (bJump) goto loc_80037810;
    }
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t6;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t5) goto loc_800377F4;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800377D8:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x64C);                                // Load from: GPU_REG_GP0 (80077C2C)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800377D8;
loc_800377F4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    {
        const bool bJump = (v1 != v0)
        v0 = 0x80;                                      // Result = 00000080
        if (bJump) goto loc_80037788;
    }
loc_80037810:
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x205);                                 // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x206);                                 // Store to: 1F800206
loc_80037828:
    s2++;
    v0 = (i32(s2) < 0x20);
    if (v0 != 0) goto loc_800374A4;
    a0 = -1;                                            // Result = FFFFFFFF
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x15A8;                                       // Result = STR_Password[0] (800115A8)
    a1 = 0x14;                                          // Result = 00000014
    I_DrawString();
    v0 = lw(gp + 0x660);                                // Load from: gNumPasswordCharsEntered (80077C40)
    s2 = 0;                                             // Result = 00000000
    sb(0, sp + 0x19);
    if (i32(v0) <= 0) goto loc_800378AC;
    s0 = 0x3A;                                          // Result = 0000003A
    a0 = s0;                                            // Result = 0000003A
loc_80037864:
    a1 = 0xA0;                                          // Result = 000000A0
    at = 0x80090000;                                    // Result = 80090000
    at += 0x6560;                                       // Result = gPasswordChars[0] (80096560)
    at += s2;
    v0 = lbu(at);
    a2 = sp + 0x18;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3D4C;                                       // Result = STR_PasswordChars[0] (80073D4C)
    at += v0;
    v0 = lbu(at);
    s0 += 0xE;
    sb(v0, sp + 0x18);
    I_DrawString();
    v0 = lw(gp + 0x660);                                // Load from: gNumPasswordCharsEntered (80077C40)
    s2++;
    v0 = (i32(s2) < i32(v0));
    a0 = s0;
    if (v0 != 0) goto loc_80037864;
loc_800378AC:
    v0 = (i32(s2) < 0xA);
    {
        const bool bJump = (v0 == 0)
        v0 = s2 << 3;
        if (bJump) goto loc_800378E8;
    }
    v0 -= s2;
    v0 <<= 1;
    s0 = v0 + 0x3A;
loc_800378C4:
    a0 = s0;
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7CD0;                                       // Result = STR_EmptyPasswordChar[0] (80077CD0)
    a1 = 0xA0;                                          // Result = 000000A0
    I_DrawString();
    s2++;
    v0 = (i32(s2) < 0xA);
    s0 += 0xE;
    if (v0 != 0) goto loc_800378C4;
loc_800378E8:
    v0 = lw(gp + 0xA4C);                                // Load from: gInvalidPasswordFlashTicsLeft (8007802C)
    v0 &= 4;
    a0 = -1;                                            // Result = FFFFFFFF
    if (v0 == 0) goto loc_8003790C;
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x15B4;                                       // Result = STR_InvalidPassword[0] (800115B4)
    a1 = 0xC8;                                          // Result = 000000C8
    I_DrawString();
loc_8003790C:
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x38);
    s3 = lw(sp + 0x34);
    s2 = lw(sp + 0x30);
    s1 = lw(sp + 0x2C);
    s0 = lw(sp + 0x28);
    sp += 0x40;
    return;
}

void START_ControlsScreen() noexcept {
    sp -= 0x18;
    a0 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x10);
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7AD0;                                       // Result = gTexInfo_BUTTONS[0] (80097AD0)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7C5C;                                       // Result = STR_LumpName_BUTTONS[0] (80077C5C)
    sw(0, gp + 0xBF8);                                  // Store to: gCursorFrame (800781D8)
    sw(0, gp + 0xA20);                                  // Store to: gCursorPos (80078000)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void STOP_ControlsScreen() noexcept {
    sp -= 0x18;
    a0 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x10);
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
    v0 = 3;                                             // Result = 00000003
    sw(v0, gp + 0xA20);                                 // Store to: gCursorPos (80078000)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void TIC_ControlsScreen() noexcept {
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    sp -= 0x20;
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 = (i32(v0) < i32(v1));
    sw(s0, sp + 0x10);
    if (v0 == 0) goto loc_800379F0;
    v0 = v1 & 3;
    if (v0 != 0) goto loc_800379F0;
    v0 = lw(gp + 0xBF8);                                // Load from: gCursorFrame (800781D8)
    v0 ^= 1;
    sw(v0, gp + 0xBF8);                                 // Store to: gCursorFrame (800781D8)
loc_800379F0:
    s0 = 0x80070000;                                    // Result = 80070000
    s0 = lw(s0 + 0x7F44);                               // Load from: gPlayerPadButtons[0] (80077F44)
    s1 = 0x80080000;                                    // Result = 80080000
    s1 = lw(s1 - 0x7DEC);                               // Load from: gPlayerOldPadButtons[0] (80078214)
    v0 = s0 & 0xF000;
    {
        const bool bJump = (v0 != 0)
        v0 = s0 & 0x900;
        if (bJump) goto loc_80037A18;
    }
    sw(0, gp + 0x918);                                  // Store to: gVBlanksUntilMenuMove (80077EF8)
    goto loc_80037AB8;
loc_80037A18:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7EF8;                                       // Result = gVBlanksUntilMenuMove (80077EF8)
    v0 = lw(a0);                                        // Load from: gVBlanksUntilMenuMove (80077EF8)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7FBC);                               // Load from: gPlayersElapsedVBlanks[0] (80077FBC)
    v0 -= v1;
    sw(v0, a0);                                         // Store to: gVBlanksUntilMenuMove (80077EF8)
    if (i32(v0) > 0) goto loc_80037AB4;
    v0 = 0xF;                                           // Result = 0000000F
    sw(v0, a0);                                         // Store to: gVBlanksUntilMenuMove (80077EF8)
    v0 = s0 & 0x4000;
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x1000;
        if (bJump) goto loc_80037A7C;
    }
    v1 = 0x80080000;                                    // Result = 80080000
    v1 -= 0x8000;                                       // Result = gCursorPos (80078000)
    v0 = lw(v1);                                        // Load from: gCursorPos (80078000)
    v0++;
    sw(v0, v1);                                         // Store to: gCursorPos (80078000)
    v0 = (i32(v0) < 9);
    a0 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80037AAC;
    sw(0, v1);                                          // Store to: gCursorPos (80078000)
    goto loc_80037AAC;
loc_80037A7C:
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x900;
        if (bJump) goto loc_80037AB8;
    }
    v1 = 0x80080000;                                    // Result = 80080000
    v1 -= 0x8000;                                       // Result = gCursorPos (80078000)
    v0 = lw(v1);                                        // Load from: gCursorPos (80078000)
    v0--;
    sw(v0, v1);                                         // Store to: gCursorPos (80078000)
    if (i32(v0) >= 0) goto loc_80037AA8;
    v0 = 8;                                             // Result = 00000008
    sw(v0, v1);                                         // Store to: gCursorPos (80078000)
loc_80037AA8:
    a0 = 0;                                             // Result = 00000000
loc_80037AAC:
    a1 = 0x12;                                          // Result = 00000012
    S_StartSound();
loc_80037AB4:
    v0 = s0 & 0x900;
loc_80037AB8:
    {
        const bool bJump = (v0 != 0)
        v0 = 9;                                         // Result = 00000009
        if (bJump) goto loc_80037B6C;
    }
    v0 = 0;                                             // Result = 00000000
    if (s0 == s1) goto loc_80037B6C;
    v0 = lw(gp + 0xA20);                                // Load from: gCursorPos (80078000)
    v0 = (i32(v0) < 8);
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_80037B34;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 += 0x3DEC;                                       // Result = gBtnSprite_Triangle_ButtonMask (80073DEC)
loc_80037AE4:
    a2 = lw(v1);
    v0 = s0 & a2;
    a0++;
    if (v0 != 0) goto loc_80037B0C;
    v0 = (i32(a0) < 8);
    v1 += 4;
    if (v0 != 0) goto loc_80037AE4;
    v0 = 0;                                             // Result = 00000000
    goto loc_80037B6C;
loc_80037B0C:
    a0 = 0;                                             // Result = 00000000
    v0 = lw(gp + 0xA20);                                // Load from: gCursorPos (80078000)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3E0C;                                       // Result = gBtnBinding_Attack (80073E0C)
    at += v0;
    sw(a2, at);
    a1 = 0x17;                                          // Result = 00000017
    goto loc_80037B60;
loc_80037B34:
    v0 = s0 & 0xF0;
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80037B6C;
    }
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x3E0C;                                       // Result = gBtnBinding_Attack (80073E0C)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x3E2C;                                       // Result = DefaultBtnBinding_Attack (80073E2C)
    a2 = 0x20;                                          // Result = 00000020
    D_memcpy();
    a0 = 0;                                             // Result = 00000000
    a1 = 0x17;                                          // Result = 00000017
loc_80037B60:
    S_StartSound();
    v0 = 0;                                             // Result = 00000000
loc_80037B6C:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void DRAW_ControlsScreen() noexcept {
    sp -= 0x38;
    sw(ra, sp + 0x34);
    sw(s4, sp + 0x30);
    sw(s3, sp + 0x2C);
    sw(s2, sp + 0x28);
    sw(s1, sp + 0x24);
    sw(s0, sp + 0x20);
    I_IncDrawnFrameCount();
    s1 = 0;                                             // Result = 00000000
    s0 = 0;                                             // Result = 00000000
loc_80037BAC:
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7AB0;                                       // Result = gTexInfo_MARB01[0] (80097AB0)
    a1 = s0 << 6;
    a2 = s1 << 6;
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F7C);                               // Load from: gPaletteClutId_Main (800A9084)
    s0++;
    I_CacheAndDrawSprite();
    v0 = (i32(s0) < 4);
    if (v0 != 0) goto loc_80037BAC;
    s1++;                                               // Result = 00000001
    v0 = (i32(s1) < 4);                                 // Result = 00000001
    s0 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_80037BAC;
    a0 = -1;                                            // Result = FFFFFFFF
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x15C8;                                       // Result = STR_Configuration[0] (800115C8)
    a1 = 0x14;                                          // Result = 00000014
    I_DrawString();
    a2 = 0xC;                                           // Result = 0000000C
    s2 = 0;                                             // Result = 00000000
    s4 = 0x80070000;                                    // Result = 80070000
    s4 += 0x3DEC;                                       // Result = gBtnSprite_Triangle_ButtonMask (80073DEC)
    s3 = 0x80090000;                                    // Result = 80090000
    s3 += 0x7ADA;                                       // Result = gTexInfo_BUTTONS[2] (80097ADA)
    s1 = 0x2D;                                          // Result = 0000002D
    s0 = 0x80070000;                                    // Result = 80070000
    s0 += 0x3E0C;                                       // Result = gBtnBinding_Attack (80073E0C)
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lhu(a0 - 0x6B0E);                              // Load from: gTexInfo_STATUS[2] (800A94F2)
    v0 = 0xC0;                                          // Result = 000000C0
    sw(v0, sp + 0x14);
    v0 = 0x10;                                          // Result = 00000010
    sw(v0, sp + 0x18);
    v0 = 0x12;                                          // Result = 00000012
    sw(v0, sp + 0x1C);
    v0 = lw(gp + 0xA20);                                // Load from: gCursorPos (80078000)
    a1 = 0x800B0000;                                    // Result = 800B0000
    a1 = lh(a1 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    a3 = v0 << 2;
    a3 += v0;
    a3 <<= 2;
    v0 = lw(gp + 0xBF8);                                // Load from: gCursorFrame (800781D8)
    a3 += 0x2B;
    v0 <<= 4;
    v0 += 0x84;
    sw(v0, sp + 0x10);
    I_DrawSprite();
loc_80037C70:
    v1 = 0;                                             // Result = 00000000
    a1 = lw(s0);
    a0 = s4;                                            // Result = gBtnSprite_Triangle_ButtonMask (80073DEC)
loc_80037C7C:
    v0 = lw(a0);
    if (a1 == v0) goto loc_80037C9C;
    v1++;                                               // Result = 00000001
    v0 = (i32(v1) < 8);                                 // Result = 00000001
    a0 += 4;                                            // Result = gBtnSprite_Circle_ButtonMask (80073DF0)
    if (v0 != 0) goto loc_80037C7C;
loc_80037C9C:
    v0 = lw(gp + 0xA20);                                // Load from: gCursorPos (80078000)
    a2 = 0x26;                                          // Result = 00000026
    if (v0 != s2) goto loc_80037CC4;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    v0 &= 8;
    if (v0 != 0) goto loc_80037CFC;
loc_80037CC4:
    a3 = s1;
    v0 = 0x10;                                          // Result = 00000010
    v1 <<= 4;                                           // Result = 00000000
    sw(v0, sp + 0x18);
    sw(v0, sp + 0x1C);
    a0 = lhu(s3);                                       // Load from: gTexInfo_BUTTONS[2] (80097ADA)
    a1 = 0x800B0000;                                    // Result = 800B0000
    a1 = lh(a1 - 0x6F7C);                               // Load from: gPaletteClutId_Main (800A9084)
    v0 = lbu(s3 - 0x2);                                 // Load from: gTexInfo_BUTTONS[2] (80097AD8)
    t0 = lbu(s3 - 0x1);                                 // Load from: gTexInfo_BUTTONS[2] (80097AD9)
    v0 += v1;
    sw(v0, sp + 0x10);
    sw(t0, sp + 0x14);
    I_DrawSprite();
loc_80037CFC:
    s1 += 0x14;
    s2++;
    v0 = (i32(s2) < 8);
    s0 += 4;
    if (v0 != 0) goto loc_80037C70;
    s2 = 0;                                             // Result = 00000000
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x3D6C;                                       // Result = STR_MenuOpt_Attack[0] (80073D6C)
    s0 = 0x2D;                                          // Result = 0000002D
loc_80037D20:
    a0 = 0x41;                                          // Result = 00000041
    a1 = s0;
    a2 = s1;
    I_DrawString();
    s1 += 0x10;
    s2++;
    v0 = (i32(s2) < 8);
    s0 += 0x14;
    if (v0 != 0) goto loc_80037D20;
    v0 = lw(gp + 0xA20);                                // Load from: gCursorPos (80078000)
    a0 = 0x41;                                          // Result = 00000041
    if (v0 != s2) goto loc_80037D6C;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    v0 &= 8;
    if (v0 != 0) goto loc_80037D88;
loc_80037D6C:
    a1 = s2 << 2;
    a1 += s2;
    a1 <<= 2;
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7CD4;                                       // Result = STR_Default[0] (80077CD4)
    a1 += 0x2D;
    I_DrawString();
loc_80037D88:
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x34);
    s4 = lw(sp + 0x30);
    s3 = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x38;
    return;
}

void P_ComputePassword() noexcept {
loc_80037DBC:
    sp -= 0x28;
    sw(s1, sp + 0x1C);
    s1 = a0;
    a0 = sp + 0x10;
    a1 = 0;                                             // Result = 00000000
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a2 = 8;                                             // Result = 00000008
    sw(ra, sp + 0x20);
    sw(s0, sp + 0x18);
    v0 = v1 << 2;
    v0 += v1;
    v1 = v0 << 4;
    v1 -= v0;
    v1 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    s0 = v1 + v0;
    D_memset();
    a0 = 0;                                             // Result = 00000000
    a2 = 1;                                             // Result = 00000001
    a1 = s0;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0x7F68);                              // Load from: gNextMap (80078098)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lbu(v1 - 0x7DA8);                              // Load from: gGameSkill (80078258)
    v0 &= 0x3F;
    v0 <<= 2;
    v1 &= 3;
    sb(v0, sp + 0x10);
    v0 |= v1;
    sb(v0, sp + 0x10);
loc_80037E3C:
    v0 = lw(a1 + 0x7C);
    a1 += 4;
    if (v0 == 0) goto loc_80037E5C;
    v0 = lbu(sp + 0x11);
    v1 = a2 << a0;
    v0 |= v1;
    sb(v0, sp + 0x11);
loc_80037E5C:
    a0++;
    v0 = (i32(a0) < 7);
    if (v0 != 0) goto loc_80037E3C;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 = lw(v1 + 0x70D4);                               // Load from: gMaxAmmo[0] (800670D4)
    a0 = 0x80060000;                                    // Result = 80060000
    a0 = lw(a0 + 0x70D8);                               // Load from: gMaxAmmo[1] (800670D8)
    a2 = 0x80060000;                                    // Result = 80060000
    a2 = lw(a2 + 0x70DC);                               // Load from: gMaxAmmo[2] (800670DC)
    v0 = lw(s0 + 0x60);
    a3 = 0x80060000;                                    // Result = 80060000
    a3 = lw(a3 + 0x70E0);                               // Load from: gMaxAmmo[3] (800670E0)
    if (v0 == 0) goto loc_80037EB4;
    v1 <<= 1;
    a0 <<= 1;
    a2 <<= 1;
    v0 = lbu(sp + 0x11);
    a3 <<= 1;
    v0 |= 0x80;
    sb(v0, sp + 0x11);
loc_80037EB4:
    v0 = lw(s0 + 0x98);
    v0 <<= 3;
    div(v0, v1);
    if (v1 != 0) goto loc_80037ED0;
    _break(0x1C00);
loc_80037ED0:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_80037EE8;
    }
    if (v0 != at) goto loc_80037EE8;
    tge(zero, zero, 0x5D);
loc_80037EE8:
    a1 = lo;
    v0 = hi;
    v1 = a1 << 4;
    if (v0 == 0) goto loc_80037F00;
    a1++;
    v1 = a1 << 4;
loc_80037F00:
    sb(v1, sp + 0x12);
    v0 = lw(s0 + 0x9C);
    v0 <<= 3;
    div(v0, a0);
    if (a0 != 0) goto loc_80037F20;
    _break(0x1C00);
loc_80037F20:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_80037F38;
    }
    if (v0 != at) goto loc_80037F38;
    tge(zero, zero, 0x5D);
loc_80037F38:
    a1 = lo;
    v0 = hi;
    {
        const bool bJump = (v0 == 0)
        v0 = v1 | a1;
        if (bJump) goto loc_80037F50;
    }
    a1++;
    v0 = v1 | a1;
loc_80037F50:
    sb(v0, sp + 0x12);
    v0 = lw(s0 + 0xA0);
    v0 <<= 3;
    div(v0, a2);
    if (a2 != 0) goto loc_80037F70;
    _break(0x1C00);
loc_80037F70:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a2 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_80037F88;
    }
    if (v0 != at) goto loc_80037F88;
    tge(zero, zero, 0x5D);
loc_80037F88:
    a1 = lo;
    v0 = hi;
    v1 = a1 << 4;
    if (v0 == 0) goto loc_80037FA0;
    a1++;
    v1 = a1 << 4;
loc_80037FA0:
    sb(v1, sp + 0x13);
    v0 = lw(s0 + 0xA4);
    v0 <<= 3;
    div(v0, a3);
    if (a3 != 0) goto loc_80037FC0;
    _break(0x1C00);
loc_80037FC0:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (a3 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_80037FD8;
    }
    if (v0 != at) goto loc_80037FD8;
    tge(zero, zero, 0x5D);
loc_80037FD8:
    a1 = lo;
    v0 = hi;
    a2 = 0x51EB0000;                                    // Result = 51EB0000
    if (v0 == 0) goto loc_80037FEC;
    a1++;
loc_80037FEC:
    v0 = v1 | a1;
    sb(v0, sp + 0x13);
    v1 = lw(s0 + 0x24);
    a2 |= 0x851F;                                       // Result = 51EB851F
    mult(v1, a2);
    v0 = hi;
    a0 = v1 << 3;
    mult(a0, a2);
    v1 = u32(i32(v1) >> 31);
    v0 = u32(i32(v0) >> 3);
    a1 = v0 - v1;
    v0 = u32(i32(a0) >> 31);
    v1 = hi;
    v1 = u32(i32(v1) >> 6);
    v1 -= v0;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v0 += v1;
    v0 <<= 3;
    a3 = a1 << 4;
    if (a0 == v0) goto loc_8003804C;
    a1++;
    a3 = a1 << 4;
loc_8003804C:
    sb(a3, sp + 0x14);
    v0 = lw(s0 + 0x28);
    mult(v0, a2);
    v1 = hi;
    a0 = v0 << 3;
    mult(a0, a2);
    v0 = u32(i32(v0) >> 31);
    v1 = u32(i32(v1) >> 3);
    a1 = v1 - v0;
    v0 = u32(i32(a0) >> 31);
    v1 = hi;
    v1 = u32(i32(v1) >> 6);
    v1 -= v0;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v0 += v1;
    v0 <<= 3;
    t0 = sp + 0x10;
    if (a0 == v0) goto loc_800380A4;
    a1++;
loc_800380A4:
    a0 = 0;                                             // Result = 00000000
    v0 = a3 | a1;
    sb(v0, sp + 0x14);
    v0 = lbu(s0 + 0x2C);
    t1 = 0x80;                                          // Result = 00000080
    v0 <<= 3;
    sb(v0, sp + 0x15);
    a3 = 0;                                             // Result = 00000000
loc_800380C4:
    a2 = 0x10;                                          // Result = 00000010
    a1 = 4;                                             // Result = 00000004
loc_800380CC:
    v0 = a0;
    if (i32(a0) >= 0) goto loc_800380D8;
    v0 = a0 + 7;
loc_800380D8:
    v0 = u32(i32(v0) >> 3);
    v1 = t0 + v0;
    v1 = lbu(v1);
    v0 <<= 3;
    v0 = a0 - v0;
    v0 = i32(t1) >> v0;
    v1 &= v0;
    a0++;
    if (v1 == 0) goto loc_80038100;
    a3 |= a2;
loc_80038100:
    a1--;
    a2 = u32(i32(a2) >> 1);
    if (i32(a1) >= 0) goto loc_800380CC;
    v0 = 0x66660000;                                    // Result = 66660000
    v0 |= 0x6667;                                       // Result = 66666667
    v1 = a0 - 1;
    mult(v1, v0);
    v1 = u32(i32(v1) >> 31);
    v0 = hi;
    v0 = u32(i32(v0) >> 1);
    v0 -= v1;
    v0 += s1;
    sb(a3, v0);
    v0 = (i32(a0) < 0x2D);
    a3 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_800380C4;
    sb(0, s1 + 0x9);
    a0 = s1;
    a1 = s1 + 9;
loc_8003814C:
    v0 = lbu(s1 + 0x9);
    v1 = lbu(a0);
    a0++;
    v0 ^= v1;
    sb(v0, s1 + 0x9);
    v0 = (i32(a0) < i32(a1));
    if (v0 != 0) goto loc_8003814C;
    a0 = s1;
    a1 = s1 + 9;
loc_80038174:
    v0 = lbu(a0);
    v1 = lbu(s1 + 0x9);
    v0 ^= v1;
    sb(v0, a0);
    a0++;
    v0 = (i32(a0) < i32(a1));
    if (v0 != 0) goto loc_80038174;
    ra = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x28;
    return;
}

void P_ProcessPassword() noexcept {
loc_800381B0:
    sp -= 0x40;
    v0 = a0;
    sw(s2, sp + 0x30);
    s2 = a1;
    sw(s3, sp + 0x34);
    s3 = a2;
    sw(s1, sp + 0x2C);
    s1 = a3;
    sw(s0, sp + 0x28);
    s0 = sp + 0x18;
    a0 = s0;
    a1 = v0;
    sw(ra, sp + 0x38);
    a2 = 0xA;                                           // Result = 0000000A
    D_memcpy();
    a0 = sp + 0x21;
loc_800381F0:
    v0 = lbu(s0);
    v1 = lbu(sp + 0x21);
    v0 ^= v1;
    sb(v0, s0);
    s0++;
    v0 = (i32(s0) < i32(a0));
    v1 = sp + 0x18;
    if (v0 != 0) goto loc_800381F0;
    a0 = 0;                                             // Result = 00000000
    a1 = sp + 0x21;
loc_8003821C:
    v0 = lbu(v1);
    v1++;
    a0 ^= v0;
    v0 = (i32(v1) < i32(a1));
    if (v0 != 0) goto loc_8003821C;
    v0 = lbu(sp + 0x21);
    {
        const bool bJump = (a0 != v0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80038538;
    }
    a1 = 0;                                             // Result = 00000000
    t2 = 0x66660000;                                    // Result = 66660000
    t2 |= 0x6667;                                       // Result = 66666667
    t1 = sp + 0x18;
    t3 = 0x10;                                          // Result = 00000010
loc_80038258:
    t0 = 0;                                             // Result = 00000000
    a3 = 0x80;                                          // Result = 00000080
    a2 = 7;                                             // Result = 00000007
loc_80038264:
    mult(a1, t2);
    v0 = u32(i32(a1) >> 31);
    v1 = hi;
    v1 = u32(i32(v1) >> 1);
    v1 -= v0;
    v0 = t1 + v1;
    a0 = lbu(v0);
    v0 = v1 << 2;
    v0 += v1;
    v0 = a1 - v0;
    v0 = i32(t3) >> v0;
    a0 &= v0;
    a1++;
    if (a0 == 0) goto loc_800382A0;
    t0 |= a3;
loc_800382A0:
    a2--;
    a3 = u32(i32(a3) >> 1);
    if (i32(a2) >= 0) goto loc_80038264;
    v0 = a1 - 1;
    v1 = sp + 0x10;
    if (i32(v0) >= 0) goto loc_800382BC;
    v0 = a1 + 6;
loc_800382BC:
    v0 = u32(i32(v0) >> 3);
    v1 += v0;
    v0 = (i32(a1) < 0x30);
    sb(t0, v1);
    if (v0 != 0) goto loc_80038258;
    v0 = lbu(sp + 0x10);
    v0 >>= 2;
    sw(v0, s2);
    if (v0 == 0) goto loc_800383B0;
    v0 = (i32(v0) < 0x3C);
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80038538;
    }
    v0 = lbu(sp + 0x10);
    v0 &= 3;
    sw(v0, s3);
    v0 = lbu(sp + 0x12);
    v0 &= 0xF;
    v0 = (v0 < 9);
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80038538;
    }
    v0 = lbu(sp + 0x12);
    v0 >>= 4;
    v0 = (v0 < 9);
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80038538;
    }
    v0 = lbu(sp + 0x13);
    v0 &= 0xF;
    v0 = (v0 < 9);
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80038538;
    }
    v0 = lbu(sp + 0x13);
    v0 >>= 4;
    v0 = (v0 < 9);
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80038538;
    }
    v0 = lbu(sp + 0x14);
    v0 &= 0xF;
    v0 = (v0 < 9);
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80038538;
    }
    v0 = lbu(sp + 0x14);
    v1 = v0 >> 4;
    v0 = (v1 < 9);
    if (v0 == 0) goto loc_800383B0;
    v0 = 0;                                             // Result = 00000000
    if (v1 == 0) goto loc_80038538;
    v0 = lbu(sp + 0x15);
    v0 >>= 3;
    v0 = (v0 < 3);
    if (v0 != 0) goto loc_800383B8;
loc_800383B0:
    v0 = 0;                                             // Result = 00000000
    goto loc_80038538;
loc_800383B8:
    a1 = 0;                                             // Result = 00000000
    if (s1 != 0) goto loc_800383C8;
    v0 = 1;                                             // Result = 00000001
    goto loc_80038538;
loc_800383C8:
    a0 = 1;                                             // Result = 00000001
    v1 = s1;
loc_800383D0:
    v0 = lbu(sp + 0x11);
    v0 = i32(v0) >> a1;
    v0 &= 1;
    a1++;
    if (v0 == 0) goto loc_800383EC;
    sw(a0, v1 + 0x7C);
loc_800383EC:
    v0 = (i32(a1) < 7);
    v1 += 4;
    if (v0 != 0) goto loc_800383D0;
    v0 = lbu(sp + 0x11);
    v0 &= 0x80;
    if (v0 == 0) goto loc_80038444;
    v0 = lw(s1 + 0x60);
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80038444;
    }
    sw(v0, s1 + 0x60);
    a1 = 0;                                             // Result = 00000000
    v1 = s1;
loc_80038428:
    v0 = lw(v1 + 0xA8);
    a1++;
    v0 <<= 1;
    sw(v0, v1 + 0xA8);
    v0 = (i32(a1) < 4);
    v1 += 4;
    if (v0 != 0) goto loc_80038428;
loc_80038444:
    v0 = lbu(sp + 0x12);
    v1 = lw(s1 + 0xA8);
    v0 >>= 4;
    mult(v0, v1);
    v0 = lo;
    if (i32(v0) >= 0) goto loc_80038464;
    v0 += 7;
loc_80038464:
    v0 = u32(i32(v0) >> 3);
    sw(v0, s1 + 0x98);
    v0 = lbu(sp + 0x12);
    v1 = lw(s1 + 0xAC);
    v0 &= 0xF;
    mult(v0, v1);
    v0 = lo;
    if (i32(v0) >= 0) goto loc_8003848C;
    v0 += 7;
loc_8003848C:
    v0 = u32(i32(v0) >> 3);
    sw(v0, s1 + 0x9C);
    v0 = lbu(sp + 0x13);
    v1 = lw(s1 + 0xB0);
    v0 >>= 4;
    mult(v0, v1);
    v0 = lo;
    if (i32(v0) >= 0) goto loc_800384B4;
    v0 += 7;
loc_800384B4:
    v0 = u32(i32(v0) >> 3);
    sw(v0, s1 + 0xA0);
    v0 = lbu(sp + 0x13);
    v1 = lw(s1 + 0xB4);
    v0 &= 0xF;
    mult(v0, v1);
    v0 = lo;
    if (i32(v0) >= 0) goto loc_800384DC;
    v0 += 7;
loc_800384DC:
    v0 = u32(i32(v0) >> 3);
    sw(v0, s1 + 0xA4);
    v1 = lbu(sp + 0x14);
    a1 = lw(s1);
    v1 >>= 4;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v0 += v1;
    sw(v0, s1 + 0x24);
    a0 = lbu(sp + 0x14);
    v0 = 1;                                             // Result = 00000001
    a0 &= 0xF;
    v1 = a0 << 1;
    v1 += a0;
    v1 <<= 3;
    v1 += a0;
    sw(v1, s1 + 0x28);
    v1 = lbu(sp + 0x15);
    a0 = lw(s1 + 0x24);
    v1 >>= 3;
    sw(v1, s1 + 0x2C);
    sw(a0, a1 + 0x68);
loc_80038538:
    ra = lw(sp + 0x38);
    s3 = lw(sp + 0x34);
    s2 = lw(sp + 0x30);
    s1 = lw(sp + 0x2C);
    s0 = lw(sp + 0x28);
    sp += 0x40;
    return;
}

void ST_Init() noexcept {
loc_80038558:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FD8);                               // Load from: gTexCacheFillPage (80078028)
    sp -= 0x18;
    sw(ra, sp + 0x10);
    if (v0 == 0) goto loc_8003857C;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x15D8;                                       // Result = STR_ST_Init_InitialTexCache_Err[0] (800115D8)
    I_Error();
loc_8003857C:
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 -= 0x6B18;                                       // Result = gTexInfo_STATUS[0] (800A94E8)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7CE4;                                       // Result = STR_LumpName_STATUS[0] (80077CE4)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FD8);                               // Load from: gTexCacheFillPage (80078028)
    if (v0 == 0) goto loc_800385B8;
    a0 = 0x80010000;                                    // Result = 80010000
    a0 += 0x1600;                                       // Result = STR_ST_Init_FinalTexCache_Err[0] (80011600)
    I_Error();
loc_800385B8:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E68);                               // Load from: gpMainMemZone (80078198)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C08);                               // Load from: gLockedTexPagesMask (80077C08)
    v0 = 1;                                             // Result = 00000001
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7D1C);                                 // Store to: gTexCacheFillBlockX (800782E4)
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7D18);                                 // Store to: gTexCacheFillBlockY (800782E8)
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7FD8);                                // Store to: gTexCacheFillPage (80078028)
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7D88);                                 // Store to: gTexCacheRowBlockH (80078278)
    v1 |= 1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x7C08);                                // Store to: gLockedTexPagesMask (80077C08)
    a1 = 0x20;                                          // Result = 00000020
    Z_FreeTags();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void ST_Start() noexcept {
loc_80038610:
    a1 = 0;                                             // Result = 00000000
    a0 = 0;                                             // Result = 00000000
    v0 = 0x800A0000;                                    // Result = 800A0000
    v0 -= 0x78CC;                                       // Result = gStatusBar[7] (80098734)
    v1 = v0 - 0x18;                                     // Result = gStatusBar[1] (8009871C)
    sw(0, v0);                                          // Store to: gStatusBar[7] (80098734)
    v0 = 1;                                             // Result = 00000001
    sw(v0, gp + 0xB50);                                 // Store to: gbDrawStatusBarFace (80078130)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x3E68;                                       // Result = StatusBarFaceSpriteInfo[0] (80073E68)
    sw(0, gp + 0xA78);                                  // Store to: gbStatusBarPlayerGotGibbed (80078058)
    sw(0, gp + 0x8EC);                                  // Store to: gbStatusBarIsShowingSpecialFace (80077ECC)
    at = 0x800A0000;                                    // Result = 800A0000
    sw(0, at - 0x78E8);                                 // Store to: gStatusBar[0] (80098718)
    at = 0x800A0000;                                    // Result = 800A0000
    sw(0, at - 0x78BC);                                 // Store to: gStatusBarMsgTicsLeft (80098744)
    sw(0, gp + 0xB54);                                  // Store to: gFaceTics (80078134)
    sw(v0, gp + 0xC50);                                 // Store to: gpCurStatusBarFaceSpriteInfo (80078230)
loc_80038658:
    sw(0, v1);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B4C;                                       // Result = gStatusBarKeyState[0] (800A94B4)
    at += a0;
    sh(0, at);
    a0 += 8;
    a1++;
    v0 = (i32(a1) < 6);
    v1 += 4;
    if (v0 != 0) goto loc_80038658;
    return;
}

void ST_Ticker() noexcept {
loc_80038688:
    a0 = lw(gp + 0xB54);                                // Load from: gFaceTics (80078134)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    a0--;
    v0 = v1 << 2;
    v0 += v1;
    v1 = v0 << 4;
    v1 -= v0;
    v1 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    sw(a0, gp + 0xB54);                                 // Store to: gFaceTics (80078134)
    s4 = v1 + v0;
    if (i32(a0) > 0) goto loc_80038710;
    M_Random();
    v0 &= 0xF;
    sw(v0, gp + 0xB54);                                 // Store to: gFaceTics (80078134)
    M_Random();
    v0 &= 3;
    v1 = 3;                                             // Result = 00000003
    sw(v0, gp + 0xA44);                                 // Store to: gStatusBarFaceFrameNum (80078024)
    {
        const bool bJump = (v0 != v1)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8003870C;
    }
    sw(v0, gp + 0xA44);                                 // Store to: gStatusBarFaceFrameNum (80078024)
loc_8003870C:
    sw(0, gp + 0x8EC);                                  // Store to: gbStatusBarIsShowingSpecialFace (80077ECC)
loc_80038710:
    v1 = 0x800A0000;                                    // Result = 800A0000
    v1 -= 0x78E8;                                       // Result = gStatusBar[0] (80098718)
    v0 = lw(v1);                                        // Load from: gStatusBar[0] (80098718)
    if (v0 == 0) goto loc_80038740;
    sw(v0, gp + 0x928);                                 // Store to: gStatusBarCurSpecialFace (80077F08)
    v0 = 0xF;                                           // Result = 0000000F
    sw(v0, gp + 0xB54);                                 // Store to: gFaceTics (80078134)
    v0 = 1;                                             // Result = 00000001
    sw(0, v1);                                          // Store to: gStatusBar[0] (80098718)
    sw(v0, gp + 0x8EC);                                 // Store to: gbStatusBarIsShowingSpecialFace (80077ECC)
loc_80038740:
    v0 = 0x800A0000;                                    // Result = 800A0000
    v0 = lw(v0 - 0x78CC);                               // Load from: gStatusBar[7] (80098734)
    {
        const bool bJump = (v0 == 0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_80038774;
    }
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v0, at - 0x78C4);                                // Store to: gStatusBarGibAnimTicsLeft (8009873C)
    v0 = 1;                                             // Result = 00000001
    at = 0x800A0000;                                    // Result = 800A0000
    sw(0, at - 0x78C8);                                 // Store to: gStatusBarGibAnimFrame (80098738)
    at = 0x800A0000;                                    // Result = 800A0000
    sw(0, at - 0x78CC);                                 // Store to: gStatusBar[7] (80098734)
    sw(v0, gp + 0xA78);                                 // Store to: gbStatusBarPlayerGotGibbed (80078058)
loc_80038774:
    v0 = lw(gp + 0xA78);                                // Load from: gbStatusBarPlayerGotGibbed (80078058)
    if (v0 == 0) goto loc_800387D4;
    v0 = 0x800A0000;                                    // Result = 800A0000
    v0 = lw(v0 - 0x78C4);                               // Load from: gStatusBarGibAnimTicsLeft (8009873C)
    v0--;
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v0, at - 0x78C4);                                // Store to: gStatusBarGibAnimTicsLeft (8009873C)
    v1 = 2;                                             // Result = 00000002
    if (i32(v0) > 0) goto loc_800387D4;
    v0 = 0x800A0000;                                    // Result = 800A0000
    v0 = lw(v0 - 0x78C8);                               // Load from: gStatusBarGibAnimFrame (80098738)
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v1, at - 0x78C4);                                // Store to: gStatusBarGibAnimTicsLeft (8009873C)
    v0++;
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v0, at - 0x78C8);                                // Store to: gStatusBarGibAnimFrame (80098738)
    v0 = (i32(v0) < 5);
    if (v0 != 0) goto loc_800387D4;
    sw(0, gp + 0xA78);                                  // Store to: gbStatusBarPlayerGotGibbed (80078058)
    sw(0, gp + 0xB50);                                  // Store to: gbDrawStatusBarFace (80078130)
loc_800387D4:
    v0 = lw(s4 + 0xD4);
    if (v0 == 0) goto loc_8003882C;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v1 = v0 << 2;
    v1 += v0;
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 2;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x7740;                                       // Result = gPlayer1[35] (800A88C0)
    at += v0;
    v1 = lw(at);
    v0 = 0x4B;                                          // Result = 0000004B
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v0, at - 0x78BC);                                // Store to: gStatusBarMsgTicsLeft (80098744)
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v1, at - 0x78C0);                                // Store to: gpStatusBarMsgStr (80098740)
    sw(0, s4 + 0xD4);
loc_8003882C:
    v1 = 0x800A0000;                                    // Result = 800A0000
    v1 -= 0x78BC;                                       // Result = gStatusBarMsgTicsLeft (80098744)
    v0 = lw(v1);                                        // Load from: gStatusBarMsgTicsLeft (80098744)
    s2 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8003884C;
    v0--;
    sw(v0, v1);                                         // Store to: gStatusBarMsgTicsLeft (80098744)
loc_8003884C:
    s3 = 4;                                             // Result = 00000004
    s1 = 0x800B0000;                                    // Result = 800B0000
    s1 -= 0x6B4C;                                       // Result = gStatusBarKeyState[0] (800A94B4)
    s0 = 0;                                             // Result = 00000000
loc_8003885C:
    v0 = 0x800A0000;                                    // Result = 800A0000
    v0 -= 0x78E4;                                       // Result = gStatusBar[1] (8009871C)
    v1 = s2 << 2;
    v1 += v0;
    v0 = lw(v1);
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800388C0;
    }
    sw(0, v1);
    sh(v0, s1);
    v0 = 7;                                             // Result = 00000007
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B48;                                       // Result = gStatusBarKeyState[2] (800A94B8)
    at += s0;
    sh(s3, at);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B46;                                       // Result = gStatusBarKeyState[3] (800A94BA)
    at += s0;
    sh(v0, at);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B4A;                                       // Result = gStatusBarKeyState[1] (800A94B6)
    at += s0;
    sh(0, at);
    s1 += 8;
    goto loc_800389AC;
loc_800388C0:
    v0 = lh(s1);
    if (v0 == 0) goto loc_800389A8;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 -= 0x6B4C;                                       // Result = gStatusBarKeyState[0] (800A94B4)
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B48;                                       // Result = gStatusBarKeyState[2] (800A94B8)
    at += s0;
    v0 = lhu(at);
    a0 = s0 + v1;
    v0--;
    sh(v0, a0 + 0x4);
    v0 <<= 16;
    if (v0 != 0) goto loc_800389A8;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B4A;                                       // Result = gStatusBarKeyState[1] (800A94B6)
    at += s0;
    v0 = lhu(at);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B46;                                       // Result = gStatusBarKeyState[3] (800A94BA)
    at += s0;
    v1 = lhu(at);
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B48;                                       // Result = gStatusBarKeyState[2] (800A94B8)
    at += s0;
    sh(s3, at);
    v0 ^= 1;
    v1--;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B4A;                                       // Result = gStatusBarKeyState[1] (800A94B6)
    at += s0;
    sh(v0, at);
    sh(v1, a0 + 0x6);
    v1 <<= 16;
    if (v1 != 0) goto loc_80038968;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B4C;                                       // Result = gStatusBarKeyState[0] (800A94B4)
    at += s0;
    sh(0, at);
loc_80038968:
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B4A;                                       // Result = gStatusBarKeyState[1] (800A94B6)
    at += s0;
    v0 = lh(at);
    if (v0 == 0) goto loc_800389A8;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B4C;                                       // Result = gStatusBarKeyState[0] (800A94B4)
    at += s0;
    v0 = lh(at);
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_800389A8;
    a1 = 0x18;                                          // Result = 00000018
    S_StartSound();
loc_800389A8:
    s1 += 8;
loc_800389AC:
    s2++;
    v0 = (i32(s2) < 6);
    s0 += 8;
    if (v0 != 0) goto loc_8003885C;
    v0 = lw(s4 + 0xC0);
    v0 &= 2;
    v1 = 0x28;                                          // Result = 00000028
    if (v0 != 0) goto loc_800389E0;
    v0 = lw(s4 + 0x30);
    if (v0 == 0) goto loc_800389F0;
loc_800389E0:
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v1, at - 0x78EC);                                // Store to: gStatusBarFaceAnimNum (80098714)
    goto loc_80038AB8;
loc_800389F0:
    v0 = lw(gp + 0xA78);                                // Load from: gbStatusBarPlayerGotGibbed (80078058)
    if (v0 == 0) goto loc_80038A10;
    v0 = 0x800A0000;                                    // Result = 800A0000
    v0 = lw(v0 - 0x78C8);                               // Load from: gStatusBarGibAnimFrame (80098738)
    v0 += 0x2A;
    goto loc_80038AB0;
loc_80038A10:
    v1 = lw(s4 + 0x24);
    v0 = 0x29;                                          // Result = 00000029
    if (v1 == 0) goto loc_80038AB0;
    v0 = lw(gp + 0x8EC);                                // Load from: gbStatusBarIsShowingSpecialFace (80077ECC)
    {
        const bool bJump = (v0 == 0)
        v0 = 0x66660000;                                // Result = 66660000
        if (bJump) goto loc_80038A70;
    }
    v0 |= 0x6667;                                       // Result = 66666667
    mult(v1, v0);
    v1 = u32(i32(v1) >> 31);
    v0 = hi;
    v0 = u32(i32(v0) >> 3);
    v1 = v0 - v1;
    v0 = (i32(v1) < 4);
    {
        const bool bJump = (v0 != 0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_80038A5C;
    }
    v1 = 0;                                             // Result = 00000000
    goto loc_80038A64;
loc_80038A5C:
    v0 -= v1;
    v1 = v0 << 3;
loc_80038A64:
    v0 = lw(gp + 0x928);                                // Load from: gStatusBarCurSpecialFace (80077F08)
    v0 += v1;
    goto loc_80038AB0;
loc_80038A70:
    v0 |= 0x6667;                                       // Result = 66666667
    mult(v1, v0);
    v1 = u32(i32(v1) >> 31);
    v0 = hi;
    v0 = u32(i32(v0) >> 3);
    v1 = v0 - v1;
    v0 = (i32(v1) < 4);
    {
        const bool bJump = (v0 != 0)
        v0 = 4;                                         // Result = 00000004
        if (bJump) goto loc_80038A9C;
    }
    v1 = 0;                                             // Result = 00000000
    goto loc_80038AA4;
loc_80038A9C:
    v0 -= v1;
    v1 = v0 << 3;
loc_80038AA4:
    v0 = lw(gp + 0xA44);                                // Load from: gStatusBarFaceFrameNum (80078024)
    v0 += v1;
loc_80038AB0:
    at = 0x800A0000;                                    // Result = 800A0000
    sw(v0, at - 0x78EC);                                // Store to: gStatusBarFaceAnimNum (80098714)
loc_80038AB8:
    v0 = 0x800A0000;                                    // Result = 800A0000
    v0 = lw(v0 - 0x78EC);                               // Load from: gStatusBarFaceAnimNum (80098714)
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 1;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x3E68;                                       // Result = StatusBarFaceSpriteInfo[0] (80073E68)
    v1 += v0;
    sw(v1, gp + 0xC50);                                 // Store to: gpCurStatusBarFaceSpriteInfo (80078230)
    P_UpdatePalette();
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void ST_Drawer() noexcept {
loc_80038B0C:
    sp -= 0x78;
    sw(s0, sp + 0x58);
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    a0 = s0;                                            // Result = 1F800200
    a1 = 0;                                             // Result = 00000000
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lhu(a3 - 0x6B0E);                              // Load from: gTexInfo_STATUS[2] (800A94F2)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a2 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x70);
    sw(s5, sp + 0x6C);
    sw(s4, sp + 0x68);
    sw(s3, sp + 0x64);
    sw(s2, sp + 0x60);
    sw(s1, sp + 0x5C);
    sw(0, sp + 0x10);
    v0 = v1 << 2;
    v0 += v1;
    v1 = v0 << 4;
    v1 -= v0;
    v1 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    s2 = v1 + v0;
    LIBGPU_SetDrawMode();
    s0 += 4;                                            // Result = 1F800204
    t2 = 0xFF0000;                                      // Result = 00FF0000
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    t6 = 0x80080000;                                    // Result = 80080000
    t6 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = t6 & t2;                                       // Result = 00086550
    t5 = 0x4000000;                                     // Result = 04000000
    t4 = 0x80000000;                                    // Result = 80000000
    t3 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t7 = t1 + 4;
loc_80038BB4:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80038C18;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_80038E3C;
    v0 = lw(a2);
    at = 0x80070000;                                    // Result = 80070000
    sw(t6, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80038C18:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80038CCC;
    if (v1 == a0) goto loc_80038BB4;
loc_80038C3C:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t5;
    if (v0 == 0) goto loc_80038BB4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t3) goto loc_80038CA8;
    a3 = -1;                                            // Result = FFFFFFFF
loc_80038C8C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_80038C8C;
loc_80038CA8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80038BB4;
    goto loc_80038C3C;
loc_80038CCC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t7;
loc_80038CDC:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_80038D3C;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80038D24:
    v0 = lw(s0);
    s0 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80038D24;
loc_80038D3C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80038DF4;
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_80038D6C:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_80038DF4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_80038DD8;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80038DBC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80038DBC;
loc_80038DD8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80038D6C;
loc_80038DF4:
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lhu(v1 - 0x6F5C);                              // Load from: gPaletteClutId_UI (800A90A4)
    a0 = 0x800A0000;                                    // Result = 800A0000
    a0 = lw(a0 - 0x78BC);                               // Load from: gStatusBarMsgTicsLeft (80098744)
    v0 = 4;                                             // Result = 00000004
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x65;                                          // Result = 00000065
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x20E);                                 // Store to: 1F80020E
    {
        const bool bJump = (i32(a0) <= 0)
        a0 = 7;                                         // Result = 00000007
        if (bJump) goto loc_80038E54;
    }
    a2 = 0x800A0000;                                    // Result = 800A0000
    a2 = lw(a2 - 0x78C0);                               // Load from: gpStatusBarMsgStr (80098740)
    a1 = 0xC1;                                          // Result = 000000C1
    goto loc_80038E98;
loc_80038E3C:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_80038CDC;
loc_80038E48:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_80039044;
loc_80038E54:
    v0 = lw(s2 + 0x124);
    v0 &= 1;
    a0 = sp + 0x18;
    if (v0 == 0) goto loc_80038EA0;
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7FB8);                               // Load from: gGameMap (80078048)
    a1 = 0x80010000;                                    // Result = 80010000
    a1 += 0x1628;                                       // Result = STR_LevelNumAndName[0] (80011628)
    a3 = 0x80070000;                                    // Result = 80070000
    a3 += 0x40BC;                                       // Result = StatusBarWeaponBoxesXPos[6] (800740BC)
    v0 = a2 << 5;
    a3 += v0;
    LIBC2_sprintf();
    a0 = 7;                                             // Result = 00000007
    a1 = 0xC1;                                          // Result = 000000C1
    a2 = sp + 0x18;
loc_80038E98:
    I_DrawStringSmall();
loc_80038EA0:
    t3 = 0x1F800000;                                    // Result = 1F800000
    t3 += 0x204;                                        // Result = 1F800204
    t2 = 0xFF0000;                                      // Result = 00FF0000
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = t7 & t2;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0xC8;                                          // Result = 000000C8
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
    v0 = 0x100;                                         // Result = 00000100
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = 0x28;                                          // Result = 00000028
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x208);                                  // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x20C);                                  // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x20D);                                  // Store to: 1F80020D
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
    t1 = t0 << 2;
    s0 = t1 + 4;
loc_80038F1C:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80038F80;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_80038E48;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(t7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80038F80:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80039034;
    if (v1 == a0) goto loc_80038F1C;
loc_80038FA4:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_80038F1C;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_80039010;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80038FF4:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80038FF4;
loc_80039010:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80038F1C;
    goto loc_80038FA4;
loc_80039034:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += s0;
loc_80039044:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_800390A4;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003908C:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_8003908C;
loc_800390A4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003915C;
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_800390D4:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8003915C;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_80039140;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80039124:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80039124;
loc_80039140:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_800390D4;
loc_8003915C:
    s4 = lw(s2 + 0x70);
    v0 = 0xA;                                           // Result = 0000000A
    {
        const bool bJump = (s4 != v0)
        v0 = s4 << 1;
        if (bJump) goto loc_80039178;
    }
    s4 = lw(s2 + 0x6C);
    v0 = s4 << 1;
loc_80039178:
    v0 += s4;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at += 0x70F4;                                       // Result = WeaponInfo_Fist[0] (800670F4)
    at += v0;
    a2 = lw(at);
    v0 = 5;                                             // Result = 00000005
    {
        const bool bJump = (a2 != v0)
        v0 = a2 << 2;
        if (bJump) goto loc_800391D4;
    }
    a2 = 0;                                             // Result = 00000000
    goto loc_800391DC;
loc_800391A4:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_800396DC;
loc_800391B0:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_80039CBC;
loc_800391BC:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_80039F84;
loc_800391C8:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_8003A26C;
loc_800391D4:
    v0 += s2;
    a2 = lw(v0 + 0x98);
loc_800391DC:
    a0 = 0x1C;                                          // Result = 0000001C
    a1 = 0xCC;                                          // Result = 000000CC
    I_DrawNumber();
    a0 = 0x47;                                          // Result = 00000047
    a2 = lw(s2 + 0x24);
    a1 = 0xCC;                                          // Result = 000000CC
    I_DrawNumber();
    a0 = 0xA8;                                          // Result = 000000A8
    a2 = lw(s2 + 0x28);
    a1 = 0xCC;                                          // Result = 000000CC
    I_DrawNumber();
    t4 = 0;                                             // Result = 00000000
    s5 = 0x1F800000;                                    // Result = 1F800000
    s5 += 0x200;                                        // Result = 1F800200
    t5 = 0xFF0000;                                      // Result = 00FF0000
    t5 |= 0xFFFF;                                       // Result = 00FFFFFF
    s3 = 0x80080000;                                    // Result = 80080000
    s3 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = s3 & t5;                                       // Result = 00086550
    t9 = 0x4000000;                                     // Result = 04000000
    t8 = 0x80000000;                                    // Result = 80000000
    t7 = -1;                                            // Result = FFFFFFFF
    s0 = 0x72;                                          // Result = 00000072
    t6 = 0;                                             // Result = 00000000
    v0 = 0x64;                                          // Result = 00000064
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x208);                                 // Store to: 1F800208
    v0 = 0xB8;                                          // Result = 000000B8
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    v0 = 0xB;                                           // Result = 0000000B
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = 8;                                             // Result = 00000008
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
loc_8003926C:
    v0 = t4 << 2;
    v0 += s2;
    v0 = lw(v0 + 0x48);
    t3 = s5 + 4;                                        // Result = 1F800204
    if (v0 != 0) goto loc_800392BC;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B4C;                                       // Result = gStatusBarKeyState[0] (800A94B4)
    at += t6;
    v0 = lh(at);
    if (v0 == 0) goto loc_80039508;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6B4A;                                       // Result = gStatusBarKeyState[1] (800A94B6)
    at += t6;
    v0 = lh(at);
    if (v0 == 0) goto loc_80039508;
loc_800392BC:
    v0 = t4 << 1;
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    at = 0x80070000;                                    // Result = 80070000
    at += 0x40D0;                                       // Result = StatusBarKeyYPos[0] (800740D0)
    at += v0;
    v0 = lhu(at);
    at = 0x1F800000;                                    // Result = 1F800000
    sb(s0, at + 0x20C);                                 // Store to: 1F80020C
    t1 = t0 << 2;
    t2 = t1 + 4;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
loc_800392F8:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80039360;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_80039424;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(s3, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80039360:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80039414;
    if (v1 == a0) goto loc_800392F8;
loc_80039384:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t9;
    if (v0 == 0) goto loc_800392F8;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t5;
    v0 |= t8;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t7) goto loc_800393F0;
    a3 = -1;                                            // Result = FFFFFFFF
loc_800393D4:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_800393D4;
loc_800393F0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_800392F8;
    goto loc_80039384;
loc_80039414:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_80039424:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t5;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    a2 += 4;
    if (t0 == t7) goto loc_800394EC;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80039460:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80039460;
    goto loc_800394EC;
loc_80039480:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t9;
    if (v0 == 0) goto loc_80039508;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t5;
    v0 |= t8;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t7) goto loc_800394EC;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800394D0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800394D0;
loc_800394EC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80039480;
loc_80039508:
    s0 += 0xB;
    t4++;
    v0 = (i32(t4) < 6);
    t6 += 8;
    if (v0 != 0) goto loc_8003926C;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    v0 = 2;                                             // Result = 00000002
    t2 = 0xFF0000;                                      // Result = 00FF0000
    if (v1 == v0) goto loc_80039DD8;
    t3 = 0x1F800000;                                    // Result = 1F800000
    t3 += 0x204;                                        // Result = 1F800204
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    s0 = 0x80080000;                                    // Result = 80080000
    s0 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = s0 & t2;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0xC8;                                          // Result = 000000C8
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x208);                                 // Store to: 1F800208
    v0 = 0xCD;                                          // Result = 000000CD
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
    v0 = 0xB4;                                          // Result = 000000B4
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    v0 = 0xB8;                                          // Result = 000000B8
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    v0 = 0x33;                                          // Result = 00000033
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = 0x17;                                          // Result = 00000017
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
    t1 = t0 << 2;
    t7 = t1 + 4;
loc_800395B4:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80039618;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_800391A4;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80039618:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_800396CC;
    if (v1 == a0) goto loc_800395B4;
loc_8003963C:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_800395B4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_800396A8;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003968C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003968C;
loc_800396A8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_800395B4;
    goto loc_8003963C;
loc_800396CC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t7;
loc_800396DC:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_8003973C;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80039724:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_80039724;
loc_8003973C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t4 = 2;                                             // Result = 00000002
    if (v1 == v0) goto loc_800397F4;
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8003976C:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t2;
    t4 = 2;                                             // Result = 00000002
    if (v0 == 0) goto loc_800397F4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_800397D8;
    a2 = -1;                                            // Result = FFFFFFFF
loc_800397BC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_800397BC;
loc_800397D8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t4 = 2;                                             // Result = 00000002
    if (v1 != v0) goto loc_8003976C;
loc_800397F4:
    s3 = 0x1F800000;                                    // Result = 1F800000
    s3 += 0x200;                                        // Result = 1F800200
    t5 = 0xFF0000;                                      // Result = 00FF0000
    t5 |= 0xFFFF;                                       // Result = 00FFFFFF
    s1 = 0x80080000;                                    // Result = 80080000
    s1 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t9 = s1 & t5;                                       // Result = 00086550
    t8 = 0x4000000;                                     // Result = 04000000
    s0 = 0x80000000;                                    // Result = 80000000
    t6 = -1;                                            // Result = FFFFFFFF
    t7 = -0x18;                                         // Result = FFFFFFE8
    v0 = 0xB8;                                          // Result = 000000B8
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    v0 = 4;                                             // Result = 00000004
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = 6;                                             // Result = 00000006
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
loc_80039844:
    v0 = t4 << 2;
    v0 += s2;
    v0 = lw(v0 + 0x74);
    t3 = s3 + 4;                                        // Result = 1F800204
    if (v0 == 0) goto loc_80039AC8;
    v0 = t4 << 1;
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    at = 0x80070000;                                    // Result = 80070000
    at += 0x40B0;                                       // Result = StatusBarWeaponBoxesXPos[0] (800740B0)
    at += v0;
    v1 = lhu(at);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 += 5;
    t1 = t0 << 2;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x208);                                 // Store to: 1F800208
    at = 0x80070000;                                    // Result = 80070000
    at += 0x40C0;                                       // Result = StatusBarWeaponBoxesYPos[0] (800740C0)
    at += v0;
    v0 = lhu(at);
    t2 = t1 + 4;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(t7, at + 0x20C);                                 // Store to: 1F80020C
    v0 += 3;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
loc_800398B8:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80039920;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_800399E4;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(s1, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t9;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80039920:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_800399D4;
    if (v1 == a0) goto loc_800398B8;
loc_80039944:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t8;
    if (v0 == 0) goto loc_800398B8;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t5;
    v0 |= s0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t6) goto loc_800399B0;
    a3 = -1;                                            // Result = FFFFFFFF
loc_80039994:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_80039994;
loc_800399B0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_800398B8;
    goto loc_80039944;
loc_800399D4:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_800399E4:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t5;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    a2 += 4;
    if (t0 == t6) goto loc_80039AAC;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80039A20:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_80039A20;
    goto loc_80039AAC;
loc_80039A40:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t8;
    if (v0 == 0) goto loc_80039AC8;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t5;
    v0 |= s0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t6) goto loc_80039AAC;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80039A90:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80039A90;
loc_80039AAC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_80039A40;
loc_80039AC8:
    t4++;
    v0 = (i32(t4) < 8);
    t7 += 4;
    if (v0 != 0) goto loc_80039844;
    t2 = 0x1F800000;                                    // Result = 1F800000
    t2 += 0x204;                                        // Result = 1F800204
    t3 = 0xFF0000;                                      // Result = 00FF0000
    t3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = t7 & t3;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x408C;                                       // Result = WeaponNumbers[0] (8007408C)
    v1 = s4 << 2;
    v1 += v0;
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    v0 = lw(v1);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 <<= 1;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x40B0;                                       // Result = StatusBarWeaponBoxesXPos[0] (800740B0)
    at += v0;
    v0 = lhu(at);
    t1 = t0 << 2;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x208);                                 // Store to: 1F800208
    v0 = lw(v1);
    s0 = t1 + 4;
    v0 <<= 1;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x40C0;                                       // Result = StatusBarWeaponBoxesYPos[0] (800740C0)
    at += v0;
    v1 = lhu(at);
    v0 = 0xA4;                                          // Result = 000000A4
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    v0 = 0xC0;                                          // Result = 000000C0
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    v0 = 0xC;                                           // Result = 0000000C
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x20A);                                 // Store to: 1F80020A
loc_80039B94:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80039BF8;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_800391B0;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(t7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80039BF8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80039CAC;
    if (v1 == a0) goto loc_80039B94;
loc_80039C1C:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_80039B94;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t3;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_80039C88;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80039C6C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80039C6C;
loc_80039C88:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80039B94;
    goto loc_80039C1C;
loc_80039CAC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += s0;
loc_80039CBC:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_80039D1C;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80039D04:
    v0 = lw(t2);
    t2 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_80039D04;
loc_80039D1C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_8003A0A8;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_80039D48:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8003A0A8;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_80039DB4;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80039D98:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80039D98;
loc_80039DB4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003A0A8;
    goto loc_80039D48;
loc_80039DD8:
    t3 = 0x1F800000;                                    // Result = 1F800000
    t3 += 0x204;                                        // Result = 1F800204
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    s0 = 0x80080000;                                    // Result = 80080000
    s0 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = s0 & t2;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0xD1;                                          // Result = 000000D1
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x208);                                 // Store to: 1F800208
    v0 = 0xDD;                                          // Result = 000000DD
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
    v0 = 0xD0;                                          // Result = 000000D0
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    v0 = 0xF3;                                          // Result = 000000F3
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    v0 = 0x21;                                          // Result = 00000021
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = 8;                                             // Result = 00000008
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
    t1 = t0 << 2;
    t7 = t1 + 4;
loc_80039E5C:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_80039EC0;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_800391BC;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_80039EC0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80039F74;
    if (v1 == a0) goto loc_80039E5C;
loc_80039EE4:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_80039E5C;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_80039F50;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80039F34:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_80039F34;
loc_80039F50:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_80039E5C;
    goto loc_80039EE4;
loc_80039F74:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t7;
loc_80039F84:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_80039FE4;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80039FCC:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_80039FCC;
loc_80039FE4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_8003A098;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8003A010:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8003A098;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8003A07C;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003A060:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003A060;
loc_8003A07C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003A010;
loc_8003A098:
    a0 = 0xE1;                                          // Result = 000000E1
    a2 = lw(s2 + 0x64);
    a1 = 0xCC;                                          // Result = 000000CC
    I_DrawNumber();
loc_8003A0A8:
    v0 = lw(gp + 0xB50);                                // Load from: gbDrawStatusBarFace (80078130)
    t6 = 0x4000000;                                     // Result = 04000000
    if (v0 == 0) goto loc_8003A384;
    t3 = 0x1F800000;                                    // Result = 1F800000
    t3 += 0x204;                                        // Result = 1F800204
    t2 = 0xFF0000;                                      // Result = 00FF0000
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    v1 = lw(gp + 0xC50);                                // Load from: gpCurStatusBarFaceSpriteInfo (80078230)
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = lbu(v1);
    s1 = t7 & t2;                                       // Result = 00086550
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x208);                                 // Store to: 1F800208
    v0 = lbu(v1 + 0x1);
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
    v0 = lbu(v1 + 0x2);
    t5 = 0x80000000;                                    // Result = 80000000
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    v0 = lbu(v1 + 0x3);
    t4 = -1;                                            // Result = FFFFFFFF
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    v0 = lbu(v1 + 0x4);
    t1 = t0 << 2;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = lbu(v1 + 0x5);
    s0 = t1 + 4;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
loc_8003A144:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8003A1A8;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_800391C8;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(t7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003A1A8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003A25C;
    if (v1 == a0) goto loc_8003A144;
loc_8003A1CC:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_8003A144;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_8003A238;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003A21C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003A21C;
loc_8003A238:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003A144;
    goto loc_8003A1CC;
loc_8003A25C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += s0;
loc_8003A26C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_8003A2CC;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003A2B4:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_8003A2B4;
loc_8003A2CC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003A384;
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8003A2FC:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8003A384;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8003A368;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003A34C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003A34C;
loc_8003A368:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003A2FC;
loc_8003A384:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EC0);                               // Load from: gbGamePaused (80077EC0)
    if (v0 == 0) goto loc_8003A3A0;
    I_DrawPausedOverlay();
loc_8003A3A0:
    ra = lw(sp + 0x70);
    s5 = lw(sp + 0x6C);
    s4 = lw(sp + 0x68);
    s3 = lw(sp + 0x64);
    s2 = lw(sp + 0x60);
    s1 = lw(sp + 0x5C);
    s0 = lw(sp + 0x58);
    sp += 0x78;
    return;
}

void I_DrawNumber() noexcept {
loc_8003A3C8:
    sp -= 0x58;
    v0 = 0xC3;                                          // Result = 000000C3
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    v0 = 0xB;                                           // Result = 0000000B
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = 0x10;                                          // Result = 00000010
    sw(s4, sp + 0x50);
    sw(s3, sp + 0x4C);
    sw(s2, sp + 0x48);
    sw(s1, sp + 0x44);
    sw(s0, sp + 0x40);
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a1, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
    t7 = a0;
    if (i32(a2) >= 0) goto loc_8003A42C;
    s3 = 1;                                             // Result = 00000001
    a2 = -a2;
    goto loc_8003A430;
loc_8003A420:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_8003A8A0;
loc_8003A42C:
    s3 = 0;                                             // Result = 00000000
loc_8003A430:
    t5 = sp;
    t4 = 0;                                             // Result = 00000000
    a0 = 0x66660000;                                    // Result = 66660000
    a0 |= 0x6667;                                       // Result = 66666667
    mult(a2, a0);
loc_8003A444:
    v1 = u32(i32(a2) >> 31);
    v0 = hi;
    v0 = u32(i32(v0) >> 2);
    v0 -= v1;
    v1 = v0;
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 1;
    v0 = a2 - v0;
    sw(v0, t5);
    a2 = v1;
    t5 += 4;
    if (a2 == 0) goto loc_8003A488;
    t4++;
    v0 = (i32(t4) < 0x10);
    mult(a2, a0);
    if (v0 != 0) goto loc_8003A444;
loc_8003A488:
    t5 = sp;
    if (i32(t4) < 0) goto loc_8003A71C;
    s4 = 0x1F800000;                                    // Result = 1F800000
    s4 += 0x200;                                        // Result = 1F800200
    t6 = 0xFF0000;                                      // Result = 00FF0000
    t6 |= 0xFFFF;                                       // Result = 00FFFFFF
    s2 = 0x80080000;                                    // Result = 80080000
    s2 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = s2 & t6;                                       // Result = 00086550
    s0 = 0x4000000;                                     // Result = 04000000
    t9 = 0x80000000;                                    // Result = 80000000
    t8 = -1;                                            // Result = FFFFFFFF
loc_8003A4B8:
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t7, at + 0x208);                                 // Store to: 1F800208
    v0 = lw(t5);
    t5 += 4;
    t3 = s4 + 4;                                        // Result = 1F800204
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 <<= 2;
    t1 = t0 << 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F84;                                       // Result = BigFontTexcoords_0[0] (80073F84)
    at += v0;
    v0 = lbu(at);
    t2 = t1 + 4;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
loc_8003A500:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8003A568;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_8003A62C;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(s2, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003A568:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003A61C;
    if (v1 == a0) goto loc_8003A500;
loc_8003A58C:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= s0;
    if (v0 == 0) goto loc_8003A500;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t6;
    v0 |= t9;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t8) goto loc_8003A5F8;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8003A5DC:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_8003A5DC;
loc_8003A5F8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003A500;
    goto loc_8003A58C;
loc_8003A61C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_8003A62C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t6;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    a2 += 4;
    if (t0 == t8) goto loc_8003A6F4;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003A668:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_8003A668;
    goto loc_8003A6F4;
loc_8003A688:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= s0;
    if (v0 == 0) goto loc_8003A710;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t6;
    v0 |= t9;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t8) goto loc_8003A6F4;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003A6D8:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003A6D8;
loc_8003A6F4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003A688;
loc_8003A710:
    t4--;
    t7 -= 0xB;
    if (i32(t4) >= 0) goto loc_8003A4B8;
loc_8003A71C:
    t2 = 0xFF0000;                                      // Result = 00FF0000
    if (s3 == 0) goto loc_8003A9B4;
    t3 = 0x1F800000;                                    // Result = 1F800000
    t3 += 0x204;                                        // Result = 1F800204
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    s0 = 0x80080000;                                    // Result = 80080000
    s0 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = s0 & t2;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x3FAC);                              // Load from: BigFontTexcoords_Minus[0] (80073FAC)
    t4 = -1;                                            // Result = FFFFFFFF
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t7, at + 0x208);                                 // Store to: 1F800208
    t1 = t0 << 2;
    t7 = t1 + 4;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
loc_8003A778:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8003A7DC;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8003A420;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003A7DC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003A890;
    if (v1 == a0) goto loc_8003A778;
loc_8003A800:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_8003A778;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_8003A86C;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003A850:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003A850;
loc_8003A86C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003A778;
    goto loc_8003A800;
loc_8003A890:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t7;
loc_8003A8A0:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_8003A900;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003A8E8:
    v0 = lw(t3);
    t3 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_8003A8E8;
loc_8003A900:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_8003A9B4;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8003A92C:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8003A9B4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8003A998;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003A97C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003A97C;
loc_8003A998:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003A92C;
loc_8003A9B4:
    s4 = lw(sp + 0x50);
    s3 = lw(sp + 0x4C);
    s2 = lw(sp + 0x48);
    s1 = lw(sp + 0x44);
    s0 = lw(sp + 0x40);
    sp += 0x58;
    return;
}

void I_DrawStringSmall() noexcept {
loc_8003A9D4:
    sp -= 0x10;
    t5 = a0;
    v0 = 8;                                             // Result = 00000008
    sw(s2, sp + 0x8);
    sw(s1, sp + 0x4);
    sw(s0, sp);
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a1, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
    a0 = lbu(a2);
    a2++;
    if (a0 == 0) goto loc_8003ACEC;
    s2 = 0x1F800000;                                    // Result = 1F800000
    s2 += 0x200;                                        // Result = 1F800200
    t4 = 0xFF0000;                                      // Result = 00FF0000
    t4 |= 0xFFFF;                                       // Result = 00FFFFFF
    s1 = 0x80080000;                                    // Result = 80080000
    s1 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s0 = s1 & t4;                                       // Result = 00086550
    t9 = 0x4000000;                                     // Result = 04000000
    t8 = 0x80000000;                                    // Result = 80000000
    t7 = -1;                                            // Result = FFFFFFFF
loc_8003AA3C:
    v0 = a0 - 0x61;
    v0 = (v0 < 0x1A);
    if (v0 == 0) goto loc_8003AA50;
    a0 -= 0x20;
loc_8003AA50:
    a0 -= 0x21;
    v0 = (a0 < 0x40);
    if (v0 != 0) goto loc_8003AA74;
    t5 += 8;
    goto loc_8003ACDC;
loc_8003AA68:
    v0 = t2 + 4;
    v0 += a0;
    goto loc_8003ABF4;
loc_8003AA74:
    at = 0x1F800000;                                    // Result = 1F800000
    sh(t5, at + 0x208);                                 // Store to: 1F800208
    v1 = a0;
    if (i32(a0) >= 0) goto loc_8003AA88;
    v1 = a0 + 0x1F;
loc_8003AA88:
    t3 = s2 + 4;                                        // Result = 1F800204
    v1 = u32(i32(v1) >> 5);
    v0 = v1 << 5;
    v0 = a0 - v0;
    v0 <<= 3;
    v1 <<= 3;
    t1 = 0x1F800000;                                    // Result = 1F800000
    t1 = lbu(t1 + 0x203);                               // Load from: 1F800203
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 -= 0x58;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v1, at + 0x20D);                                 // Store to: 1F80020D
    t2 = t1 << 2;
    t6 = t2 + 4;
loc_8003AACC:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_8003AB30;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8003AA68;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(s1, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s0;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003AB30:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t2 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003ABE4;
    if (v1 == a0) goto loc_8003AACC;
loc_8003AB54:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t9;
    if (v0 == 0) goto loc_8003AACC;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t8;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t7) goto loc_8003ABC0;
    t0 = -1;                                            // Result = FFFFFFFF
loc_8003ABA4:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != t0) goto loc_8003ABA4;
loc_8003ABC0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003AACC;
    goto loc_8003AB54;
loc_8003ABE4:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t6;
loc_8003ABF4:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t4;
    v1 |= v0;
    sw(v1, a3);
    sb(t1, a3 + 0x3);
    t1--;
    a3 += 4;
    if (t1 == t7) goto loc_8003ACBC;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003AC30:
    v0 = lw(t3);
    t3 += 4;
    t1--;
    sw(v0, a3);
    a3 += 4;
    if (t1 != v1) goto loc_8003AC30;
    goto loc_8003ACBC;
loc_8003AC50:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t9;
    if (v0 == 0) goto loc_8003ACD8;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t8;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t7) goto loc_8003ACBC;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8003ACA0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_8003ACA0;
loc_8003ACBC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003AC50;
loc_8003ACD8:
    t5 += 8;
loc_8003ACDC:
    a0 = lbu(a2);
    a2++;
    if (a0 != 0) goto loc_8003AA3C;
loc_8003ACEC:
    s2 = lw(sp + 0x8);
    s1 = lw(sp + 0x4);
    s0 = lw(sp);
    sp += 0x10;
    return;
}

void I_DrawPausedOverlay() noexcept {
loc_8003AD04:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    sp -= 0x58;
    sw(ra, sp + 0x54);
    sw(s0, sp + 0x50);
    v0 = v1 << 2;
    v0 += v1;
    v1 = v0 << 4;
    v1 -= v0;
    v1 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    s0 = v1 + v0;
    v0 = lw(s0 + 0xC0);
    v0 &= 0x100;
    a1 = 0x6B;                                          // Result = 0000006B
    if (v0 != 0) goto loc_8003AD64;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7A70;                                       // Result = gTexInfo_PAUSE[0] (80097A70)
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F7C);                               // Load from: gPaletteClutId_Main (800A9084)
    a2 = 0x6C;                                          // Result = 0000006C
    I_CacheAndDrawSprite();
loc_8003AD64:
    v1 = lw(s0 + 0xC0);
    v0 = v1 & 0x20;
    {
        const bool bJump = (v0 == 0)
        v0 = v1 & 0x10;
        if (bJump) goto loc_8003ADD8;
    }
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7D90);                               // Load from: gMapNumToCheatWarpTo (80078270)
    a1 = 0x80010000;                                    // Result = 80010000
    a1 += 0x1634;                                       // Result = STR_WarpToLevel[0] (80011634)
    a0 = sp + 0x10;
    LIBC2_sprintf();
    a0 = -1;                                            // Result = FFFFFFFF
    a1 = 0x28;                                          // Result = 00000028
    a2 = sp + 0x10;
    I_DrawString();
    a0 = -1;                                            // Result = FFFFFFFF
    a1 = 0x3C;                                          // Result = 0000003C
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7D90);                               // Load from: gMapNumToCheatWarpTo (80078270)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x40BC;                                       // Result = StatusBarWeaponBoxesXPos[6] (800740BC)
    a2 <<= 5;
    a2 += v0;
    I_DrawString();
    goto loc_8003B0DC;
loc_8003ADCC:
    v0 = t3 + 4;                                        // Result = 00000018
    v0 += a0;
    goto loc_8003AFB8;
loc_8003ADD8:
    t0 = 5;                                             // Result = 00000005
    if (v0 == 0) goto loc_8003B0DC;
    t2 = 0x1F800000;                                    // Result = 1F800000
    t2 += 0x204;                                        // Result = 1F800204
    t3 = 0x14;                                          // Result = 00000014
    t1 = 0xFF0000;                                      // Result = 00FF0000
    t1 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s0 = t7 & t1;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t8 = 0x18;                                          // Result = 00000018
    v0 = 5;                                             // Result = 00000005
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x28;                                          // Result = 00000028
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 = 0x100;                                         // Result = 00000100
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = 0xF0;                                          // Result = 000000F0
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x204);                                  // Store to: 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x205);                                  // Store to: 1F800205
    at = 0x1F800000;                                    // Result = 1F800000
    sb(0, at + 0x206);                                  // Store to: 1F800206
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x208);                                  // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x20A);                                  // Store to: 1F80020A
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x20E);                                  // Store to: 1F80020E
    at = 0x1F800000;                                    // Result = 1F800000
    sh(0, at + 0x210);                                  // Store to: 1F800210
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x214);                                 // Store to: 1F800214
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x216);                                 // Store to: 1F800216
loc_8003AE90:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t3 + a0;
        if (bJump) goto loc_8003AEF4;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8003ADCC;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(t7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s0;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003AEF4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t3 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003AFA8;
    if (v1 == a0) goto loc_8003AE90;
loc_8003AF18:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_8003AE90;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t1;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_8003AF84;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003AF68:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003AF68;
loc_8003AF84:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003AE90;
    goto loc_8003AF18;
loc_8003AFA8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t8;
loc_8003AFB8:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;                                               // Result = 00000004
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_8003B018;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003B000:
    v0 = lw(t2);
    t2 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_8003B000;
loc_8003B018:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_8003B0CC;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8003B044:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8003B0CC;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8003B0B0;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003B094:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003B094;
loc_8003B0B0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003B044;
loc_8003B0CC:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7ED4);                               // Load from: gVramViewerTexPage (80077ED4)
    I_VramViewerDraw();
loc_8003B0DC:
    ra = lw(sp + 0x54);
    s0 = lw(sp + 0x50);
    sp += 0x58;
    return;
}

void P_UpdatePalette() noexcept {
loc_8003B0F0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v0 = v1 << 2;
    v0 += v1;
    v1 = v0 << 4;
    v1 -= v0;
    v1 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    a1 = v1 + v0;
    v0 = lw(a1 + 0x34);
    a2 = lw(a1 + 0xD8);
    {
        const bool bJump = (v0 == 0)
        v0 = u32(i32(v0) >> 6);
        if (bJump) goto loc_8003B144;
    }
    v1 = 0xC;                                           // Result = 0000000C
    v1 -= v0;
    v0 = (i32(a2) < i32(v1));
    if (v0 == 0) goto loc_8003B144;
    a2 = v1;
loc_8003B144:
    a0 = lw(a1 + 0x44);
    v0 = 1;                                             // Result = 00000001
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7D9C);                                // Store to: gbRenderViewFullbright (80078264)
    v0 = (i32(a0) < 0x3D);
    v1 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8003B16C;
    v0 = a0 & 8;
    if (v0 == 0) goto loc_8003B174;
loc_8003B16C:
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7D9C);                                 // Store to: gbRenderViewFullbright (80078264)
loc_8003B174:
    a0 = lw(a1 + 0x30);
    v0 = (i32(a0) < 0x3D);
    {
        const bool bJump = (v0 == 0)
        v0 = a0 & 8;
        if (bJump) goto loc_8003B190;
    }
    if (v0 == 0) goto loc_8003B1A0;
loc_8003B190:
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7D9C);                                 // Store to: gbRenderViewFullbright (80078264)
    v1 = 0xE;                                           // Result = 0000000E
    goto loc_8003B210;
loc_8003B1A0:
    v0 = a2 + 7;
    if (a2 == 0) goto loc_8003B1C4;
    v1 = u32(i32(v0) >> 3);
    v0 = (i32(v1) < 8);
    if (v0 != 0) goto loc_8003B1BC;
    v1 = 7;                                             // Result = 00000007
loc_8003B1BC:
    v1++;
    goto loc_8003B210;
loc_8003B1C4:
    a0 = lw(a1 + 0x3C);
    v0 = (i32(a0) < 0x3D);
    {
        const bool bJump = (v0 == 0)
        v0 = a0 & 8;
        if (bJump) goto loc_8003B1E0;
    }
    if (v0 == 0) goto loc_8003B1E8;
loc_8003B1E0:
    v1 = 0xD;                                           // Result = 0000000D
    goto loc_8003B210;
loc_8003B1E8:
    v0 = lw(a1 + 0xDC);
    {
        const bool bJump = (v0 == 0)
        v0 += 7;
        if (bJump) goto loc_8003B210;
    }
    v1 = u32(i32(v0) >> 3);
    v0 = (i32(v1) < 4);
    v1 += 9;
    if (v0 != 0) goto loc_8003B210;
    v1 = 3;                                             // Result = 00000003
    v1 += 9;                                            // Result = 0000000C
loc_8003B210:
    v0 = v1 << 1;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6F7C;                                       // Result = gPaletteClutId_Main (800A9084)
    at += v0;
    v0 = lhu(at);
    at = 0x80070000;                                    // Result = 80070000
    sh(v0, at + 0x7F7C);                                // Store to: g3dViewPaletteClutId (80077F7C)
    return;
}

void I_GetStringXPosToCenter() noexcept {
    a2 = 0;                                             // Result = 00000000
    v1 = lbu(a0);
    a0++;
    if (v1 == 0) goto loc_8003B30C;
    t2 = 0x25;                                          // Result = 00000025
    t1 = 0x21;                                          // Result = 00000021
    t0 = 0x2E;                                          // Result = 0000002E
    a3 = 0x2D;                                          // Result = 0000002D
loc_8003B25C:
    v0 = v1 - 0x41;
    v0 = (v0 < 0x1A);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 - 0x33;
        if (bJump) goto loc_8003B274;
    }
    v1 = v0 << 2;
    goto loc_8003B2E4;
loc_8003B274:
    v0 = v1 - 0x61;
    v0 = (v0 < 0x1A);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 - 0x39;
        if (bJump) goto loc_8003B28C;
    }
    v1 = v0 << 2;
    goto loc_8003B2E4;
loc_8003B28C:
    a1 = v1 - 0x30;
    v0 = (a1 < 0xA);
    if (v0 == 0) goto loc_8003B2A4;
    v1 = a1 << 2;
    goto loc_8003B2E4;
loc_8003B2A4:
    if (v1 != t2) goto loc_8003B2B4;
    v1 = 0x2C;                                          // Result = 0000002C
    goto loc_8003B2E4;
loc_8003B2B4:
    if (v1 != t1) goto loc_8003B2C4;
    v1 = 0x30;                                          // Result = 00000030
    goto loc_8003B2E4;
loc_8003B2C4:
    if (v1 != t0) goto loc_8003B2D4;
    v1 = 0x34;                                          // Result = 00000034
    goto loc_8003B2E4;
loc_8003B2D4:
    {
        const bool bJump = (v1 == a3)
        v1 = 0x28;                                      // Result = 00000028
        if (bJump) goto loc_8003B2E4;
    }
    a2 += 6;
    goto loc_8003B2FC;
loc_8003B2E4:
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F86;                                       // Result = BigFontTexcoords_0[2] (80073F86)
    at += v1;
    v0 = lbu(at);
    a2 += v0;
loc_8003B2FC:
    v1 = lbu(a0);
    a0++;
    if (v1 != 0) goto loc_8003B25C;
loc_8003B30C:
    v0 = 0x100;                                         // Result = 00000100
    v0 -= a2;
    v1 = v0 >> 31;
    v0 += v1;
    v0 = u32(i32(v0) >> 1);
    return;
}

void I_DrawString() noexcept {
loc_8003B324:
    sp -= 0x30;
    sw(s1, sp + 0x1C);
    s1 = a0;
    sw(s4, sp + 0x28);
    s4 = a1;
    sw(s2, sp + 0x20);
    s2 = a2;
    sw(s0, sp + 0x18);
    s0 = 0x1F800000;                                    // Result = 1F800000
    s0 += 0x200;                                        // Result = 1F800200
    a0 = s0;                                            // Result = 1F800200
    a1 = 0;                                             // Result = 00000000
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lhu(a3 - 0x6B0E);                              // Load from: gTexInfo_STATUS[2] (800A94F2)
    a2 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x2C);
    sw(s3, sp + 0x24);
    sw(0, sp + 0x10);
    LIBGPU_SetDrawMode();
    s0 += 4;                                            // Result = 1F800204
    t3 = 0xFF0000;                                      // Result = 00FF0000
    t3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t7 = 0x80080000;                                    // Result = 80080000
    t7 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t8 = t7 & t3;                                       // Result = 00086550
    t6 = 0x4000000;                                     // Result = 04000000
    t5 = 0x80000000;                                    // Result = 80000000
    t4 = -1;                                            // Result = FFFFFFFF
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t1 = t0 << 2;
    t2 = t1 + 4;
loc_8003B3AC:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8003B414;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_8003B4D8;
    }
    v0 = lw(a2);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(t7, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t8;
    sw(v0, a2);
    sb(0, a2 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003B414:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003B4C8;
    if (v1 == a0) goto loc_8003B3AC;
loc_8003B438:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t6;
    if (v0 == 0) goto loc_8003B3AC;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t3;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_8003B4A4;
    a3 = -1;                                            // Result = FFFFFFFF
loc_8003B488:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a3) goto loc_8003B488;
loc_8003B4A4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003B3AC;
    goto loc_8003B438;
loc_8003B4C8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t2;
loc_8003B4D8:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a2);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a2);
    sb(t0, a2 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 += 4;
    if (t0 == v0) goto loc_8003B538;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003B520:
    v0 = lw(s0);
    s0 += 4;
    t0--;
    sw(v0, a2);
    a2 += 4;
    if (t0 != v1) goto loc_8003B520;
loc_8003B538:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003B5F0;
    t2 = 0x4000000;                                     // Result = 04000000
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8003B568:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8003B5F0;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8003B5D4;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003B5B8:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003B5B8;
loc_8003B5D4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003B568;
loc_8003B5F0:
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lhu(v1 - 0x6F5C);                              // Load from: gPaletteClutId_UI (800A90A4)
    v0 = 4;                                             // Result = 00000004
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x65;                                          // Result = 00000065
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x20E);                                 // Store to: 1F80020E
    a1 = 0;                                             // Result = 00000000
    if (s1 != v0) goto loc_8003B708;
    v1 = lbu(s2);
    a2 = s2 + 1;
    if (v1 == 0) goto loc_8003B6F4;
    t2 = 0x25;                                          // Result = 00000025
    t1 = 0x21;                                          // Result = 00000021
    t0 = 0x2E;                                          // Result = 0000002E
    a3 = 0x2D;                                          // Result = 0000002D
loc_8003B644:
    v0 = v1 - 0x41;
    v0 = (v0 < 0x1A);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 - 0x33;
        if (bJump) goto loc_8003B65C;
    }
    v1 = v0 << 2;
    goto loc_8003B6CC;
loc_8003B65C:
    v0 = v1 - 0x61;
    v0 = (v0 < 0x1A);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 - 0x39;
        if (bJump) goto loc_8003B674;
    }
    v1 = v0 << 2;
    goto loc_8003B6CC;
loc_8003B674:
    a0 = v1 - 0x30;
    v0 = (a0 < 0xA);
    if (v0 == 0) goto loc_8003B68C;
    v1 = a0 << 2;
    goto loc_8003B6CC;
loc_8003B68C:
    if (v1 != t2) goto loc_8003B69C;
    v1 = 0x2C;                                          // Result = 0000002C
    goto loc_8003B6CC;
loc_8003B69C:
    if (v1 != t1) goto loc_8003B6AC;
    v1 = 0x30;                                          // Result = 00000030
    goto loc_8003B6CC;
loc_8003B6AC:
    if (v1 != t0) goto loc_8003B6BC;
    v1 = 0x34;                                          // Result = 00000034
    goto loc_8003B6CC;
loc_8003B6BC:
    {
        const bool bJump = (v1 == a3)
        v1 = 0x28;                                      // Result = 00000028
        if (bJump) goto loc_8003B6CC;
    }
    a1 += 6;
    goto loc_8003B6E4;
loc_8003B6CC:
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F86;                                       // Result = BigFontTexcoords_0[2] (80073F86)
    at += v1;
    v0 = lbu(at);
    a1 += v0;
loc_8003B6E4:
    v1 = lbu(a2);
    a2++;
    if (v1 != 0) goto loc_8003B644;
loc_8003B6F4:
    v0 = 0x100;                                         // Result = 00000100
    v0 -= a1;
    v1 = v0 >> 31;
    v0 += v1;
    s1 = u32(i32(v0) >> 1);
loc_8003B708:
    t0 = lbu(s2);
    s2++;
    if (t0 == 0) goto loc_8003BA9C;
    s3 = 0x1F800000;                                    // Result = 1F800000
    s3 += 0x200;                                        // Result = 1F800200
    t4 = 0xFF0000;                                      // Result = 00FF0000
    t4 |= 0xFFFF;                                       // Result = 00FFFFFF
    t9 = 0x80080000;                                    // Result = 80080000
    t9 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    t8 = t9 & t4;                                       // Result = 00086550
    s0 = 0x4000000;                                     // Result = 04000000
    t7 = 0x80000000;                                    // Result = 80000000
    t6 = -1;                                            // Result = FFFFFFFF
loc_8003B740:
    v0 = t0 - 0x41;
    v0 = (v0 < 0x1A);
    a0 = s4;
    if (v0 == 0) goto loc_8003B75C;
    v0 = t0 - 0x33;
    t0 = v0 << 2;
    goto loc_8003B7DC;
loc_8003B75C:
    v0 = t0 - 0x61;
    v0 = (v0 < 0x1A);
    {
        const bool bJump = (v0 == 0)
        v0 = t0 - 0x39;
        if (bJump) goto loc_8003B778;
    }
    t0 = v0 << 2;
    a0 += 3;
    goto loc_8003B7DC;
loc_8003B778:
    v1 = t0 - 0x30;
    v0 = (v1 < 0xA);
    {
        const bool bJump = (v0 == 0)
        v0 = 0x25;                                      // Result = 00000025
        if (bJump) goto loc_8003B790;
    }
    t0 = v1 << 2;
    goto loc_8003B7DC;
loc_8003B790:
    {
        const bool bJump = (t0 != v0)
        v0 = 0x21;                                      // Result = 00000021
        if (bJump) goto loc_8003B7A0;
    }
    t0 = 0x2C;                                          // Result = 0000002C
    goto loc_8003B7DC;
loc_8003B7A0:
    {
        const bool bJump = (t0 != v0)
        v0 = 0x2E;                                      // Result = 0000002E
        if (bJump) goto loc_8003B7B0;
    }
    t0 = 0x30;                                          // Result = 00000030
    goto loc_8003B7DC;
loc_8003B7B0:
    {
        const bool bJump = (t0 != v0)
        v0 = 0x2D;                                      // Result = 0000002D
        if (bJump) goto loc_8003B7C0;
    }
    t0 = 0x34;                                          // Result = 00000034
    goto loc_8003B7DC;
loc_8003B7C0:
    {
        const bool bJump = (t0 == v0)
        t0 = 0x28;                                      // Result = 00000028
        if (bJump) goto loc_8003B7DC;
    }
    s1 += 6;
    goto loc_8003BA8C;
loc_8003B7D0:
    v0 = t2 + 4;
    v0 += a0;
    goto loc_8003B990;
loc_8003B7DC:
    at = 0x1F800000;                                    // Result = 1F800000
    sh(s1, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a0, at + 0x20A);                                 // Store to: 1F80020A
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F84;                                       // Result = BigFontTexcoords_0[0] (80073F84)
    at += t0;
    v0 = lbu(at);
    t1 = 0x1F800000;                                    // Result = 1F800000
    t1 = lbu(t1 + 0x203);                               // Load from: 1F800203
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F85;                                       // Result = BigFontTexcoords_0[1] (80073F85)
    at += t0;
    v0 = lbu(at);
    t3 = s3 + 4;                                        // Result = 1F800204
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F86;                                       // Result = BigFontTexcoords_0[2] (80073F86)
    at += t0;
    v0 = lbu(at);
    t2 = t1 << 2;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F87;                                       // Result = BigFontTexcoords_0[3] (80073F87)
    at += t0;
    v0 = lbu(at);
    t5 = t2 + 4;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x212);                                 // Store to: 1F800212
loc_8003B868:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t2 + a0;
        if (bJump) goto loc_8003B8CC;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8003B7D0;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(t9, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= t8;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003B8CC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t2 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003B980;
    if (v1 == a0) goto loc_8003B868;
loc_8003B8F0:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= s0;
    if (v0 == 0) goto loc_8003B868;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t7;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t6) goto loc_8003B95C;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003B940:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003B940;
loc_8003B95C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003B868;
    goto loc_8003B8F0;
loc_8003B980:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t5;
loc_8003B990:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= t4;
    v1 |= v0;
    sw(v1, a3);
    sb(t1, a3 + 0x3);
    t1--;
    a3 += 4;
    if (t1 == t6) goto loc_8003BA58;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003B9CC:
    v0 = lw(t3);
    t3 += 4;
    t1--;
    sw(v0, a3);
    a3 += 4;
    if (t1 != v1) goto loc_8003B9CC;
    goto loc_8003BA58;
loc_8003B9EC:
    v0 = lw(gp + 0x700);                                // Load from: GPU_REG_GP1 (80077CE0)
    v0 = lw(v0);
    v0 &= s0;
    if (v0 == 0) goto loc_8003BA74;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t4;
    v0 |= t7;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t6) goto loc_8003BA58;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003BA3C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x6FC);                                // Load from: GPU_REG_GP0 (80077CDC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003BA3C;
loc_8003BA58:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003B9EC;
loc_8003BA74:
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3F86;                                       // Result = BigFontTexcoords_0[2] (80073F86)
    at += t0;                                           // Result = BigFontTexcoords_Minus[2] (80073FAE)
    v0 = lbu(at);                                       // Load from: BigFontTexcoords_Minus[2] (80073FAE)
    s1 += v0;
loc_8003BA8C:
    t0 = lbu(s2);
    s2++;
    if (t0 != 0) goto loc_8003B740;
loc_8003BA9C:
    ra = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x30;
    return;
}

void AM_Start() noexcept {
loc_8003BAC0:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7E74);                               // Load from: gBlockmapOriginX (8007818C)
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D7C);                               // Load from: gBlockmapWidth (80078284)
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0x7E6C);                               // Load from: gBlockmapOriginY (80078194)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7EB8);                               // Load from: gBlockmapHeight (80077EB8)
    v0 <<= 23;
    v0 += a0;
    v1 <<= 23;
    v1 += a1;
    sw(a0, gp + 0xCA0);                                 // Store to: gAutomapXMin (80078280)
    sw(v0, gp + 0xCB0);                                 // Store to: gAutomapXMax (80078290)
    sw(a1, gp + 0xCAC);                                 // Store to: gAutomapYMin (8007828C)
    sw(v1, gp + 0xCB8);                                 // Store to: gAutomapYMax (80078298)
    return;
}

void AM_Control() noexcept {
loc_8003BB08:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EC0);                               // Load from: gbGamePaused (80077EC0)
    if (v0 != 0) goto loc_8003BD2C;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at += v0;
    a2 = lw(at);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7DEC;                                       // Result = gPlayerOldPadButtons[0] (80078214)
    at += v0;
    v0 = lw(at);
    v1 = a2 & 0x100;
    v0 &= 0x100;
    if (v1 == 0) goto loc_8003BB88;
    if (v0 != 0) goto loc_8003BB88;
    v0 = lw(a0 + 0x124);
    v1 = lw(a0);
    v0 ^= 1;
    sw(v0, a0 + 0x124);
    v0 = lw(v1);
    v1 = lw(a0);
    sw(v0, a0 + 0x118);
    v0 = lw(v1 + 0x4);
    sw(v0, a0 + 0x11C);
loc_8003BB88:
    a1 = lw(a0 + 0x124);
    v0 = a1 & 1;
    if (v0 == 0) goto loc_8003BD2C;
    v0 = lw(a0 + 0x4);
    {
        const bool bJump = (v0 != 0)
        v0 = a2 & 0x40;
        if (bJump) goto loc_8003BD2C;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = a1 & 2;
        if (bJump) goto loc_8003BBC4;
    }
    v0 = -3;                                            // Result = FFFFFFFD
    v0 &= a1;
    sw(v0, a0 + 0x124);
    goto loc_8003BD2C;
loc_8003BBC4:
    {
        const bool bJump = (v0 != 0)
        v0 = a2 & 0x80;
        if (bJump) goto loc_8003BBF4;
    }
    v1 = lw(a0);
    v0 = a1 | 2;
    sw(v0, a0 + 0x124);
    v0 = lw(v1);
    v1 = lw(a0);
    sw(v0, a0 + 0x118);
    v0 = lw(v1 + 0x4);
    sw(v0, a0 + 0x11C);
    v0 = a2 & 0x80;
loc_8003BBF4:
    a1 = 0x800000;                                      // Result = 00800000
    if (v0 == 0) goto loc_8003BC00;
    a1 = 0x1000000;                                     // Result = 01000000
loc_8003BC00:
    v0 = lw(a0 + 0x124);
    v0 &= 2;
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 0x2000;
        if (bJump) goto loc_8003BD2C;
    }
    if (v0 == 0) goto loc_8003BC34;
    v0 = lw(a0 + 0x118);
    v1 = lw(gp + 0xCB0);                                // Load from: gAutomapXMax (80078290)
    v0 += a1;
    sw(v0, a0 + 0x118);
    v0 = (i32(v1) < i32(v0));
    goto loc_8003BC54;
loc_8003BC34:
    v0 = a2 & 0x8000;
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 0x1000;
        if (bJump) goto loc_8003BC60;
    }
    v0 = lw(a0 + 0x118);
    v1 = lw(gp + 0xCA0);                                // Load from: gAutomapXMin (80078280)
    v0 -= a1;
    sw(v0, a0 + 0x118);
    v0 = (i32(v0) < i32(v1));
loc_8003BC54:
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 0x1000;
        if (bJump) goto loc_8003BC60;
    }
    sw(v1, a0 + 0x118);
loc_8003BC60:
    if (v0 == 0) goto loc_8003BC80;
    v0 = lw(a0 + 0x11C);
    v1 = lw(gp + 0xCB8);                                // Load from: gAutomapYMax (80078298)
    v0 += a1;
    sw(v0, a0 + 0x11C);
    v0 = (i32(v1) < i32(v0));
    goto loc_8003BCA0;
loc_8003BC80:
    v0 = a2 & 0x4000;
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 8;
        if (bJump) goto loc_8003BCAC;
    }
    v0 = lw(a0 + 0x11C);
    v1 = lw(gp + 0xCAC);                                // Load from: gAutomapYMin (8007828C)
    v0 -= a1;
    sw(v0, a0 + 0x11C);
    v0 = (i32(v0) < i32(v1));
loc_8003BCA0:
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 8;
        if (bJump) goto loc_8003BCAC;
    }
    sw(v1, a0 + 0x11C);
loc_8003BCAC:
    {
        const bool bJump = (v0 == 0)
        v0 = a2 & 4;
        if (bJump) goto loc_8003BCD8;
    }
    v0 = lw(a0 + 0x120);
    v0 -= 2;
    sw(v0, a0 + 0x120);
    v0 = (i32(v0) < 8);
    {
        const bool bJump = (v0 == 0)
        v0 = 8;                                         // Result = 00000008
        if (bJump) goto loc_8003BD00;
    }
    sw(v0, a0 + 0x120);
    goto loc_8003BD00;
loc_8003BCD8:
    if (v0 == 0) goto loc_8003BD00;
    v0 = lw(a0 + 0x120);
    v0 += 2;
    sw(v0, a0 + 0x120);
    v0 = (i32(v0) < 0x41);
    {
        const bool bJump = (v0 != 0)
        v0 = 0x40;                                      // Result = 00000040
        if (bJump) goto loc_8003BD00;
    }
    sw(v0, a0 + 0x120);
loc_8003BD00:
    a0 = 0xFFFF0000;                                    // Result = FFFF0000
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D14);                               // Load from: gPlayerNum (800782EC)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    v1 <<= 2;
    v1 += v0;
    v0 = lw(v1);
    a0 |= 0xFF3;                                        // Result = FFFF0FF3
    v0 &= a0;
    sw(v0, v1);
loc_8003BD2C:
    return;
}

void AM_Drawer() noexcept {
loc_8003BD34:
    sp -= 0x60;
    sw(ra, sp + 0x5C);
    sw(fp, sp + 0x58);
    sw(s7, sp + 0x54);
    sw(s6, sp + 0x50);
    sw(s5, sp + 0x4C);
    sw(s4, sp + 0x48);
    sw(s3, sp + 0x44);
    sw(s2, sp + 0x40);
    sw(s1, sp + 0x3C);
    sw(s0, sp + 0x38);
    I_DrawPresent();
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v0 = v1 << 2;
    v0 += v1;
    v1 = v0 << 4;
    v1 -= v0;
    v1 <<= 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    v1 += v0;
    sw(v1, sp + 0x28);
    v0 = lw(v1 + 0x124);
    s7 = lw(v1 + 0x120);
    v0 &= 2;
    if (v0 == 0) goto loc_8003BDC0;
    t4 = lw(v1 + 0x118);
    sw(t4, sp + 0x18);
    t4 = lw(v1 + 0x11C);
    sw(t4, sp + 0x20);
    goto loc_8003BDE8;
loc_8003BDC0:
    t4 = lw(sp + 0x28);
    v0 = lw(t4);
    t4 = lw(v0);
    sw(t4, sp + 0x18);
    v0 = lw(v0 + 0x4);
    sw(v0, sp + 0x20);
loc_8003BDE8:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E38);                               // Load from: gNumLines (800781C8)
    s1 = 0x80070000;                                    // Result = 80070000
    s1 = lw(s1 + 0x7EB0);                               // Load from: gpLines (80077EB0)
    fp = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_8003BF6C;
    s0 = s1 + 0x14;
loc_8003BE04:
    v0 = lw(s0 - 0x4);
    v1 = 0x100;                                         // Result = 00000100
    v0 &= 0x180;
    s6 = 0x8A0000;                                      // Result = 008A0000
    if (v0 == v1) goto loc_8003BE44;
    t4 = lw(sp + 0x28);
    v0 = lw(t4 + 0x40);
    if (v0 != 0) goto loc_8003BE44;
    v0 = lw(t4 + 0xC0);
    v0 &= 4;
    if (v0 == 0) goto loc_8003BF4C;
loc_8003BE44:
    v1 = lw(s1);
    t4 = lw(sp + 0x18);
    v0 = lw(v1);
    v0 -= t4;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    v0 = lw(v1 + 0x4);
    t4 = lw(sp + 0x20);
    a1 = lo;
    v0 -= t4;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    v1 = lw(s0 - 0x10);
    t4 = lw(sp + 0x18);
    v0 = lw(v1);
    a0 = lo;
    v0 -= t4;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    t4 = lw(sp + 0x20);
    v0 = lw(v1 + 0x4);
    v1 = lo;
    v0 -= t4;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    s6 |= 0x5C30;                                       // Result = 008A5C30
    t2 = u32(i32(a0) >> 16);
    t4 = lw(sp + 0x28);
    a3 = u32(i32(v1) >> 16);
    v0 = lo;
    a0 = u32(i32(v0) >> 16);
    v0 = lw(t4 + 0xC0);
    v1 = lw(t4 + 0x40);
    v0 &= 4;
    v0 += v1;
    t3 = u32(i32(a1) >> 16);
    if (v0 == 0) goto loc_8003BEFC;
    v0 = lw(s0 - 0x4);
    v0 &= 0x100;
    if (v0 != 0) goto loc_8003BEFC;
    s6 = 0x800000;                                      // Result = 00800000
    s6 |= 0x8080;                                       // Result = 00808080
    goto loc_8003BF38;
loc_8003BEFC:
    v1 = lw(s0 - 0x4);
    v0 = v1 & 0x20;
    if (v0 != 0) goto loc_8003BF34;
    v0 = lw(s0);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 & 4;
        if (bJump) goto loc_8003BF2C;
    }
    s6 = 0xCC0000;                                      // Result = 00CC0000
    s6 |= 0xCC00;                                       // Result = 00CCCC00
    goto loc_8003BF38;
loc_8003BF2C:
    if (v0 != 0) goto loc_8003BF38;
loc_8003BF34:
    s6 = 0xA40000;                                      // Result = 00A40000
loc_8003BF38:
    sw(a0, sp + 0x10);
    a0 = s6;
    a1 = t3;
    a2 = t2;
    DrawLine();
loc_8003BF4C:
    fp++;
    s0 += 0x4C;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E38);                               // Load from: gNumLines (800781C8)
    v0 = (i32(fp) < i32(v0));
    s1 += 0x4C;
    if (v0 != 0) goto loc_8003BE04;
loc_8003BF6C:
    t4 = lw(sp + 0x28);
    v0 = lw(t4 + 0xC0);
    v0 &= 8;
    if (v0 == 0) goto loc_8003C168;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x715C;                                       // Result = gMObjHead[5] (800A8EA4)
    a3 = lw(v0);                                        // Load from: gMObjHead[5] (800A8EA4)
    v0 -= 0x14;                                         // Result = gMObjHead[0] (800A8E90)
    if (a3 == v0) goto loc_8003C168;
    fp = 0x80060000;                                    // Result = 80060000
    fp += 0x7958;                                       // Result = FineSine[0] (80067958)
loc_8003BFA8:
    t4 = lw(sp + 0x28);
    v0 = lw(t4);
    s6 = lw(a3 + 0x14);
    if (a3 == v0) goto loc_8003C154;
    t0 = lw(a3 + 0x24);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    v1 = lw(a3);
    t4 = lw(sp + 0x18);
    a1 = t0 >> 19;
    a1 <<= 2;
    v0 = a1 + a2;
    a0 = lw(v0);
    t3 = v1 - t4;
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    v0 += t3;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    a1 += fp;
    t4 = lw(sp + 0x20);
    v0 = lw(a3 + 0x4);
    v1 = lw(a1);
    t2 = v0 - t4;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    a1 = lo;
    v0 += t2;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    v1 = 0xA0000000;                                    // Result = A0000000
    v1 += t0;
    v1 >>= 19;
    v1 <<= 2;
    v0 = v1 + a2;
    a0 = lw(v0);
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    t1 = lo;
    v0 += t3;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    v1 += fp;
    v1 = lw(v1);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    a3 = lo;
    v0 += t2;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    v1 = 0x60000000;                                    // Result = 60000000
    v1 += t0;
    v1 >>= 19;
    v1 <<= 2;
    a2 += v1;
    a0 = lw(a2);
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    t0 = lo;
    v0 += t3;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    v1 += fp;
    v1 = lw(v1);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v1 = lo;
    v0 += t2;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    s5 = u32(i32(a1) >> 16);
    a1 = s5;
    s4 = u32(i32(t1) >> 16);
    a2 = s4;
    a0 = 0x80FF;                                        // Result = 000080FF
    s1 = u32(i32(a3) >> 16);
    a3 = s1;
    s0 = u32(i32(t0) >> 16);
    sw(s0, sp + 0x10);
    s3 = u32(i32(v1) >> 16);
    v0 = lo;
    s2 = u32(i32(v0) >> 16);
    DrawLine();
    a0 = 0x80FF;                                        // Result = 000080FF
    a1 = s1;
    a2 = s0;
    a3 = s3;
    sw(s2, sp + 0x10);
    DrawLine();
    a0 = 0x80FF;                                        // Result = 000080FF
    a1 = s5;
    a2 = s4;
    a3 = s3;
    sw(s2, sp + 0x10);
    DrawLine();
loc_8003C154:
    a3 = s6;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 -= 0x7170;                                       // Result = gMObjHead[0] (800A8E90)
    if (a3 != v0) goto loc_8003BFA8;
loc_8003C168:
    t4 = 0x800B0000;                                    // Result = 800B0000
    t4 -= 0x7814;                                       // Result = gPlayer1[0] (800A87EC)
    sw(t4, sp + 0x28);
    fp = 0;                                             // Result = 00000000
loc_8003C178:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    t4 = 1;                                             // Result = 00000001
    if (v1 == t4) goto loc_8003C1A0;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    if (fp != v0) goto loc_8003C3A4;
loc_8003C1A0:
    t4 = lw(sp + 0x28);
    v0 = lw(t4 + 0x4);
    s6 = 0xC000;                                        // Result = 0000C000
    if (v0 != 0) goto loc_8003C1D0;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 &= 2;
    if (v0 != 0) goto loc_8003C3A4;
loc_8003C1D0:
    t4 = 1;                                             // Result = 00000001
    if (v1 != t4) goto loc_8003C1F8;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    if (fp != v0) goto loc_8003C1F8;
    s6 = 0xCC0000;                                      // Result = 00CC0000
    s6 |= 0xCC00;                                       // Result = 00CCCC00
loc_8003C1F8:
    t4 = lw(sp + 0x28);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7BD0);                               // Load from: gpFineCosine (80077BD0)
    a2 = lw(t4);
    t4 = lw(sp + 0x18);
    t0 = lw(a2 + 0x24);
    v1 = lw(a2);
    a1 = t0 >> 19;
    a1 <<= 2;
    v0 = a1 + a3;
    a0 = lw(v0);
    t3 = v1 - t4;
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    v0 += t3;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    t4 = 0x80060000;                                    // Result = 80060000
    t4 += 0x7958;                                       // Result = FineSine[0] (80067958)
    a1 += t4;
    t4 = lw(sp + 0x20);
    v0 = lw(a2 + 0x4);
    v1 = lw(a1);
    t2 = v0 - t4;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    a1 = lo;
    v0 += t2;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    v1 = 0xA0000000;                                    // Result = A0000000
    v1 += t0;
    v1 >>= 19;
    v1 <<= 2;
    v0 = v1 + a3;
    a0 = lw(v0);
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    a2 = lo;
    v0 += t3;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    t4 = 0x80060000;                                    // Result = 80060000
    t4 += 0x7958;                                       // Result = FineSine[0] (80067958)
    v1 += t4;
    v1 = lw(v1);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    t1 = lo;
    v0 += t2;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    v1 = 0x60000000;                                    // Result = 60000000
    v1 += t0;
    v1 >>= 19;
    v1 <<= 2;
    a3 += v1;
    a0 = lw(a3);
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    t0 = lo;
    v0 += t3;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    v1 += t4;
    v1 = lw(v1);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    v1 = lo;
    v0 += t2;
    v0 = u32(i32(v0) >> 8);
    mult(s7, v0);
    s5 = u32(i32(a1) >> 16);
    a1 = s5;
    s4 = u32(i32(a2) >> 16);
    a2 = s4;
    a0 = s6;
    s1 = u32(i32(t1) >> 16);
    a3 = s1;
    s0 = u32(i32(t0) >> 16);
    sw(s0, sp + 0x10);
    s3 = u32(i32(v1) >> 16);
    v0 = lo;
    s2 = u32(i32(v0) >> 16);
    DrawLine();
    a0 = s6;
    a1 = s1;
    a2 = s0;
    a3 = s3;
    sw(s2, sp + 0x10);
    DrawLine();
    a0 = s6;
    a1 = s5;
    a2 = s4;
    a3 = s3;
    sw(s2, sp + 0x10);
    DrawLine();
loc_8003C3A4:
    fp++;
    t4 = lw(sp + 0x28);
    v0 = (i32(fp) < 2);
    t4 += 0x12C;
    sw(t4, sp + 0x28);
    if (v0 != 0) goto loc_8003C178;
    ra = lw(sp + 0x5C);
    fp = lw(sp + 0x58);
    s7 = lw(sp + 0x54);
    s6 = lw(sp + 0x50);
    s5 = lw(sp + 0x4C);
    s4 = lw(sp + 0x48);
    s3 = lw(sp + 0x44);
    s2 = lw(sp + 0x40);
    s1 = lw(sp + 0x3C);
    s0 = lw(sp + 0x38);
    sp += 0x60;
    return;
}

void DrawLine() noexcept {
loc_8003C3F0:
    sp -= 8;
    t0 = (i32(a1) < -0x80);
    t4 = lw(sp + 0x18);
    v0 = (i32(a1) < 0x81);
    sw(s1, sp + 0x4);
    sw(s0, sp);
    if (v0 != 0) goto loc_8003C410;
    t0 |= 2;
loc_8003C410:
    v0 = (i32(a2) < -0x64);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(a2) < 0x65);
        if (bJump) goto loc_8003C420;
    }
    t0 |= 4;
loc_8003C420:
    v1 = (i32(a3) < -0x80);
    if (v0 != 0) goto loc_8003C42C;
    t0 |= 8;
loc_8003C42C:
    v0 = (i32(a3) < 0x81);
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(t4) < -0x64);
        if (bJump) goto loc_8003C43C;
    }
    v1 |= 2;
loc_8003C43C:
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(t4) < 0x65);
        if (bJump) goto loc_8003C448;
    }
    v1 |= 4;
loc_8003C448:
    {
        const bool bJump = (v0 != 0)
        v0 = t0 & v1;
        if (bJump) goto loc_8003C458;
    }
    v1 |= 8;
    v0 = t0 & v1;
loc_8003C458:
    t1 = 3;                                             // Result = 00000003
    if (v0 != 0) goto loc_8003C744;
    t3 = 0x1F800000;                                    // Result = 1F800000
    t3 += 0x204;                                        // Result = 1F800204
    t5 = 0xC;                                           // Result = 0000000C
    t6 = 0x10;                                          // Result = 00000010
    t2 = 0xFF0000;                                      // Result = 00FF0000
    t2 |= 0xFFFF;                                       // Result = 00FFFFFF
    s0 = 0x80080000;                                    // Result = 80080000
    s0 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    s1 = s0 & t2;                                       // Result = 00086550
    t9 = 0x4000000;                                     // Result = 04000000
    t8 = 0x80000000;                                    // Result = 80000000
    t7 = -1;                                            // Result = FFFFFFFF
    v0 = 3;                                             // Result = 00000003
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v0 = 0x40;                                          // Result = 00000040
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    v0 = a0 >> 16;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x204);                                 // Store to: 1F800204
    v0 = a0 >> 8;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x205);                                 // Store to: 1F800205
    v0 = a1 + 0x80;
    v1 = 0x64;                                          // Result = 00000064
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x208);                                 // Store to: 1F800208
    v0 = v1 - a2;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20A);                                 // Store to: 1F80020A
    v0 = a3 + 0x80;
    t0 = 0x80070000;                                    // Result = 80070000
    t0 = lw(t0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 -= t4;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(a0, at + 0x206);                                 // Store to: 1F800206
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x20C);                                 // Store to: 1F80020C
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x20E);                                 // Store to: 1F80020E
loc_8003C504:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t5 + a0;
        if (bJump) goto loc_8003C56C;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    {
        const bool bJump = (v0 != 0)
        v0 = t6 + a0;
        if (bJump) goto loc_8003C630;
    }
    v0 = lw(t0);
    v1 = 0xFF000000;                                    // Result = FF000000
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s1;
    sw(v0, t0);
    sb(0, t0 + 0x3);
    t0 = 0x80070000;                                    // Result = 80070000
    t0 = lw(t0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003C56C:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t5 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003C620;
    if (v1 == a0) goto loc_8003C504;
loc_8003C590:
    v0 = lw(gp + 0x710);                                // Load from: GPU_REG_GP1 (80077CF0)
    v0 = lw(v0);
    v0 &= t9;
    if (v0 == 0) goto loc_8003C504;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t2;
    v0 |= t8;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t7) goto loc_8003C5FC;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003C5E0:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x70C);                                // Load from: GPU_REG_GP0 (80077CEC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003C5E0;
loc_8003C5FC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003C504;
    goto loc_8003C590;
loc_8003C620:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t6;
loc_8003C630:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(t0);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, t0);
    sb(t1, t0 + 0x3);
    t1--;                                               // Result = 00000002
    v0 = -1;                                            // Result = FFFFFFFF
    t0 += 4;
    if (t1 == v0) goto loc_8003C690;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003C678:
    v0 = lw(t3);
    t3 += 4;
    t1--;
    sw(v0, t0);
    t0 += 4;
    if (t1 != v1) goto loc_8003C678;
loc_8003C690:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_8003C744;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8003C6BC:
    v0 = lw(gp + 0x710);                                // Load from: GPU_REG_GP1 (80077CF0)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8003C744;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8003C728;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003C70C:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x70C);                                // Load from: GPU_REG_GP0 (80077CEC)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003C70C;
loc_8003C728:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003C6BC;
loc_8003C744:
    s1 = lw(sp + 0x4);
    s0 = lw(sp);
    sp += 8;
    return;
}

void IN_Start() noexcept {
    sp -= 0x28;
    sw(ra, sp + 0x20);
    I_ResetTexCache();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7A10;                                       // Result = gTexInfo_BACK[0] (80097A10)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7CFC;                                       // Result = STR_LumpName_BACK_2[0] (80077CFC)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    t3 = 0x64;                                          // Result = 00000064
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    a0 = 0;                                             // Result = 00000000
    t4 = 0x80080000;                                    // Result = 80080000
    t4 -= 0x7D60;                                       // Result = 800782A0
    a3 = t4;                                            // Result = 800782A0
    t2 = 0x80070000;                                    // Result = 80070000
    t2 = lw(t2 + 0x7F20);                               // Load from: gTotalKills (80077F20)
    t1 = 0x80070000;                                    // Result = 80070000
    t1 = lw(t1 + 0x7F2C);                               // Load from: gTotalItems (80077F2C)
    t0 = 0x80070000;                                    // Result = 80070000
    t0 = lw(t0 + 0x7FEC);                               // Load from: gTotalSecret (80077FEC)
loc_8003C7B4:
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7D98;                                       // Result = 80078268
    at += a2;
    sw(0, at);
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FDC;                                       // Result = 80077FDC
    at += a2;
    sw(0, at);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7D54;                                       // Result = 800782AC
    at += a2;
    sw(0, at);
    sw(0, a3);
    if (t2 == 0) goto loc_8003C85C;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x774C;                                       // Result = gPlayer1[32] (800A88B4)
    at += a1;
    v0 = lw(at);
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v1 += v0;
    v1 <<= 2;
    div(v1, t2);
    if (t2 != 0) goto loc_8003C824;
    _break(0x1C00);
loc_8003C824:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (t2 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8003C83C;
    }
    if (v1 != at) goto loc_8003C83C;
    tge(zero, zero, 0x5D);
loc_8003C83C:
    v1 = lo;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C24;                                       // Result = 80097C24
    at += a0;
    sw(v1, at);
    goto loc_8003C86C;
loc_8003C85C:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C24;                                       // Result = 80097C24
    at += a0;
    sw(t3, at);
loc_8003C86C:
    if (t1 == 0) goto loc_8003C8E4;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x7748;                                       // Result = gPlayer1[33] (800A88B8)
    at += a1;
    v0 = lw(at);
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v1 += v0;
    v1 <<= 2;
    div(v1, t1);
    if (t1 != 0) goto loc_8003C8AC;
    _break(0x1C00);
loc_8003C8AC:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (t1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8003C8C4;
    }
    if (v1 != at) goto loc_8003C8C4;
    tge(zero, zero, 0x5D);
loc_8003C8C4:
    v1 = lo;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C28;                                       // Result = 80097C28
    at += a0;
    sw(v1, at);
    goto loc_8003C8F4;
loc_8003C8E4:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C28;                                       // Result = 80097C28
    at += a0;
    sw(t3, at);
loc_8003C8F4:
    if (t0 == 0) goto loc_8003C96C;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x7744;                                       // Result = gPlayer1[34] (800A88BC)
    at += a1;
    v0 = lw(at);
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v1 += v0;
    v1 <<= 2;
    div(v1, t0);
    if (t0 != 0) goto loc_8003C934;
    _break(0x1C00);
loc_8003C934:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (t0 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_8003C94C;
    }
    if (v1 != at) goto loc_8003C94C;
    tge(zero, zero, 0x5D);
loc_8003C94C:
    v1 = lo;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C2C;                                       // Result = 80097C2C
    at += a0;
    sw(v1, at);
    goto loc_8003C97C;
loc_8003C96C:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C2C;                                       // Result = 80097C2C
    at += a0;
    sw(t3, at);
loc_8003C97C:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    v0 = 2;                                             // Result = 00000002
    a2 += 4;
    if (v1 != v0) goto loc_8003C9B4;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x77B0;                                       // Result = gPlayer1[19] (800A8850)
    at += a1;
    v0 = lw(at);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C30;                                       // Result = 80097C30
    at += a0;
    sw(v0, at);
loc_8003C9B4:
    a1 += 0x12C;
    a3 += 4;
    v0 = t4 + 8;                                        // Result = gCloseDist (800782A8)
    v0 = (i32(a3) < i32(v0));
    a0 += 0x10;
    if (v0 != 0) goto loc_8003C7B4;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F68);                               // Load from: gNextMap (80078098)
    sw(0, gp + 0xCFC);                                  // Store to: 800782DC
    v0 = (i32(v0) < 0x3C);
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x7F0C);                                // Store to: gMenuTimeoutStartTicCon (80077F0C)
    if (v0 == 0) goto loc_8003CA10;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x6560;                                       // Result = gPasswordChars[0] (80096560)
    P_ComputePassword();
    v0 = 0xA;                                           // Result = 0000000A
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C40);                                // Store to: gNumPasswordCharsEntered (80077C40)
loc_8003CA10:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x3E58;                                       // Result = CDTrackNum_Intermission (80073E58)
    a0 = lw(v0);                                        // Load from: CDTrackNum_Intermission (80073E58)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x75F8);                               // Load from: gCdMusicVol (800775F8)
    a2 = 0;                                             // Result = 00000000
    sw(0, sp + 0x18);
    sw(0, sp + 0x1C);
    v0 = lw(v0);                                        // Load from: CDTrackNum_Intermission (80073E58)
    a3 = 0;                                             // Result = 00000000
    sw(v0, sp + 0x10);
    sw(a1, sp + 0x14);
    psxcd_play_at_andloop();
loc_8003CA44:
    psxcd_elapsed_sectors();
    if (v0 == 0) goto loc_8003CA44;
    ra = lw(sp + 0x20);
    sp += 0x28;
    return;
}

void IN_Stop() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    IN_Drawer();
    psxcd_stop();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void IN_Ticker() noexcept {
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7EB4);                               // Load from: gTicCon (8007814C)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7F0C);                               // Load from: gMenuTimeoutStartTicCon (80077F0C)
    sp -= 0x28;
    sw(ra, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 -= v1;
    v0 = (i32(v0) < 0x3D);
    sw(s0, sp + 0x10);
    if (v0 != 0) goto loc_8003CE4C;
    s0 = 0;                                             // Result = 00000000
    s3 = 0x80080000;                                    // Result = 80080000
    s3 -= 0x7D60;                                       // Result = 800782A0
    s2 = 0x80080000;                                    // Result = 80080000
    s2 -= 0x7D54;                                       // Result = 800782AC
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x7FDC;                                       // Result = 80077FDC
    v0 = s0 << 2;                                       // Result = 00000000
loc_8003CAE0:
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at += v0;
    v1 = lw(at);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7DEC;                                       // Result = gPlayerOldPadButtons[0] (80078214)
    at += v0;
    v0 = lw(at);
    {
        const bool bJump = (v1 == v0)
        v0 = v1 & 0xF0;
        if (bJump) goto loc_8003CBD4;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8003CBD4;
    }
    v1 = lw(gp + 0xCFC);                                // Load from: 800782DC
    v1++;
    sw(v1, gp + 0xCFC);                                 // Store to: 800782DC
    a2 = s1;                                            // Result = 80077FDC
    if (v1 != v0) goto loc_8003CBC0;
    s0 = 0;                                             // Result = 00000000
    a3 = 0x80080000;                                    // Result = 80080000
    a3 -= 0x7D98;                                       // Result = 80078268
    a1 = s2;                                            // Result = 800782AC
    a0 = s3;                                            // Result = 800782A0
    v1 = 0;                                             // Result = 00000000
loc_8003CB44:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C24;                                       // Result = 80097C24
    at += v1;
    v0 = lw(at);
    s0++;
    sw(v0, a0);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C28;                                       // Result = 80097C28
    at += v1;
    v0 = lw(at);
    a0 += 4;
    sw(v0, a1);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C2C;                                       // Result = 80097C2C
    at += v1;
    v0 = lw(at);
    a1 += 4;
    sw(v0, a2);
    a2 += 4;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C30;                                       // Result = 80097C30
    at += v1;
    v0 = lw(at);
    v1 += 0x10;
    sw(v0, a3);
    v0 = (i32(s0) < 2);
    a3 += 4;
    if (v0 != 0) goto loc_8003CB44;
    a0 = 0;                                             // Result = 00000000
    a1 = 5;                                             // Result = 00000005
    S_StartSound();
loc_8003CBC0:
    v0 = lw(gp + 0xCFC);                                // Load from: 800782DC
    v0 = (i32(v0) < 2);
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8003CC20;
loc_8003CBD4:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    if (a0 == 0) goto loc_8003CBF8;
    s0++;
    v0 = (i32(s0) < 2);
    {
        const bool bJump = (v0 != 0)
        v0 = s0 << 2;
        if (bJump) goto loc_8003CAE0;
    }
loc_8003CBF8:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    v0 = (i32(v0) < i32(v1));
    s0 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_8003CC30;
    v0 = 0;                                             // Result = 00000000
    goto loc_8003CE50;
loc_8003CC20:
    a1 = 5;                                             // Result = 00000005
    S_StartSound();
    v0 = 1;                                             // Result = 00000001
    goto loc_8003CE50;
loc_8003CC30:
    t3 = a0;
    a1 = 0;                                             // Result = 00000000
    t1 = 0;                                             // Result = 00000000
    t2 = 0x80080000;                                    // Result = 80080000
    t2 -= 0x7D54;                                       // Result = 800782AC
    a3 = t2;                                            // Result = 800782AC
    t0 = 0x80080000;                                    // Result = 80080000
    t0 -= 0x7D60;                                       // Result = 800782A0
    a2 = 0x80080000;                                    // Result = 80080000
    a2 -= 0x7D98;                                       // Result = 80078268
loc_8003CC58:
    v0 = 2;                                             // Result = 00000002
    if (t3 != v0) goto loc_8003CCF0;
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C30;                                       // Result = 80097C30
    at += a1;
    v0 = lw(at);
    if (i32(v0) >= 0) goto loc_8003CCC0;
    v1 = lw(a2);
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = v1 - 2;
        if (bJump) goto loc_8003CDE0;
    }
    sw(v0, a2);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C30;                                       // Result = 80097C30
    at += a1;
    v1 = lw(at);
    v0 = (i32(v0) < i32(v1));
loc_8003CCB0:
    s0 = 1;                                             // Result = 00000001
    if (v0 == 0) goto loc_8003CDE0;
    sw(v1, a2);
    goto loc_8003CDE0;
loc_8003CCC0:
    v1 = lw(a2);
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = v1 + 2;
        if (bJump) goto loc_8003CDE0;
    }
    sw(v0, a2);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C30;                                       // Result = 80097C30
    at += a1;
    v1 = lw(at);
    v0 = (i32(v1) < i32(v0));
    goto loc_8003CCB0;
loc_8003CCF0:
    v1 = lw(t0);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C24;                                       // Result = 80097C24
    at += a1;
    v0 = lw(at);
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = v1 + 2;
        if (bJump) goto loc_8003CD3C;
    }
    sw(v0, t0);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C24;                                       // Result = 80097C24
    at += a1;
    v1 = lw(at);
    v0 = (i32(v1) < i32(v0));
    s0 = 1;                                             // Result = 00000001
    if (v0 == 0) goto loc_8003CD3C;
    sw(v1, t0);
loc_8003CD3C:
    v1 = lw(a3);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C28;                                       // Result = 80097C28
    at += a1;
    v0 = lw(at);
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = v1 + 2;
        if (bJump) goto loc_8003CD88;
    }
    sw(v0, a3);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C28;                                       // Result = 80097C28
    at += a1;
    v1 = lw(at);
    v0 = (i32(v1) < i32(v0));
    s0 = 1;                                             // Result = 00000001
    if (v0 == 0) goto loc_8003CD88;
    sw(v1, a3);
loc_8003CD88:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x7FDC;                                       // Result = 80077FDC
    a0 = t1 + v0;
    v1 = lw(a0);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C2C;                                       // Result = 80097C2C
    at += a1;
    v0 = lw(at);
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = v1 + 2;
        if (bJump) goto loc_8003CDE0;
    }
    sw(v0, a0);
    at = 0x80090000;                                    // Result = 80090000
    at += 0x7C2C;                                       // Result = 80097C2C
    at += a1;
    v1 = lw(at);
    v0 = (i32(v1) < i32(v0));
    s0 = 1;                                             // Result = 00000001
    if (v0 == 0) goto loc_8003CDE0;
    sw(v1, a0);
loc_8003CDE0:
    a1 += 0x10;
    t1 += 4;
    a3 += 4;
    t0 += 4;
    v0 = t2 + 8;                                        // Result = gTestFlags (800782B4)
    v0 = (i32(a3) < i32(v0));
    a2 += 4;
    if (v0 != 0) goto loc_8003CC58;
    v1 = 1;                                             // Result = 00000001
    if (s0 != 0) goto loc_8003CE24;
    v0 = lw(gp + 0xCFC);                                // Load from: 800782DC
    a0 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_8003CE24;
    sw(v1, gp + 0xCFC);                                 // Store to: 800782DC
    a1 = 5;                                             // Result = 00000005
    S_StartSound();
loc_8003CE24:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 &= 1;
    if (v0 != 0) goto loc_8003CE4C;
    a0 = 0;                                             // Result = 00000000
    if (s0 == 0) goto loc_8003CE4C;
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
loc_8003CE4C:
    v0 = 0;                                             // Result = 00000000
loc_8003CE50:
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void IN_Drawer() noexcept {
loc_8003CE70:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    I_IncDrawnFrameCount();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    v0 = 1;                                             // Result = 00000001
    {
        const bool bJump = (v1 != v0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_8003CEA4;
    }
    IN_CoopDrawer();
    goto loc_8003CEC4;
loc_8003CEA4:
    if (v1 != v0) goto loc_8003CEBC;
    IN_DeathmatchDrawer();
    goto loc_8003CEC4;
loc_8003CEBC:
    IN_SingleDrawer();
loc_8003CEC4:
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void IN_SingleDrawer() noexcept {
loc_8003CEE4:
    sp -= 0x30;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7A10;                                       // Result = gTexInfo_BACK[0] (80097A10)
    a1 = 0;                                             // Result = 00000000
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F7C);                               // Load from: gPaletteClutId_Main (800A9084)
    a2 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x28);
    sw(s1, sp + 0x24);
    sw(s0, sp + 0x20);
    I_CacheAndDrawSprite();
    a0 = -1;                                            // Result = FFFFFFFF
    a1 = 0x14;                                          // Result = 00000014
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7FB8);                               // Load from: gGameMap (80078048)
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x40BC;                                       // Result = StatusBarWeaponBoxesXPos[6] (800740BC)
    a2 <<= 5;
    a2 += s1;
    I_DrawString();
    a0 = -1;                                            // Result = FFFFFFFF
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1648;                                       // Result = STR_Finished[0] (80011648)
    a1 = 0x24;                                          // Result = 00000024
    I_DrawString();
    a0 = 0x39;                                          // Result = 00000039
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D04;                                       // Result = STR_Kills[0] (80077D04)
    a1 = 0x41;                                          // Result = 00000041
    I_DrawString();
    a0 = 0xB6;                                          // Result = 000000B6
    a1 = 0x41;                                          // Result = 00000041
    s0 = 0x80070000;                                    // Result = 80070000
    s0 += 0x7D0C;                                       // Result = STR_Percent[0] (80077D0C)
    a2 = s0;                                            // Result = STR_Percent[0] (80077D0C)
    I_DrawString();
    a0 = 0xAA;                                          // Result = 000000AA
    a2 = lw(gp + 0xCC0);                                // Load from: 800782A0
    a1 = 0x41;                                          // Result = 00000041
    I_DrawNumber();
    a0 = 0x35;                                          // Result = 00000035
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D10;                                       // Result = STR_Items[0] (80077D10)
    a1 = 0x5B;                                          // Result = 0000005B
    I_DrawString();
    a0 = 0xB6;                                          // Result = 000000B6
    a1 = 0x5B;                                          // Result = 0000005B
    a2 = s0;                                            // Result = STR_Percent[0] (80077D0C)
    I_DrawString();
    a0 = 0xAA;                                          // Result = 000000AA
    a2 = lw(gp + 0xCCC);                                // Load from: 800782AC
    a1 = 0x5B;                                          // Result = 0000005B
    I_DrawNumber();
    a0 = 0x1A;                                          // Result = 0000001A
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D18;                                       // Result = STR_Secrets[0] (80077D18)
    a1 = 0x75;                                          // Result = 00000075
    I_DrawString();
    a0 = 0xB6;                                          // Result = 000000B6
    a1 = 0x75;                                          // Result = 00000075
    a2 = s0;                                            // Result = STR_Percent[0] (80077D0C)
    I_DrawString();
    a0 = 0xAA;                                          // Result = 000000AA
    a2 = lw(gp + 0x9FC);                                // Load from: 80077FDC
    a1 = 0x75;                                          // Result = 00000075
    I_DrawNumber();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F68);                               // Load from: gNextMap (80078098)
    v0 = (i32(v0) < 0x3C);
    a0 = -1;                                            // Result = FFFFFFFF
    if (v0 == 0) goto loc_8003D09C;
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1654;                                       // Result = STR_Entering[0] (80011654)
    a1 = 0x91;                                          // Result = 00000091
    I_DrawString();
    a0 = -1;                                            // Result = FFFFFFFF
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7F68);                               // Load from: gNextMap (80078098)
    a1 = 0xA1;                                          // Result = 000000A1
    a2 <<= 5;
    a2 += s1;
    I_DrawString();
    a0 = -1;                                            // Result = FFFFFFFF
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1660;                                       // Result = STR_Password[0] (80011660)
    a1 = 0xBB;                                          // Result = 000000BB
    I_DrawString();
    v1 = 0;                                             // Result = 00000000
    a0 = sp + 0x10;
loc_8003D04C:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x6560;                                       // Result = gPasswordChars[0] (80096560)
    at += v1;
    v0 = lbu(at);
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3D4C;                                       // Result = STR_PasswordChars[0] (80073D4C)
    at += v0;
    v0 = lbu(at);
    v1++;
    sb(v0, a0);
    v0 = (i32(v1) < 0xA);
    a0++;
    if (v0 != 0) goto loc_8003D04C;
    a2 = sp + 0x10;
    v0 = a2 + v1;
    sb(0, v0);
    a0 = -1;                                            // Result = FFFFFFFF
    a1 = 0xCB;                                          // Result = 000000CB
    I_DrawString();
loc_8003D09C:
    ra = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x30;
    return;
}

void IN_CoopDrawer() noexcept {
loc_8003D0B4:
    sp -= 0x58;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7A10;                                       // Result = gTexInfo_BACK[0] (80097A10)
    a1 = 0;                                             // Result = 00000000
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F7C);                               // Load from: gPaletteClutId_Main (800A9084)
    a2 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x50);
    sw(s1, sp + 0x4C);
    sw(s0, sp + 0x48);
    I_CacheAndDrawSprite();
    a2 = 0x8B;                                          // Result = 0000008B
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 -= 0x6B0E;                                       // Result = gTexInfo_STATUS[2] (800A94F2)
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x3E6A;                                       // Result = StatusBarFaceSpriteInfo[2] (80073E6A)
    a0 = lhu(s0);                                       // Load from: gTexInfo_STATUS[2] (800A94F2)
    a1 = 0x800B0000;                                    // Result = 800B0000
    a1 = lh(a1 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    v0 = lbu(s1);                                       // Load from: StatusBarFaceSpriteInfo[2] (80073E6A)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lbu(v1 + 0x3E6B);                              // Load from: StatusBarFaceSpriteInfo[3] (80073E6B)
    t0 = 0x80070000;                                    // Result = 80070000
    t0 = lbu(t0 + 0x3E6C);                              // Load from: StatusBarFaceSpriteInfo[4] (80073E6C)
    t1 = 0x80070000;                                    // Result = 80070000
    t1 = lbu(t1 + 0x3E6D);                              // Load from: StatusBarFaceSpriteInfo[5] (80073E6D)
    a3 = 0x14;                                          // Result = 00000014
    sw(v0, sp + 0x10);
    sw(v1, sp + 0x14);
    sw(t0, sp + 0x18);
    sw(t1, sp + 0x1C);
    I_DrawSprite();
    a0 = 0x82;                                          // Result = 00000082
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D20;                                       // Result = STR_You[0] (80077D20)
    a1 = 0x34;                                          // Result = 00000034
    I_DrawString();
    a2 = 0xD5;                                          // Result = 000000D5
    a0 = lhu(s0);                                       // Load from: gTexInfo_STATUS[2] (800A94F2)
    a1 = 0x800B0000;                                    // Result = 800B0000
    a1 = lh(a1 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    v0 = lbu(s1);                                       // Load from: StatusBarFaceSpriteInfo[2] (80073E6A)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lbu(v1 + 0x3E6B);                              // Load from: StatusBarFaceSpriteInfo[3] (80073E6B)
    t0 = 0x80070000;                                    // Result = 80070000
    t0 = lbu(t0 + 0x3E6C);                              // Load from: StatusBarFaceSpriteInfo[4] (80073E6C)
    t1 = 0x80070000;                                    // Result = 80070000
    t1 = lbu(t1 + 0x3E6D);                              // Load from: StatusBarFaceSpriteInfo[5] (80073E6D)
    a3 = 0x14;                                          // Result = 00000014
    sw(v0, sp + 0x10);
    sw(v1, sp + 0x14);
    sw(t0, sp + 0x18);
    sw(t1, sp + 0x1C);
    I_DrawSprite();
    a0 = 0xD0;                                          // Result = 000000D0
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D24;                                       // Result = STR_Him[0] (80077D24)
    a1 = 0x34;                                          // Result = 00000034
    I_DrawString();
    a0 = 0x39;                                          // Result = 00000039
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D04;                                       // Result = STR_Kills[0] (80077D04)
    a1 = 0x4F;                                          // Result = 0000004F
    I_DrawString();
    a0 = 0x9B;                                          // Result = 0000009B
    a1 = 0x4F;                                          // Result = 0000004F
    s0 = 0x80070000;                                    // Result = 80070000
    s0 += 0x7D0C;                                       // Result = STR_Percent[0] (80077D0C)
    a2 = s0;                                            // Result = STR_Percent[0] (80077D0C)
    I_DrawString();
    a0 = 0xE4;                                          // Result = 000000E4
    a1 = 0x4F;                                          // Result = 0000004F
    a2 = s0;                                            // Result = STR_Percent[0] (80077D0C)
    I_DrawString();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a0 = 0x8F;                                          // Result = 0000008F
    v0 <<= 2;
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7D60;                                       // Result = 800782A0
    at += v0;
    a2 = lw(at);
    a1 = 0x4F;                                          // Result = 0000004F
    I_DrawNumber();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a2 = 0x80080000;                                    // Result = 80080000
    a2 -= 0x7D60;                                       // Result = 800782A0
    a0 = 0xD8;                                          // Result = 000000D8
    if (v0 != 0) goto loc_8003D224;
    a2 = 0x80080000;                                    // Result = 80080000
    a2 -= 0x7D5C;                                       // Result = 800782A4
loc_8003D224:
    a2 = lw(a2);
    a1 = 0x4F;                                          // Result = 0000004F
    I_DrawNumber();
    a0 = 0x35;                                          // Result = 00000035
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D10;                                       // Result = STR_Items[0] (80077D10)
    a1 = 0x65;                                          // Result = 00000065
    I_DrawString();
    a0 = 0x9B;                                          // Result = 0000009B
    a1 = 0x65;                                          // Result = 00000065
    a2 = s0;                                            // Result = STR_Percent[0] (80077D0C)
    I_DrawString();
    a0 = 0xE4;                                          // Result = 000000E4
    a1 = 0x65;                                          // Result = 00000065
    a2 = s0;                                            // Result = STR_Percent[0] (80077D0C)
    I_DrawString();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a0 = 0x8F;                                          // Result = 0000008F
    v0 <<= 2;
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7D54;                                       // Result = 800782AC
    at += v0;
    a2 = lw(at);
    a1 = 0x65;                                          // Result = 00000065
    I_DrawNumber();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a2 = 0x80080000;                                    // Result = 80080000
    a2 -= 0x7D54;                                       // Result = 800782AC
    a0 = 0xD8;                                          // Result = 000000D8
    if (v0 != 0) goto loc_8003D2AC;
    a2 = 0x80080000;                                    // Result = 80080000
    a2 -= 0x7D50;                                       // Result = 800782B0
loc_8003D2AC:
    a2 = lw(a2);
    a1 = 0x65;                                          // Result = 00000065
    I_DrawNumber();
    a0 = 0x1A;                                          // Result = 0000001A
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D18;                                       // Result = STR_Secrets[0] (80077D18)
    a1 = 0x7B;                                          // Result = 0000007B
    I_DrawString();
    a0 = 0x9B;                                          // Result = 0000009B
    a1 = 0x7B;                                          // Result = 0000007B
    a2 = s0;                                            // Result = STR_Percent[0] (80077D0C)
    I_DrawString();
    a0 = 0xE4;                                          // Result = 000000E4
    a1 = 0x7B;                                          // Result = 0000007B
    a2 = s0;                                            // Result = STR_Percent[0] (80077D0C)
    I_DrawString();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a0 = 0x8F;                                          // Result = 0000008F
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7FDC;                                       // Result = 80077FDC
    at += v0;
    a2 = lw(at);
    a1 = 0x7B;                                          // Result = 0000007B
    I_DrawNumber();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7FDC;                                       // Result = 80077FDC
    a0 = 0xD8;                                          // Result = 000000D8
    if (v0 != 0) goto loc_8003D334;
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7FE0;                                       // Result = 80077FE0
loc_8003D334:
    a2 = lw(a2);
    a1 = 0x7B;                                          // Result = 0000007B
    I_DrawNumber();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F68);                               // Load from: gNextMap (80078098)
    v0 = (i32(v0) < 0x3C);
    a0 = -1;                                            // Result = FFFFFFFF
    if (v0 == 0) goto loc_8003D430;
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1654;                                       // Result = STR_Entering[0] (80011654)
    a1 = 0x95;                                          // Result = 00000095
    I_DrawString();
    a0 = -1;                                            // Result = FFFFFFFF
    a1 = 0xA5;                                          // Result = 000000A5
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7F68);                               // Load from: gNextMap (80078098)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x40BC;                                       // Result = StatusBarWeaponBoxesXPos[6] (800740BC)
    a2 <<= 5;
    a2 += v0;
    I_DrawString();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    v1 = v0 << 2;
    v1 += v0;
    v0 = v1 << 4;
    v0 -= v1;
    v0 <<= 2;
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x77F0;                                       // Result = gPlayer1[9] (800A8810)
    at += v0;
    v0 = lw(at);
    a0 = -1;                                            // Result = FFFFFFFF
    if (i32(v0) <= 0) goto loc_8003D430;
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1660;                                       // Result = STR_Password[0] (80011660)
    a1 = 0xBF;                                          // Result = 000000BF
    I_DrawString();
    v1 = 0;                                             // Result = 00000000
    a0 = sp + 0x20;
loc_8003D3E0:
    at = 0x80090000;                                    // Result = 80090000
    at += 0x6560;                                       // Result = gPasswordChars[0] (80096560)
    at += v1;
    v0 = lbu(at);
    at = 0x80070000;                                    // Result = 80070000
    at += 0x3D4C;                                       // Result = STR_PasswordChars[0] (80073D4C)
    at += v0;
    v0 = lbu(at);
    v1++;
    sb(v0, a0);
    v0 = (i32(v1) < 0xA);
    a0++;
    if (v0 != 0) goto loc_8003D3E0;
    a2 = sp + 0x20;
    v0 = a2 + v1;
    sb(0, v0);
    a0 = -1;                                            // Result = FFFFFFFF
    a1 = 0xCF;                                          // Result = 000000CF
    I_DrawString();
loc_8003D430:
    ra = lw(sp + 0x50);
    s1 = lw(sp + 0x4C);
    s0 = lw(sp + 0x48);
    sp += 0x58;
    return;
}

void IN_DeathmatchDrawer() noexcept {
loc_8003D448:
    sp -= 0x50;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7A10;                                       // Result = gTexInfo_BACK[0] (80097A10)
    a1 = 0;                                             // Result = 00000000
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F7C);                               // Load from: gPaletteClutId_Main (800A9084)
    a2 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x48);
    sw(s3, sp + 0x44);
    sw(s2, sp + 0x40);
    sw(s1, sp + 0x3C);
    sw(s0, sp + 0x38);
    I_CacheAndDrawSprite();
    a0 = -1;                                            // Result = FFFFFFFF
    a1 = 0x14;                                          // Result = 00000014
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7FB8);                               // Load from: gGameMap (80078048)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x40BC;                                       // Result = StatusBarWeaponBoxesXPos[6] (800740BC)
    a2 <<= 5;
    a2 += v0;
    I_DrawString();
    a0 = -1;                                            // Result = FFFFFFFF
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1648;                                       // Result = STR_Finished[0] (80011648)
    a1 = 0x24;                                          // Result = 00000024
    I_DrawString();
    a0 = lw(gp + 0xC88);                                // Load from: 80078268
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7D94);                               // Load from: 8007826C
    v0 = (i32(v1) < i32(a0));
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(a0) < i32(v1));
        if (bJump) goto loc_8003D504;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    if (v0 != 0) goto loc_8003D4F4;
    s2 = 0x80070000;                                    // Result = 80070000
    s2 += 0x3E8C;                                       // Result = StatusBarFaceSpriteInfo[24] (80073E8C)
    s3 = s2 + 0xD2;                                     // Result = StatusBarFaceSpriteInfo[F6] (80073F5E)
    goto loc_8003D554;
loc_8003D4F4:
    s3 = 0x80070000;                                    // Result = 80070000
    s3 += 0x3E8C;                                       // Result = StatusBarFaceSpriteInfo[24] (80073E8C)
    s2 = s3 + 0xD2;                                     // Result = StatusBarFaceSpriteInfo[F6] (80073F5E)
    goto loc_8003D554;
loc_8003D504:
    if (v0 == 0) goto loc_8003D540;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    if (v0 != 0) goto loc_8003D530;
    s2 = 0x80070000;                                    // Result = 80070000
    s2 += 0x3F5E;                                       // Result = StatusBarFaceSpriteInfo[F6] (80073F5E)
    s3 = s2 - 0xD2;                                     // Result = StatusBarFaceSpriteInfo[24] (80073E8C)
    goto loc_8003D554;
loc_8003D530:
    s3 = 0x80070000;                                    // Result = 80070000
    s3 += 0x3F5E;                                       // Result = StatusBarFaceSpriteInfo[F6] (80073F5E)
    s2 = s3 - 0xD2;                                     // Result = StatusBarFaceSpriteInfo[24] (80073E8C)
    goto loc_8003D554;
loc_8003D540:
    if (v1 != a0) goto loc_8003D554;
    s3 = 0x80070000;                                    // Result = 80070000
    s3 += 0x3E68;                                       // Result = StatusBarFaceSpriteInfo[0] (80073E68)
    s2 = s3;                                            // Result = StatusBarFaceSpriteInfo[0] (80073E68)
loc_8003D554:
    v0 = lbu(s2 + 0x2);
    a2 = 0x7F;                                          // Result = 0000007F
    sw(v0, sp + 0x10);
    v0 = lbu(s2 + 0x3);
    s1 = 0x800B0000;                                    // Result = 800B0000
    s1 -= 0x6B0E;                                       // Result = gTexInfo_STATUS[2] (800A94F2)
    sw(v0, sp + 0x14);
    a0 = lhu(s1);                                       // Load from: gTexInfo_STATUS[2] (800A94F2)
    v0 = lbu(s2 + 0x4);
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 -= 0x6F5C;                                       // Result = gPaletteClutId_UI (800A90A4)
    sw(v0, sp + 0x18);
    a1 = lh(s0);                                        // Load from: gPaletteClutId_UI (800A90A4)
    v0 = lbu(s2 + 0x5);
    a3 = 0x46;                                          // Result = 00000046
    sw(v0, sp + 0x1C);
    I_DrawSprite();
    a0 = 0x76;                                          // Result = 00000076
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D20;                                       // Result = STR_You[0] (80077D20)
    a1 = 0x66;                                          // Result = 00000066
    I_DrawString();
    v0 = lbu(s3 + 0x2);
    sw(v0, sp + 0x10);
    v0 = lbu(s3 + 0x3);
    sw(v0, sp + 0x14);
    a0 = lhu(s1);                                       // Load from: gTexInfo_STATUS[2] (800A94F2)
    v0 = lbu(s3 + 0x4);
    a2 = 0xC8;                                          // Result = 000000C8
    sw(v0, sp + 0x18);
    a1 = lh(s0);                                        // Load from: gPaletteClutId_UI (800A90A4)
    v0 = lbu(s3 + 0x5);
    a3 = 0x46;                                          // Result = 00000046
    sw(v0, sp + 0x1C);
    I_DrawSprite();
    a0 = 0xC3;                                          // Result = 000000C3
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D24;                                       // Result = STR_Him[0] (80077D24)
    a1 = 0x66;                                          // Result = 00000066
    I_DrawString();
    a0 = 0x23;                                          // Result = 00000023
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D28;                                       // Result = STR_Frags[0] (80077D28)
    a1 = 0x8A;                                          // Result = 0000008A
    I_DrawString();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a0 = 0x85;                                          // Result = 00000085
    v0 <<= 2;
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7D98;                                       // Result = 80078268
    at += v0;
    a2 = lw(at);
    a1 = 0x8A;                                          // Result = 0000008A
    I_DrawNumber();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a2 = 0x80080000;                                    // Result = 80080000
    a2 -= 0x7D98;                                       // Result = 80078268
    a0 = 0xCE;                                          // Result = 000000CE
    if (v0 != 0) goto loc_8003D658;
    a2 = 0x80080000;                                    // Result = 80080000
    a2 -= 0x7D94;                                       // Result = 8007826C
loc_8003D658:
    a2 = lw(a2);
    a1 = 0x8A;                                          // Result = 0000008A
    I_DrawNumber();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7F68);                               // Load from: gNextMap (80078098)
    v0 = (i32(v0) < 0x3C);
    a0 = -1;                                            // Result = FFFFFFFF
    if (v0 == 0) goto loc_8003D6B0;
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1654;                                       // Result = STR_Entering[0] (80011654)
    a1 = 0xBE;                                          // Result = 000000BE
    I_DrawString();
    a0 = -1;                                            // Result = FFFFFFFF
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0x7F68);                               // Load from: gNextMap (80078098)
    a1 = 0xCE;                                          // Result = 000000CE
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x40BC;                                       // Result = StatusBarWeaponBoxesXPos[6] (800740BC)
    a2 <<= 5;
    a2 += v0;
    I_DrawString();
loc_8003D6B0:
    ra = lw(sp + 0x48);
    s3 = lw(sp + 0x44);
    s2 = lw(sp + 0x40);
    s1 = lw(sp + 0x3C);
    s0 = lw(sp + 0x38);
    sp += 0x50;
    return;
}

void F1_Start() noexcept {
    sp -= 0x28;
    sw(s0, sp + 0x20);
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x7A90;                                       // Result = gTexInfo_LOADING[0] (80097A90)
    a0 = s0;                                            // Result = gTexInfo_LOADING[0] (80097A90)
    a1 = 0x5F;                                          // Result = 0000005F
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    sw(ra, sp + 0x24);
    a2 = 0x6D;                                          // Result = 0000006D
    I_DrawPlaque();
    I_ResetTexCache();
    a0 = s0 - 0x80;                                     // Result = gTexInfo_BACK[0] (80097A10)
    I_CacheTex();
    a2 = 0;                                             // Result = 00000000
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x3E60);                               // Load from: CDTrackNum_Finale_Doom1 (80073E60)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x75F8);                               // Load from: gCdMusicVol (800775F8)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x3E54);                               // Load from: CDTrackNum_Credits_Demo (80073E54)
    a3 = 0;                                             // Result = 00000000
    sw(0, gp + 0xB30);                                  // Store to: 80078110
    sw(0, gp + 0x978);                                  // Store to: 80077F58
    at = 0x800B0000;                                    // Result = 800B0000
    sb(0, at - 0x6FB8);                                 // Store to: 800A9048
    sw(0, sp + 0x18);
    sw(0, sp + 0x1C);
    sw(v0, sp + 0x10);
    sw(a1, sp + 0x14);
    psxcd_play_at_andloop();
loc_8003D750:
    psxcd_elapsed_sectors();
    if (v0 == 0) goto loc_8003D750;
    ra = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x28;
    return;
}

void F1_Stop() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7EC0);                                 // Store to: gbGamePaused (80077EC0)
    psxcd_stop();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void F1_Ticker() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    sp -= 0x20;
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7EB4);                                 // Store to: gGameAction (80077EB4)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at += v0;
    s0 = lw(at);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7DEC;                                       // Result = gPlayerOldPadButtons[0] (80078214)
    at += v0;
    s1 = lw(at);
    P_CheckCheats();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EC0);                               // Load from: gbGamePaused (80077EC0)
    if (v0 == 0) goto loc_8003D80C;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EB4);                               // Load from: gGameAction (80077EB4)
    goto loc_8003D8D8;
loc_8003D80C:
    a0 = lw(gp + 0xB30);                                // Load from: 80078110
    v0 = (i32(a0) < 0xB);
    if (v0 == 0) goto loc_8003D8C4;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = v1 & 1;
        if (bJump) goto loc_8003D8D4;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8003D8D8;
    }
    v1 = 0x80070000;                                    // Result = 80070000
    v1 += 0x483C;                                       // Result = STR_Doom1_WinText_1[0] (8007483C)
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    v0 += a0;
    a2 = lw(gp + 0x978);                                // Load from: 80077F58
    a1 = v0 + v1;
    v0 = a1 + a2;
    v0 = lbu(v0);
    {
        const bool bJump = (v0 != 0)
        v0 = a0 + 1;
        if (bJump) goto loc_8003D88C;
    }
    sw(0, gp + 0x978);                                  // Store to: 80077F58
    sw(v0, gp + 0xB30);                                 // Store to: 80078110
    goto loc_8003D89C;
loc_8003D88C:
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 -= 0x6FB8;                                       // Result = 800A9048
    D_strncpy();
loc_8003D89C:
    v1 = lw(gp + 0x978);                                // Load from: 80077F58
    v0 = v1 + 1;
    sw(v0, gp + 0x978);                                 // Store to: 80077F58
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6FB8;                                       // Result = 800A9048
    at += v1;
    sb(0, at);
    v0 = 0;                                             // Result = 00000000
    goto loc_8003D8D8;
loc_8003D8C4:
    v0 = s0 & 0xF0;
    if (s0 == s1) goto loc_8003D8D4;
    {
        const bool bJump = (v0 != 0)
        v0 = 9;                                         // Result = 00000009
        if (bJump) goto loc_8003D8D8;
    }
loc_8003D8D4:
    v0 = 0;                                             // Result = 00000000
loc_8003D8D8:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void F1_Drawer() noexcept {
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    I_IncDrawnFrameCount();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7A10;                                       // Result = gTexInfo_BACK[0] (80097A10)
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F7C);                               // Load from: gPaletteClutId_Main (800A9084)
    s1 = 0x2D;                                          // Result = 0000002D
    I_CacheAndDrawSprite();
    v0 = lw(gp + 0xB30);                                // Load from: 80078110
    s0 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_8003D968;
    s2 = 0x80070000;                                    // Result = 80070000
    s2 += 0x483C;                                       // Result = STR_Doom1_WinText_1[0] (8007483C)
loc_8003D940:
    a0 = -1;                                            // Result = FFFFFFFF
    a1 = s1;
    a2 = s2;
    I_DrawString();
    s1 += 0xE;
    v0 = lw(gp + 0xB30);                                // Load from: 80078110
    s0++;
    v0 = (i32(s0) < i32(v0));
    s2 += 0x19;
    if (v0 != 0) goto loc_8003D940;
loc_8003D968:
    a0 = -1;                                            // Result = FFFFFFFF
    a2 = 0x800B0000;                                    // Result = 800B0000
    a2 -= 0x6FB8;                                       // Result = 800A9048
    a1 = s1;
    I_DrawString();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EC0);                               // Load from: gbGamePaused (80077EC0)
    if (v0 == 0) goto loc_8003D998;
    I_DrawPausedOverlay();
loc_8003D998:
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x28;
    return;
}

void F2_Start() noexcept {
    sp -= 0x68;
    sw(s0, sp + 0x60);
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x7A90;                                       // Result = gTexInfo_LOADING[0] (80097A90)
    a0 = s0;                                            // Result = gTexInfo_LOADING[0] (80097A90)
    a1 = 0x5F;                                          // Result = 0000005F
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    sw(ra, sp + 0x64);
    a2 = 0x6D;                                          // Result = 0000006D
    I_DrawPlaque();
    I_ResetTexCache();
    a0 = s0 + 0x120;                                    // Result = gTexInfo_DEMON[0] (80097BB0)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x7D44;                                       // Result = STR_LumpName_DEMON[0] (80077D44)
    a2 = 0;                                             // Result = 00000000
    I_CacheTexForLumpName();
    a0 = 4;                                             // Result = 00000004
    P_LoadBlocks();
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x4A68);                               // Load from: CastInfo_1_ZombieMan[1] (80074A68)
    at = 0x800B0000;                                    // Result = 800B0000
    sb(0, at - 0x6FB8);                                 // Store to: 800A9048
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1FB8;                                       // Result = MObjInfo_MT_PLAYER[3] (8005E048)
    at += v0;
    v0 = lw(at);
    sw(0, gp + 0xB8C);                                  // Store to: 8007816C
    sw(0, gp + 0xB30);                                  // Store to: 80078110
    sw(0, gp + 0x978);                                  // Store to: 80077F58
    sw(0, gp + 0xCA8);                                  // Store to: 80078288
    sw(0, gp + 0x998);                                  // Store to: 80077F78
    sw(0, gp + 0xAA8);                                  // Store to: 80078088
    sw(0, gp + 0xB88);                                  // Store to: 80078168
    v1 = v0 << 3;
    v1 -= v0;
    v1 <<= 2;
    v0 = 0x80060000;                                    // Result = 80060000
    v0 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v1 += v0;
    a1 = lw(v1 + 0x8);
    v0 = 0x2D;                                          // Result = 0000002D
    sw(v0, gp + 0x930);                                 // Store to: 80077F10
    sw(v1, gp + 0x9C8);                                 // Store to: 80077FA8
    sw(a1, gp + 0x8F0);                                 // Store to: 80077ED0
    a0 = 0x3C;                                          // Result = 0000003C
    S_LoadSoundAndMusic();
    a2 = 0;                                             // Result = 00000000
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x3E64);                               // Load from: CDTrackNum_Finale_Doom2 (80073E64)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x75F8);                               // Load from: gCdMusicVol (800775F8)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x3E54);                               // Load from: CDTrackNum_Credits_Demo (80073E54)
    a3 = 0;                                             // Result = 00000000
    sw(0, sp + 0x18);
    sw(0, sp + 0x1C);
    sw(v0, sp + 0x10);
    sw(a1, sp + 0x14);
    psxcd_play_at_andloop();
loc_8003DACC:
    psxcd_elapsed_sectors();
    if (v0 == 0) goto loc_8003DACC;
    ra = lw(sp + 0x64);
    s0 = lw(sp + 0x60);
    sp += 0x68;
    return;
}

void F2_Stop() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7EC0);                                 // Store to: gbGamePaused (80077EC0)
    psxcd_stop();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void F2_Ticker() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    sp -= 0x20;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x7EB4);                                 // Store to: gGameAction (80077EB4)
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at += v0;
    s0 = lw(at);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7DEC;                                       // Result = gPlayerOldPadButtons[0] (80078214)
    at += v0;
    s1 = lw(at);
    P_CheckCheats();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EC0);                               // Load from: gbGamePaused (80077EC0)
    s2 = 1;                                             // Result = 00000001
    if (v0 == 0) goto loc_8003DB8C;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EB4);                               // Load from: gGameAction (80077EB4)
    goto loc_8003E30C;
loc_8003DB8C:
    v1 = lw(gp + 0xB8C);                                // Load from: 8007816C
    v0 = (i32(v1) < 2);
    if (v1 == s2) goto loc_8003DC80;
    if (v0 == 0) goto loc_8003DBB4;
    v0 = 0;                                             // Result = 00000000
    if (v1 == 0) goto loc_8003DBC8;
    goto loc_8003E30C;
loc_8003DBB4:
    v0 = 2;                                             // Result = 00000002
    {
        const bool bJump = (v1 == v0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8003DCA8;
    }
    goto loc_8003E30C;
loc_8003DBC8:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = v1 & 1;
        if (bJump) goto loc_8003E308;
    }
    {
        const bool bJump = (v0 != 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8003E30C;
    }
    v1 = 0x80070000;                                    // Result = 80070000
    v1 += 0x4950;                                       // Result = STR_Doom2_WinText_1[0] (80074950)
    a0 = lw(gp + 0xB30);                                // Load from: 80078110
    a2 = lw(gp + 0x978);                                // Load from: 80077F58
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    v0 += a0;
    a1 = v0 + v1;
    v0 = a1 + a2;
    v0 = lbu(v0);
    {
        const bool bJump = (v0 != 0)
        v0 = a0 + 1;
        if (bJump) goto loc_8003DC48;
    }
    sw(v0, gp + 0xB30);                                 // Store to: 80078110
    v0 = (i32(v0) < 0xB);
    sw(0, gp + 0x978);                                  // Store to: 80077F58
    if (v0 != 0) goto loc_8003DC58;
    sw(s2, gp + 0xB8C);                                 // Store to: 8007816C
    goto loc_8003DC58;
loc_8003DC48:
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 -= 0x6FB8;                                       // Result = 800A9048
    D_strncpy();
loc_8003DC58:
    v1 = lw(gp + 0x978);                                // Load from: 80077F58
    v0 = v1 + 1;
    sw(v0, gp + 0x978);                                 // Store to: 80077F58
    at = 0x800B0000;                                    // Result = 800B0000
    at -= 0x6FB8;                                       // Result = 800A9048
    at += v1;
    sb(0, at);
    v0 = 0;                                             // Result = 00000000
    goto loc_8003E30C;
loc_8003DC80:
    v0 = lw(gp + 0x930);                                // Load from: 80077F10
    v0--;
    sw(v0, gp + 0x930);                                 // Store to: 80077F10
    v0 = (i32(v0) < -0xC8);
    {
        const bool bJump = (v0 == 0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_8003E308;
    }
    sw(v0, gp + 0xB8C);                                 // Store to: 8007816C
    v0 = 0;                                             // Result = 00000000
    goto loc_8003E30C;
loc_8003DCA8:
    v0 = lw(gp + 0x998);                                // Load from: 80077F78
    if (v0 != 0) goto loc_8003DDA0;
    v0 = s0 & 0xF0;
    if (s0 == s1) goto loc_8003DDA0;
    if (v0 == 0) goto loc_8003DDA0;
    a0 = 0;                                             // Result = 00000000
    a1 = 8;                                             // Result = 00000008
    S_StartSound();
    v0 = lw(gp + 0xCA8);                                // Load from: 80078288
    v0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A68;                                       // Result = CastInfo_1_ZombieMan[1] (80074A68)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F8C;                                       // Result = MObjInfo_MT_PLAYER[E] (8005E074)
    at += v0;
    a1 = lw(at);
    if (a1 == 0) goto loc_8003DD2C;
    a0 = 0;                                             // Result = 00000000
    S_StartSound();
loc_8003DD2C:
    v0 = lw(gp + 0xCA8);                                // Load from: 80078288
    v0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A68;                                       // Result = CastInfo_1_ZombieMan[1] (80074A68)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F94;                                       // Result = MObjInfo_MT_PLAYER[C] (8005E06C)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    v1 = lw(v0 + 0x8);
    sw(s2, gp + 0x998);                                 // Store to: 80077F78
    sw(0, gp + 0xAA8);                                  // Store to: 80078088
    sw(v0, gp + 0x9C8);                                 // Store to: 80077FA8
    sw(v1, gp + 0x8F0);                                 // Store to: 80077ED0
loc_8003DDA0:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    v0 = (i32(v0) < i32(v1));
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8003E30C;
    }
    v0 = lw(gp + 0x998);                                // Load from: 80077F78
    if (v0 == 0) goto loc_8003DEC0;
    v0 = lw(gp + 0x9C8);                                // Load from: 80077FA8
    v0 = lw(v0 + 0x10);
    if (v0 != 0) goto loc_8003DEC0;
    v0 = lw(gp + 0xCA8);                                // Load from: 80078288
    v0++;
    v1 = v0 << 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A64;                                       // Result = CastInfo_1_ZombieMan[0] (80074A64)
    at += v1;
    v1 = lw(at);
    sw(0, gp + 0x998);                                  // Store to: 80077F78
    sw(v0, gp + 0xCA8);                                 // Store to: 80078288
    if (v1 != 0) goto loc_8003DE1C;
    sw(0, gp + 0xCA8);                                  // Store to: 80078288
loc_8003DE1C:
    a0 = lw(gp + 0xCA8);                                // Load from: 80078288
    a0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A68;                                       // Result = CastInfo_1_ZombieMan[1] (80074A68)
    at += a0;
    v1 = lw(at);
    a1 = 0x80060000;                                    // Result = 80060000
    a1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    sw(0, gp + 0xAA8);                                  // Store to: 80078088
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1FB8;                                       // Result = MObjInfo_MT_PLAYER[3] (8005E048)
    at += v0;
    v0 = lw(at);
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A68;                                       // Result = CastInfo_1_ZombieMan[1] (80074A68)
    at += a0;
    a0 = lw(at);
    v1 = v0 << 3;
    v1 -= v0;
    v1 <<= 2;
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 2;
    v0 -= a0;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1FB4;                                       // Result = MObjInfo_MT_PLAYER[4] (8005E04C)
    at += v0;
    v0 = lw(at);
    v1 += a1;
    sw(v1, gp + 0x9C8);                                 // Store to: 80077FA8
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8003E098;
    a1 = v0;
    goto loc_8003E090;
loc_8003DEC0:
    v0 = lw(gp + 0x8F0);                                // Load from: 80077ED0
    v0--;
    sw(v0, gp + 0x8F0);                                 // Store to: 80077ED0
    {
        const bool bJump = (i32(v0) > 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8003E30C;
    }
    v0 = lw(gp + 0x9C8);                                // Load from: 80077FA8
    v1 = lw(v0 + 0x10);
    v0 = 0x167;                                         // Result = 00000167
    {
        const bool bJump = (v1 == v0)
        v0 = (v1 < 0x168);
        if (bJump) goto loc_8003E054;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0x10A;                                     // Result = 0000010A
        if (bJump) goto loc_8003DF94;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = (v1 < 0x10B);
        if (bJump) goto loc_8003E04C;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0xDB;                                      // Result = 000000DB
        if (bJump) goto loc_8003DF4C;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = (v1 < 0xDC);
        if (bJump) goto loc_8003E03C;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0xA0;                                      // Result = 000000A0
        if (bJump) goto loc_8003DF30;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = 0xBE;                                      // Result = 000000BE
        if (bJump) goto loc_8003E034;
    }
    a1 = 7;                                             // Result = 00000007
    if (v1 == v0) goto loc_8003E088;
    a1 = 0;                                             // Result = 00000000
    goto loc_8003E088;
loc_8003DF30:
    v0 = 0x106;                                         // Result = 00000106
    {
        const bool bJump = (v1 == v0)
        v0 = 0x108;                                     // Result = 00000108
        if (bJump) goto loc_8003E044;
    }
    a1 = 0x50;                                          // Result = 00000050
    if (v1 == v0) goto loc_8003E088;
    a1 = 0;                                             // Result = 00000000
    goto loc_8003E088;
loc_8003DF4C:
    v0 = 0x12F;                                         // Result = 0000012F
    {
        const bool bJump = (v1 == v0)
        v0 = (v1 < 0x130);
        if (bJump) goto loc_8003E064;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0x129;                                     // Result = 00000129
        if (bJump) goto loc_8003DF78;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = 0x12C;                                     // Result = 0000012C
        if (bJump) goto loc_8003E064;
    }
    a1 = 0x4A;                                          // Result = 0000004A
    if (v1 == v0) goto loc_8003E088;
    a1 = 0;                                             // Result = 00000000
    goto loc_8003E088;
loc_8003DF78:
    v0 = (v1 < 0x14C);
    {
        const bool bJump = (v0 == 0)
        v0 = (v1 < 0x149);
        if (bJump) goto loc_8003E084;
    }
    a1 = 0;                                             // Result = 00000000
    if (v0 != 0) goto loc_8003E088;
    a1 = 7;                                             // Result = 00000007
    goto loc_8003E088;
loc_8003DF94:
    v0 = (v1 < 0x1E7);
    {
        const bool bJump = (v0 == 0)
        v0 = (v1 < 0x1E5);
        if (bJump) goto loc_8003DFEC;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0x1A5;                                     // Result = 000001A5
        if (bJump) goto loc_8003E06C;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = (v1 < 0x1A6);
        if (bJump) goto loc_8003E064;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0x182;                                     // Result = 00000182
        if (bJump) goto loc_8003DFD0;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = 0x18F;                                     // Result = 0000018F
        if (bJump) goto loc_8003E05C;
    }
    a1 = 0x4A;                                          // Result = 0000004A
    if (v1 == v0) goto loc_8003E088;
    a1 = 0;                                             // Result = 00000000
    goto loc_8003E088;
loc_8003DFD0:
    v0 = 0x1BB;                                         // Result = 000001BB
    {
        const bool bJump = (v1 == v0)
        v0 = 0x1CB;                                     // Result = 000001CB
        if (bJump) goto loc_8003E064;
    }
    a1 = 0x3B;                                          // Result = 0000003B
    if (v1 == v0) goto loc_8003E088;
    a1 = 0;                                             // Result = 00000000
    goto loc_8003E088;
loc_8003DFEC:
    v0 = 0x225;                                         // Result = 00000225
    {
        const bool bJump = (v1 == v0)
        v0 = (v1 < 0x226);
        if (bJump) goto loc_8003E07C;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = 0x205;                                     // Result = 00000205
        if (bJump) goto loc_8003E018;
    }
    {
        const bool bJump = (v1 == v0)
        v0 = 0x223;                                     // Result = 00000223
        if (bJump) goto loc_8003E074;
    }
    a1 = 0xF;                                           // Result = 0000000F
    if (v1 == v0) goto loc_8003E088;
    a1 = 0;                                             // Result = 00000000
    goto loc_8003E088;
loc_8003E018:
    v0 = 0x227;                                         // Result = 00000227
    {
        const bool bJump = (v1 == v0)
        v0 = 0x23C;                                     // Result = 0000023C
        if (bJump) goto loc_8003E07C;
    }
    a1 = 0x3B;                                          // Result = 0000003B
    if (v1 == v0) goto loc_8003E088;
    a1 = 0;                                             // Result = 00000000
    goto loc_8003E088;
loc_8003E034:
    a1 = 0x1D;                                          // Result = 0000001D
    goto loc_8003E088;
loc_8003E03C:
    a1 = 8;                                             // Result = 00000008
    goto loc_8003E088;
loc_8003E044:
    a1 = 0x4F;                                          // Result = 0000004F
    goto loc_8003E088;
loc_8003E04C:
    a1 = 0x4E;                                          // Result = 0000004E
    goto loc_8003E088;
loc_8003E054:
    a1 = 0x2E;                                          // Result = 0000002E
    goto loc_8003E088;
loc_8003E05C:
    a1 = 0x35;                                          // Result = 00000035
    goto loc_8003E088;
loc_8003E064:
    a1 = 0x4A;                                          // Result = 0000004A
    goto loc_8003E088;
loc_8003E06C:
    a1 = 7;                                             // Result = 00000007
    goto loc_8003E088;
loc_8003E074:
    a1 = 9;                                             // Result = 00000009
    goto loc_8003E088;
loc_8003E07C:
    a1 = 0xF;                                           // Result = 0000000F
    goto loc_8003E088;
loc_8003E084:
    a1 = 0;                                             // Result = 00000000
loc_8003E088:
    a0 = 0;                                             // Result = 00000000
    if (a1 == 0) goto loc_8003E098;
loc_8003E090:
    S_StartSound();
loc_8003E098:
    v0 = lw(gp + 0x9C8);                                // Load from: 80077FA8
    v1 = lw(gp + 0xAA8);                                // Load from: 80078088
    a0 = lw(v0 + 0x10);
    v1++;
    sw(v1, gp + 0xAA8);                                 // Store to: 80078088
    v0 = a0 << 3;
    v0 -= a0;
    v0 <<= 2;
    a0 = 0x80060000;                                    // Result = 80060000
    a0 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += a0;
    sw(v0, gp + 0x9C8);                                 // Store to: 80077FA8
    v0 = 0xC;                                           // Result = 0000000C
    if (v1 != v0) goto loc_8003E25C;
    v0 = lw(gp + 0xB88);                                // Load from: 80078168
    if (v0 == 0) goto loc_8003E130;
    v0 = lw(gp + 0xCA8);                                // Load from: 80078288
    v0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A68;                                       // Result = CastInfo_1_ZombieMan[1] (80074A68)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F9C;                                       // Result = MObjInfo_MT_PLAYER[A] (8005E064)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 3;
    goto loc_8003E17C;
loc_8003E130:
    v0 = lw(gp + 0xCA8);                                // Load from: 80078288
    v0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A68;                                       // Result = CastInfo_1_ZombieMan[1] (80074A68)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F98;                                       // Result = MObjInfo_MT_PLAYER[B] (8005E068)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 3;
loc_8003E17C:
    v0 -= v1;
    v0 <<= 2;
    v0 += a0;
    sw(v0, gp + 0x9C8);                                 // Store to: 80077FA8
    v0 = lw(gp + 0xB88);                                // Load from: 80078168
    a0 = lw(gp + 0x9C8);                                // Load from: 80077FA8
    v1 = v0 ^ 1;
    v0 = 0x80060000;                                    // Result = 80060000
    v0 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    sw(v1, gp + 0xB88);                                 // Store to: 80078168
    if (a0 != v0) goto loc_8003E25C;
    if (v1 == 0) goto loc_8003E200;
    v0 = lw(gp + 0xCA8);                                // Load from: 80078288
    v0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A68;                                       // Result = CastInfo_1_ZombieMan[1] (80074A68)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F9C;                                       // Result = MObjInfo_MT_PLAYER[A] (8005E064)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 3;
    goto loc_8003E24C;
loc_8003E200:
    v0 = lw(gp + 0xCA8);                                // Load from: 80078288
    v0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A68;                                       // Result = CastInfo_1_ZombieMan[1] (80074A68)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1F98;                                       // Result = MObjInfo_MT_PLAYER[B] (8005E068)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 3;
loc_8003E24C:
    v0 -= v1;
    v0 <<= 2;
    v0 += a0;
    sw(v0, gp + 0x9C8);                                 // Store to: 80077FA8
loc_8003E25C:
    v1 = lw(gp + 0xAA8);                                // Load from: 80078088
    v0 = 0x18;                                          // Result = 00000018
    if (v1 == v0) goto loc_8003E280;
    v1 = lw(gp + 0x9C8);                                // Load from: 80077FA8
    v0 = 0x80060000;                                    // Result = 80060000
    v0 -= 0x619C;                                       // Result = State_S_PLAY[0] (80059E64)
    if (v1 != v0) goto loc_8003E2E4;
loc_8003E280:
    v0 = lw(gp + 0xCA8);                                // Load from: 80078288
    v0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A68;                                       // Result = CastInfo_1_ZombieMan[1] (80074A68)
    at += v0;
    v1 = lw(at);
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 3;
    at = 0x80060000;                                    // Result = 80060000
    at -= 0x1FB8;                                       // Result = MObjInfo_MT_PLAYER[3] (8005E048)
    at += v0;
    v1 = lw(at);
    sw(0, gp + 0xAA8);                                  // Store to: 80078088
    v0 = v1 << 3;
    v0 -= v1;
    v0 <<= 2;
    v1 = 0x80060000;                                    // Result = 80060000
    v1 -= 0x7274;                                       // Result = State_S_NULL[0] (80058D8C)
    v0 += v1;
    sw(v0, gp + 0x9C8);                                 // Store to: 80077FA8
loc_8003E2E4:
    v0 = lw(gp + 0x9C8);                                // Load from: 80077FA8
    v1 = lw(v0 + 0x8);
    v0 = -1;                                            // Result = FFFFFFFF
    sw(v1, gp + 0x8F0);                                 // Store to: 80077ED0
    {
        const bool bJump = (v1 != v0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_8003E30C;
    }
    v0 = 0xF;                                           // Result = 0000000F
    sw(v0, gp + 0x8F0);                                 // Store to: 80077ED0
loc_8003E308:
    v0 = 0;                                             // Result = 00000000
loc_8003E30C:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void F2_Drawer() noexcept {
    sp -= 0x28;
    sw(ra, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    I_IncDrawnFrameCount();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7BB0;                                       // Result = gTexInfo_DEMON[0] (80097BB0)
    a1 = 0;                                             // Result = 00000000
    s2 = 0x800B0000;                                    // Result = 800B0000
    s2 -= 0x6F7C;                                       // Result = gPaletteClutId_Main (800A9084)
    a3 = lh(s2);                                        // Load from: gPaletteClutId_Main (800A9084)
    a2 = 0;                                             // Result = 00000000
    I_CacheAndDrawSprite();
    v1 = lw(gp + 0xB8C);                                // Load from: 8007816C
    v0 = (i32(v1) < 2);
    if (i32(v1) < 0) goto loc_8003E8C8;
    {
        const bool bJump = (v0 != 0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_8003E388;
    }
    if (v1 == v0) goto loc_8003E3DC;
    goto loc_8003E8C8;
loc_8003E388:
    v0 = lw(gp + 0xB30);                                // Load from: 80078110
    s0 = lw(gp + 0x930);                                // Load from: 80077F10
    s1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_8003E3C8;
    s2 = 0x80070000;                                    // Result = 80070000
    s2 += 0x4950;                                       // Result = STR_Doom2_WinText_1[0] (80074950)
loc_8003E3A0:
    a0 = -1;                                            // Result = FFFFFFFF
    a1 = s0;
    a2 = s2;
    I_DrawString();
    s0 += 0xE;
    v0 = lw(gp + 0xB30);                                // Load from: 80078110
    s1++;
    v0 = (i32(s1) < i32(v0));
    s2 += 0x19;
    if (v0 != 0) goto loc_8003E3A0;
loc_8003E3C8:
    a0 = -1;                                            // Result = FFFFFFFF
    a2 = 0x800B0000;                                    // Result = 800B0000
    a2 -= 0x6FB8;                                       // Result = 800A9048
    a1 = s0;
    goto loc_8003E8C0;
loc_8003E3DC:
    v0 = lw(gp + 0x9C8);                                // Load from: 80077FA8
    a0 = lw(v0);
    v1 = lw(v0 + 0x4);
    a0 <<= 3;
    v1 &= 0x7FFF;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 -= v1;
    v0 <<= 2;
    at = 0x80060000;                                    // Result = 80060000
    at += 0x6BFC;                                       // Result = 80066BFC
    at += a0;
    v1 = lw(at);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0x7FEC);                               // Load from: gFirstSpriteLumpNum (80078014)
    v0 += v1;
    v1 = lw(v0 + 0x4);
    s0 = lbu(v0 + 0x24);
    v1 -= a0;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7EC4);                               // Load from: gpSprites (80077EC4)
    v1 <<= 5;
    s1 = v1 + a0;
    a0 = s1;
    I_CacheTex();
    v0 = 9;                                             // Result = 00000009
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x203);                                 // Store to: 1F800203
    v1 = lhu(s2);                                       // Load from: gPaletteClutId_Main (800A9084)
    v0 = 0x2D;                                          // Result = 0000002D
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x207);                                 // Store to: 1F800207
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x20E);                                 // Store to: 1F80020E
    v0 = lhu(s1 + 0xA);
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x216);                                 // Store to: 1F800216
    v1 = lh(s1 + 0x2);
    v0 = 0xB4;                                          // Result = 000000B4
    a0 = v0 - v1;
    if (s0 != 0) goto loc_8003E500;
    v0 = lbu(s1 + 0x8);
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    v0 = lbu(s1 + 0x8);
    v1 = lbu(s1 + 0x4);
    v0 += v1;
    v0--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x214);                                 // Store to: 1F800214
    v0 = lbu(s1 + 0x8);
    v1 = lbu(s1 + 0x4);
    v0 += v1;
    v0--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x224);                                 // Store to: 1F800224
    v0 = lbu(s1 + 0x8);
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x21C);                                 // Store to: 1F80021C
    v1 = lh(s1);
    v0 = 0x80;                                          // Result = 00000080
    v1 = v0 - v1;
    goto loc_8003E568;
loc_8003E4F4:
    v0 = t1 + 4;
    v0 += a0;
    goto loc_8003E778;
loc_8003E500:
    v0 = lbu(s1 + 0x8);
    v1 = lbu(s1 + 0x4);
    v0 += v1;
    v0--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20C);                                 // Store to: 1F80020C
    v0 = lbu(s1 + 0x8);
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x214);                                 // Store to: 1F800214
    v0 = lbu(s1 + 0x8);
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x224);                                 // Store to: 1F800224
    v0 = lbu(s1 + 0x8);
    v1 = lbu(s1 + 0x4);
    v0 += v1;
    v0--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x21C);                                 // Store to: 1F80021C
    v0 = lh(s1 + 0x4);
    v1 = lh(s1);
    v0 -= 0x80;
    v1 -= v0;
loc_8003E568:
    t2 = 0x1F800000;                                    // Result = 1F800000
    t2 += 0x204;                                        // Result = 1F800204
    t3 = 0xFF0000;                                      // Result = 00FF0000
    t3 |= 0xFFFF;                                       // Result = 00FFFFFF
    s0 = 0x80080000;                                    // Result = 80080000
    s0 += 0x6550;                                       // Result = gGpuCmdsBuffer[0] (80086550)
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x208);                                 // Store to: 1F800208
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a0, at + 0x20A);                                 // Store to: 1F80020A
    v0 = lhu(s1 + 0x4);
    s2 = s0 & t3;                                       // Result = 00086550
    at = 0x1F800000;                                    // Result = 1F800000
    sh(a0, at + 0x212);                                 // Store to: 1F800212
    v0 += v1;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x210);                                 // Store to: 1F800210
    v0 = lhu(s1 + 0x4);
    t0 = 0x1F800000;                                    // Result = 1F800000
    t0 = lbu(t0 + 0x203);                               // Load from: 1F800203
    v0 += v1;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x220);                                 // Store to: 1F800220
    v0 = lhu(s1 + 0x6);
    t7 = 0x4000000;                                     // Result = 04000000
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v1, at + 0x218);                                 // Store to: 1F800218
    v0 += a0;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x222);                                 // Store to: 1F800222
    v0 = lhu(s1 + 0x6);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += a0;
    at = 0x1F800000;                                    // Result = 1F800000
    sh(v0, at + 0x21A);                                 // Store to: 1F80021A
    v0 = lbu(s1 + 0x9);
    t5 = 0x80000000;                                    // Result = 80000000
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x20D);                                 // Store to: 1F80020D
    v0 = lbu(s1 + 0x9);
    t4 = -1;                                            // Result = FFFFFFFF
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x215);                                 // Store to: 1F800215
    v0 = lbu(s1 + 0x9);
    v1 = lbu(s1 + 0x6);
    t1 = t0 << 2;
    v0 += v1;
    v0--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x225);                                 // Store to: 1F800225
    v0 = lbu(s1 + 0x9);
    v1 = lbu(s1 + 0x6);
    t6 = t1 + 4;
    v0 += v1;
    v0--;
    at = 0x1F800000;                                    // Result = 1F800000
    sb(v0, at + 0x21D);                                 // Store to: 1F80021D
loc_8003E650:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = (a0 < v0);
    {
        const bool bJump = (v0 != 0)
        v0 = t1 + a0;
        if (bJump) goto loc_8003E6B4;
    }
    v0 += 4;
    v1 = 0x80090000;                                    // Result = 80090000
    v1 += 0x6550;                                       // Result = gThinkerCap[0] (80096550)
    v0 = (v0 < v1);
    v1 = 0xFF000000;                                    // Result = FF000000
    if (v0 != 0) goto loc_8003E4F4;
    v0 = lw(a3);
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    v0 &= v1;
    v0 |= s2;
    sw(v0, a3);
    sb(0, a3 + 0x3);
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
loc_8003E6B4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = t1 + a0;
    v0 += 4;
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_8003E768;
    if (v1 == a0) goto loc_8003E650;
loc_8003E6D8:
    v0 = lw(gp + 0x754);                                // Load from: GPU_REG_GP1 (80077D34)
    v0 = lw(v0);
    v0 &= t7;
    if (v0 == 0) goto loc_8003E650;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= t3;
    v0 |= t5;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t4) goto loc_8003E744;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003E728:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x750);                                // Load from: GPU_REG_GP0 (80077D30)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003E728;
loc_8003E744:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 == v0) goto loc_8003E650;
    goto loc_8003E6D8;
loc_8003E768:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v0 += t6;
loc_8003E778:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C18);                                // Store to: gpGpuPrimsEnd (80077C18)
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    a0 = 0xFF000000;                                    // Result = FF000000
    v1 = lw(a3);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    v1 &= a0;
    v0 &= a1;
    v1 |= v0;
    sw(v1, a3);
    sb(t0, a3 + 0x3);
    t0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a3 += 4;
    if (t0 == v0) goto loc_8003E7D8;
    v1 = -1;                                            // Result = FFFFFFFF
loc_8003E7C0:
    v0 = lw(t2);
    t2 += 4;
    t0--;
    sw(v0, a3);
    a3 += 4;
    if (t0 != v1) goto loc_8003E7C0;
loc_8003E7D8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    t2 = 0x4000000;                                     // Result = 04000000
    if (v1 == v0) goto loc_8003E88C;
    a3 = 0xFF0000;                                      // Result = 00FF0000
    a3 |= 0xFFFF;                                       // Result = 00FFFFFF
    t1 = 0x80000000;                                    // Result = 80000000
    t0 = -1;                                            // Result = FFFFFFFF
loc_8003E804:
    v0 = lw(gp + 0x754);                                // Load from: GPU_REG_GP1 (80077D34)
    v0 = lw(v0);
    v0 &= t2;
    if (v0 == 0) goto loc_8003E88C;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    a1 = lbu(a0 + 0x3);
    v0 = lw(a0);
    a1--;
    v0 &= a3;
    v0 |= t1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x7C14);                                // Store to: gpGpuPrimsBeg (80077C14)
    a0 += 4;
    if (a1 == t0) goto loc_8003E870;
    a2 = -1;                                            // Result = FFFFFFFF
loc_8003E854:
    v1 = lw(a0);
    a0 += 4;
    v0 = lw(gp + 0x750);                                // Load from: GPU_REG_GP0 (80077D30)
    a1--;
    sw(v1, v0);
    if (a1 != a2) goto loc_8003E854;
loc_8003E870:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7C14);                               // Load from: gpGpuPrimsBeg (80077C14)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7C18);                               // Load from: gpGpuPrimsEnd (80077C18)
    if (v1 != v0) goto loc_8003E804;
loc_8003E88C:
    a0 = -1;                                            // Result = FFFFFFFF
    a2 = 0x80010000;                                    // Result = 80010000
    a2 += 0x1734;                                       // Result = STR_CastOfCharacters[0] (80011734)
    a1 = 0x14;                                          // Result = 00000014
    I_DrawString();
    v0 = lw(gp + 0xCA8);                                // Load from: 80078288
    a0 = -1;                                            // Result = FFFFFFFF
    v0 <<= 3;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x4A64;                                       // Result = CastInfo_1_ZombieMan[0] (80074A64)
    at += v0;
    a2 = lw(at);
    a1 = 0xD0;                                          // Result = 000000D0
loc_8003E8C0:
    I_DrawString();
loc_8003E8C8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EC0);                               // Load from: gbGamePaused (80077EC0)
    if (v0 == 0) goto loc_8003E8E4;
    I_DrawPausedOverlay();
loc_8003E8E4:
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x28;
    return;
}

void O_Init() noexcept {
    sp -= 0x18;
    a0 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x10);
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
    a1 = 0;                                             // Result = 00000000
    a0 = 0x80070000;                                    // Result = 80070000
    a0 += 0x7EF8;                                       // Result = gVBlanksUntilMenuMove (80077EF8)
    v1 = 0x80080000;                                    // Result = 80080000
    v1 -= 0x8000;                                       // Result = gCursorPos (80078000)
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x7E28);                                 // Store to: gCursorFrame (800781D8)
loc_8003E940:
    sw(0, v1);
    sw(0, a0);
    a0 += 4;
    a1++;
    v0 = (i32(a1) < 2);
    v1 += 4;
    if (v0 != 0) goto loc_8003E940;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7FA4);                               // Load from: gNetGame (8007805C)
    if (v0 == 0) goto loc_8003E984;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x4BD0;                                       // Result = OptionsMenuEntries_NetGame[0] (80074BD0)
    sw(v0, gp + 0xCE0);                                 // Store to: gpCurOptionsMenuEntries (800782C0)
    v0 = 4;                                             // Result = 00000004
    goto loc_8003E9BC;
loc_8003E984:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EC0);                               // Load from: gbGamePaused (80077EC0)
    if (v0 == 0) goto loc_8003E9AC;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x4B88;                                       // Result = OptionsMenuEntries_InGame[0] (80074B88)
    sw(v0, gp + 0xCE0);                                 // Store to: gpCurOptionsMenuEntries (800782C0)
    v0 = 6;                                             // Result = 00000006
    goto loc_8003E9BC;
loc_8003E9AC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x4B4C;                                       // Result = OptionsMenuEntries_MainMenu[0] (80074B4C)
    sw(v0, gp + 0xCE0);                                 // Store to: gpCurOptionsMenuEntries (800782C0)
    v0 = 5;                                             // Result = 00000005
loc_8003E9BC:
    sw(v0, gp + 0xB38);                                 // Store to: gCurNumOptionsMenuEntries (80078118)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void O_Shutdown() noexcept {
    v1 = 1;                                             // Result = 00000001
    v0 = 0x80080000;                                    // Result = 80080000
    v0 -= 0x7FFC;                                       // Result = DefaultCursorPos (80078004)
loc_8003E9DC:
    sw(0, v0);
    v1--;
    v0 -= 4;
    if (i32(v1) >= 0) goto loc_8003E9DC;
    return;
}

void O_Control() noexcept {
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7FB4);                               // Load from: gGameTic (8007804C)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FA4);                               // Load from: gPrevGameTic (80077FA4)
    sp -= 0x30;
    sw(ra, sp + 0x28);
    sw(s5, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 = (i32(v0) < i32(v1));
    sw(s0, sp + 0x10);
    if (v0 == 0) goto loc_8003EA50;
    v0 = v1 & 3;
    s2 = 1;                                             // Result = 00000001
    if (v0 != 0) goto loc_8003EA54;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x7E28);                               // Load from: gCursorFrame (800781D8)
    v0 ^= 1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x7E28);                                // Store to: gCursorFrame (800781D8)
loc_8003EA50:
    s2 = 1;                                             // Result = 00000001
loc_8003EA54:
    s3 = 0x51EB0000;                                    // Result = 51EB0000
    s3 |= 0x851F;                                       // Result = 51EB851F
    s5 = 0x80080000;                                    // Result = 80080000
    s5 -= 0x8000;                                       // Result = gCursorPos (80078000)
    s4 = s5 + 4;                                        // Result = DefaultCursorPos (80078004)
    s1 = 4;                                             // Result = 00000004
loc_8003EA6C:
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7F54;                                       // Result = gbPlayerInGame[0] (800780AC)
    at += s1;
    v0 = lw(at);
    if (v0 == 0) goto loc_8003EE8C;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7F44;                                       // Result = gPlayerPadButtons[0] (80077F44)
    at += s1;
    s0 = lw(at);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x7DEC;                                       // Result = gPlayerOldPadButtons[0] (80078214)
    at += s1;
    v0 = lw(at);
    {
        const bool bJump = (s0 == v0)
        v0 = s0 & 0x900;
        if (bJump) goto loc_8003EACC;
    }
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8003EACC;
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
    v0 = 9;                                             // Result = 00000009
    goto loc_8003EEA0;
loc_8003EACC:
    v0 = s0 & 0xF000;
    if (v0 != 0) goto loc_8003EAF0;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x7EF8;                                       // Result = gVBlanksUntilMenuMove (80077EF8)
    at += s1;
    sw(0, at);
    goto loc_8003EB9C;
loc_8003EAF0:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x7EF8;                                       // Result = gVBlanksUntilMenuMove (80077EF8)
    a0 = s1 + v0;
    v1 = lw(a0);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7FBC);                               // Load from: gPlayersElapsedVBlanks[0] (80077FBC)
    v1 -= v0;
    sw(v1, a0);
    if (i32(v1) > 0) goto loc_8003EB9C;
    v0 = 0xF;                                           // Result = 0000000F
    sw(v0, a0);
    v0 = s0 & 0x4000;
    a0 = s1 + s5;
    if (v0 == 0) goto loc_8003EB50;
    v1 = lw(a0);
    v0 = lw(gp + 0xB38);                                // Load from: gCurNumOptionsMenuEntries (80078118)
    v1++;
    v0--;
    v0 = (i32(v0) < i32(v1));
    sw(v1, a0);
    if (v0 == 0) goto loc_8003EB80;
    sw(0, a0);
    goto loc_8003EB80;
loc_8003EB50:
    v0 = s0 & 0x1000;
    v1 = s1 + s5;
    if (v0 == 0) goto loc_8003EB9C;
    v0 = lw(v1);
    v0--;
    sw(v0, v1);
    if (i32(v0) >= 0) goto loc_8003EB80;
    v0 = lw(gp + 0xB38);                                // Load from: gCurNumOptionsMenuEntries (80078118)
    v0--;
    sw(v0, v1);
loc_8003EB80:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a0 = 0;                                             // Result = 00000000
    if (s2 != v0) goto loc_8003EB9C;
    a1 = 0x12;                                          // Result = 00000012
    S_StartSound();
loc_8003EB9C:
    v1 = lw(s4);
    v0 = v1 << 1;
    v0 += v1;
    v1 = lw(gp + 0xCE0);                                // Load from: gpCurOptionsMenuEntries (800782C0)
    v0 <<= 2;
    v0 += v1;
    v1 = lw(v0);
    v0 = (v1 < 6);
    {
        const bool bJump = (v0 == 0)
        v0 = v1 << 2;
        if (bJump) goto loc_8003EE8C;
    }
    at = 0x80010000;                                    // Result = 80010000
    at += 0x1748;                                       // Result = JumpTable_O_Control[0] (80011748)
    at += v0;
    v0 = lw(at);
    switch (v0) {
        case 0x8003EBE8: goto loc_8003EBE8;
        case 0x8003ECF8: goto loc_8003ECF8;
        case 0x8003EDC8: goto loc_8003EDC8;
        case 0x8003EE10: goto loc_8003EE10;
        case 0x8003EE4C: goto loc_8003EE4C;
        case 0x8003EE6C: goto loc_8003EE6C;
        default: jump_table_err(); break;
    }
loc_8003EBE8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    {
        const bool bJump = (s2 != v0)
        v0 = s0 & 0x2000;
        if (bJump) goto loc_8003EE8C;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x8000;
        if (bJump) goto loc_8003EC3C;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x75F4);                               // Load from: gOptionsMusVol (800775F4)
    v1 = v0 + 1;
    v0 = (i32(v1) < 0x65);
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x75F4);                                // Store to: gOptionsMusVol (800775F4)
    {
        const bool bJump = (v0 != 0)
        v0 = v1 << 7;
        if (bJump) goto loc_8003EC74;
    }
    v0 = 0x64;                                          // Result = 00000064
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x75F4);                                // Store to: gOptionsMusVol (800775F4)
    goto loc_8003ECB0;
loc_8003EC3C:
    if (v0 == 0) goto loc_8003EE8C;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x75F4);                               // Load from: gOptionsMusVol (800775F4)
    v1 = v0 - 1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x75F4);                                // Store to: gOptionsMusVol (800775F4)
    v0 = v1 << 7;
    if (i32(v1) >= 0) goto loc_8003EC74;
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x75F4);                                 // Store to: gOptionsMusVol (800775F4)
    goto loc_8003ECB0;
loc_8003EC74:
    v0 -= v1;
    mult(v0, s3);
    v0 = u32(i32(v0) >> 31);
    a0 = hi;
    a0 = u32(i32(a0) >> 5);
    a0 -= v0;
    S_SetMusicVolume();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x75F4);                               // Load from: gOptionsMusVol (800775F4)
    v0 &= 1;
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8003ECB0;
    a1 = 0x15;                                          // Result = 00000015
    S_StartSound();
loc_8003ECB0:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x75F4);                               // Load from: gOptionsMusVol (800775F4)
    v1 = v0 << 4;
    v1 -= v0;
    v1 <<= 2;
    v1 += v0;
    v1 <<= 8;
    v1 -= v0;
    mult(v1, s3);
    v1 = u32(i32(v1) >> 31);
    v0 = hi;
    v0 = u32(i32(v0) >> 5);
    v0 -= v1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x75F8);                                // Store to: gCdMusicVol (800775F8)
    s4 -= 4;
    goto loc_8003EE90;
loc_8003ECF8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    {
        const bool bJump = (s2 != v0)
        v0 = s0 & 0x2000;
        if (bJump) goto loc_8003EE8C;
    }
    {
        const bool bJump = (v0 == 0)
        v0 = s0 & 0x8000;
        if (bJump) goto loc_8003ED4C;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x75F0);                               // Load from: gOptionsSndVol (800775F0)
    v1 = v0 + 1;
    v0 = (i32(v1) < 0x65);
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x75F0);                                // Store to: gOptionsSndVol (800775F0)
    {
        const bool bJump = (v0 != 0)
        v0 = v1 << 7;
        if (bJump) goto loc_8003ED84;
    }
    v0 = 0x64;                                          // Result = 00000064
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x75F0);                                // Store to: gOptionsSndVol (800775F0)
    s4 -= 4;
    goto loc_8003EE90;
loc_8003ED4C:
    if (v0 == 0) goto loc_8003EE8C;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x75F0);                               // Load from: gOptionsSndVol (800775F0)
    v1 = v0 - 1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x75F0);                                // Store to: gOptionsSndVol (800775F0)
    v0 = v1 << 7;
    if (i32(v1) >= 0) goto loc_8003ED84;
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x75F0);                                 // Store to: gOptionsSndVol (800775F0)
    s4 -= 4;
    goto loc_8003EE90;
loc_8003ED84:
    v0 -= v1;
    mult(v0, s3);
    v0 = u32(i32(v0) >> 31);
    a0 = hi;
    a0 = u32(i32(a0) >> 5);
    a0 -= v0;
    S_SetSfxVolume();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x75F0);                               // Load from: gOptionsSndVol (800775F0)
    v0 &= 1;
    a0 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_8003EE8C;
    a1 = 0x15;                                          // Result = 00000015
    S_StartSound();
    s4 -= 4;
    goto loc_8003EE90;
loc_8003EDC8:
    v0 = s0 & 0xF0;
    if (v0 == 0) goto loc_8003EE8C;
    a0 = 0x80030000;                                    // Result = 80030000
    a0 += 0x6E1C;                                       // Result = START_PasswordScreen (80036E1C)
    a1 = 0x80030000;                                    // Result = 80030000
    a1 += 0x6E6C;                                       // Result = STOP_PasswordScreen (80036E6C)
    a2 = 0x80030000;                                    // Result = 80030000
    a2 += 0x6EA0;                                       // Result = TIC_PasswordScreen (80036EA0)
    a3 = 0x80030000;                                    // Result = 80030000
    a3 += 0x7134;                                       // Result = DRAW_PasswordScreen (80037134)
    MiniLoop();
    v1 = 4;                                             // Result = 00000004
    s4 -= 4;
    if (v0 != v1) goto loc_8003EE90;
    v0 = 4;                                             // Result = 00000004
    goto loc_8003EEA0;
loc_8003EE10:
    v0 = s0 & 0xF0;
    if (v0 == 0) goto loc_8003EE8C;
    a0 = 0x80030000;                                    // Result = 80030000
    a0 += 0x793C;                                       // Result = START_ControlsScreen (8003793C)
    a1 = 0x80030000;                                    // Result = 80030000
    a1 += 0x7980;                                       // Result = STOP_ControlsScreen (80037980)
    a2 = 0x80030000;                                    // Result = 80030000
    a2 += 0x79AC;                                       // Result = TIC_ControlsScreen (800379AC)
    a3 = 0x80030000;                                    // Result = 80030000
    a3 += 0x7B84;                                       // Result = DRAW_ControlsScreen (80037B84)
    s4 -= 4;
    MiniLoop();
    s2--;
    goto loc_8003EE94;
loc_8003EE4C:
    v0 = s0 & 0xF0;
    s4 -= 4;
    if (v0 == 0) goto loc_8003EE90;
    a0 = 0;                                             // Result = 00000000
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
    v0 = 5;                                             // Result = 00000005
    goto loc_8003EEA0;
loc_8003EE6C:
    v0 = s0 & 0xF0;
    s4 -= 4;
    if (v0 == 0) goto loc_8003EE90;
    a0 = 0;                                             // Result = 00000000
    a1 = 7;                                             // Result = 00000007
    S_StartSound();
    v0 = 8;                                             // Result = 00000008
    goto loc_8003EEA0;
loc_8003EE8C:
    s4 -= 4;
loc_8003EE90:
    s2--;
loc_8003EE94:
    s1 -= 4;
    if (i32(s2) >= 0) goto loc_8003EA6C;
    v0 = 0;                                             // Result = 00000000
loc_8003EEA0:
    ra = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x30;
    return;
}

void O_Drawer() noexcept {
loc_8003EEC8:
    sp -= 0x50;
    sw(ra, sp + 0x48);
    sw(s7, sp + 0x44);
    sw(s6, sp + 0x40);
    sw(s5, sp + 0x3C);
    sw(s4, sp + 0x38);
    sw(s3, sp + 0x34);
    sw(s2, sp + 0x30);
    sw(s1, sp + 0x2C);
    sw(s0, sp + 0x28);
    I_IncDrawnFrameCount();
    s1 = 0;                                             // Result = 00000000
loc_8003EEF8:
    s0 = 0;                                             // Result = 00000000
loc_8003EEFC:
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x7AB0;                                       // Result = gTexInfo_MARB01[0] (80097AB0)
    a1 = s0 << 6;
    a2 = s1 << 6;
    a3 = 0x800B0000;                                    // Result = 800B0000
    a3 = lh(a3 - 0x6F7C);                               // Load from: gPaletteClutId_Main (800A9084)
    s0++;
    I_CacheAndDrawSprite();
    v0 = (i32(s0) < 4);
    if (v0 != 0) goto loc_8003EEFC;
    s1++;                                               // Result = 00000001
    v0 = (i32(s1) < 4);                                 // Result = 00000001
    if (v0 != 0) goto loc_8003EEF8;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7EB4);                               // Load from: gGameAction (80077EB4)
    a0 = -1;                                            // Result = FFFFFFFF
    if (v0 != 0) goto loc_8003F0F4;
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x7D54;                                       // Result = STR_Options[0] (80077D54)
    a1 = 0x14;                                          // Result = 00000014
    I_DrawString();
    v0 = lw(gp + 0xB38);                                // Load from: gCurNumOptionsMenuEntries (80078118)
    s1 = lw(gp + 0xCE0);                                // Load from: gpCurOptionsMenuEntries (800782C0)
    s2 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_8003F074;
    s7 = 0x800B0000;                                    // Result = 800B0000
    s7 -= 0x6B0E;                                       // Result = gTexInfo_STATUS[2] (800A94F2)
    s6 = 0x800B0000;                                    // Result = 800B0000
    s6 -= 0x6F5C;                                       // Result = gPaletteClutId_UI (800A90A4)
    s5 = 0xB8;                                          // Result = 000000B8
    s4 = 0x6C;                                          // Result = 0000006C
    s3 = 0xB;                                           // Result = 0000000B
    s0 = s1 + 8;
loc_8003EF8C:
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x4AEC;                                       // Result = STR_Menu_MusicVolume[0] (80074AEC)
    a0 = lw(s0 - 0x4);
    v0 = lw(s1);
    a1 = lw(s0);
    v0 <<= 4;
    a2 += v0;
    I_DrawString();
    v0 = lw(s1);
    v0 = (v0 < 2);
    if (v0 == 0) goto loc_8003F058;
    a2 = lw(s0 - 0x4);
    a3 = lw(s0);
    sw(0, sp + 0x10);
    sw(s5, sp + 0x14);
    sw(s4, sp + 0x18);
    sw(s3, sp + 0x1C);
    a0 = lhu(s7);                                       // Load from: gTexInfo_STATUS[2] (800A94F2)
    a1 = lh(s6);                                        // Load from: gPaletteClutId_UI (800A90A4)
    a2 += 0xD;
    a3 += 0x14;
    I_DrawSprite();
    v0 = lw(s1);
    {
        const bool bJump = (v0 != 0)
        v0 = 6;                                         // Result = 00000006
        if (bJump) goto loc_8003F020;
    }
    v1 = lw(s0 - 0x4);
    a3 = lw(s0);
    sw(s4, sp + 0x10);
    sw(s5, sp + 0x14);
    a0 = lhu(s7);                                       // Load from: gTexInfo_STATUS[2] (800A94F2)
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x75F4);                               // Load from: gOptionsMusVol (800775F4)
    goto loc_8003F03C;
loc_8003F020:
    v1 = lw(s0 - 0x4);
    a3 = lw(s0);
    sw(s4, sp + 0x10);
    sw(s5, sp + 0x14);
    a0 = lhu(s7);                                       // Load from: gTexInfo_STATUS[2] (800A94F2)
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x75F0);                               // Load from: gOptionsSndVol (800775F0)
loc_8003F03C:
    sw(v0, sp + 0x18);
    sw(s3, sp + 0x1C);
    a1 = lh(s6);                                        // Load from: gPaletteClutId_UI (800A90A4)
    a2 += v1;
    a2 += 0xE;
    a3 += 0x14;
    I_DrawSprite();
loc_8003F058:
    s2++;
    s0 += 0xC;
    v0 = lw(gp + 0xB38);                                // Load from: gCurNumOptionsMenuEntries (80078118)
    v0 = (i32(s2) < i32(v0));
    s1 += 0xC;
    if (v0 != 0) goto loc_8003EF8C;
loc_8003F074:
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lhu(a0 - 0x6B0E);                              // Load from: gTexInfo_STATUS[2] (800A94F2)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7618);                               // Load from: gCurPlayerIndex (80077618)
    a1 = 0x800B0000;                                    // Result = 800B0000
    a1 = lh(a1 - 0x6F5C);                               // Load from: gPaletteClutId_UI (800A90A4)
    v0 <<= 2;
    at = 0x80080000;                                    // Result = 80080000
    at -= 0x8000;                                       // Result = gCursorPos (80078000)
    at += v0;
    v1 = lw(at);
    a2 = lw(gp + 0xCE0);                                // Load from: gpCurOptionsMenuEntries (800782C0)
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 += a2;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0x7E28);                               // Load from: gCursorFrame (800781D8)
    a2 = lw(v0 + 0x4);
    a3 = lw(v0 + 0x8);
    v0 = 0xC0;                                          // Result = 000000C0
    sw(v0, sp + 0x14);
    v0 = 0x10;                                          // Result = 00000010
    sw(v0, sp + 0x18);
    v0 = 0x12;                                          // Result = 00000012
    sw(v0, sp + 0x1C);
    v1 <<= 4;
    v1 += 0x84;
    a2 -= 0x18;
    a3 -= 2;
    sw(v1, sp + 0x10);
    I_DrawSprite();
loc_8003F0F4:
    I_SubmitGpuCmds();
    I_DrawPresent();
    ra = lw(sp + 0x48);
    s7 = lw(sp + 0x44);
    s6 = lw(sp + 0x40);
    s5 = lw(sp + 0x3C);
    s4 = lw(sp + 0x38);
    s3 = lw(sp + 0x34);
    s2 = lw(sp + 0x30);
    s1 = lw(sp + 0x2C);
    s0 = lw(sp + 0x28);
    sp += 0x50;
    return;
}

void FixedMul() noexcept {
loc_8003F134:
    t0 = a0 ^ a1;
    v0 = add(zero, a0);
    if (i32(a0) > 0) goto loc_8003F144;
    v0 = sub(zero, a0);
loc_8003F144:
    v1 = add(zero, a1);
    if (i32(a1) > 0) goto loc_8003F150;
    v1 = sub(zero, a1);
loc_8003F150:
    multu(v0, v1);
    a0 = hi;
    a1 = lo;
    v0 = a0 << 16;
    v1 = a1 >> 16;
    a0 = v0 + v1;
    v0 = add(zero, a0);
    if (i32(t0) >= 0) goto loc_8003F178;
    v0 = sub(zero, a0);
loc_8003F178:
    return;
}

void FixedDiv() noexcept {
loc_8003F180:
    t0 = a0 ^ a1;
    v0 = add(zero, a0);
    if (i32(a0) > 0) goto loc_8003F190;
    v0 = sub(zero, a0);
loc_8003F190:
    v1 = add(zero, a1);
    if (i32(a1) > 0) goto loc_8003F19C;
    v1 = sub(zero, a1);
loc_8003F19C:
    a2 = 0x10000;                                       // Result = 00010000
    at = (v1 < v0);
    t2 = 0;                                             // Result = 00000000
    if (at == 0) goto loc_8003F1C0;
loc_8003F1AC:
    v1 <<= 1;
    a2 <<= 1;
    at = (v1 < v0);
    t2 = 0;
    if (at != 0) goto loc_8003F1AC;
loc_8003F1C0:
    at = (i32(v0) < i32(v1));
    if (at != 0) goto loc_8003F1D4;
    v0 = sub(v0, v1);
    t2 |= a2;
loc_8003F1D4:
    v0 <<= 1;
    a2 >>= 1;
    if (a2 == 0) goto loc_8003F1EC;
    if (v0 != 0) goto loc_8003F1C0;
loc_8003F1EC:
    v0 = add(zero, t2);                                 // Result = 00000000
    if (i32(t0) >= 0) goto loc_8003F1F8;
    v0 = sub(zero, t2);                                 // Result = 00000000
loc_8003F1F8:
    return;
}

void PsxSoundInit() noexcept {
loc_800415EC:
    sp -= 0x28;
    sw(s3, sp + 0x1C);
    s3 = a0;
    sw(s4, sp + 0x20);
    s4 = a1;
    sw(s1, sp + 0x14);
    s1 = a2;
    sw(ra, sp + 0x24);
    sw(s2, sp + 0x18);
    sw(s0, sp + 0x10);
    wess_init();
    psxcd_init();
    a0 = 0xC9;                                          // Result = 000000C9
    psxcd_open();
    a0 = s1;
    s0 = v0;
    a1 = lw(s0 + 0x4);
    a2 = s0;
    psxcd_read();
    a0 = s0;
    psxcd_close();
    s2 = 0x80080000;                                    // Result = 80080000
    s2 -= 0x1364;                                       // Result = gDoomSfxLoadedSamples[0] (8007EC9C)
    a0 = s2;                                            // Result = gDoomSfxLoadedSamples[0] (8007EC9C)
    ZeroHalfWord();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0x11D0;                                       // Result = gMapMusSfxLoadedSamples[0] (8007EE30)
    ZeroHalfWord();
    a1 = 0x80080000;                                    // Result = 80080000
    a1 -= 0x7A78;                                       // Result = gPSXSND_wmdMemBuffer[0] (80078588)
    a2 = lw(gp + 0x824);                                // Load from: gPSXSND_maxWmdSize (80077E04)
    a3 = 0x80070000;                                    // Result = 80070000
    a3 += 0x7E08;                                       // Result = gPSXSND_soundSettingsLists[0] (80077E08)
    a0 = s1;
    wess_load_module();
    wess_get_master_status();
    a0 = v0;
    wess_dig_lcd_loader_init();
    wess_get_master_status();
    a0 = v0;
    a1 = 0xC9;                                          // Result = 000000C9
    a2 = 1;                                             // Result = 00000001
    wess_seq_loader_init();
    wess_get_wmd_end();
    a0 = 0;                                             // Result = 00000000
    a1 = 0x5A;                                          // Result = 0000005A
    a2 = v0;
    wess_seq_range_load();
    s0 = v0;
    wess_get_wmd_end();
    v0 += s0;
    sw(v0, gp + 0x83C);                                 // Store to: gpMusSequencesEnd (80077E1C)
    a0 = s3;
    S_SetSfxVolume();
    a0 = s4;
    S_SetMusicVolume();
    a0 = 0xC8;                                          // Result = 000000C8
    a1 = 0x1010;                                        // Result = 00001010
    a2 = s2;                                            // Result = gDoomSfxLoadedSamples[0] (8007EC9C)
    sw(0, gp + 0x840);                                  // Store to: gbDidLoadDoomSfxLcd (80077E20)
    a3 = 0;                                             // Result = 00000000
    wess_dig_lcd_load();
    v0 += 0x1010;
    sw(v0, gp + 0x838);                                 // Store to: gNextSoundUploadAddr (80077E18)
    v0 = 1;                                             // Result = 00000001
    sw(v0, gp + 0x840);                                 // Store to: gbDidLoadDoomSfxLcd (80077E20)
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void PsxSoundExit() noexcept {
    return;
}

void trackstart() noexcept {
loc_80041734:
    v1 = lw(a0);
    v0 = v1 & 8;
    {
        const bool bJump = (v0 == 0)
        v0 = -9;                                        // Result = FFFFFFF7
        if (bJump) goto loc_80041770;
    }
    v0 &= v1;
    sw(v0, a0);
    v0 = lbu(a1 + 0x5);
    v0++;
    sb(v0, a1 + 0x5);
    v0 &= 0xFF;
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80041770;
    }
    sb(v0, a1 + 0x1);
loc_80041770:
    return;
}

void trackstop() noexcept {
loc_80041778:
    v1 = lw(a0);
    v0 = v1 & 8;
    {
        const bool bJump = (v0 != 0)
        v0 = v1 | 8;
        if (bJump) goto loc_800417B0;
    }
    sw(v0, a0);
    v0 = lbu(a1 + 0x5);
    v0--;
    sb(v0, a1 + 0x5);
    v0 &= 0xFF;
    if (v0 != 0) goto loc_800417B0;
    sb(0, a1 + 0x1);
loc_800417B0:
    return;
}

void queue_wess_seq_pause() noexcept {
    sp -= 0x48;
    sw(a0, sp + 0x10);
    a0 = lw(sp + 0x10);
    sw(ra, sp + 0x44);
    sw(fp, sp + 0x40);
    sw(s7, sp + 0x3C);
    sw(s6, sp + 0x38);
    sw(s5, sp + 0x34);
    sw(s4, sp + 0x30);
    sw(s3, sp + 0x2C);
    sw(s2, sp + 0x28);
    sw(s1, sp + 0x24);
    sw(s0, sp + 0x20);
    sw(a1, sp + 0x18);
    Is_Seq_Num_Valid();
    if (v0 == 0) goto loc_8004192C;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    s7 = lbu(v0 + 0x4);
    v1 = lw(v0 + 0xC);
    s5 = lw(v0 + 0x20);
    s6 = lbu(v1 + 0xB);
    v0 = -1;                                            // Result = FFFFFFFF
    if (s7 == 0) goto loc_80041920;
    s6--;
    {
        const bool bJump = (s6 == v0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80041924;
    }
    fp = -1;                                            // Result = FFFFFFFF
    s4 = s5 + 0xC;
loc_80041838:
    v0 = lw(s5);
    v0 &= 1;
    if (v0 == 0) goto loc_80041910;
    v0 = lh(s4 - 0xA);
    a2 = lw(sp + 0x10);
    if (v0 != a2) goto loc_80041904;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s3 = lbu(s4 - 0x8);
    s1 = lbu(v0 + 0x1C);
    s2 = lw(s4);
    s1--;
    if (s1 == fp) goto loc_80041904;
loc_80041880:
    a0 = lbu(s2);
    v0 = 0xFF;                                          // Result = 000000FF
    {
        const bool bJump = (a0 == v0)
        v0 = a0 << 2;
        if (bJump) goto loc_800418F8;
    }
    v0 += a0;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 <<= 4;
    v1 = lw(v1 + 0x28);
    a1 = s5;
    s0 = v0 + v1;
    a0 = s0;
    trackstop();
    a2 = lw(sp + 0x18);
    v0 = 1;                                             // Result = 00000001
    s3--;
    if (a2 != v0) goto loc_800418F0;
    v0 = lbu(s0 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    v0 <<= 2;
    v0 += a2;
    v0 = lw(v0);
    v0 = lw(v0 + 0x18);
    a0 = s0;
    pcall(v0);
loc_800418F0:
    if (s3 == 0) goto loc_80041904;
loc_800418F8:
    s1--;
    s2++;
    if (s1 != fp) goto loc_80041880;
loc_80041904:
    s7--;
    v0 = 1;                                             // Result = 00000001
    if (s7 == 0) goto loc_80041924;
loc_80041910:
    s4 += 0x18;
    s6--;
    s5 += 0x18;
    if (s6 != fp) goto loc_80041838;
loc_80041920:
    v0 = 1;                                             // Result = 00000001
loc_80041924:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
loc_8004192C:
    ra = lw(sp + 0x44);
    fp = lw(sp + 0x40);
    s7 = lw(sp + 0x3C);
    s6 = lw(sp + 0x38);
    s5 = lw(sp + 0x34);
    s4 = lw(sp + 0x30);
    s3 = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x48;
    return;
}

void queue_wess_seq_restart() noexcept {
    sp -= 0x40;
    sw(fp, sp + 0x38);
    fp = a0;
    sw(ra, sp + 0x3C);
    sw(s7, sp + 0x34);
    sw(s6, sp + 0x30);
    sw(s5, sp + 0x2C);
    sw(s4, sp + 0x28);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    Is_Seq_Num_Valid();
    if (v0 == 0) goto loc_80041A98;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    s6 = lbu(v0 + 0x4);
    v1 = lw(v0 + 0xC);
    s4 = lw(v0 + 0x20);
    s5 = lbu(v1 + 0xB);
    v0 = -1;                                            // Result = FFFFFFFF
    if (s6 == 0) goto loc_80041A8C;
    s5--;
    {
        const bool bJump = (s5 == v0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80041A90;
    }
    a2 = -1;                                            // Result = FFFFFFFF
    s3 = s4 + 0xC;
loc_800419D8:
    v0 = lw(s4);
    v0 &= 1;
    if (v0 == 0) goto loc_80041A7C;
    v0 = lh(s3 - 0xA);
    if (v0 != fp) goto loc_80041A70;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s2 = lbu(s3 - 0x8);
    s0 = lbu(v0 + 0x1C);
    s1 = lw(s3);
    s0--;
    if (s0 == a2) goto loc_80041A70;
    s7 = -1;                                            // Result = FFFFFFFF
loc_80041A20:
    v1 = lbu(s1);
    a3 = 0xFF;                                          // Result = 000000FF
    a1 = s4;
    if (v1 == a3) goto loc_80041A64;
    s2--;
    a0 = v1 << 2;
    a0 += v1;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a0 <<= 4;
    v0 = lw(v0 + 0x28);
    sw(a2, sp + 0x10);
    a0 += v0;
    trackstart();
    a2 = lw(sp + 0x10);
    if (s2 == 0) goto loc_80041A70;
loc_80041A64:
    s0--;
    s1++;
    if (s0 != s7) goto loc_80041A20;
loc_80041A70:
    s6--;
    v0 = 1;                                             // Result = 00000001
    if (s6 == 0) goto loc_80041A90;
loc_80041A7C:
    s3 += 0x18;
    s5--;
    s4 += 0x18;
    if (s5 != a2) goto loc_800419D8;
loc_80041A8C:
    v0 = 1;                                             // Result = 00000001
loc_80041A90:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
loc_80041A98:
    ra = lw(sp + 0x3C);
    fp = lw(sp + 0x38);
    s7 = lw(sp + 0x34);
    s6 = lw(sp + 0x30);
    s5 = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x40;
    return;
}

void queue_wess_seq_pauseall() noexcept {
loc_80041ACC:
    sp -= 0x40;
    sw(s0, sp + 0x18);
    s0 = a1;
    sw(ra, sp + 0x3C);
    sw(fp, sp + 0x38);
    sw(s7, sp + 0x34);
    sw(s6, sp + 0x30);
    sw(s5, sp + 0x2C);
    sw(s4, sp + 0x28);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(a0, sp + 0x10);
    Is_Module_Loaded();
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80041C54;
    }
    a2 = lw(sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    if (a2 != v0) goto loc_80041B28;
    a0 = s0;
    start_record_music_mute();
loc_80041B28:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s7 = lbu(v0 + 0x4);
    v1 = lw(v0 + 0xC);
    s4 = lw(v0 + 0x20);
    s6 = lbu(v1 + 0xB);
    v0 = -1;                                            // Result = FFFFFFFF
    if (s7 == 0) goto loc_80041C34;
    s6--;
    if (s6 == v0) goto loc_80041C34;
    fp = -1;                                            // Result = FFFFFFFF
    s5 = s4 + 0xC;
loc_80041B60:
    v0 = lw(s4);
    v0 &= 1;
    if (v0 == 0) goto loc_80041C24;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s3 = lbu(s5 - 0x8);
    s1 = lbu(v0 + 0x1C);
    s2 = lw(s5);
    s1--;
    if (s1 == fp) goto loc_80041C18;
loc_80041B94:
    a0 = lbu(s2);
    v0 = 0xFF;                                          // Result = 000000FF
    {
        const bool bJump = (a0 == v0)
        v0 = a0 << 2;
        if (bJump) goto loc_80041C0C;
    }
    v0 += a0;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 <<= 4;
    v1 = lw(v1 + 0x28);
    a2 = lw(sp + 0x10);
    s0 = v0 + v1;
    v0 = 1;                                             // Result = 00000001
    s3--;
    if (a2 != v0) goto loc_80041BF8;
    v0 = lbu(s0 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    v0 <<= 2;
    v0 += a2;
    v0 = lw(v0);
    v0 = lw(v0 + 0x18);
    a0 = s0;
    pcall(v0);
loc_80041BF8:
    a0 = s0;
    a1 = s4;
    trackstop();
    if (s3 == 0) goto loc_80041C18;
loc_80041C0C:
    s1--;
    s2++;
    if (s1 != fp) goto loc_80041B94;
loc_80041C18:
    s7--;
    if (s7 == 0) goto loc_80041C34;
loc_80041C24:
    s5 += 0x18;
    s6--;
    s4 += 0x18;
    if (s6 != fp) goto loc_80041B60;
loc_80041C34:
    a2 = lw(sp + 0x10);
    s0 = 1;                                             // Result = 00000001
    if (a2 != s0) goto loc_80041C4C;
    end_record_music_mute();
loc_80041C4C:
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
loc_80041C54:
    ra = lw(sp + 0x3C);
    fp = lw(sp + 0x38);
    s7 = lw(sp + 0x34);
    s6 = lw(sp + 0x30);
    s5 = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x40;
    return;
}

void queue_wess_seq_restartall() noexcept {
loc_80041C88:
    sp -= 0x58;
    sw(s5, sp + 0x44);
    s5 = a0;
    sw(ra, sp + 0x54);
    sw(fp, sp + 0x50);
    sw(s7, sp + 0x4C);
    sw(s6, sp + 0x48);
    sw(s4, sp + 0x40);
    sw(s3, sp + 0x3C);
    sw(s2, sp + 0x38);
    sw(s1, sp + 0x34);
    sw(s0, sp + 0x30);
    Is_Module_Loaded();
    if (v0 == 0) goto loc_80041E44;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    t1 = lbu(v0 + 0x4);
    sw(t1, sp + 0x18);
    v1 = lw(v0 + 0xC);
    fp = lw(v0 + 0x20);
    t0 = lbu(v1 + 0xB);
    v0 = -1;                                            // Result = FFFFFFFF
    if (t1 == 0) goto loc_80041E30;
    t0--;
    if (t0 == v0) goto loc_80041E30;
    s7 = fp + 2;
loc_80041D04:
    v0 = lw(fp);
    v0 &= 1;
    t1 = -1;                                            // Result = FFFFFFFF
    if (v0 == 0) goto loc_80041E1C;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s6 = lbu(s7 + 0x2);
    s2 = lbu(v0 + 0x1C);
    s4 = lw(s7 + 0xA);
    s2--;
    if (s2 == t1) goto loc_80041E08;
loc_80041D38:
    a0 = lbu(s4);
    v0 = 0xFF;                                          // Result = 000000FF
    a1 = fp;
    if (a0 == v0) goto loc_80041DF8;
    v0 = a0 << 2;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 += a0;
    v1 = lw(v1 + 0x28);
    v0 <<= 4;
    sw(t0, sp + 0x28);
    s3 = v0 + v1;
    a0 = s3;
    trackstart();
    t0 = lw(sp + 0x28);
    if (s5 == 0) goto loc_80041DEC;
    v0 = lw(s5);
    s1 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80041DEC;
    s0 = s5;
loc_80041D90:
    v1 = lbu(s4);
    v0 = lh(s0 + 0x6);
    s1++;
    if (v1 != v0) goto loc_80041DD8;
    v1 = lh(s7);
    v0 = lh(s0 + 0x4);
    a0 = s3;
    if (v1 != v0) goto loc_80041DD8;
    v0 = lbu(s0 + 0x9);
    a3 = lbu(s0 + 0x8);
    sw(v0, sp + 0x10);
    a1 = lw(s0 + 0xC);
    a2 = lw(s0 + 0x10);
    sw(t0, sp + 0x28);
    PSX_voicenote();
    t0 = lw(sp + 0x28);
loc_80041DD8:
    v0 = lw(s5);
    v0 = (i32(s1) < i32(v0));
    s0 += 0x10;
    if (v0 != 0) goto loc_80041D90;
loc_80041DEC:
    s6--;
    if (s6 == 0) goto loc_80041E08;
loc_80041DF8:
    s2--;
    t1 = -1;                                            // Result = FFFFFFFF
    s4++;
    if (s2 != t1) goto loc_80041D38;
loc_80041E08:
    t1 = lw(sp + 0x18);
    t1--;
    sw(t1, sp + 0x18);
    if (t1 == 0) goto loc_80041E30;
loc_80041E1C:
    s7 += 0x18;
    t0--;
    t1 = -1;                                            // Result = FFFFFFFF
    fp += 0x18;
    if (t0 != t1) goto loc_80041D04;
loc_80041E30:
    v0 = 1;                                             // Result = 00000001
    if (s5 == 0) goto loc_80041E3C;
    sw(0, s5);
loc_80041E3C:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
loc_80041E44:
    ra = lw(sp + 0x54);
    fp = lw(sp + 0x50);
    s7 = lw(sp + 0x4C);
    s6 = lw(sp + 0x48);
    s5 = lw(sp + 0x44);
    s4 = lw(sp + 0x40);
    s3 = lw(sp + 0x3C);
    s2 = lw(sp + 0x38);
    s1 = lw(sp + 0x34);
    s0 = lw(sp + 0x30);
    sp += 0x58;
    return;
}

void zeroset() noexcept {
loc_80041E78:
    sp -= 8;
    v0 = a1 - 1;
    if (a1 == 0) goto loc_80041E98;
    v1 = -1;                                            // Result = FFFFFFFF
loc_80041E88:
    sb(0, a0);
    v0--;
    a0++;
    if (v0 != v1) goto loc_80041E88;
loc_80041E98:
    sp += 8;
    return;
}

void wess_install_error_handler() noexcept {
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x5918);                                // Store to: gpWess_Error_func (80075918)
    at = 0x80070000;                                    // Result = 80070000
    sw(a1, at + 0x591C);                                // Store to: gpWess_Error_module (8007591C)
    return;
}

void wess_get_master_status() noexcept {
loc_80041EBC:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    return;
}

void Is_System_Active() noexcept {
loc_80041ECC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58F4);                               // Load from: gbWess_sysinit (800758F4)
    v0 = (v0 > 0);
    return;
}

void Is_Module_Loaded() noexcept {
loc_80041EDC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58F8);                               // Load from: gbWess_module_loaded (800758F8)
    v0 = (v0 > 0);
    return;
}

void Is_Seq_Num_Valid() noexcept {
loc_80041EEC:
    v0 = 0;                                             // Result = 00000000
    if (i32(a0) < 0) goto loc_80041F40;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5900);                               // Load from: gWess_max_seq_num (80075900)
    v0 = (i32(a0) < i32(v0));
    {
        const bool bJump = (v0 != 0)
        v0 = a0 << 2;
        if (bJump) goto loc_80041F14;
    }
    v0 = 0;                                             // Result = 00000000
    goto loc_80041F40;
loc_80041F14:
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v1 = lw(v1 + 0xC);
    v0 += a0;
    v1 = lw(v1 + 0x10);
    v0 <<= 2;
    v0 += v1;
    v0 = lw(v0 + 0x4);
    v0 = (v0 > 0);
loc_80041F40:
    return;
}

void Register_Early_Exit() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58FC);                               // Load from: gbWess_early_exit (800758FC)
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80041F64;
    }
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x58FC);                                // Store to: gbWess_early_exit (800758FC)
loc_80041F64:
    return;
}

void wess_install_handler() noexcept {
loc_80041F6C:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    init_WessTimer();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_restore_handler() noexcept {
loc_80041F8C:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    exit_WessTimer();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_init() noexcept {
loc_80041FAC:
    sp -= 0x18;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58F4);                               // Load from: gbWess_sysinit (800758F4)
    v1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x10);
    if (v0 != 0) goto loc_80041FFC;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x594C);                               // Load from: gbWess_WessTimerActive (8007594C)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    if (v0 != 0) goto loc_80041FE4;
    wess_install_handler();
loc_80041FE4:
    wess_low_level_init();
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x58F4);                                // Store to: gbWess_sysinit (800758F4)
    v1 = 1;                                             // Result = 00000001
loc_80041FFC:
    v0 = v1;
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_exit() noexcept {
    sp -= 0x18;
    sw(s0, sp + 0x10);
    sw(ra, sp + 0x14);
    s0 = a0;
    Is_System_Active();
    if (v0 == 0) goto loc_80042088;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58F4);                               // Load from: gbWess_sysinit (800758F4)
    if (v0 == 0) goto loc_80042088;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58F8);                               // Load from: gbWess_module_loaded (800758F8)
    if (v0 == 0) goto loc_8004205C;
    wess_unload_module();
loc_8004205C:
    wess_low_level_exit();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x594C);                               // Load from: gbWess_WessTimerActive (8007594C)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x58F4);                                 // Store to: gbWess_sysinit (800758F4)
    v0 |= s0;
    if (v0 == 0) goto loc_80042088;
    wess_restore_handler();
loc_80042088:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_get_wmd_start() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x590C);                               // Load from: gpWess_wmd_mem (8007590C)
    return;
}

void wess_get_wmd_end() noexcept {
loc_800420AC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5910);                               // Load from: gpWess_wmd_end (80075910)
    return;
}

void free_mem_if_mine() noexcept {
loc_800420BC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5908);                               // Load from: gbWess_wmd_mem_is_mine (80075908)
    sp -= 0x18;
    sw(ra, sp + 0x10);
    if (v0 == 0) goto loc_800420FC;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x590C);                               // Load from: gpWess_wmd_mem (8007590C)
    if (a0 == 0) goto loc_800420F4;
    wess_free();
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x590C);                                 // Store to: gpWess_wmd_mem (8007590C)
loc_800420F4:
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5908);                                 // Store to: gbWess_wmd_mem_is_mine (80075908)
loc_800420FC:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_unload_module() noexcept {
loc_8004210C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58F8);                               // Load from: gbWess_module_loaded (800758F8)
    sp -= 0x30;
    sw(ra, sp + 0x28);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    if (v0 == 0) goto loc_800421F8;
    s0 = 0;                                             // Result = 00000000
    wess_seq_stopall();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5920);                               // Load from: gWess_CmdFuncArr[0] (80075920)
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(v0 + 0x4);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    pcall(v0);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s2 = lbu(v0 + 0x8);
    if (s2 == 0) goto loc_800421E8;
    s3 = 0x80070000;                                    // Result = 80070000
    s3 += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    s1 = 0;                                             // Result = 00000000
loc_80042184:
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(a0 + 0x18);
    v1 = s1 + v0;
    v0 = lw(v1 + 0x50);
    v0 &= 7;
    s1 += 0x54;
    if (v0 == 0) goto loc_800421D8;
    v0 = lw(v1 + 0x4C);
    v0 <<= 2;
    v0 += s3;
    v0 = lw(v0);
    v0 = lw(v0 + 0x4);
    pcall(v0);
loc_800421D8:
    s0++;
    v0 = (i32(s0) < i32(s2));
    if (v0 != 0) goto loc_80042184;
loc_800421E8:
    free_mem_if_mine();
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x58F8);                                 // Store to: gbWess_module_loaded (800758F8)
loc_800421F8:
    ra = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x30;
    return;
}

void wess_memcpy() noexcept {
loc_80042218:
    sp -= 8;
    v1 = a2 - 1;
    if (a2 == 0) goto loc_80042240;
    a2 = -1;                                            // Result = FFFFFFFF
loc_80042228:
    v0 = lbu(a1);
    a1++;
    v1--;
    sb(v0, a0);
    a0++;
    if (v1 != a2) goto loc_80042228;
loc_80042240:
    sp += 8;
    return;
}

void conditional_read() noexcept {
loc_8004224C:
    sp -= 0x20;
    sw(s1, sp + 0x14);
    s1 = a1;
    sw(s0, sp + 0x10);
    s0 = a2;
    sw(ra, sp + 0x18);
    if (a0 == 0) goto loc_800422B8;
    a0 = lw(s1);
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    wess_memcpy();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    v0 += s0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x58E8);                                // Store to: gpWess_tmp_fp_wmd_file_1 (800758E8)
    v0 = lw(s1);
    v0 += s0;
    v1 = v0 & 1;
    v1 += v0;
    v0 = v1 & 2;
    v0 += v1;
    sw(v0, s1);
    goto loc_800422D0;
loc_800422B8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    v0 += s0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x58E8);                                // Store to: gpWess_tmp_fp_wmd_file_1 (800758E8)
loc_800422D0:
    v0 = 1;                                             // Result = 00000001
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void wess_load_module() noexcept {
loc_800422EC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58F8);                               // Load from: gbWess_module_loaded (800758F8)
    sp -= 0x80;
    sw(s2, sp + 0x60);
    s2 = a0;
    sw(s1, sp + 0x5C);
    s1 = a1;
    sw(s0, sp + 0x58);
    s0 = a2;
    sw(s3, sp + 0x64);
    sw(ra, sp + 0x7C);
    sw(fp, sp + 0x78);
    sw(s7, sp + 0x74);
    sw(s6, sp + 0x70);
    sw(s5, sp + 0x6C);
    sw(s4, sp + 0x68);
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x5904);                                // Store to: gWess_mem_limit (80075904)
    s3 = a3;
    if (v0 == 0) goto loc_80042344;
    wess_unload_module();
loc_80042344:
    a0 = s3;
    get_num_Wess_Sound_Drivers();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x58E4);                                // Store to: gWess_num_sd (800758E4)
    v0 = 1;                                             // Result = 00000001
    if (s1 != 0) goto loc_8004238C;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5908);                                // Store to: gbWess_wmd_mem_is_mine (80075908)
    a0 = s0;
    wess_malloc();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x590C);                                // Store to: gpWess_wmd_mem (8007590C)
    if (v0 != 0) goto loc_8004239C;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58F8);                               // Load from: gbWess_module_loaded (800758F8)
    goto loc_80043090;
loc_8004238C:
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5908);                                 // Store to: gbWess_wmd_mem_is_mine (80075908)
    at = 0x80070000;                                    // Result = 80070000
    sw(s1, at + 0x590C);                                // Store to: gpWess_wmd_mem (8007590C)
loc_8004239C:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x590C);                               // Load from: gpWess_wmd_mem (8007590C)
    a1 = s0;
    at = 0x80070000;                                    // Result = 80070000
    sw(a1, at + 0x5914);                                // Store to: gWess_wmd_size (80075914)
    zeroset();
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5900);                                 // Store to: gWess_max_seq_num (80075900)
    Is_System_Active();
    if (v0 == 0) goto loc_800423D8;
    t3 = 4;                                             // Result = 00000004
    if (s2 != 0) goto loc_800423F0;
loc_800423D8:
    free_mem_if_mine();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58F8);                               // Load from: gbWess_module_loaded (800758F8)
    goto loc_80043090;
loc_800423F0:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x590C);                               // Load from: gpWess_wmd_mem (8007590C)
    a3 = 0x80070000;                                    // Result = 80070000
    a3 = lw(a3 + 0x58F0);                               // Load from: gpWess_fp_wmd_file (800758F0)
    a1 = s2;
    sb(t3, sp + 0x18);
    sb(0, sp + 0x20);
    v1 = v0 + 0x38;
    sw(v1, v0 + 0xC);
    a0 = lw(v0 + 0xC);
    a2 = 0x10;                                          // Result = 00000010
    at = 0x80070000;                                    // Result = 80070000
    sw(a1, at + 0x58EC);                                // Store to: gpWess_tmp_fp_wmd_file_2 (800758EC)
    at = 0x80070000;                                    // Result = 80070000
    sw(a1, at + 0x58E8);                                // Store to: gpWess_tmp_fp_wmd_file_1 (800758E8)
    sw(v0, sp + 0x10);
    sw(v1, sp + 0x10);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 += 0x5954;                                       // Result = gWess_Millicount (80075954)
    at = 0x800B0000;                                    // Result = 800B0000
    sw(v0, at - 0x78A8);                                // Store to: gpWess_pm_stat (800A8758)
    sw(a3, v0 + 0x34);
    sw(v1, v0);
    v0 += 0x4C;
    sw(v0, sp + 0x10);
    wess_memcpy();
    a1 = 0x800B0000;                                    // Result = 800B0000
    a1 = lw(a1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    sb(0, sp + 0x28);
    a2 = lw(a1 + 0xC);
    v1 = 0x80010000;                                    // Result = 80010000
    v1 = lw(v1 + 0x1760);                               // Load from: STR_SPSX[0] (80011760)
    a0 = lw(a2);
    v0 += 0x10;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x58E8);                                // Store to: gpWess_tmp_fp_wmd_file_1 (800758E8)
    v0 = 1;                                             // Result = 00000001
    if (a0 != v1) goto loc_800424A0;
    v1 = lw(a2 + 0x4);
    if (v1 == v0) goto loc_800424B0;
loc_800424A0:
    free_mem_if_mine();
loc_800424A8:
    v0 = 0;                                             // Result = 00000000
    goto loc_80043090;
loc_800424B0:
    v1 = lw(sp + 0x10);
    v0 = lw(a1 + 0xC);
    sw(v1, a1 + 0x20);
    a0 = lbu(v0 + 0xB);
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    a0 = lw(a1 + 0xC);
    v1 += v0;
    sw(v1, sp + 0x10);
    sw(v1, a1 + 0x28);
    a0 = lbu(a0 + 0xC);
    v0 = a0 << 2;
    v0 += a0;
    v0 <<= 4;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lbu(a0 + 0x58E4);                              // Load from: gWess_num_sd (800758E4)
    v1 += v0;
    sw(v1, sp + 0x10);
    sb(a0, a1 + 0x8);
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(sp + 0x10);
    v1 = lbu(a0 + 0x8);
    sw(v0, a0 + 0x14);
    v0 += v1;
    v1 = v0 & 1;
    v0 += v1;
    v1 = v0 & 2;
    v0 += v1;
    sw(v0, sp + 0x10);
    v0 = -1;                                            // Result = FFFFFFFF
    v1 = lbu(a0 + 0x8);
    a1 = lw(a0 + 0x14);
    v1--;
    a0 = 0x80;                                          // Result = 00000080
    if (v1 == v0) goto loc_8004255C;
loc_8004254C:
    sb(a0, a1);
    v1--;
    a1++;
    if (v1 != v0) goto loc_8004254C;
loc_8004255C:
    a2 = 0x800B0000;                                    // Result = 800B0000
    a2 = lw(a2 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a0 = lw(sp + 0x10);
    v1 = lbu(a2 + 0x8);
    sw(a0, a2 + 0x18);
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 2;
    v0 += v1;
    v0 <<= 2;
    a0 += v0;
    sw(a0, sp + 0x10);
    if (s3 == 0) goto loc_80042708;
    a1 = lbu(a2 + 0x8);
    v0 = -1;                                            // Result = FFFFFFFF
    a1--;
    {
        const bool bJump = (a1 == v0)
        v0 = a1 << 2;
        if (bJump) goto loc_80042708;
    }
    t2 = a2;
    t1 = v0 + s3;
    v0 += a1;
    v0 <<= 2;
    v0 += a1;
    t0 = v0 << 2;
loc_800425BC:
    v0 = lw(t1);
    v0 = lw(v0);
    if (v0 == 0) goto loc_800426F4;
    a3 = 0;                                             // Result = 00000000
loc_800425D8:
    v0 = lw(t2 + 0x18);
    v1 = lw(t1);
    v0 += t0;
    v1 += a3;
    v1 = lw(v1);
    v0 += a3;
    sw(v1, v0 + 0x24);
    v0 = lw(t2 + 0x18);
    v1 = lw(t1);
    v0 += t0;
    v1 += a3;
    v1 = lw(v1 + 0x4);
    v0 += a3;
    sw(v1, v0 + 0x28);
    v0 = lw(t2 + 0x18);
    a2 = t0 + v0;
    a0 = a3 + a2;
    v1 = lw(a0 + 0x24);
    v0 = 1;                                             // Result = 00000001
    {
        const bool bJump = (v1 != v0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_8004263C;
    }
    v0 = lw(a0 + 0x28);
    sw(v0, a2 + 0x4C);
    goto loc_800426D0;
loc_8004263C:
    if (v1 != v0) goto loc_80042664;
    v1 = -2;                                            // Result = FFFFFFFE
    v0 = lw(a2 + 0x50);
    a0 = lw(a0 + 0x28);
    v1 &= v0;
    v0 &= 1;
    v0 |= a0;
    v0 &= 1;
    goto loc_800426C8;
loc_80042664:
    v0 = 3;                                             // Result = 00000003
    if (v1 != v0) goto loc_80042698;
    v1 = -3;                                            // Result = FFFFFFFD
    v0 = lw(a2 + 0x50);
    a0 = lw(a0 + 0x28);
    v1 &= v0;
    v0 >>= 1;
    v0 &= 1;
    v0 |= a0;
    v0 &= 1;
    v0 <<= 1;
    goto loc_800426C8;
loc_80042698:
    v0 = 4;                                             // Result = 00000004
    {
        const bool bJump = (v1 != v0)
        v0 = a1 << 2;
        if (bJump) goto loc_800426D4;
    }
    v1 = -5;                                            // Result = FFFFFFFB
    v0 = lw(a2 + 0x50);
    a0 = lw(a0 + 0x28);
    v1 &= v0;
    v0 >>= 2;
    v0 &= 1;
    v0 |= a0;
    v0 &= 1;
    v0 <<= 2;
loc_800426C8:
    v1 |= v0;
    sw(v1, a2 + 0x50);
loc_800426D0:
    v0 = a1 << 2;
loc_800426D4:
    v0 += s3;
    v0 = lw(v0);
    a3 += 8;
    v0 += a3;
    v0 = lw(v0);
    if (v0 != 0) goto loc_800425D8;
loc_800426F4:
    t1 -= 4;
    a1--;
    v0 = -1;                                            // Result = FFFFFFFF
    t0 -= 0x54;
    if (a1 != v0) goto loc_800425BC;
loc_80042708:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    sb(0, v0 + 0x7);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(v0 + 0xC);
    s1 = lbu(v0 + 0xA);
    v0 = -1;                                            // Result = FFFFFFFF
    s1--;
    if (s1 == v0) goto loc_80042934;
    s2 = -1;                                            // Result = FFFFFFFF
    s0 = 0x80080000;                                    // Result = 80080000
    s0 -= 0x1038;                                       // Result = 8007EFC8
    s3 = s0 - 4;                                        // Result = 8007EFC4
loc_80042750:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0x103C;                                       // Result = 8007EFC4
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    a2 = 0x1C;                                          // Result = 0000001C
    wess_memcpy();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 += 0x1C;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x58E8);                                // Store to: gpWess_tmp_fp_wmd_file_1 (800758E8)
    a1 = lbu(v1 + 0x8);
    a1--;
    v0 = a1 << 2;
    if (a1 == s2) goto loc_80042928;
    v0 += a1;
    v0 <<= 2;
    v0 += a1;
    a3 = v0 << 2;
loc_800427A8:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(v0 + 0x18);
    v1 = lbu(s0);                                       // Load from: 8007EFC8
    a2 = a3 + v0;
    v0 = lw(a2 + 0x4C);
    a1--;
    if (v1 != v0) goto loc_80042920;
    v0 = lw(s0 - 0x4);                                  // Load from: 8007EFC4
    v1 = lw(s0);                                        // Load from: 8007EFC8
    a0 = lw(s0 + 0x4);                                  // Load from: 8007EFCC
    a1 = lw(s0 + 0x8);                                  // Load from: 8007EFD0
    sw(v0, a2);
    sw(v1, a2 + 0x4);
    sw(a0, a2 + 0x8);
    sw(a1, a2 + 0xC);
    v0 = lw(s0 + 0xC);                                  // Load from: 8007EFD4
    v1 = lw(s0 + 0x10);                                 // Load from: 8007EFD8
    a0 = lw(s0 + 0x14);                                 // Load from: 8007EFDC
    sw(v0, a2 + 0x10);
    sw(v1, a2 + 0x14);
    sw(a0, a2 + 0x18);
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v1 = lbu(s0 + 0x1);                                 // Load from: 8007EFC9
    v0 = lbu(a0 + 0x7);
    v0 += v1;
    sb(v0, a0 + 0x7);
    a1 = 0x800B0000;                                    // Result = 800B0000
    a1 = lw(a1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v1 = lw(sp + 0x10);
    v0 = lw(a1 + 0x18);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    v0 += a3;
    sw(v1, v0 + 0x1C);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x58EC);                               // Load from: gpWess_tmp_fp_wmd_file_2 (800758EC)
    v0 = lw(a1 + 0x18);
    s6 = a0 - v1;
    v0 += a3;
    sw(s6, v0 + 0x20);
    v1 = lh(s0 + 0x4);                                  // Load from: 8007EFCC
    v0 = lh(s0 + 0x6);                                  // Load from: 8007EFCE
    mult(v1, v0);
    a0 = lw(s0 - 0x4);                                  // Load from: 8007EFC4
    a1 = sp + 0x10;
    a2 = lo;
    a0 &= 1;
    conditional_read();
    a1 = sp + 0x10;
    if (v0 == 0) goto loc_800424A8;
    v0 = lh(s0 + 0x8);                                  // Load from: 8007EFD0
    v1 = lh(s0 + 0xA);                                  // Load from: 8007EFD2
    mult(v0, v1);
    a0 = lw(s0 - 0x4);                                  // Load from: 8007EFC4
    a2 = lo;
    a0 &= 2;
    conditional_read();
    a1 = sp + 0x10;
    if (v0 == 0) goto loc_800424A8;
    v0 = lh(s0 + 0xC);                                  // Load from: 8007EFD4
    v1 = lh(s0 + 0xE);                                  // Load from: 8007EFD6
    mult(v0, v1);
    a0 = lw(s0 - 0x4);                                  // Load from: 8007EFC4
    a2 = lo;
    a0 &= 4;
    conditional_read();
    a1 = sp + 0x10;
    if (v0 == 0) goto loc_800424A8;
    v0 = lh(s0 + 0x10);                                 // Load from: 8007EFD8
    v1 = lh(s0 + 0x12);                                 // Load from: 8007EFDA
    mult(v0, v1);
    a0 = lw(s0 - 0x4);                                  // Load from: 8007EFC4
    a2 = lo;
    a0 &= 8;
    conditional_read();
    a1 = sp + 0x10;
    if (v0 == 0) goto loc_800424A8;
    a0 = lw(s0 - 0x4);                                  // Load from: 8007EFC4
    a2 = lw(s3 + 0x18);                                 // Load from: 8007EFDC
    a0 &= 0x10;
    conditional_read();
    s1--;
    if (v0 != 0) goto loc_8004292C;
    v0 = 0;                                             // Result = 00000000
    goto loc_80043090;
loc_80042920:
    a3 -= 0x54;
    if (a1 != s2) goto loc_800427A8;
loc_80042928:
    s1--;
loc_8004292C:
    if (s1 != s2) goto loc_80042750;
loc_80042934:
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lbu(a0 + 0x7);
    v1 = v0 << 1;
    v1 += v0;
    v0 = lw(sp + 0x10);
    v1 <<= 3;
    v1 += v0;
    sw(v1, sp + 0x10);
    v1 = lbu(a0 + 0x8);
    sw(v0, a0 + 0x30);
    if (v1 == 0) goto loc_80042A78;
    t1 = v1;
    a3 = 0;                                             // Result = 00000000
    v0 = lw(a0 + 0x18);
    v1 = lbu(a0 + 0x7);
    a1 = lbu(v0 + 0x5);
    s2 = 0;                                             // Result = 00000000
    if (i32(v1) <= 0) goto loc_80042A78;
    t2 = -1;                                            // Result = FFFFFFFF
    a2 = 0;                                             // Result = 00000000
    t0 = 0;                                             // Result = 00000000
loc_80042998:
    if (t1 == 0) goto loc_80042A58;
    a1--;
    if (a1 == t2) goto loc_800429F4;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(v1 + 0x18);
    v1 = lw(v1 + 0x30);
    v0 += t0;
    v0 = lbu(v0 + 0x4);
    v1 += a2;
    sb(v0, v1 + 0x1);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(v0 + 0x30);
    v0 += a2;
    sb(a3, v0 + 0x2);
    a3++;                                               // Result = 00000001
    goto loc_80042A58;
loc_800429F4:
    t1--;
    t0 += 0x54;                                         // Result = 00000054
    if (t1 == 0) goto loc_80042A58;
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(a0 + 0x18);
    v1 = t0 + v0;
    a1 = lbu(v1 + 0x5);
    a1--;
    a3 = 0;                                             // Result = 00000000
    if (a1 == t2) goto loc_80042A58;
    v0 = lw(a0 + 0x30);
    v1 = lbu(v1 + 0x4);
    v0 += a2;
    sb(v1, v0 + 0x1);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(v0 + 0x30);
    a3 = 1;                                             // Result = 00000001
    v0 += a2;
    sb(0, v0 + 0x2);
loc_80042A58:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lbu(v0 + 0x7);
    s2++;
    v0 = (i32(s2) < i32(v0));
    a2 += 0x18;
    if (v0 != 0) goto loc_80042998;
loc_80042A78:
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a1 = lw(sp + 0x10);
    v0 = lw(a0 + 0xC);
    sw(a1, v0 + 0x10);
    v0 = lw(a0 + 0xC);
    v1 = lh(v0 + 0x8);
    s2 = 0;                                             // Result = 00000000
    v0 = v1 << 2;
    v0 += v1;
    v1 = lw(a0 + 0xC);
    v0 <<= 2;
    v1 = lh(v1 + 0x8);
    v0 += a1;
    sw(v0, sp + 0x10);
    if (i32(v1) <= 0) goto loc_80042DB0;
    s7 = -1;                                            // Result = FFFFFFFF
    fp = 0x80080000;                                    // Result = 80080000
    fp -= 0x1020;                                       // Result = 8007EFE0
    s4 = fp + 0x12;                                     // Result = 8007EFF2
    s5 = 0;                                             // Result = 00000000
loc_80042AD4:
    a2 = 4;                                             // Result = 00000004
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    v0 = lw(v0 + 0xC);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x58EC);                               // Load from: gpWess_tmp_fp_wmd_file_2 (800758EC)
    a0 = lw(v0 + 0x10);
    s6 = a1 - v1;
    a0 += s5;
    wess_memcpy();
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s3 = 0;                                             // Result = 00000000
    v0 = lw(v0 + 0xC);
    v1 = lw(v0 + 0x10);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    v1 += s5;
    s1 = lh(v1);
    v0 += 4;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x58E8);                                // Store to: gpWess_tmp_fp_wmd_file_1 (800758E8)
    s1--;
    s0 = 0;                                             // Result = 00000000
    if (s1 == s7) goto loc_80042D1C;
    a0 = fp;                                            // Result = 8007EFE0
loc_80042B48:
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    a2 = 0x18;                                          // Result = 00000018
    wess_memcpy();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    v1 = lbu(fp);                                       // Load from: 8007EFE0
    v0 += 0x18;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x58E8);                                // Store to: gpWess_tmp_fp_wmd_file_1 (800758E8)
    t0 = 0;                                             // Result = 00000000
    if (v1 == 0) goto loc_80042C60;
    v0 = 0x32;                                          // Result = 00000032
    if (v1 == v0) goto loc_80042C60;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a1 = lbu(v0 + 0x8);
    a1--;
    if (a1 == s7) goto loc_80042C78;
    t1 = v1;
    a3 = v0;
    v1 = lw(v0 + 0x18);
    v0 = a1 << 2;
    v0 += a1;
    v0 <<= 2;
    v0 += a1;
    a0 = v0 << 2;
    a2 = a0 + v1;
loc_80042BC8:
    v0 = lw(a2 + 0x4C);
    if (t1 != v0) goto loc_80042C68;
    v1 = lbu(fp + 0x4);                                 // Load from: 8007EFE4
    v0 = 3;                                             // Result = 00000003
    if (v1 == 0) goto loc_80042BF0;
    if (v1 != v0) goto loc_80042C04;
loc_80042BF0:
    v0 = lw(a2 + 0x50);
    v0 &= 1;
    if (v0 != 0) goto loc_80042C60;
loc_80042C04:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lbu(v1 - 0x101C);                              // Load from: 8007EFE4
    v0 = 1;                                             // Result = 00000001
    {
        const bool bJump = (v1 != v0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_80042C38;
    }
    v0 = lw(a3 + 0x18);
    v0 += a0;
    v0 = lw(v0 + 0x50);
    v0 &= 2;
    {
        const bool bJump = (v0 != 0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_80042C60;
    }
loc_80042C38:
    if (v1 != v0) goto loc_80042C68;
    v0 = lw(a3 + 0x18);
    v0 += a0;
    v0 = lw(v0 + 0x50);
    v0 &= 4;
    if (v0 == 0) goto loc_80042C68;
loc_80042C60:
    t0 = 1;                                             // Result = 00000001
    goto loc_80042C78;
loc_80042C68:
    a0 -= 0x54;
    a1--;
    a2 -= 0x54;
    if (a1 != s7) goto loc_80042BC8;
loc_80042C78:
    if (t0 == 0) goto loc_80042CEC;
    v0 = lh(s4);                                        // Load from: 8007EFF2
    v1 = lw(s4 + 0x2);                                  // Load from: 8007EFF4
    t3 = lbu(sp + 0x20);
    v0 <<= 2;
    v1 += 0x20;
    v0 += v1;
    s0 += v0;
    v0 = s0 & 1;
    s0 += v0;
    v1 = s0 & 2;
    v0 = lbu(s4 - 0x11);                                // Load from: 8007EFE1
    v0 = (t3 < v0);
    s0 += v1;
    if (v0 == 0) goto loc_80042CC8;
    t3 = lbu(s4 - 0x11);                                // Load from: 8007EFE1
    sb(t3, sp + 0x20);
loc_80042CC8:
    v0 = lbu(s4 - 0x6);                                 // Load from: 8007EFEC
    t3 = lbu(sp + 0x28);
    v0 = (t3 < v0);
    s3++;                                               // Result = 00000001
    if (v0 == 0) goto loc_80042CEC;
    t3 = lbu(s4 - 0x6);                                 // Load from: 8007EFEC
    sb(t3, sp + 0x28);
loc_80042CEC:
    s1--;
    v0 = lh(s4);                                        // Load from: 8007EFF2
    v1 = lw(s4 + 0x2);                                  // Load from: 8007EFF4
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x58E8);                               // Load from: gpWess_tmp_fp_wmd_file_1 (800758E8)
    v0 <<= 2;
    v0 += v1;
    v0 += a0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x58E8);                                // Store to: gpWess_tmp_fp_wmd_file_1 (800758E8)
    a0 = fp;                                            // Result = 8007EFE0
    if (s1 != s7) goto loc_80042B48;
loc_80042D1C:
    v0 = lbu(sp + 0x18);
    v0 = (i32(v0) < i32(s3));
    if (v0 == 0) goto loc_80042D34;
    sb(s3, sp + 0x18);
loc_80042D34:
    s2++;
    if (s3 != 0) goto loc_80042D40;
    s0 = 0x24;                                          // Result = 00000024
loc_80042D40:
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(v1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s5;
    sw(s3, v0 + 0x10);
    v0 = lw(v1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s5;
    sw(s0, v0 + 0xC);
    v0 = lw(v1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s5;
    sw(s6, v0 + 0x8);
    v0 = lw(v1 + 0xC);
    v0 = lh(v0 + 0x8);
    v0 = (i32(s2) < i32(v0));
    s5 += 0x14;
    if (v0 != 0) goto loc_80042AD4;
loc_80042DB0:
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a0 = lw(sp + 0x10);
    v0 = lw(v1 + 0xC);
    sw(a0, v1 + 0x10);
    v0 = lbu(v0 + 0xF);
    t3 = lbu(sp + 0x18);
    v0 <<= 3;
    v0 += a0;
    sw(v0, sp + 0x10);
    sb(t3, v1 + 0x1C);
    a2 = 0x800B0000;                                    // Result = 800B0000
    a2 = lw(a2 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(a2 + 0xC);
    v0 = lbu(v0 + 0xB);
    s2 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80042EE0;
    t0 = 0xFF;                                          // Result = 000000FF
    a3 = 0;                                             // Result = 00000000
loc_80042E08:
    v0 = lw(a2 + 0x20);
    v1 = lw(sp + 0x10);
    v0 += a3;
    sw(v1, v0 + 0x10);
    v0 = lw(a2 + 0xC);
    v0 = lbu(v0 + 0xD);
    v0 += v1;
    v1 = v0 & 1;
    v1 += v0;
    a0 = v1 & 2;
    v0 = lw(a2 + 0x20);
    a0 += v1;
    v0 += a3;
    sw(a0, v0 + 0x14);
    v0 = lw(a2 + 0xC);
    sw(a0, sp + 0x10);
    v0 = lbu(v0 + 0xE);
    s1 = lbu(sp + 0x18);
    v0 += a0;
    v1 = v0 & 1;
    v1 += v0;
    v0 = v1 & 2;
    v0 += v1;
    a1 = v0;
    a0 = s1 + a1;
    s1--;
    v1 = a0 & 1;
    v0 = lw(a2 + 0x20);
    v1 += a0;
    sw(a1, sp + 0x10);
    v0 += a3;
    sw(a1, v0 + 0xC);
    v0 = v1 & 2;
    v0 += v1;
    sw(v0, sp + 0x10);
    v0 = -1;                                            // Result = FFFFFFFF
    if (s1 == v0) goto loc_80042EB8;
loc_80042EA8:
    sb(t0, a1);
    s1--;
    a1++;
    if (s1 != v0) goto loc_80042EA8;
loc_80042EB8:
    a2 = 0x800B0000;                                    // Result = 800B0000
    a2 = lw(a2 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(a2 + 0xC);
    v0 = lbu(v0 + 0xB);
    s2++;
    v0 = (i32(s2) < i32(v0));
    a3 += 0x18;
    if (v0 != 0) goto loc_80042E08;
loc_80042EE0:
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    t3 = lbu(sp + 0x20);
    sb(t3, v0 + 0x2C);
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    t3 = lbu(sp + 0x28);
    sb(t3, v0 + 0x24);
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(a0 + 0xC);
    v0 = lbu(v0 + 0xC);
    s2 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80042F94;
    a2 = 0;                                             // Result = 00000000
loc_80042F30:
    v0 = lw(a0 + 0x28);
    v0 += a2;
    sb(s2, v0 + 0x1);
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(a0 + 0x28);
    a1 = lw(sp + 0x10);
    v0 += a2;
    sw(a1, v0 + 0x3C);
    v1 = lbu(a0 + 0x24);
    v0 = lw(a0 + 0x28);
    v1 <<= 2;
    v1 += a1;
    v0 += a2;
    sw(v1, v0 + 0x44);
    v0 = lw(a0 + 0xC);
    s2++;
    sw(v1, sp + 0x10);
    v0 = lbu(v0 + 0xC);
    v0 = (i32(s2) < i32(v0));
    a2 += 0x50;
    if (v0 != 0) goto loc_80042F30;
loc_80042F94:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5920);                               // Load from: gWess_CmdFuncArr[0] (80075920)
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(v0);
    s2 = 0;                                             // Result = 00000000
    pcall(v0);
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lbu(a0 + 0x8);
    {
        const bool bJump = (i32(v0) <= 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80043044;
    }
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    s0 = 0;                                             // Result = 00000000
loc_80042FDC:
    v0 = lw(a0 + 0x18);
    v1 = s0 + v0;
    v0 = lw(v1 + 0x50);
    v0 &= 7;
    s0 += 0x54;
    if (v0 == 0) goto loc_80043024;
    v0 = lw(v1 + 0x4C);
    v0 <<= 2;
    v0 += s1;
    v0 = lw(v0);
    v0 = lw(v0);
    pcall(v0);
loc_80043024:
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lbu(a0 + 0x8);
    s2++;
    v0 = (i32(s2) < i32(v0));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80042FDC;
    }
loc_80043044:
    a1 = lw(sp + 0x10);
    v1 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x58F8);                                // Store to: gbWess_module_loaded (800758F8)
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a0 = a1 & 1;
    a0 += a1;
    a1 = lw(v1 + 0xC);
    v1 = a0 & 2;
    a1 = lh(a1 + 0x8);
    v1 += a0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5910);                                // Store to: gpWess_wmd_end (80075910)
    sw(v1, sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(a1, at + 0x5900);                                // Store to: gWess_max_seq_num (80075900)
loc_80043090:
    ra = lw(sp + 0x7C);
    fp = lw(sp + 0x78);
    s7 = lw(sp + 0x74);
    s6 = lw(sp + 0x70);
    s5 = lw(sp + 0x6C);
    s4 = lw(sp + 0x68);
    s3 = lw(sp + 0x64);
    s2 = lw(sp + 0x60);
    s1 = lw(sp + 0x5C);
    s0 = lw(sp + 0x58);
    sp += 0x80;
    return;
}

void filltrackstat() noexcept {
loc_800430C4:
    sp -= 0x28;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(s2, sp + 0x18);
    s2 = a1;
    sw(ra, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s1, sp + 0x14);
    v0 = lw(s0);
    v1 = -0x11;                                         // Result = FFFFFFEF
    v0 |= 1;
    v0 &= v1;
    v1 = -0x21;                                         // Result = FFFFFFDF
    v0 &= v1;
    v1 = -0x41;                                         // Result = FFFFFFBF
    v0 &= v1;
    v1 = -0x81;                                         // Result = FFFFFF7F
    v0 &= v1;
    sw(v0, s0);
    v0 = lbu(s2);
    sb(v0, s0 + 0x3);
    v0 = lbu(s2 + 0x2);
    sb(v0, s0 + 0x8);
    v0 = lbu(s2 + 0x4);
    sb(0, s0 + 0x10);
    sb(v0, s0 + 0x13);
    v0 = lbu(s2 + 0x1);
    sb(v0, s0 + 0x11);
    v1 = lhu(s2 + 0xE);
    v0 = lw(s0 + 0x3C);
    sw(0, s0 + 0x20);
    sw(0, s0 + 0x24);
    sw(0, s0 + 0x28);
    sw(v0, s0 + 0x40);
    sh(v1, s0 + 0x14);
    v0 = lhu(s2 + 0x12);
    sh(v0, s0 + 0x18);
    v0 = lw(s2 + 0x14);
    sw(v0, s0 + 0x48);
    v0 = lbu(s2 + 0xD);
    s3 = a2;
    sb(v0, s0 + 0x12);
    if (s3 == 0) goto loc_80043194;
    v0 = lw(s3);
    s1 = v0;
    if (v0 != 0) goto loc_80043198;
loc_80043194:
    s1 = 0;                                             // Result = 00000000
loc_80043198:
    v0 = s1 & 1;
    if (v0 == 0) goto loc_800431B0;
    v0 = lbu(s3 + 0x4);
    sb(v0, s0 + 0xC);
    goto loc_800431BC;
loc_800431B0:
    v0 = lbu(s2 + 0xA);
    sb(v0, s0 + 0xC);
loc_800431BC:
    v0 = s1 & 2;
    if (v0 == 0) goto loc_800431D4;
    v0 = lbu(s3 + 0x5);
    sb(v0, s0 + 0xD);
    goto loc_800431E0;
loc_800431D4:
    v0 = lbu(s2 + 0xB);
    sb(v0, s0 + 0xD);
loc_800431E0:
    v0 = s1 & 4;
    if (v0 == 0) goto loc_800431F8;
    v0 = lhu(s3 + 0x6);
    sh(v0, s0 + 0xA);
    goto loc_80043204;
loc_800431F8:
    v0 = lhu(s2 + 0x6);
    sh(v0, s0 + 0xA);
loc_80043204:
    v0 = s1 & 8;                                        // Result = 00000000
    if (v0 == 0) goto loc_8004321C;
    v0 = lhu(s3 + 0x8);
    sh(v0, s0 + 0xE);
    goto loc_80043228;
loc_8004321C:
    v0 = lhu(s2 + 0x8);
    sh(v0, s0 + 0xE);
loc_80043228:
    v0 = s1 & 0x10;                                     // Result = 00000000
    if (v0 == 0) goto loc_8004325C;
    v0 = lbu(s0 + 0x12);
    v1 = lbu(s3 + 0xA);
    v0 = i32(v0) >> v1;
    v0 &= 1;
    if (v0 == 0) goto loc_8004325C;
    v0 = lw(s0);
    v0 |= 2;
    goto loc_80043268;
loc_8004325C:
    v0 = lw(s0);
    v1 = -3;                                            // Result = FFFFFFFD
    v0 &= v1;
loc_80043268:
    sw(v0, s0);
    v0 = s1 & 0x20;                                     // Result = 00000000
    if (v0 == 0) goto loc_80043284;
    v0 = lhu(s3 + 0xC);
    goto loc_80043288;
loc_80043284:
    v0 = lhu(s2 + 0x10);
loc_80043288:
    sh(v0, s0 + 0x16);
    GetIntsPerSec();
    v0 <<= 16;
    a1 = lh(s0 + 0x14);
    a2 = lh(s0 + 0x16);
    a0 = u32(i32(v0) >> 16);
    CalcPartsPerInt();
    sw(v0, s0 + 0x1C);
    v0 = s1 & 0x40;                                     // Result = 00000000
    v1 = -0x11;                                         // Result = FFFFFFEF
    if (v0 == 0) goto loc_800432D4;
    v0 = lw(s0 + 0x28);
    a0 = lw(s3 + 0x10);
    v1 = lw(s0);
    v0 += a0;
    v1 |= 0x10;
    sw(v0, s0 + 0x2C);
    sw(v1, s0);
    goto loc_800432E4;
loc_800432D4:
    v0 = lw(s0);
    v0 &= v1;
    sw(v0, s0);
loc_800432E4:
    v0 = s1 & 0x80;                                     // Result = 00000000
    v1 = -0x21;                                         // Result = FFFFFFDF
    if (v0 == 0) goto loc_800432FC;
    v0 = lw(s0);
    v0 |= 0x20;
    goto loc_80043308;
loc_800432FC:
    v0 = lw(s0);
    v0 &= v1;
loc_80043308:
    sw(v0, s0);
    v0 = s1 & 0x100;                                    // Result = 00000000
    if (v0 == 0) goto loc_80043324;
    v0 = lbu(s3 + 0xB);
    sb(v0, s0 + 0x9);
    goto loc_80043330;
loc_80043324:
    v0 = lbu(s2 + 0x5);
    sb(v0, s0 + 0x9);
loc_80043330:
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void assigntrackstat() noexcept {
loc_80043350:
    sp -= 0x20;
    sw(s1, sp + 0x14);
    s1 = a1;
    sw(ra, sp + 0x18);
    sw(s0, sp + 0x10);
    v0 = lw(s1 + 0x14);
    s0 = a0;
    sw(v0, s0 + 0x4C);
    v0 = lhu(s1 + 0x12);
    sh(v0, s0 + 0x1A);
    a0 = lw(s1 + 0x1C);
    a1 = s0 + 4;
    sw(a0, s0 + 0x30);
    Read_Vlq();
    sw(v0, s0 + 0x34);
    v0 = lw(s1 + 0x18);
    sw(v0, s0 + 0x38);
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void wess_seq_structrig() noexcept {
loc_800433B4:
    sp -= 0x58;
    sw(a0, sp + 0x10);
    sw(a1, sp + 0x18);
    a0 = lw(sp + 0x18);
    sw(ra, sp + 0x54);
    sw(fp, sp + 0x50);
    sw(s7, sp + 0x4C);
    sw(s6, sp + 0x48);
    sw(s5, sp + 0x44);
    sw(s4, sp + 0x40);
    sw(s3, sp + 0x3C);
    sw(s2, sp + 0x38);
    sw(s1, sp + 0x34);
    sw(s0, sp + 0x30);
    sw(a2, sp + 0x20);
    sw(a3, sp + 0x28);
    Is_Seq_Num_Valid();
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80043678;
    }
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(v1 + 0xC);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    s7 = lbu(v0 + 0xB);
    a0 = s7 & 0xFF;
    s4 = 0;                                             // Result = 00000000
    if (a0 == 0) goto loc_8004346C;
    a1 = lw(v1 + 0x20);
    v0 = s4 & 0xFF;                                     // Result = 00000000
loc_80043434:
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v1 += a1;
    v0 = lw(v1);
    v0 &= 1;
    if (v0 == 0) goto loc_8004346C;
    s4++;
    v0 = s4 & 0xFF;
    v0 = (v0 < a0);
    {
        const bool bJump = (v0 != 0)
        v0 = s4 & 0xFF;
        if (bJump) goto loc_80043434;
    }
loc_8004346C:
    a0 = s4 & 0xFF;
    s5 = 0;                                             // Result = 00000000
    if (a0 != s7) goto loc_8004348C;
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
loc_80043484:
    v0 = 0;                                             // Result = 00000000
    goto loc_80043678;
loc_8004348C:
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    t0 = lw(sp + 0x10);
    v0 = lw(v1 + 0xC);
    fp = lhu(t0);
    v1 = lw(v1 + 0x20);
    s7 = lbu(v0 + 0xC);
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 3;
    s2 = v0 + v1;
    s6 = lw(s2 + 0xC);
    s3 = 0;                                             // Result = 00000000
    if (s7 == 0) goto loc_800435C4;
    v1 = s3 & 0xFF;                                     // Result = 00000000
loc_800434C8:
    v0 = v1 << 2;
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 += v1;
    v1 = lw(a0 + 0x28);
    v0 <<= 4;
    s1 = v0 + v1;
    v0 = lw(s1);
    v0 &= 1;
    a0 = s1;
    if (v0 != 0) goto loc_800435B0;
    t0 = lw(sp + 0x10);
    s0 = s5 & 0xFF;                                     // Result = 00000000
    v0 = lw(t0 + 0x4);
    s0 <<= 5;                                           // Result = 00000000
    sb(s4, s1 + 0x2);
    a2 = lw(sp + 0x68);
    s0 += v0;
    a1 = s0;
    filltrackstat();
    a0 = s1;
    a1 = s0;
    assigntrackstat();
    t0 = lw(sp + 0x28);
    v0 = -5;                                            // Result = FFFFFFFB
    if (t0 == 0) goto loc_8004354C;
    v0 = lw(s1);
    v0 |= 0xC;
    sw(v0, s1);
    goto loc_80043574;
loc_8004354C:
    v1 = lw(s1);
    v1 &= v0;
    v0 = -9;                                            // Result = FFFFFFF7
    v1 &= v0;
    sw(v1, s1);
    v0 = lbu(s2 + 0x5);
    v0++;
    sb(v0, s2 + 0x5);
loc_80043574:
    s5++;                                               // Result = 00000001
    v0 = lbu(s2 + 0x4);
    v1 = fp - 1;
    v0++;
    sb(v0, s2 + 0x4);
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 = lw(a0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    fp = v1;
    v0 = lbu(a0 + 0x5);
    v1 <<= 16;
    v0++;
    sb(v0, a0 + 0x5);
    sb(s3, s6);
    s6++;
    if (v1 == 0) goto loc_800435C4;
loc_800435B0:
    s3++;
    v0 = s3 & 0xFF;
    v0 = (v0 < s7);
    v1 = s3 & 0xFF;
    if (v0 != 0) goto loc_800434C8;
loc_800435C4:
    v0 = s5 & 0xFF;
    if (v0 == 0) goto loc_8004365C;
    t0 = lhu(sp + 0x18);
    sh(t0, s2 + 0x2);
    t0 = lw(sp + 0x20);
    sw(t0, s2 + 0x8);
    t0 = lw(sp + 0x28);
    v1 = -3;                                            // Result = FFFFFFFD
    if (t0 == 0) goto loc_80043610;
    v0 = lw(s2);
    v0 |= 2;
    sw(v0, s2);
    sb(0, s2 + 0x1);
    goto loc_80043628;
loc_80043610:
    v0 = lw(s2);
    v0 &= v1;
    sw(v0, s2);
    v0 = 1;                                             // Result = 00000001
    sb(v0, s2 + 0x1);
loc_80043628:
    v0 = 0x80;                                          // Result = 00000080
    sb(v0, s2 + 0x6);
    v0 = 0x40;                                          // Result = 00000040
    sb(v0, s2 + 0x7);
    v0 = lw(s2);
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 |= 1;
    sw(v0, s2);
    v0 = lbu(v1 + 0x4);
    v0++;
    sb(v0, v1 + 0x4);
loc_8004365C:
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
    v0 = s5 & 0xFF;
    {
        const bool bJump = (v0 == 0)
        v0 = s4 & 0xFF;                                 // Result = 00000000
        if (bJump) goto loc_80043484;
    }
    v0++;                                               // Result = 00000001
loc_80043678:
    ra = lw(sp + 0x54);
    fp = lw(sp + 0x50);
    s7 = lw(sp + 0x4C);
    s6 = lw(sp + 0x48);
    s5 = lw(sp + 0x44);
    s4 = lw(sp + 0x40);
    s3 = lw(sp + 0x3C);
    s2 = lw(sp + 0x38);
    s1 = lw(sp + 0x34);
    s0 = lw(sp + 0x30);
    sp += 0x58;
    return;
}

void wess_seq_trigger() noexcept {
loc_800436AC:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    a1 = 0;                                             // Result = 00000000
    wess_seq_trigger_type();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_seq_trigger_special() noexcept {
    sp -= 0x20;
    v1 = a0;
    a0 = v1 << 2;
    a0 += v1;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a0 <<= 2;
    sw(ra, sp + 0x18);
    v0 = lw(v0 + 0xC);
    a2 = 0;                                             // Result = 00000000
    v0 = lw(v0 + 0x10);
    a3 = 0;                                             // Result = 00000000
    sw(a1, sp + 0x10);
    a1 = v1;
    a0 += v0;
    wess_seq_structrig();
    ra = lw(sp + 0x18);
    sp += 0x20;
    return;
}

void wess_seq_status() noexcept {
loc_8004371C:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    sw(ra, sp + 0x14);
    s0 = a0;
    Is_Seq_Num_Valid();
    a2 = 1;                                             // Result = 00000001
    if (v0 != 0) goto loc_80043748;
    v0 = 0;                                             // Result = 00000000
    goto loc_800437DC;
loc_80043740:
    a2 = 2;                                             // Result = 00000002
    goto loc_800437D8;
loc_80043748:
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 = lw(v1 + 0xC);
    a0 = lbu(v0 + 0xB);
    a1 = lw(v1 + 0x20);
    v0 = a0;
    v0 &= 0xFF;
    a0--;
    if (v0 == 0) goto loc_800437D8;
    a3 = 1;                                             // Result = 00000001
    v1 = a1 + 1;
loc_8004377C:
    v0 = lw(a1);
    v0 &= 1;
    if (v0 == 0) goto loc_800437C0;
    v0 = lh(v1 + 0x1);
    if (v0 != s0) goto loc_800437C0;
    v0 = lbu(v1);
    if (v0 == 0) goto loc_80043740;
    {
        const bool bJump = (v0 != a3)
        v0 = a2;                                        // Result = 00000001
        if (bJump) goto loc_800437DC;
    }
    a2 = 3;                                             // Result = 00000003
    goto loc_800437D8;
loc_800437C0:
    v1 += 0x18;
    a1 += 0x18;
    v0 = a0;
    v0 &= 0xFF;
    a0--;
    if (v0 != 0) goto loc_8004377C;
loc_800437D8:
    v0 = a2;
loc_800437DC:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_seq_stop() noexcept {
loc_800437F0:
    sp -= 0x38;
    sw(s7, sp + 0x2C);
    s7 = a0;
    sw(ra, sp + 0x34);
    sw(fp, sp + 0x30);
    sw(s6, sp + 0x28);
    sw(s5, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    Is_Seq_Num_Valid();
    if (v0 == 0) goto loc_80043948;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    s6 = lbu(v0 + 0x4);
    v1 = lw(v0 + 0xC);
    s5 = lw(v0 + 0x20);
    s4 = lbu(v1 + 0xB);
    v0 = s4;
    if (s6 == 0) goto loc_8004393C;
    v0 &= 0xFF;
    s4--;
    if (v0 == 0) goto loc_8004393C;
    fp = -1;                                            // Result = FFFFFFFF
    s3 = s5 + 0xC;
loc_80043868:
    v0 = lw(s5);
    v0 &= 1;
    if (v0 == 0) goto loc_80043924;
    v0 = lh(s3 - 0xA);
    if (v0 != s7) goto loc_80043914;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s2 = lbu(s3 - 0x8);
    s0 = lbu(v0 + 0x1C);
    s1 = lw(s3);
    s0--;
    if (s0 == fp) goto loc_80043914;
loc_800438AC:
    v1 = lbu(s1);
    a1 = 0xFF;                                          // Result = 000000FF
    a0 = v1 << 2;
    if (v1 == a1) goto loc_80043908;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a0 += v1;
    v0 = lw(v0 + 0x28);
    a0 <<= 4;
    a0 += v0;
    v0 = lbu(a0 + 0x3);
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    v0 <<= 2;
    v0 += a1;
    v0 = lw(v0);
    v0 = lw(v0 + 0x14);
    s2--;
    pcall(v0);
    if (s2 == 0) goto loc_80043914;
loc_80043908:
    s0--;
    s1++;
    if (s0 != fp) goto loc_800438AC;
loc_80043914:
    s6--;
    v0 = s6 & 0xFF;
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80043940;
    }
loc_80043924:
    s3 += 0x18;
    s5 += 0x18;
    v0 = s4;
    v0 &= 0xFF;
    s4--;
    if (v0 != 0) goto loc_80043868;
loc_8004393C:
    v0 = 1;                                             // Result = 00000001
loc_80043940:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
loc_80043948:
    ra = lw(sp + 0x34);
    fp = lw(sp + 0x30);
    s7 = lw(sp + 0x2C);
    s6 = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x38;
    return;
}

void wess_seq_stopall() noexcept {
loc_8004397C:
    sp -= 0x38;
    sw(ra, sp + 0x34);
    sw(fp, sp + 0x30);
    sw(s7, sp + 0x2C);
    sw(s6, sp + 0x28);
    sw(s5, sp + 0x24);
    sw(s4, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    Is_Module_Loaded();
    if (v0 == 0) goto loc_80043AC4;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    s6 = lbu(v0 + 0x4);
    v1 = lw(v0 + 0xC);
    s5 = lw(v0 + 0x20);
    s4 = lbu(v1 + 0xB);
    v0 = s4;
    if (s6 == 0) goto loc_80043AB8;
    v0 &= 0xFF;
    s4--;
    if (v0 == 0) goto loc_80043AB8;
    s7 = -1;                                            // Result = FFFFFFFF
    fp = 0x80070000;                                    // Result = 80070000
    fp += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    s3 = s5 + 0xC;
loc_800439F8:
    v0 = lw(s5);
    v0 &= 1;
    if (v0 == 0) goto loc_80043AA0;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s2 = lbu(s3 - 0x8);
    s0 = lbu(v0 + 0x1C);
    s1 = lw(s3);
    s0--;
    if (s0 == s7) goto loc_80043A90;
loc_80043A2C:
    v1 = lbu(s1);
    a1 = 0xFF;                                          // Result = 000000FF
    a0 = v1 << 2;
    if (v1 == a1) goto loc_80043A84;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a0 += v1;
    v0 = lw(v0 + 0x28);
    a0 <<= 4;
    a0 += v0;
    v0 = lbu(a0 + 0x3);
    v0 <<= 2;
    v0 += fp;
    v0 = lw(v0);
    v0 = lw(v0 + 0x14);
    s2--;
    pcall(v0);
    if (s2 == 0) goto loc_80043A90;
loc_80043A84:
    s0--;
    s1++;
    if (s0 != s7) goto loc_80043A2C;
loc_80043A90:
    s6--;
    v0 = s6 & 0xFF;
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80043ABC;
    }
loc_80043AA0:
    s3 += 0x18;
    s5 += 0x18;
    v0 = s4;
    v0 &= 0xFF;
    s4--;
    if (v0 != 0) goto loc_800439F8;
loc_80043AB8:
    v0 = 1;                                             // Result = 00000001
loc_80043ABC:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
loc_80043AC4:
    ra = lw(sp + 0x34);
    fp = lw(sp + 0x30);
    s7 = lw(sp + 0x2C);
    s6 = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x38;
    return;
}

void wess_low_level_init() noexcept {
loc_80043AF8:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxspu_init();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_low_level_exit() noexcept {
loc_80043B18:
    return;
}

void wess_malloc() noexcept {
loc_80043B20:
    v0 = 0;                                             // Result = 00000000
    return;
}

void wess_free() noexcept {
loc_80043B28:
    return;
}

void GetIntsPerSec() noexcept {
loc_80043B30:
    v0 = 0x78;                                          // Result = 00000078
    return;
}

void CalcPartsPerInt() noexcept {
loc_80043B38:
    a2 <<= 16;
    a0 <<= 16;
    a0 = u32(i32(a0) >> 16);
    v0 = a0 << 4;
    v0 -= a0;
    v1 = v0 << 1;
    a2 += v1;
    a2 += 0x1E;
    v0 <<= 2;
    divu(a2, v0);
    if (v0 != 0) goto loc_80043B6C;
    _break(0x1C00);
loc_80043B6C:
    a2 = lo;
    a1 <<= 16;
    a1 = u32(i32(a1) >> 16);
    mult(a2, a1);
    v0 = lo;
    return;
}

void WessInterruptHandler() noexcept {
    sp -= 0x18;
    a0 = 0x80000;                                       // Result = 00080000
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5950);                               // Load from: gWess_T2counter (80075950)
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5958);                               // Load from: 80075958
    a0 |= 0x5555;                                       // Result = 00085555
    sw(ra, sp + 0x10);
    v1 += a0;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5954);                               // Load from: gWess_Millicount (80075954)
    v0++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5950);                                // Store to: gWess_T2counter (80075950)
    v0 = v1 >> 16;
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5958);                                // Store to: 80075958
    v1 &= 0xFFFF;
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5958);                                // Store to: 80075958
    v0 += a0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5954);                                // Store to: gWess_Millicount (80075954)
    psxspu_fadeengine();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5948);                               // Load from: gbWess_SeqOn (80075948)
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80043C0C;
    }
    SeqEngine();
    v0 = 0;                                             // Result = 00000000
loc_80043C0C:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void init_WessTimer() noexcept {
loc_80043C1C:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    LIBAPI_EnterCriticalSection();
    a0 = 0xF2000000;                                    // Result = F2000000
    a0 |= 2;                                            // Result = F2000002
    a1 = 2;                                             // Result = 00000002
    a3 = 0x80040000;                                    // Result = 80040000
    a3 += 0x3B88;                                       // Result = WessInterruptHandler (80043B88)
    a2 = 0x1000;                                        // Result = 00001000
    LIBAPI_OpenEvent();
    a0 = v0;
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x595C);                                // Store to: gWess_EV2 (8007595C)
    LIBAPI_EnableEvent();
    a0 = 0xF2000000;                                    // Result = F2000000
    a0 |= 2;                                            // Result = F2000002
    a1 = 0x87A2;                                        // Result = 000087A2
    a2 = 0x1000;                                        // Result = 00001000
    LIBAPI_SetRCnt();
    a0 = 0xF2000000;                                    // Result = F2000000
    a0 |= 2;                                            // Result = F2000002
    LIBAPI_StartRCnt();
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x594C);                                // Store to: gbWess_WessTimerActive (8007594C)
    LIBAPI_ExitCriticalSection();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void exit_WessTimer() noexcept {
loc_80043CA8:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxspu_get_master_vol();
    a0 = v0;
    psxspu_set_master_vol();
    psxspu_get_cd_vol();
    a0 = v0;
    psxspu_set_cd_vol();
    LIBAPI_EnterCriticalSection();
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x595C);                               // Load from: gWess_EV2 (8007595C)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x594C);                                 // Store to: gbWess_WessTimerActive (8007594C)
    LIBAPI_DisableEvent();
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x595C);                               // Load from: gWess_EV2 (8007595C)
    LIBAPI_CloseEvent();
    LIBAPI_ExitCriticalSection();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void Wess_init_for_LoadFileData() noexcept {
    v0 = 1;                                             // Result = 00000001
    return;
}

void module_open() noexcept {
loc_80043D20:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxcd_open();
    a3 = 0x80080000;                                    // Result = 80080000
    a3 -= 0x1004;                                       // Result = gWess_module_fileref[0] (8007EFFC)
    a2 = v0;
    t0 = a2 + 0x20;
loc_80043D40:
    v0 = lw(a2);
    v1 = lw(a2 + 0x4);
    a0 = lw(a2 + 0x8);
    a1 = lw(a2 + 0xC);
    sw(v0, a3);
    sw(v1, a3 + 0x4);
    sw(a0, a3 + 0x8);
    sw(a1, a3 + 0xC);
    a2 += 0x10;
    a3 += 0x10;
    if (a2 != t0) goto loc_80043D40;
    v0 = lw(a2);
    v1 = lw(a2 + 0x4);
    sw(v0, a3);
    sw(v1, a3 + 0x4);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 -= 0x1004;                                       // Result = gWess_module_fileref[0] (8007EFFC)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void module_read() noexcept {
loc_80043D94:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxcd_read();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void module_seek() noexcept {
loc_80043DB4:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxcd_seek();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void module_tell() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxcd_tell();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void module_close() noexcept {
loc_80043DF4:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxcd_close();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void get_num_Wess_Sound_Drivers() noexcept {
loc_80043E14:
    v0 = 1;                                             // Result = 00000001
    return;
}

void data_open() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxcd_open();
    a3 = 0x80080000;                                    // Result = 80080000
    a3 -= 0xFDC;                                        // Result = gWess_data_fileref[0] (8007F024)
    a2 = v0;
    t0 = a2 + 0x20;
loc_80043E3C:
    v0 = lw(a2);
    v1 = lw(a2 + 0x4);
    a0 = lw(a2 + 0x8);
    a1 = lw(a2 + 0xC);
    sw(v0, a3);
    sw(v1, a3 + 0x4);
    sw(a0, a3 + 0x8);
    sw(a1, a3 + 0xC);
    a2 += 0x10;
    a3 += 0x10;
    if (a2 != t0) goto loc_80043E3C;
    v0 = lw(a2);
    v1 = lw(a2 + 0x4);
    sw(v0, a3);
    sw(v1, a3 + 0x4);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 -= 0xFDC;                                        // Result = gWess_data_fileref[0] (8007F024)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void data_read_chunk() noexcept {
loc_80043E90:
    sp -= 0x20;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xFB4);                                // Load from: 8007F04C
    v1 = a0;
    sw(s1, sp + 0x14);
    s1 = a1;
    sw(s2, sp + 0x18);
    s2 = a2;
    sw(ra, sp + 0x1C);
    sw(s0, sp + 0x10);
    if (v0 == 0) goto loc_80043F00;
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x656C;                                       // Result = gWess_data_read_chunk1[0] (8009656C)
    a0 = s0;                                            // Result = gWess_data_read_chunk1[0] (8009656C)
    a2 = v1;
    psxcd_read();
    a0 = s2;
    LIBSPU_SpuSetTransferStartAddr();
    a0 = s0;                                            // Result = gWess_data_read_chunk1[0] (8009656C)
    a1 = s1;
    LIBSPU_SpuWrite();
    v0 = 1;                                             // Result = 00000001
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x1008);                                // Store to: 8007EFF8
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0xFB4);                                  // Store to: 8007F04C
    goto loc_80043F90;
loc_80043F00:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0x1008);                               // Load from: 8007EFF8
    a1 = s1;
    if (v0 == 0) goto loc_80043F54;
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x6D7C;                                       // Result = gWess_data_read_chunk2[0] (80096D7C)
    a0 = s0;                                            // Result = gWess_data_read_chunk2[0] (80096D7C)
    a2 = v1;
    psxcd_read();
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuIsTransferCompleted();
    a0 = s2;
    LIBSPU_SpuSetTransferStartAddr();
    a0 = s0;                                            // Result = gWess_data_read_chunk2[0] (80096D7C)
    a1 = s1;
    LIBSPU_SpuWrite();
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0x1008);                                 // Store to: 8007EFF8
    goto loc_80043F90;
loc_80043F54:
    s0 = 0x80090000;                                    // Result = 80090000
    s0 += 0x656C;                                       // Result = gWess_data_read_chunk1[0] (8009656C)
    a0 = s0;                                            // Result = gWess_data_read_chunk1[0] (8009656C)
    a2 = v1;
    psxcd_read();
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuIsTransferCompleted();
    a0 = s2;
    LIBSPU_SpuSetTransferStartAddr();
    a0 = s0;                                            // Result = gWess_data_read_chunk1[0] (8009656C)
    a1 = s1;
    LIBSPU_SpuWrite();
    v0 = 1;                                             // Result = 00000001
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0x1008);                                // Store to: 8007EFF8
loc_80043F90:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void data_read() noexcept {
    sp -= 0x28;
    sw(s2, sp + 0x18);
    s2 = a0;
    sw(s3, sp + 0x1C);
    s3 = a2;
    sw(s0, sp + 0x10);
    s0 = s3;
    sw(s1, sp + 0x14);
    s1 = a1;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x598C);                               // Load from: 8007598C
    a1 = a3;
    v0 -= s1;
    v0 = (v0 < s3);
    sw(ra, sp + 0x20);
    if (v0 == 0) goto loc_80043FF4;
    v0 = 0;                                             // Result = 00000000
    goto loc_80044058;
loc_80043FF4:
    a0 = s2;
    a2 = 0;                                             // Result = 00000000
    psxcd_seek();
    v0 = 1;                                             // Result = 00000001
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xFB4);                                 // Store to: 8007F04C
    v0 = (i32(s3) < 0x800);
    if (v0 != 0) goto loc_80044038;
loc_80044018:
    a0 = s2;
    a1 = 0x800;                                         // Result = 00000800
    a2 = s1;
    data_read_chunk();
    s0 -= 0x800;
    v0 = (i32(s0) < 0x800);
    s1 += 0x800;
    if (v0 == 0) goto loc_80044018;
loc_80044038:
    a0 = s2;
    if (s0 == 0) goto loc_8004404C;
    a1 = s0;
    a2 = s1;
    data_read_chunk();
loc_8004404C:
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuIsTransferCompleted();
    v0 = s3;
loc_80044058:
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void data_close() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxcd_close();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void updatetrackstat() noexcept {
loc_80044098:
    sp -= 0x30;
    sw(s0, sp + 0x18);
    s0 = a0;
    sw(s1, sp + 0x1C);
    s1 = a1;
    sw(ra, sp + 0x28);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    if (s1 == 0) goto loc_8004436C;
    v0 = lw(s1);
    s3 = v0;
    if (v0 == 0) goto loc_8004436C;
    a0 = s3 & 1;
    v1 = s3 & 2;
    if (a0 == 0) goto loc_800440E4;
    v0 = lbu(s1 + 0x4);
    sb(v0, s0 + 0xC);
loc_800440E4:
    v0 = s3 & 3;
    if (v1 == 0) goto loc_800440FC;
    v0 = lbu(s1 + 0x5);
    sb(v0, s0 + 0xD);
    v0 = s3 & 3;
loc_800440FC:
    if (v0 == 0) goto loc_80044164;
    v0 = lbu(s1 + 0x4);
    s2 = lw(s0 + 0x34);
    sb(v0, s0 + 0xC);
    v1 = lbu(s1 + 0x5);
    v0 = sp + 0x10;
    sw(v0, s0 + 0x34);
    v0 = 0xC;                                           // Result = 0000000C
    sb(v1, s0 + 0xD);
    sb(v0, sp + 0x10);
    v1 = lw(s0 + 0x34);
    v0 = lbu(s0 + 0xC);
    sb(v0, v1 + 0x1);
    v0 = lbu(s0 + 0x3);
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    at += v0;
    v0 = lw(at);
    v0 = lw(v0 + 0x30);
    goto loc_80044214;
loc_80044164:
    v0 = sp + 0x10;
    if (a0 == 0) goto loc_800441C0;
    s2 = lw(s0 + 0x34);
    v1 = lbu(s1 + 0x4);
    sw(v0, s0 + 0x34);
    v0 = 0xC;                                           // Result = 0000000C
    sb(v1, s0 + 0xC);
    sb(v0, sp + 0x10);
    v1 = lw(s0 + 0x34);
    v0 = lbu(s0 + 0xC);
    sb(v0, v1 + 0x1);
    v0 = lbu(s0 + 0x3);
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    at += v0;
    v0 = lw(at);
    v0 = lw(v0 + 0x30);
    goto loc_80044214;
loc_800441C0:
    if (v1 == 0) goto loc_80044224;
    s2 = lw(s0 + 0x34);
    v1 = lbu(s1 + 0x5);
    sw(v0, s0 + 0x34);
    v0 = 0xD;                                           // Result = 0000000D
    sb(v1, s0 + 0xD);
    sb(v0, sp + 0x10);
    v1 = lw(s0 + 0x34);
    v0 = lbu(s0 + 0xD);
    sb(v0, v1 + 0x1);
    v0 = lbu(s0 + 0x3);
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    at += v0;
    v0 = lw(at);
    v0 = lw(v0 + 0x34);
loc_80044214:
    a0 = s0;
    pcall(v0);
    sw(s2, s0 + 0x34);
loc_80044224:
    v0 = s3 & 4;
    {
        const bool bJump = (v0 == 0)
        v0 = s3 & 8;
        if (bJump) goto loc_80044240;
    }
    v0 = lhu(s1 + 0x6);
    sh(v0, s0 + 0xA);
    v0 = s3 & 8;
loc_80044240:
    {
        const bool bJump = (v0 == 0)
        v0 = sp + 0x10;
        if (bJump) goto loc_800442B4;
    }
    s2 = lw(s0 + 0x34);
    v1 = lhu(s1 + 0x8);
    sw(v0, s0 + 0x34);
    v0 = 9;                                             // Result = 00000009
    sh(v1, s0 + 0xE);
    sb(v0, sp + 0x10);
    v1 = lw(s0 + 0x34);
    v0 = lbu(s0 + 0xE);
    sb(v0, v1 + 0x1);
    v0 = lhu(s0 + 0xE);
    v1 = lw(s0 + 0x34);
    v0 >>= 8;
    sb(v0, v1 + 0x2);
    v0 = lbu(s0 + 0x3);
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    at += v0;
    v0 = lw(at);
    v0 = lw(v0 + 0x24);
    a0 = s0;
    pcall(v0);
    sw(s2, s0 + 0x34);
loc_800442B4:
    v0 = s3 & 0x10;
    {
        const bool bJump = (v0 == 0)
        v0 = s3 & 0x20;
        if (bJump) goto loc_800442FC;
    }
    v0 = lbu(s0 + 0x12);
    v1 = lbu(s1 + 0xA);
    v0 = i32(v0) >> v1;
    v0 &= 1;
    v1 = -3;                                            // Result = FFFFFFFD
    if (v0 == 0) goto loc_800442E8;
    v0 = lw(s0);
    v0 |= 2;
    goto loc_800442F4;
loc_800442E8:
    v0 = lw(s0);
    v0 &= v1;
loc_800442F4:
    sw(v0, s0);
    v0 = s3 & 0x20;
loc_800442FC:
    {
        const bool bJump = (v0 == 0)
        v0 = s3 & 0x40;
        if (bJump) goto loc_8004432C;
    }
    v0 = lhu(s1 + 0xC);
    sh(v0, s0 + 0x16);
    GetIntsPerSec();
    v0 <<= 16;
    a1 = lh(s0 + 0x14);
    a2 = lh(s0 + 0x16);
    a0 = u32(i32(v0) >> 16);
    CalcPartsPerInt();
    sw(v0, s0 + 0x1C);
    v0 = s3 & 0x40;
loc_8004432C:
    {
        const bool bJump = (v0 == 0)
        v0 = s3 & 0x80;
        if (bJump) goto loc_80044354;
    }
    v0 = lw(s0 + 0x28);
    a0 = lw(s1 + 0x10);
    v1 = lw(s0);
    v0 += a0;
    v1 |= 0x10;
    sw(v0, s0 + 0x2C);
    sw(v1, s0);
    v0 = s3 & 0x80;
loc_80044354:
    if (v0 == 0) goto loc_8004436C;
    v0 = lw(s0);
    v0 |= 0x20;
    sw(v0, s0);
loc_8004436C:
    ra = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x30;
    return;
}

void wess_seq_trigger_type() noexcept {
loc_8004438C:
    sp -= 0x20;
    v1 = a0;
    a2 = a1;
    a0 = v1 << 2;
    a0 += v1;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a0 <<= 2;
    sw(ra, sp + 0x18);
    v0 = lw(v0 + 0xC);
    a1 = v1;
    v0 = lw(v0 + 0x10);
    a3 = 0;                                             // Result = 00000000
    sw(0, sp + 0x10);
    a0 += v0;
    wess_seq_structrig();
    ra = lw(sp + 0x18);
    sp += 0x20;
    return;
}

void wess_seq_trigger_type_special() noexcept {
loc_800443DC:
    sp -= 0x20;
    v1 = a0;
    a3 = a1;
    a0 = v1 << 2;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a0 += v1;
    sw(ra, sp + 0x18);
    v0 = lw(v0 + 0xC);
    a0 <<= 2;
    v0 = lw(v0 + 0x10);
    a1 = v1;
    sw(a2, sp + 0x10);
    a2 = a3;
    a3 = 0;                                             // Result = 00000000
    a0 += v0;
    wess_seq_structrig();
    ra = lw(sp + 0x18);
    sp += 0x20;
    return;
}

void queue_wess_seq_update_type_special() noexcept {
    sp -= 0x40;
    sw(fp, sp + 0x38);
    fp = a1;
    sw(ra, sp + 0x3C);
    sw(s7, sp + 0x34);
    sw(s6, sp + 0x30);
    sw(s5, sp + 0x2C);
    sw(s4, sp + 0x28);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    sw(a0, sp + 0x10);
    Is_Module_Loaded();
    if (v0 == 0) goto loc_80044578;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    s6 = lbu(v0 + 0x4);
    v1 = lw(v0 + 0xC);
    s5 = lw(v0 + 0x20);
    s4 = lbu(v1 + 0xB);
    v0 = s4;
    if (s6 == 0) goto loc_8004456C;
    v0 &= 0xFF;
    s4--;
    if (v0 == 0) goto loc_8004456C;
    s3 = s5 + 0xC;
loc_800444A8:
    v0 = lw(s5);
    v0 &= 1;
    if (v0 == 0) goto loc_80044554;
    v0 = lw(s3 - 0x4);
    a2 = lw(sp + 0x10);
    if (v0 != a2) goto loc_80044544;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s2 = lbu(s3 - 0x8);
    s1 = lw(s3);
    s0 = lbu(v0 + 0x1C);
    v0 = -1;                                            // Result = FFFFFFFF
    s0--;
    if (s0 == v0) goto loc_80044544;
    s7 = -1;                                            // Result = FFFFFFFF
loc_800444F8:
    a0 = lbu(s1);
    a2 = 0xFF;                                          // Result = 000000FF
    v0 = a0 << 2;
    if (a0 == a2) goto loc_80044538;
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 += a0;
    v1 = lw(v1 + 0x28);
    v0 <<= 4;
    a0 = v0 + v1;
    if (fp == 0) goto loc_8004452C;
    a1 = fp;
    updatetrackstat();
loc_8004452C:
    s2--;
    if (s2 == 0) goto loc_80044544;
loc_80044538:
    s0--;
    s1++;
    if (s0 != s7) goto loc_800444F8;
loc_80044544:
    s6--;
    v0 = s6 & 0xFF;
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80044570;
    }
loc_80044554:
    s3 += 0x18;
    s5 += 0x18;
    v0 = s4;
    v0 &= 0xFF;
    s4--;
    if (v0 != 0) goto loc_800444A8;
loc_8004456C:
    v0 = 1;                                             // Result = 00000001
loc_80044570:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
loc_80044578:
    ra = lw(sp + 0x3C);
    fp = lw(sp + 0x38);
    s7 = lw(sp + 0x34);
    s6 = lw(sp + 0x30);
    s5 = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x40;
    return;
}

void wess_seq_stoptype() noexcept {
loc_800445AC:
    sp -= 0x40;
    sw(ra, sp + 0x3C);
    sw(fp, sp + 0x38);
    sw(s7, sp + 0x34);
    sw(s6, sp + 0x30);
    sw(s5, sp + 0x2C);
    sw(s4, sp + 0x28);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    sw(a0, sp + 0x10);
    Is_Module_Loaded();
    if (v0 == 0) goto loc_8004470C;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    s6 = lbu(v0 + 0x4);
    v1 = lw(v0 + 0xC);
    s5 = lw(v0 + 0x20);
    s4 = lbu(v1 + 0xB);
    v0 = s4;
    if (s6 == 0) goto loc_80044700;
    v0 &= 0xFF;
    s4--;
    if (v0 == 0) goto loc_80044700;
    s7 = -1;                                            // Result = FFFFFFFF
    fp = 0x80070000;                                    // Result = 80070000
    fp += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    s3 = s5 + 0xC;
loc_8004462C:
    v0 = lw(s5);
    v0 &= 1;
    if (v0 == 0) goto loc_800446E8;
    v0 = lw(s3 - 0x4);
    a1 = lw(sp + 0x10);
    if (v0 != a1) goto loc_800446D8;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s2 = lbu(s3 - 0x8);
    s0 = lbu(v0 + 0x1C);
    s1 = lw(s3);
    s0--;
    if (s0 == s7) goto loc_800446D8;
loc_80044674:
    v1 = lbu(s1);
    a1 = 0xFF;                                          // Result = 000000FF
    a0 = v1 << 2;
    if (v1 == a1) goto loc_800446CC;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    a0 += v1;
    v0 = lw(v0 + 0x28);
    a0 <<= 4;
    a0 += v0;
    v0 = lbu(a0 + 0x3);
    v0 <<= 2;
    v0 += fp;
    v0 = lw(v0);
    v0 = lw(v0 + 0x14);
    s2--;
    pcall(v0);
    if (s2 == 0) goto loc_800446D8;
loc_800446CC:
    s0--;
    s1++;
    if (s0 != s7) goto loc_80044674;
loc_800446D8:
    s6--;
    v0 = s6 & 0xFF;
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80044704;
    }
loc_800446E8:
    s3 += 0x18;
    s5 += 0x18;
    v0 = s4;
    v0 &= 0xFF;
    s4--;
    if (v0 != 0) goto loc_8004462C;
loc_80044700:
    v0 = 1;                                             // Result = 00000001
loc_80044704:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
loc_8004470C:
    ra = lw(sp + 0x3C);
    fp = lw(sp + 0x38);
    s7 = lw(sp + 0x34);
    s6 = lw(sp + 0x30);
    s5 = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x40;
    return;
}

void wess_seq_load_err() noexcept {
loc_80044740:
    sp -= 0x18;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5978);                               // Load from: 80075978
    a1 = a0;
    sw(ra, sp + 0x10);
    if (v0 == 0) goto loc_80044768;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x597C);                               // Load from: 8007597C
    pcall(v0);
loc_80044768:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_seq_loader_install_error_handler() noexcept {
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x5978);                                // Store to: 80075978
    at = 0x80070000;                                    // Result = 80070000
    sw(a1, at + 0x597C);                                // Store to: 8007597C
    return;
}

void Is_Seq_Seq_Num_Valid() noexcept {
loc_80044790:
    v0 = 0;                                             // Result = 00000000
    if (i32(a0) < 0) goto loc_800447B4;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x596C);                               // Load from: gWess_max_sequences (8007596C)
    v0 = (i32(a0) < i32(v0));
    {
        const bool bJump = (v0 != 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800447B4;
    }
    v0 = 0;                                             // Result = 00000000
loc_800447B4:
    return;
}

void open_sequence_data() noexcept {
loc_800447BC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5974);                               // Load from: 80075974
    sp -= 0x18;
    sw(ra, sp + 0x10);
    if (v0 != 0) goto loc_80044800;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5964);                               // Load from: gWess_seq_loader_fileName (80075964)
    module_open();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5980);                                // Store to: 80075980
    if (v0 != 0) goto loc_80044800;
    a0 = 1;                                             // Result = 00000001
    wess_seq_load_err();
    v0 = 0;                                             // Result = 00000000
    goto loc_80044818;
loc_80044800:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5974);                               // Load from: 80075974
    v0 = 1;                                             // Result = 00000001
    v1++;
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5974);                                // Store to: 80075974
loc_80044818:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void close_sequence_data() noexcept {
loc_80044828:
    sp -= 0x18;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5974);                               // Load from: 80075974
    v0 = 1;                                             // Result = 00000001
    sw(ra, sp + 0x10);
    if (v1 != v0) goto loc_80044850;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5980);                               // Load from: 80075980
    module_close();
loc_80044850:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5974);                               // Load from: 80075974
    {
        const bool bJump = (i32(v0) <= 0)
        v0--;
        if (bJump) goto loc_8004486C;
    }
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5974);                                // Store to: 80075974
loc_8004486C:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void load_sequence_data() noexcept {
loc_8004487C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5960);                               // Load from: gbWess_seq_loader_enable (80075960)
    sp -= 0x50;
    sw(s5, sp + 0x3C);
    s5 = a0;
    sw(s1, sp + 0x2C);
    s1 = a1;
    sw(fp, sp + 0x48);
    fp = s1;
    sw(ra, sp + 0x4C);
    sw(s7, sp + 0x44);
    sw(s6, sp + 0x40);
    sw(s4, sp + 0x38);
    sw(s3, sp + 0x34);
    sw(s2, sp + 0x30);
    sw(s0, sp + 0x28);
    if (v0 == 0) goto loc_80044FF0;
    Is_Seq_Seq_Num_Valid();
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80044FF4;
    }
    open_sequence_data();
    {
        const bool bJump = (v0 != 0)
        v0 = s5 << 2;
        if (bJump) goto loc_800448E8;
    }
    a0 = 1;                                             // Result = 00000001
    goto loc_80044E9C;
loc_800448E8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v1 = lw(v1 + 0xC);
    v0 += s5;
    v1 = lw(v1 + 0x10);
    v0 <<= 2;
    v0 += v1;
    s7 = lw(v0 + 0x10);
    a1 = lw(v0 + 0x8);
    sw(s1, v0 + 0x4);
    if (s7 == 0) goto loc_80044924;
    v0 = s7 << 5;
    s1 += v0;
    goto loc_80044928;
loc_80044924:
    s1 += 0x20;
loc_80044928:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5980);                               // Load from: 80075980
    a2 = 0;                                             // Result = 00000000
    module_seek();
    s0 = 4;                                             // Result = 00000004
    if (v0 != 0) goto loc_80044E98;
    a1 = 4;                                             // Result = 00000004
    v0 = s5 << 2;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v0 += s5;
    v1 = lw(v1 + 0xC);
    s2 = v0 << 2;
    a0 = lw(v1 + 0x10);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x5980);                               // Load from: 80075980
    a0 += s2;
    module_read();
    a0 = 2;                                             // Result = 00000002
    if (v0 != s0) goto loc_80044E9C;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v0 = lw(v0 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s2;
    s4 = lh(v0);
    v0 = -1;                                            // Result = FFFFFFFF
    s4--;
    s0 = 0x18;                                          // Result = 00000018
    if (s4 == v0) goto loc_80044E60;
    s6 = 0x80080000;                                    // Result = 80080000
    s6 -= 0xFB0;                                        // Result = 8007F050
    s3 = s2;
    s2 = 0;                                             // Result = 00000000
loc_800449BC:
    a0 = s6;                                            // Result = 8007F050
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x5980);                               // Load from: 80075980
    a1 = 0x18;                                          // Result = 00000018
    module_read();
    a0 = 2;                                             // Result = 00000002
    if (v0 != s0) goto loc_80044E9C;
    v1 = lbu(s6);                                       // Load from: 8007F050
    t0 = 0;                                             // Result = 00000000
    if (v1 == 0) goto loc_80044ACC;
    v0 = 0x32;                                          // Result = 00000032
    {
        const bool bJump = (v1 == v0)
        v0 = -1;                                        // Result = FFFFFFFF
        if (bJump) goto loc_80044ACC;
    }
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    a0 = lbu(a1 + 0x8);
    a0--;
    {
        const bool bJump = (a0 == v0)
        v0 = a0 << 2;
        if (bJump) goto loc_80044AE8;
    }
    t1 = v1;
    a3 = a1;
    v1 = lw(a1 + 0x18);
    v0 += a0;
    v0 <<= 2;
    v0 += a0;
    a1 = v0 << 2;
    a2 = a1 + v1;
loc_80044A34:
    v0 = lw(a2 + 0x4C);
    if (t1 != v0) goto loc_80044AD4;
    v1 = lbu(s6 + 0x4);                                 // Load from: 8007F054
    v0 = 3;                                             // Result = 00000003
    if (v1 == 0) goto loc_80044A5C;
    if (v1 != v0) goto loc_80044A70;
loc_80044A5C:
    v0 = lw(a2 + 0x50);
    v0 &= 1;
    if (v0 != 0) goto loc_80044ACC;
loc_80044A70:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lbu(v1 - 0xFAC);                               // Load from: 8007F054
    v0 = 1;                                             // Result = 00000001
    {
        const bool bJump = (v1 != v0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_80044AA4;
    }
    v0 = lw(a3 + 0x18);
    v0 += a1;
    v0 = lw(v0 + 0x50);
    v0 &= 2;
    {
        const bool bJump = (v0 != 0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_80044ACC;
    }
loc_80044AA4:
    if (v1 != v0) goto loc_80044AD4;
    v0 = lw(a3 + 0x18);
    v0 += a1;
    v0 = lw(v0 + 0x50);
    v0 &= 4;
    if (v0 == 0) goto loc_80044AD4;
loc_80044ACC:
    t0 = 1;                                             // Result = 00000001
    goto loc_80044AE8;
loc_80044AD4:
    a1 -= 0x54;
    a0--;
    v0 = -1;                                            // Result = FFFFFFFF
    a2 -= 0x54;
    if (a0 != v0) goto loc_80044A34;
loc_80044AE8:
    a2 = 1;                                             // Result = 00000001
    if (t0 == 0) goto loc_80044E24;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v0 = lw(v0 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s3;
    v0 = lw(v0 + 0x4);
    v0 += s2;
    v1 = lw(s6);                                        // Load from: 8007F050
    a0 = lw(s6 + 0x4);                                  // Load from: 8007F054
    a1 = lw(s6 + 0x8);                                  // Load from: 8007F058
    a2 = lw(s6 + 0xC);                                  // Load from: 8007F05C
    sw(v1, v0);
    sw(a0, v0 + 0x4);
    sw(a1, v0 + 0x8);
    sw(a2, v0 + 0xC);
    v1 = lw(s6 + 0x10);                                 // Load from: 8007F060
    a0 = lw(s6 + 0x14);                                 // Load from: 8007F064
    sw(v1, v0 + 0x10);
    sw(a0, v0 + 0x14);
    v1 = lbu(s6);                                       // Load from: 8007F050
    v0 = 0x32;                                          // Result = 00000032
    if (v1 != v0) goto loc_80044D20;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v0 = lw(v0 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s3;
    v0 = lw(v0 + 0x4);
    v0 += s2;
    sb(0, v0);
    v1 = lbu(s6 + 0x4);                                 // Load from: 8007F054
    a0 = 0;                                             // Result = 00000000
    if (v1 == 0) goto loc_80044BA8;
    v0 = 3;                                             // Result = 00000003
    {
        const bool bJump = (v1 != v0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_80044BFC;
    }
loc_80044BA8:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v0 = lbu(v1 + 0x8);
    a3 = v0;
    if (i32(v0) <= 0) goto loc_80044D28;
    a2 = v1;
    a1 = lw(a2 + 0x18);
loc_80044BCC:
    v1 = a1;
    v0 = lw(v1 + 0x50);
    v0 &= 1;
    a0++;
    if (v0 != 0) goto loc_80044C5C;
    v0 = (i32(a0) < i32(a3));
    a1 = v1 + 0x54;
    if (v0 != 0) goto loc_80044BCC;
    goto loc_80044D20;
loc_80044BFC:
    {
        const bool bJump = (v1 != v0)
        v0 = 2;                                         // Result = 00000002
        if (bJump) goto loc_80044CCC;
    }
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v0 = lbu(v1 + 0x8);
    a0 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80044D28;
    a3 = v0;
    a2 = v1;
    a1 = lw(a2 + 0x18);
loc_80044C2C:
    v1 = a1;
    v0 = lw(v1 + 0x50);
    v0 &= 2;
    a0++;
    if (v0 != 0) goto loc_80044C80;
    v0 = (i32(a0) < i32(a3));
    a1 = v1 + 0x54;
    if (v0 != 0) goto loc_80044C2C;
    goto loc_80044D20;
loc_80044C5C:
    v0 = lw(a2 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s3;
    v0 = lw(v0 + 0x4);
    v1 = lbu(a1 + 0x4C);
    v0 += s2;
    goto loc_80044CC4;
loc_80044C80:
    v0 = lw(a2 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s3;
    v0 = lw(v0 + 0x4);
    v1 = lbu(a1 + 0x4C);
    v0 += s2;
    goto loc_80044CC4;
loc_80044CA4:
    v0 = lw(a1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s3;
    v0 = lw(v0 + 0x4);
    v1 = lbu(v1 + 0x4C);
    v0 += s2;
loc_80044CC4:
    sb(v1, v0);
    goto loc_80044D20;
loc_80044CCC:
    if (v1 != v0) goto loc_80044D20;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v0 = lbu(v1 + 0x8);
    a0 = 0;                                             // Result = 00000000
    if (i32(v0) <= 0) goto loc_80044D28;
    a2 = v0;
    a1 = v1;
    v1 = lw(a1 + 0x18);
loc_80044CFC:
    v0 = lw(v1 + 0x50);
    v0 &= 4;
    a0++;
    if (v0 != 0) goto loc_80044CA4;
    v0 = (i32(a0) < i32(a2));
    v1 += 0x54;
    if (v0 != 0) goto loc_80044CFC;
loc_80044D20:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
loc_80044D28:
    v0 = lw(v1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s3;
    v0 = lw(v0 + 0x4);
    v0 += s2;
    sw(s1, v0 + 0x18);
    v0 = lw(v1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s3;
    v0 = lw(v0 + 0x4);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x5980);                               // Load from: 80075980
    v0 += s2;
    v1 = lh(v0 + 0x12);
    a0 = lw(v0 + 0x18);
    v1 <<= 2;
    s1 += v1;
    s0 = v1;
    a1 = s0;
    module_read();
    a0 = 2;                                             // Result = 00000002
    if (s0 != v0) goto loc_80044E9C;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v0 = lw(v1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s3;
    v0 = lw(v0 + 0x4);
    v0 += s2;
    sw(s1, v0 + 0x1C);
    v0 = lw(v1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += s3;
    v0 = lw(v0 + 0x4);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x5980);                               // Load from: 80075980
    v0 += s2;
    v1 = lw(v0 + 0x14);
    a0 = lw(v0 + 0x1C);
    s1 += v1;
    v0 = s1 & 1;
    s1 += v0;
    v0 = s1 & 2;
    s1 += v0;
    s0 = v1;
    a1 = s0;
    module_read();
    s2 += 0x20;                                         // Result = 00000020
    if (s0 != v0) goto loc_80044E90;
    s4--;
    goto loc_80044E54;
loc_80044E24:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5980);                               // Load from: 80075980
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lh(a1 - 0xF9E);                                // Load from: 8007F062
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF9C);                                // Load from: 8007F064
    a1 <<= 2;
    a1 += v0;
    module_seek();
    a0 = 3;                                             // Result = 00000003
    if (v0 != 0) goto loc_80044E9C;
    s4--;
loc_80044E54:
    v0 = -1;                                            // Result = FFFFFFFF
    s0 = 0x18;                                          // Result = 00000018
    if (s4 != v0) goto loc_800449BC;
loc_80044E60:
    v0 = s5 << 2;
    if (s7 == 0) goto loc_80044EAC;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v1 = lw(v1 + 0xC);
    v0 += s5;
    v1 = lw(v1 + 0x10);
    v0 <<= 2;
    v0 += v1;
    sh(s7, v0);
    goto loc_80044FE8;
loc_80044E90:
    a0 = 2;                                             // Result = 00000002
    goto loc_80044E9C;
loc_80044E98:
    a0 = 3;                                             // Result = 00000003
loc_80044E9C:
    wess_seq_load_err();
    v0 = 0;                                             // Result = 00000000
    goto loc_80044FF4;
loc_80044EAC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    a0 = s5 << 2;
    v0 = lw(v0 + 0xC);
    a0 += s5;
    v0 = lw(v0 + 0x10);
    a0 <<= 2;
    v0 += a0;
    v0 = lw(v0 + 0x4);
    a3 = 0x80080000;                                    // Result = 80080000
    a3 -= 0xF98;                                        // Result = 8007F068
    v1 = lw(a3);                                        // Load from: 8007F068
    a1 = lw(a3 + 0x4);                                  // Load from: 8007F06C
    a2 = lw(a3 + 0x8);                                  // Load from: 8007F070
    sw(v1, v0);
    sw(a1, v0 + 0x4);
    sw(a2, v0 + 0x8);
    v1 = lw(a3 + 0xC);                                  // Load from: 8007F074
    a1 = lw(a3 + 0x10);                                 // Load from: 8007F078
    a2 = lw(a3 + 0x14);                                 // Load from: 8007F07C
    sw(v1, v0 + 0xC);
    sw(a1, v0 + 0x10);
    sw(a2, v0 + 0x14);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v0 = lw(v1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += a0;
    v0 = lw(v0 + 0x4);
    sw(s1, v0 + 0x18);
    v0 = lw(v1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += a0;
    v0 = lw(v0 + 0x4);
    sw(s1, v0 + 0x1C);
    v0 = lw(v1 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += a0;
    v0 = lw(v0 + 0x4);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lbu(v1 + 0x5970);                              // Load from: 80075970
    a1 = lw(v0 + 0x1C);
    a2 = lw(v0 + 0x14);
    sb(v1, a1);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v0 = lw(v0 + 0xC);
    v0 = lw(v0 + 0x10);
    v0 += a0;
    v0 = lw(v0 + 0x4);
    v1 = lw(v0 + 0x1C);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5971);                              // Load from: 80075971
    s1 += a2;
    sb(v0, v1 + 0x1);
    v0 = s1 & 1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    s1 += v0;
    v0 = lw(v1 + 0xC);
    v1 = s1 & 2;
    v0 = lw(v0 + 0x10);
    s1 += v1;
    a0 += v0;
    v0 = 1;                                             // Result = 00000001
    sh(v0, a0);
loc_80044FE8:
    close_sequence_data();
loc_80044FF0:
    v0 = s1 - fp;
loc_80044FF4:
    ra = lw(sp + 0x4C);
    fp = lw(sp + 0x48);
    s7 = lw(sp + 0x44);
    s6 = lw(sp + 0x40);
    s5 = lw(sp + 0x3C);
    s4 = lw(sp + 0x38);
    s3 = lw(sp + 0x34);
    s2 = lw(sp + 0x30);
    s1 = lw(sp + 0x2C);
    s0 = lw(sp + 0x28);
    sp += 0x50;
    return;
}

void wess_seq_loader_init() noexcept {
loc_80045028:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    sw(ra, sp + 0x14);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5960);                                 // Store to: gbWess_seq_loader_enable (80075960)
    at = 0x80070000;                                    // Result = 80070000
    sw(a1, at + 0x5964);                                // Store to: gWess_seq_loader_fileName (80075964)
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x5968);                                // Store to: gpWess_seq_loader_pm_stat (80075968)
    s0 = 0;                                             // Result = 00000000
    if (a0 == 0) goto loc_80045124;
    v0 = lw(a0 + 0xC);
    s0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x5960);                                // Store to: gbWess_seq_loader_enable (80075960)
    v1 = lh(v0 + 0x8);
    v0 = 0x80;                                          // Result = 00000080
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xF96);                                 // Store to: 8007F06A
    v0 = 0x7F;                                          // Result = 0000007F
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xF8E);                                 // Store to: 8007F072
    v0 = 0x40;                                          // Result = 00000040
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xF8D);                                 // Store to: 8007F073
    v0 = 0x78;                                          // Result = 00000078
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xF8A);                                 // Store to: 8007F076
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xF88);                                 // Store to: 8007F078
    v0 = 2;                                             // Result = 00000002
    at = 0x80080000;                                    // Result = 80080000
    sb(0, at - 0xF98);                                  // Store to: 8007F068
    at = 0x80080000;                                    // Result = 80080000
    sb(0, at - 0xF97);                                  // Store to: 8007F069
    at = 0x80080000;                                    // Result = 80080000
    sb(0, at - 0xF93);                                  // Store to: 8007F06D
    at = 0x80080000;                                    // Result = 80080000
    sb(0, at - 0xF94);                                  // Store to: 8007F06C
    at = 0x80080000;                                    // Result = 80080000
    sh(0, at - 0xF92);                                  // Store to: 8007F06E
    at = 0x80080000;                                    // Result = 80080000
    sh(0, at - 0xF90);                                  // Store to: 8007F070
    at = 0x80080000;                                    // Result = 80080000
    sb(0, at - 0xF8C);                                  // Store to: 8007F074
    at = 0x80080000;                                    // Result = 80080000
    sb(0, at - 0xF8B);                                  // Store to: 8007F075
    at = 0x80080000;                                    // Result = 80080000
    sh(0, at - 0xF86);                                  // Store to: 8007F07A
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF84);                                 // Store to: 8007F07C
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x596C);                                // Store to: gWess_max_sequences (8007596C)
    v0 = s0;                                            // Result = 00000001
    if (a2 != s0) goto loc_80045128;
    open_sequence_data();
    {
        const bool bJump = (v0 != 0)
        v0 = s0;                                        // Result = 00000001
        if (bJump) goto loc_80045128;
    }
    a0 = 1;                                             // Result = 00000001
    wess_seq_load_err();
    v0 = 0;                                             // Result = 00000000
    goto loc_80045128;
loc_80045124:
    v0 = s0;                                            // Result = 00000000
loc_80045128:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_seq_loader_exit() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    close_sequence_data();
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5960);                                 // Store to: gbWess_seq_loader_enable (80075960)
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_seq_sizeof() noexcept {
loc_80045164:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5960);                               // Load from: gbWess_seq_loader_enable (80075960)
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(s1, sp + 0x14);
    s1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x18);
    if (v0 == 0) goto loc_800451D4;
    Is_Seq_Seq_Num_Valid();
    {
        const bool bJump = (v0 != 0)
        v0 = s0 << 2;
        if (bJump) goto loc_800451A0;
    }
    v0 = 0;                                             // Result = 00000000
    goto loc_800451DC;
loc_800451A0:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v1 = lw(v1 + 0xC);
    v0 += s0;
    v1 = lw(v1 + 0x10);
    v0 <<= 2;
    v1 += v0;
    v0 = lw(v1 + 0x4);
    {
        const bool bJump = (v0 != 0)
        v0 = s1;                                        // Result = 00000000
        if (bJump) goto loc_800451DC;
    }
    s1 = lw(v1 + 0xC);
loc_800451D4:
    v0 = s1;
loc_800451DC:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void wess_seq_load() noexcept {
loc_800451F4:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5960);                               // Load from: gbWess_seq_loader_enable (80075960)
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(s2, sp + 0x18);
    s2 = a1;
    sw(s1, sp + 0x14);
    s1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x1C);
    if (v0 == 0) goto loc_80045278;
    Is_Seq_Seq_Num_Valid();
    {
        const bool bJump = (v0 != 0)
        v0 = s0 << 2;
        if (bJump) goto loc_80045238;
    }
    v0 = 0;                                             // Result = 00000000
    goto loc_8004527C;
loc_80045238:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v1 = lw(v1 + 0xC);
    v0 += s0;
    v1 = lw(v1 + 0x10);
    v0 <<= 2;
    v0 += v1;
    v0 = lw(v0 + 0x4);
    {
        const bool bJump = (v0 != 0)
        v0 = s1;                                        // Result = 00000000
        if (bJump) goto loc_8004527C;
    }
    a0 = s0;
    a1 = s2;
    load_sequence_data();
    s1 = v0;
loc_80045278:
    v0 = s1;
loc_8004527C:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void wess_seq_free() noexcept {
loc_80045298:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5960);                               // Load from: gbWess_seq_loader_enable (80075960)
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(s1, sp + 0x14);
    s1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x18);
    if (v0 == 0) goto loc_8004530C;
    Is_Seq_Seq_Num_Valid();
    {
        const bool bJump = (v0 != 0)
        v0 = s0 << 2;
        if (bJump) goto loc_800452D4;
    }
    v0 = 0;                                             // Result = 00000000
    goto loc_80045310;
loc_800452D4:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5968);                               // Load from: gpWess_seq_loader_pm_stat (80075968)
    v1 = lw(v1 + 0xC);
    v0 += s0;
    v1 = lw(v1 + 0x10);
    v0 <<= 2;
    v1 += v0;
    v0 = lw(v1 + 0x4);
    {
        const bool bJump = (v0 == 0)
        v0 = s1;                                        // Result = 00000000
        if (bJump) goto loc_80045310;
    }
    sw(0, v1 + 0x4);
    s1 = 1;                                             // Result = 00000001
loc_8004530C:
    v0 = s1;
loc_80045310:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void psxspu_init_reverb() noexcept {
loc_80045328:
    sp -= 0x20;
    sw(s1, sp + 0x14);
    s1 = a0;
    sw(s0, sp + 0x10);
    s0 = 0x80080000;                                    // Result = 80080000
    s0 -= 0xF80;                                        // Result = 8007F080
    v1 = lw(sp + 0x30);
    v0 = 0x1F;                                          // Result = 0000001F
    sw(ra, sp + 0x18);
    sw(v0, s0);                                         // Store to: 8007F080
    v0 = s1 | 0x100;
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF7C);                                 // Store to: 8007F084
    at = 0x80080000;                                    // Result = 80080000
    sh(a1, at - 0xF78);                                 // Store to: 8007F088
    at = 0x80080000;                                    // Result = 80080000
    sh(a2, at - 0xF76);                                 // Store to: 8007F08A
    at = 0x80080000;                                    // Result = 80080000
    sw(a3, at - 0xF74);                                 // Store to: 8007F08C
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF70);                                 // Store to: 8007F090
    a0 = s0;                                            // Result = 8007F080
    LIBSPU_SpuSetReverbModeParam();
    a0 = s0;                                            // Result = 8007F080
    LIBSPU_SpuSetReverbDepth();
    if (s1 != 0) goto loc_800453BC;
    a0 = 0;                                             // Result = 00000000
    LIBSPU_SpuSetReverb();
    v0 = 0x70000;                                       // Result = 00070000
    v0 |= 0xF000;                                       // Result = 0007F000
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x598C);                                // Store to: 8007598C
    a0 = 0;                                             // Result = 00000000
    goto loc_800453D8;
loc_800453BC:
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuSetReverb();
    LIBSPU_SpuGetReverbOffsetAddr();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x598C);                                // Store to: 8007598C
    a0 = 1;                                             // Result = 00000001
loc_800453D8:
    a1 = 0xFF0000;                                      // Result = 00FF0000
    a1 |= 0xFFFF;                                       // Result = 00FFFFFF
    LIBSPU_SpuSetReverbVoice();
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void psxspu_set_reverb_depth() noexcept {
    sp -= 0x18;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 -= 0xF78;                                        // Result = 8007F088
    sw(ra, sp + 0x10);
    sh(a0, v0);                                         // Store to: 8007F088
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    at = 0x80080000;                                    // Result = 80080000
    sh(a1, at - 0xF76);                                 // Store to: 8007F08A
    a0 = v0 - 8;                                        // Result = 8007F080
    LIBSPU_SpuSetReverbDepth();
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void psxspu_init() noexcept {
loc_80045450:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5984);                               // Load from: 80075984
    sp -= 0x48;
    sw(ra, sp + 0x44);
    sw(s0, sp + 0x40);
    if (v0 != 0) goto loc_800454E8;
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    s0 = 1;                                             // Result = 00000001
    LIBSPU_SpuInit();
    a1 = 0x800B0000;                                    // Result = 800B0000
    a1 -= 0x6AF8;                                       // Result = 800A9508
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x5984);                                // Store to: 80075984
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuInitMalloc();
    a0 = 0;                                             // Result = 00000000
    LIBSPU_SpuSetTransferMode();
    a0 = 0;                                             // Result = 00000000
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    a3 = 0;                                             // Result = 00000000
    sw(0, sp + 0x10);
    psxspu_init_reverb();
    a0 = sp + 0x18;
    v0 = 0x3C3;                                         // Result = 000003C3
    sw(v0, sp + 0x18);
    v0 = 0x3FFF;                                        // Result = 00003FFF
    sh(v0, sp + 0x1C);
    sh(v0, sp + 0x1E);
    v0 = 0x3CFF;                                        // Result = 00003CFF
    sh(v0, sp + 0x28);
    sh(v0, sp + 0x2A);
    sw(0, sp + 0x2C);
    sw(s0, sp + 0x30);
    LIBSPU_SpuSetCommonAttr();
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x5988);                                // Store to: 80075988
loc_800454E8:
    ra = lw(sp + 0x44);
    s0 = lw(sp + 0x40);
    sp += 0x48;
    return;
}

void psxspu_update_master_vol() noexcept {
loc_800454FC:
    sp -= 0x40;
    v0 = 3;                                             // Result = 00000003
    sh(a0, sp + 0x14);
    sh(a0, sp + 0x16);
    a0 = sp + 0x10;
    sw(ra, sp + 0x38);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    sw(v0, sp + 0x10);
    LIBSPU_SpuSetCommonAttr();
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    ra = lw(sp + 0x38);
    sp += 0x40;
    return;
}

void psxspu_update_master_vol_mode() noexcept {
loc_80045540:
    sp -= 0x40;
    v0 = 0xC0;                                          // Result = 000000C0
    sh(a0, sp + 0x20);
    sh(a0, sp + 0x22);
    a0 = sp + 0x10;
    sw(ra, sp + 0x38);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    sw(v0, sp + 0x10);
    LIBSPU_SpuSetCommonAttr();
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    ra = lw(sp + 0x38);
    sp += 0x40;
    return;
}

void psxspu_setcdmixon() noexcept {
loc_80045584:
    sp -= 0x40;
    v0 = 0x200;                                         // Result = 00000200
    sw(s0, sp + 0x38);
    s0 = 1;                                             // Result = 00000001
    a0 = sp + 0x10;
    sw(ra, sp + 0x3C);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    sw(v0, sp + 0x10);
    sw(s0, sp + 0x28);
    LIBSPU_SpuSetCommonAttr();
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x5988);                                // Store to: 80075988
    ra = lw(sp + 0x3C);
    s0 = lw(sp + 0x38);
    sp += 0x40;
    return;
}

void psxspu_setcdmixoff() noexcept {
loc_800455CC:
    sp -= 0x40;
    v0 = 0x200;                                         // Result = 00000200
    a0 = sp + 0x10;
    sw(ra, sp + 0x38);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    sw(v0, sp + 0x10);
    sw(0, sp + 0x28);
    LIBSPU_SpuSetCommonAttr();
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    ra = lw(sp + 0x38);
    sp += 0x40;
    return;
}

void psxspu_fadeengine() noexcept {
loc_8004560C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5988);                               // Load from: 80075988
    sp -= 0x18;
    sw(ra, sp + 0x10);
    if (v0 == 0) goto loc_80045710;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x59A8);                               // Load from: 800759A8
    {
        const bool bJump = (i32(v1) <= 0)
        v1--;
        if (bJump) goto loc_80045698;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x59AC);                               // Load from: 800759AC
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x59B4);                               // Load from: 800759B4
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x59A8);                                // Store to: 800759A8
    v0 += a0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x59AC);                                // Store to: 800759AC
    if (v1 != 0) goto loc_80045674;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x59B0);                               // Load from: 800759B0
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x59AC);                                // Store to: 800759AC
loc_80045674:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lh(v0 + 0x59AE);                               // Load from: 800759AE
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x59A4);                                // Store to: 800759A4
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lh(a0 + 0x59A4);                               // Load from: 800759A4
    psxspu_update_master_vol_mode();
loc_80045698:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5994);                               // Load from: 80075994
    {
        const bool bJump = (i32(v1) <= 0)
        v1--;
        if (bJump) goto loc_80045710;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5998);                               // Load from: 80075998
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x59A0);                               // Load from: 800759A0
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5994);                                // Store to: 80075994
    v0 += a0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5998);                                // Store to: 80075998
    if (v1 != 0) goto loc_800456EC;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x599C);                               // Load from: 8007599C
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5998);                                // Store to: 80075998
loc_800456EC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lh(v0 + 0x599A);                               // Load from: 8007599A
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5990);                                // Store to: 80075990
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lh(a0 + 0x5990);                               // Load from: 80075990
    psxspu_update_master_vol();
loc_80045710:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void psxspu_set_cd_vol() noexcept {
loc_80045720:
    sp -= 0x18;
    v0 = a0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x59A4);                                // Store to: 800759A4
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lh(a0 + 0x59A4);                               // Load from: 800759A4
    v0 <<= 16;
    sw(ra, sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x59AC);                                // Store to: 800759AC
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x59A8);                                 // Store to: 800759A8
    psxspu_update_master_vol_mode();
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void psxspu_get_cd_vol() noexcept {
loc_8004577C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x59A4);                               // Load from: 800759A4
    return;
}

void psxspu_start_cd_fade() noexcept {
loc_8004578C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x594C);                               // Load from: gbWess_WessTimerActive (8007594C)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    v1 = 0x10620000;                                    // Result = 10620000
    if (v0 == 0) goto loc_80045828;
    v1 |= 0x4DD3;                                       // Result = 10624DD3
    v0 = a0 << 4;
    v0 -= a0;
    v0 <<= 3;
    mult(v0, v1);
    v0 = u32(i32(v0) >> 31);
    a0 = a1 << 16;
    v1 = hi;
    v1 = u32(i32(v1) >> 6);
    v1 -= v0;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x59AC);                               // Load from: 800759AC
    v1++;
    v0 = a0 - v0;
    div(v0, v1);
    if (v1 != 0) goto loc_800457EC;
    _break(0x1C00);
loc_800457EC:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_80045804;
    }
    if (v0 != at) goto loc_80045804;
    _break(0x1800);
loc_80045804:
    v0 = lo;
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x59B0);                                // Store to: 800759B0
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x59A8);                                // Store to: 800759A8
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x59B4);                                // Store to: 800759B4
    v0 = 1;                                             // Result = 00000001
    goto loc_80045834;
loc_80045828:
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x59A8);                                 // Store to: 800759A8
    v0 = 1;                                             // Result = 00000001
loc_80045834:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    return;
}

void psxspu_stop_cd_fade() noexcept {
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x59A8);                                 // Store to: 800759A8
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    return;
}

void psxspu_get_cd_fade_status() noexcept {
loc_80045868:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x59A8);                               // Load from: 800759A8
    v0 = (i32(v0) < 2);
    v0 ^= 1;
    return;
}

void psxspu_set_master_vol() noexcept {
loc_80045880:
    sp -= 0x18;
    v0 = a0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5990);                                // Store to: 80075990
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lh(a0 + 0x5990);                               // Load from: 80075990
    v0 <<= 16;
    sw(ra, sp + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5998);                                // Store to: 80075998
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5994);                                 // Store to: 80075994
    psxspu_update_master_vol();
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void psxspu_get_master_vol() noexcept {
loc_800458DC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5990);                               // Load from: 80075990
    return;
}

void psxspu_start_master_fade() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x594C);                               // Load from: gbWess_WessTimerActive (8007594C)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    v1 = 0x10620000;                                    // Result = 10620000
    if (v0 == 0) goto loc_80045988;
    v1 |= 0x4DD3;                                       // Result = 10624DD3
    v0 = a0 << 4;
    v0 -= a0;
    v0 <<= 3;
    mult(v0, v1);
    v0 = u32(i32(v0) >> 31);
    a0 = a1 << 16;
    v1 = hi;
    v1 = u32(i32(v1) >> 6);
    v1 -= v0;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5998);                               // Load from: 80075998
    v1++;
    v0 = a0 - v0;
    div(v0, v1);
    if (v1 != 0) goto loc_8004594C;
    _break(0x1C00);
loc_8004594C:
    at = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (v1 != at)
        at = 0x80000000;                                // Result = 80000000
        if (bJump) goto loc_80045964;
    }
    if (v0 != at) goto loc_80045964;
    _break(0x1800);
loc_80045964:
    v0 = lo;
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x599C);                                // Store to: 8007599C
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5994);                                // Store to: 80075994
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x59A0);                                // Store to: 800759A0
    v0 = 1;                                             // Result = 00000001
    goto loc_80045994;
loc_80045988:
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5994);                                 // Store to: 80075994
    v0 = 1;                                             // Result = 00000001
loc_80045994:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    return;
}

void psxspu_stop_master_fade() noexcept {
    v0 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5988);                                 // Store to: 80075988
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5994);                                 // Store to: 80075994
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5988);                                // Store to: 80075988
    return;
}

void psxspu_get_master_fade_status() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5994);                               // Load from: 80075994
    v0 = (i32(v0) < 2);
    v0 ^= 1;
    return;
}

void start_record_music_mute() noexcept {
loc_800459E0:
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x5A10);                                // Store to: gpWess_pnotestate (80075A10)
    if (a0 == 0) goto loc_800459F4;
    sw(0, a0);
loc_800459F4:
    return;
}

void end_record_music_mute() noexcept {
loc_800459FC:
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5A10);                                 // Store to: gpWess_pnotestate (80075A10)
    return;
}

void add_music_mute_note() noexcept {
loc_80045A0C:
    t0 = lw(sp + 0x10);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5A10);                               // Load from: gpWess_pnotestate (80075A10)
    t1 = lw(sp + 0x14);
    if (v1 == 0) goto loc_80045AC4;
    v0 = lw(v1);
    v0 <<= 4;
    v0 += v1;
    sh(a0, v0 + 0x4);
    v0 = lw(v1);
    v0 <<= 4;
    v0 += v1;
    sh(a1, v0 + 0x6);
    v0 = lw(v1);
    v0 <<= 4;
    v0 += v1;
    sb(a2, v0 + 0x8);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5A10);                               // Load from: gpWess_pnotestate (80075A10)
    v0 = lw(v1);
    v0 <<= 4;
    v1 += v0;
    sb(a3, v1 + 0x9);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5A10);                               // Load from: gpWess_pnotestate (80075A10)
    v0 = lw(v1);
    v0 <<= 4;
    v0 += v1;
    sw(t0, v0 + 0xC);
    v0 = lw(v1);
    v0 <<= 4;
    v0 += v1;
    sw(t1, v0 + 0x10);
    v0 = lw(v1);
    v0++;
    sw(v0, v1);
loc_80045AC4:
    return;
}

void PSX_UNKNOWN_DrvFunc() noexcept {
    v1 = 0x10000000;                                    // Result = 10000000
    v0 = 0x1F;                                          // Result = 0000001F
    goto loc_80045AF0;
loc_80045AD8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A07);                              // Load from: gWess_UNKNOWN_status_byte (80075A07)
    {
        const bool bJump = (v0 == 0)
        v0 += 0xFF;
        if (bJump) goto loc_80045B04;
    }
    v1 = u32(i32(v1) >> 1);
loc_80045AF0:
    at = 0x80070000;                                    // Result = 80070000
    sb(v0, at + 0x5A07);                                // Store to: gWess_UNKNOWN_status_byte (80075A07)
    v0 = (i32(a0) < i32(v1));
    if (v0 != 0) goto loc_80045AD8;
loc_80045B04:
    return;
}

void TriggerPSXVoice() noexcept {
loc_80045B0C:
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    v0 = 0x60000;                                       // Result = 00060000
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    v1 = lbu(s0 + 0x2);
    v0 |= 0xE3;                                         // Result = 000600E3
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xE6C);                                 // Store to: 8007F194
    v0 = 1;                                             // Result = 00000001
    a1 = v0 << v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(a1, at - 0xE70);                                 // Store to: 8007F190
    v1 = lbu(s0 + 0x3);
    v0 = v1 << 2;
    v0 += v1;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE94);                                // Load from: 8007F16C
    v0 <<= 4;
    v0 += v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF5C);                                 // Store to: 8007F0A4
    v0 = lbu(v0 + 0x9);
    s1 = a2;
    if (v0 == 0) goto loc_80045BC8;
    v0 = lbu(s0 + 0x2);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0xE18;                                        // Result = 8007F1E8
    at += v0;
    v0 = lbu(at);
    if (v0 != 0) goto loc_80045C0C;
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuSetReverbVoice();
    v1 = lbu(s0 + 0x2);
    v0 = 0x7F;                                          // Result = 0000007F
    at = 0x80080000;                                    // Result = 80080000
    at -= 0xE18;                                        // Result = 8007F1E8
    at += v1;
    sb(v0, at);
    goto loc_80045C0C;
loc_80045BC8:
    v0 = lbu(s0 + 0x2);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0xE18;                                        // Result = 8007F1E8
    at += v0;
    v0 = lbu(at);
    if (v0 == 0) goto loc_80045C0C;
    a0 = 0;                                             // Result = 00000000
    LIBSPU_SpuSetReverbVoice();
    v0 = lbu(s0 + 0x2);
    at = 0x80080000;                                    // Result = 80080000
    at -= 0xE18;                                        // Result = 8007F1E8
    at += v0;
    sb(0, at);
loc_80045C0C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A06);                              // Load from: gWess_pan_status (80075A06)
    {
        const bool bJump = (v0 == 0)
        v0 = 0x40;                                      // Result = 00000040
        if (bJump) goto loc_80045C88;
    }
    v0 = lw(s0 + 0x8);
    v1 = lbu(v0 + 0x3);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF5C);                                // Load from: 8007F0A4
    v1 <<= 24;
    v0 = lbu(v0 + 0xD);
    v1 = u32(i32(v1) >> 24);
    v0 += v1;
    v0 -= 0x40;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xF58);                                 // Store to: 8007F0A8
    v0 = (i32(v0) < 0x80);
    {
        const bool bJump = (v0 != 0)
        v0 = 0x7F;                                      // Result = 0000007F
        if (bJump) goto loc_80045C64;
    }
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xF58);                                 // Store to: 8007F0A8
loc_80045C64:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lh(v0 - 0xF58);                                // Load from: 8007F0A8
    if (i32(v0) >= 0) goto loc_80045C90;
    at = 0x80080000;                                    // Result = 80080000
    sh(0, at - 0xF58);                                  // Store to: 8007F0A8
    goto loc_80045C90;
loc_80045C88:
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xF58);                                 // Store to: 8007F0A8
loc_80045C90:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xF5C);                                // Load from: 8007F0A4
    v0 = lbu(a0 + 0x13);
    if (v0 != 0) goto loc_80045CE4;
    v0 = lw(s0 + 0x8);
    v1 = lbu(v0 + 0x2);
    v0 = s1 & 0xFF;
    mult(v0, v1);
    v1 = lo;
    v0 = lbu(a0 + 0xC);
    mult(v1, v0);
    v1 = lo;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A04);                              // Load from: gWess_master_sfx_volume (80075A04)
    mult(v1, v0);
    goto loc_80045D1C;
loc_80045CE4:
    v0 = lw(s0 + 0x8);
    v1 = lbu(v0 + 0x2);
    v0 = s1 & 0xFF;
    mult(v0, v1);
    v1 = lo;
    v0 = lbu(a0 + 0xC);
    mult(v1, v0);
    v1 = lo;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A05);                              // Load from: gWess_master_mus_volume (80075A05)
    mult(v1, v0);
loc_80045D1C:
    v0 = lo;
    v0 = u32(i32(v0) >> 21);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF60);                                 // Store to: 8007F0A0
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lbu(v1 + 0x5A06);                              // Load from: gWess_pan_status (80075A06)
    v0 = 1;                                             // Result = 00000001
    if (v1 != 0) goto loc_80045D68;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lhu(v0 - 0xF60);                               // Load from: 8007F0A0
    v0 <<= 6;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xE68);                                 // Store to: 8007F198
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xE66);                                 // Store to: 8007F19A
    goto loc_80045E00;
loc_80045D68:
    {
        const bool bJump = (v1 != v0)
        v0 = 0x80;                                      // Result = 00000080
        if (bJump) goto loc_80045DBC;
    }
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xF60);                                // Load from: 8007F0A0
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lh(v1 - 0xF58);                                // Load from: 8007F0A8
    a0 <<= 7;
    v0 -= v1;
    mult(a0, v0);
    v0 = lo;
    v1++;
    mult(a0, v1);
    v0 = u32(i32(v0) >> 7);
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xE68);                                 // Store to: 8007F198
    v0 = lo;
    v0 = u32(i32(v0) >> 7);
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xE66);                                 // Store to: 8007F19A
    goto loc_80045E00;
loc_80045DBC:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xF60);                                // Load from: 8007F0A0
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lh(v1 - 0xF58);                                // Load from: 8007F0A8
    a0 <<= 7;
    v0 -= v1;
    mult(a0, v0);
    v0 = lo;
    v1++;
    mult(a0, v1);
    v0 = u32(i32(v0) >> 7);
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xE66);                                 // Store to: 8007F19A
    v0 = lo;
    v0 = u32(i32(v0) >> 7);
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xE68);                                 // Store to: 8007F198
loc_80045E00:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF5C);                                // Load from: 8007F0A4
    v1 = lh(v0 + 0xE);
    if (v1 != 0) goto loc_80045E28;
    v0 = lbu(s0 + 0x5);
    v0 <<= 8;
    goto loc_80045EFC;
loc_80045E28:
    if (i32(v1) <= 0) goto loc_80045E84;
    v0 = lw(s0 + 0x8);
    v0 = lb(v0 + 0x9);
    mult(v1, v0);
    v0 = lo;
    v0 += 0x20;
    v1 = u32(i32(v0) >> 13);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF6C);                                 // Store to: 8007F094
    v0 &= 0x1FFF;
    v0 = u32(i32(v0) >> 6);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF68);                                 // Store to: 8007F098
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF64);                                 // Store to: 8007F09C
    v0 = lbu(s0 + 0x5);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lhu(v1 - 0xF68);                               // Load from: 8007F098
    v0 += v1;
    goto loc_80045EE8;
loc_80045E84:
    v0 = lw(s0 + 0x8);
    v0 = lb(v0 + 0x8);
    mult(v1, v0);
    v1 = 0x20;                                          // Result = 00000020
    v0 = lo;
    v1 -= v0;
    v0 = u32(i32(v1) >> 13);
    v0++;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF6C);                                 // Store to: 8007F094
    v1 &= 0x1FFF;
    v1 = u32(i32(v1) >> 6);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF68);                                 // Store to: 8007F098
    v0 = 0x80;                                          // Result = 00000080
    v0 -= v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF64);                                 // Store to: 8007F09C
    v0 = lbu(s0 + 0x5);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lhu(v1 - 0xF68);                               // Load from: 8007F098
    v0 -= v1;
loc_80045EE8:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lhu(v1 - 0xF64);                               // Load from: 8007F09C
    v0 <<= 8;
    v1 &= 0x7F;
    v0 |= v1;
loc_80045EFC:
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xE5A);                                 // Store to: 8007F1A6
    v1 = lw(s0 + 0x8);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0xE58;                                        // Result = 8007F1A8
    v0 = lbu(v1 + 0x4);
    v1 = lbu(v1 + 0x5);
    v0 <<= 8;
    v0 |= v1;
    sh(v0, a0);                                         // Store to: 8007F1A8
    v0 = lw(s0 + 0xC);
    v0 = lw(v0 + 0x8);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xE54);                                 // Store to: 8007F1AC
    v0 = lw(s0 + 0x8);
    v0 = lhu(v0 + 0xC);
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xE36);                                 // Store to: 8007F1CA
    v0 = lw(s0 + 0x8);
    v0 = lhu(v0 + 0xE);
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xE34);                                 // Store to: 8007F1CC
    a0 -= 0x18;                                         // Result = 8007F190
    LIBSPU_SpuSetKeyOnWithAttr();
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void PSX_DriverInit() noexcept {
loc_80045F8C:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    v0 = lw(a0);
    v1 = lw(a0 + 0x20);
    a1 = lw(a0 + 0x28);
    a2 = lw(a0 + 0x30);
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xE9C);                                 // Store to: 8007F164
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xE84);                                 // Store to: 8007F17C
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xE98);                                 // Store to: gWess_Dvr_pss (8007F168)
    at = 0x80080000;                                    // Result = 80080000
    sw(a1, at - 0xE94);                                 // Store to: 8007F16C
    at = 0x80080000;                                    // Result = 80080000
    sw(a2, at - 0xF48);                                 // Store to: 8007F0B8
    v0 = lbu(a0 + 0x7);
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xF54);                                 // Store to: 8007F0AC
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xF54);                               // Load from: 8007F0AC
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0xF4C);                                  // Store to: 8007F0B4
    if (v0 == 0) goto loc_8004604C;
    a3 = 1;                                             // Result = 00000001
    a1 = v0;
loc_80045FFC:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xF4C);                                // Load from: 8007F0B4
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 3;
    a0 = v0 + a2;
    v0 = lbu(a0 + 0x1);
    {
        const bool bJump = (v0 != a3)
        v0 = v1 + 1;
        if (bJump) goto loc_80046038;
    }
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xE90);                                 // Store to: 8007F170
    goto loc_8004604C;
loc_80046038:
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF4C);                                 // Store to: 8007F0B4
    v0 = (i32(v0) < i32(a1));
    if (v0 != 0) goto loc_80045FFC;
loc_8004604C:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE9C);                                // Load from: 8007F164
    v0 = lw(v1 + 0xC);
    v0 = lbu(v0 + 0xA);
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xF50);                                 // Store to: 8007F0B0
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xF50);                               // Load from: 8007F0B0
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0xF4C);                                  // Store to: 8007F0B4
    a3 = 1;                                             // Result = 00000001
    if (v0 == 0) goto loc_800460E8;
    a2 = lw(v1 + 0x18);
    a1 = v0;
loc_80046090:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xF4C);                                // Load from: 8007F0B4
    v0 = v1 << 2;
    v0 += v1;
    v0 <<= 2;
    v0 += v1;
    v0 <<= 2;
    a0 = v0 + a2;
    v0 = lbu(a0 + 0x4);
    {
        const bool bJump = (v0 != a3)
        v0 = v1 + 1;
        if (bJump) goto loc_800460D4;
    }
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xE88);                                 // Store to: 8007F178
    goto loc_800460E8;
loc_800460D4:
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF4C);                                 // Store to: 8007F0B4
    v0 = (i32(v0) < i32(a1));
    if (v0 != 0) goto loc_80046090;
loc_800460E8:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xE88);                                // Load from: 8007F178
    v1 = lbu(a0 + 0x5);
    v0 = lh(a0 + 0x8);
    a1 = lw(a0 + 0x1C);
    v0 <<= 2;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xE8C);                                 // Store to: 8007F174
    v1 = lh(a0 + 0xC);
    a0 = lh(a0 + 0x10);
    v0 += a1;
    at = 0x80080000;                                    // Result = 80080000
    sw(a1, at - 0xE80);                                 // Store to: 8007F180
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xE7C);                                 // Store to: 8007F184
    v1 <<= 4;
    v1 += v0;
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 2;
    v0 += v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xE78);                                 // Store to: 8007F188
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xE74);                                 // Store to: 8007F18C
    psxspu_init();
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0xE18;                                        // Result = 8007F1E8
    v1 = 0x7F;                                          // Result = 0000007F
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0xF4C);                                  // Store to: 8007F0B4
loc_8004616C:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF4C);                                // Load from: 8007F0B4
    v0 += a0;
    sb(v1, v0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF4C);                                // Load from: 8007F0B4
    v0++;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF4C);                                 // Store to: 8007F0B4
    v0 = (i32(v0) < 0x18);
    if (v0 != 0) goto loc_8004616C;
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PSX_DriverExit() noexcept {
loc_800461B4:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    LIBSPU_SpuQuit();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PSX_DriverEntry1() noexcept {
loc_800461D4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE9C);                                // Load from: 8007F164
    sp -= 0x20;
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v0 = lbu(v0 + 0x6);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF44);                                 // Store to: 8007F0BC
    if (v0 == 0) goto loc_800462D8;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE8C);                                // Load from: 8007F174
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE90);                                // Load from: 8007F170
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF34);                                 // Store to: 8007F0CC
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF40);                                 // Store to: 8007F0C0
    if (v1 == v0) goto loc_800462D8;
    s0 = 3;                                             // Result = 00000003
loc_80046238:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xF34);                                // Load from: 8007F0CC
    v0 = lw(a0);
    v0 &= 3;
    if (v0 != s0) goto loc_800462A4;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE84);                                // Load from: 8007F17C
    v1 = lw(v0);
    v0 = lw(a0 + 0x10);
    v0 = (v0 < v1);
    if (v0 == 0) goto loc_800462A4;
    PSX_voiceparmoff();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF44);                                // Load from: 8007F0BC
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF44);                                 // Store to: 8007F0BC
    if (v0 == 0) goto loc_800462D8;
loc_800462A4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF34);                                // Load from: 8007F0CC
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xF40);                                // Load from: 8007F0C0
    v0 += 0x18;
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF34);                                 // Store to: 8007F0CC
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF40);                                 // Store to: 8007F0C0
    if (v1 != v0) goto loc_80046238;
loc_800462D8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5A08);                               // Load from: 80075A08
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0xF30);                                  // Store to: 8007F0D0
    if (v0 == 0) goto loc_80046300;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF30);                                 // Store to: 8007F0D0
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5A08);                                 // Store to: 80075A08
loc_80046300:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5A0C);                               // Load from: 80075A0C
    if (v0 == 0) goto loc_80046374;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lbu(v1 + 0x5A07);                              // Load from: gWess_UNKNOWN_status_byte (80075A07)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0xE70;                                        // Result = 8007F190
    sw(v0, a0);                                         // Store to: 8007F190
    v0 = 0x4400;                                        // Result = 00004400
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xE6C);                                 // Store to: 8007F194
    v0 = 7;                                             // Result = 00000007
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xE44);                                 // Store to: 8007F1BC
    at = 0x80080000;                                    // Result = 80080000
    sh(v1, at - 0xE3A);                                 // Store to: 8007F1C6
    LIBSPU_SpuSetVoiceAttr();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF30);                                // Load from: 8007F0D0
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5A0C);                               // Load from: 80075A0C
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5A0C);                                 // Store to: 80075A0C
    v0 |= v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF30);                                 // Store to: 8007F0D0
loc_80046374:
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0xF30);                                // Load from: 8007F0D0
    if (a1 == 0) goto loc_80046398;
    a0 = 0;                                             // Result = 00000000
    LIBSPU_SpuSetKey();
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0xF30);                                  // Store to: 8007F0D0
loc_80046398:
    s0 = 0x80080000;                                    // Result = 80080000
    s0 -= 0xE30;                                        // Result = 8007F1D0
    a0 = s0;                                            // Result = 8007F1D0
    LIBSPU_SpuGetAllKeysStatus();
    s1 = s0;                                            // Result = 8007F1D0
    s0 = -1;                                            // Result = FFFFFFFF
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE90);                                // Load from: 8007F170
    v0 = 0x18;                                          // Result = 00000018
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF3C);                                 // Store to: 8007F0C4
    v0 = 0x17;                                          // Result = 00000017
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0xF38);                                  // Store to: 8007F0C8
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF3C);                                 // Store to: 8007F0C4
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF34);                                 // Store to: 8007F0CC
loc_800463E0:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xF34);                                // Load from: 8007F0CC
    v0 = lw(a0);
    v0 &= 1;
    if (v0 == 0) goto loc_80046428;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF38);                                // Load from: 8007F0C8
    v0 += s1;
    v0 = lbu(v0);
    if (v0 != 0) goto loc_80046428;
    PSX_voiceparmoff();
loc_80046428:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF38);                                // Load from: 8007F0C8
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xF3C);                                // Load from: 8007F0C4
    v0++;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF38);                                 // Store to: 8007F0C8
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF34);                                // Load from: 8007F0CC
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF3C);                                 // Store to: 8007F0C4
    v0 += 0x18;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF34);                                 // Store to: 8007F0CC
    if (v1 != s0) goto loc_800463E0;
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void PSX_DriverEntry2() noexcept {
loc_80046484:
    return;
}

void PSX_DriverEntry3() noexcept {
loc_8004648C:
    return;
}

void PSX_TrkOff() noexcept {
loc_80046494:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v1 = lbu(s0 + 0x2);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE98);                                // Load from: gWess_Dvr_pss (8007F168)
    v0 <<= 3;
    v0 += v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF2C);                                 // Store to: 8007F0D4
    PSX_TrkMute();
    v0 = lbu(s0 + 0x10);
    if (v0 == 0) goto loc_80046524;
    v0 = lw(s0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xF2C);                                // Load from: 8007F0D4
    v0 |= 0x88;
    sw(v0, s0);
    v0 = lbu(v1 + 0x5);
    v0--;
    sb(v0, v1 + 0x5);
    v0 &= 0xFF;
    if (v0 != 0) goto loc_8004652C;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF2C);                                // Load from: 8007F0D4
    sb(0, v0 + 0x1);
    goto loc_8004652C;
loc_80046524:
    a0 = s0;
    Eng_TrkOff();
loc_8004652C:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PSX_TrkMute() noexcept {
loc_80046540:
    sp -= 0x28;
    sw(s0, sp + 0x18);
    s0 = a0;
    sw(ra, sp + 0x20);
    sw(s1, sp + 0x1C);
    v0 = lbu(s0 + 0x10);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF28);                                 // Store to: 8007F0D8
    if (v0 == 0) goto loc_800466E4;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE8C);                                // Load from: 8007F174
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE90);                                // Load from: 8007F170
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF20);                                 // Store to: 8007F0E0
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF24);                                 // Store to: 8007F0DC
    s1 = 1;                                             // Result = 00000001
    if (v1 == v0) goto loc_800466E4;
loc_8004659C:
    t0 = 0x80080000;                                    // Result = 80080000
    t0 = lw(t0 - 0xF20);                                // Load from: 8007F0E0
    a0 = lw(t0);
    v0 = a0 & 1;
    if (v0 == 0) goto loc_800466B0;
    v1 = lbu(t0 + 0x3);
    v0 = lbu(s0 + 0x1);
    if (v1 != v0) goto loc_800466B0;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5A10);                               // Load from: gpWess_pnotestate (80075A10)
    {
        const bool bJump = (v0 == 0)
        v0 = a0 & 2;
        if (bJump) goto loc_80046648;
    }
    if (v0 != 0) goto loc_80046648;
    v0 = lbu(s0 + 0x13);
    v1 = 0x1F;                                          // Result = 0000001F
    if (v0 != s1) goto loc_8004664C;
    v1 = lbu(s0 + 0x2);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE98);                                // Load from: gWess_Dvr_pss (8007F168)
    v0 <<= 3;
    v0 += v1;
    v1 = lw(t0 + 0x8);
    a0 = lh(v0 + 0x2);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF1C);                                 // Store to: 8007F0E4
    a1 = lbu(t0 + 0x3);
    a2 = lbu(t0 + 0x5);
    a3 = lbu(t0 + 0x6);
    sw(v1, sp + 0x10);
    v0 = lw(t0 + 0xC);
    sw(v0, sp + 0x14);
    add_music_mute_note();
loc_80046648:
    v1 = 0x1F;                                          // Result = 0000001F
loc_8004664C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A07);                              // Load from: gWess_UNKNOWN_status_byte (80075A07)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xF20);                                // Load from: 8007F0E0
    v1 -= v0;
    v0 = 0x10000000;                                    // Result = 10000000
    v0 = i32(v0) >> v1;
    sw(v0, a0 + 0x14);
    PSX_voicerelease();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF20);                                // Load from: 8007F0E0
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xF28);                                // Load from: 8007F0D8
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5A0C);                               // Load from: 80075A0C
    v0 = lbu(v0 + 0x2);
    a0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xF28);                                 // Store to: 8007F0D8
    v0 = s1 << v0;
    v0 |= v1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5A0C);                                // Store to: 80075A0C
    if (a0 == 0) goto loc_800466E4;
loc_800466B0:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF20);                                // Load from: 8007F0E0
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xF24);                                // Load from: 8007F0DC
    v0 += 0x18;
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF20);                                 // Store to: 8007F0E0
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF24);                                 // Store to: 8007F0DC
    if (v1 != v0) goto loc_8004659C;
loc_800466E4:
    ra = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x28;
    return;
}

void PSX_PatchChg() noexcept {
loc_800466FC:
    v1 = lw(a0 + 0x34);
    v0 = lbu(v1 + 0x2);
    v1 = lbu(v1 + 0x1);
    v0 <<= 8;
    v1 |= v0;
    at = 0x80080000;                                    // Result = 80080000
    sh(v1, at - 0xF18);                                 // Store to: gWess_Dvr_thepatch (8007F0E8)
    sh(v1, a0 + 0xA);
    return;
}

void PSX_PatchMod() noexcept {
loc_80046724:
    return;
}

void PSX_PitchMod() noexcept {
loc_8004672C:
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 = lw(s0 + 0x34);
    v1 = lbu(v0 + 0x2);
    v0 = lbu(v0 + 0x1);
    v1 <<= 8;
    v0 |= v1;
    a0 = v0;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xEFC);                                 // Store to: 8007F104
    v0 <<= 16;
    v1 = lh(s0 + 0xE);
    v0 = u32(i32(v0) >> 16);
    if (v1 == v0) goto loc_80046960;
    v0 = lbu(s0 + 0x10);
    sh(a0, s0 + 0xE);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF14);                                 // Store to: 8007F0EC
    if (v0 == 0) goto loc_80046960;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE8C);                                // Load from: 8007F174
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE90);                                // Load from: 8007F170
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF00);                                 // Store to: 8007F100
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF10);                                 // Store to: 8007F0F0
    s2 = 0x20;                                          // Result = 00000020
    if (v1 == v0) goto loc_80046960;
    s1 = 0x80080000;                                    // Result = 80080000
    s1 -= 0xE70;                                        // Result = 8007F190
loc_800467CC:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xF00);                                // Load from: 8007F100
    v0 = lw(a0);
    v0 &= 1;
    if (v0 == 0) goto loc_8004692C;
    v1 = lbu(a0 + 0x3);
    v0 = lbu(s0 + 0x1);
    {
        const bool bJump = (v1 != v0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_8004692C;
    }
    v1 = lbu(a0 + 0x2);
    sw(s2, s1 + 0x4);                                   // Store to: 8007F194
    v0 = v0 << v1;
    sw(v0, s1);                                         // Store to: 8007F190
    v1 = lh(s0 + 0xE);
    if (v1 != 0) goto loc_8004682C;
    v0 = lbu(a0 + 0x5);
    v0 <<= 8;
    goto loc_800468FC;
loc_8004682C:
    if (i32(v1) <= 0) goto loc_80046888;
    v0 = lw(a0 + 0x8);
    v0 = lb(v0 + 0x9);
    mult(v1, v0);
    v0 = lo;
    v0 += 0x20;
    v1 = u32(i32(v0) >> 13);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF0C);                                 // Store to: 8007F0F4
    v0 &= 0x1FFF;
    v0 = u32(i32(v0) >> 6);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF08);                                 // Store to: 8007F0F8
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF04);                                 // Store to: 8007F0FC
    v0 = lbu(a0 + 0x5);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lhu(v1 - 0xF08);                               // Load from: 8007F0F8
    v0 += v1;
    goto loc_800468E8;
loc_80046888:
    v0 = lw(a0 + 0x8);
    v0 = lb(v0 + 0x8);
    mult(v1, v0);
    v1 = lo;
    v1 = s2 - v1;
    v0 = u32(i32(v1) >> 13);
    v0++;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF0C);                                 // Store to: 8007F0F4
    v1 &= 0x1FFF;
    v1 = u32(i32(v1) >> 6);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF08);                                 // Store to: 8007F0F8
    v0 = 0x80;                                          // Result = 00000080
    v0 -= v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF04);                                 // Store to: 8007F0FC
    v0 = lbu(a0 + 0x5);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lhu(v1 - 0xF08);                               // Load from: 8007F0F8
    v0 -= v1;
loc_800468E8:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lhu(v1 - 0xF04);                               // Load from: 8007F0FC
    v0 <<= 8;
    v1 &= 0x7F;
    v0 |= v1;
loc_800468FC:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0xE70;                                        // Result = 8007F190
    sh(v0, s1 + 0x16);                                  // Store to: 8007F1A6
    LIBSPU_SpuSetVoiceAttr();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF14);                                // Load from: 8007F0EC
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF14);                                 // Store to: 8007F0EC
    if (v0 == 0) goto loc_80046960;
loc_8004692C:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xF00);                                // Load from: 8007F100
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xF10);                                // Load from: 8007F0F0
    v0 += 0x18;
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xF00);                                 // Store to: 8007F100
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xF10);                                 // Store to: 8007F0F0
    if (v1 != v0) goto loc_800467CC;
loc_80046960:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void PSX_ZeroMod() noexcept {
loc_8004697C:
    return;
}

void PSX_ModuMod() noexcept {
loc_80046984:
    return;
}

void PSX_VolumeMod() noexcept {
loc_8004698C:
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 = lw(s0 + 0x34);
    v1 = lbu(s0 + 0x10);
    v0 = lbu(v0 + 0x1);
    sb(v0, s0 + 0xC);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xEF8);                                 // Store to: 8007F108
    if (v1 == 0) goto loc_80046C88;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE8C);                                // Load from: 8007F174
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE90);                                // Load from: 8007F170
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEEC);                                 // Store to: 8007F114
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xEF4);                                 // Store to: 8007F10C
    s2 = 1;                                             // Result = 00000001
    if (v1 == v0) goto loc_80046C88;
    s1 = 0x80080000;                                    // Result = 80080000
    s1 -= 0xE70;                                        // Result = 8007F190
loc_80046A00:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xEEC);                                // Load from: 8007F114
    v0 = lw(a0);
    v0 &= 1;
    if (v0 == 0) goto loc_80046C54;
    v1 = lbu(a0 + 0x3);
    v0 = lbu(s0 + 0x1);
    if (v1 != v0) goto loc_80046C54;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A06);                              // Load from: gWess_pan_status (80075A06)
    {
        const bool bJump = (v0 == 0)
        v0 = 0x40;                                      // Result = 00000040
        if (bJump) goto loc_80046AA8;
    }
    v0 = lw(a0 + 0x8);
    v1 = lbu(v0 + 0x3);
    v0 = lbu(s0 + 0xD);
    v1 <<= 24;
    v1 = u32(i32(v1) >> 24);
    v0 += v1;
    v0 -= 0x40;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xEE8);                                 // Store to: 8007F118
    v0 = (i32(v0) < 0x80);
    {
        const bool bJump = (v0 != 0)
        v0 = 0x7F;                                      // Result = 0000007F
        if (bJump) goto loc_80046A84;
    }
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xEE8);                                 // Store to: 8007F118
loc_80046A84:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lh(v0 - 0xEE8);                                // Load from: 8007F118
    if (i32(v0) >= 0) goto loc_80046AB0;
    at = 0x80080000;                                    // Result = 80080000
    sh(0, at - 0xEE8);                                  // Store to: 8007F118
    goto loc_80046AB0;
loc_80046AA8:
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xEE8);                                 // Store to: 8007F118
loc_80046AB0:
    v0 = lbu(s0 + 0x13);
    if (v0 != 0) goto loc_80046B04;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEEC);                                // Load from: 8007F114
    v1 = lw(v0 + 0x8);
    a0 = lbu(v0 + 0x6);
    v0 = lbu(v1 + 0x2);
    mult(a0, v0);
    v1 = lo;
    v0 = lbu(s0 + 0xC);
    mult(v1, v0);
    v1 = lo;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A04);                              // Load from: gWess_master_sfx_volume (80075A04)
    mult(v1, v0);
    goto loc_80046B48;
loc_80046B04:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEEC);                                // Load from: 8007F114
    v1 = lw(v0 + 0x8);
    a0 = lbu(v0 + 0x6);
    v0 = lbu(v1 + 0x2);
    mult(a0, v0);
    v1 = lo;
    v0 = lbu(s0 + 0xC);
    mult(v1, v0);
    v1 = lo;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A05);                              // Load from: gWess_master_mus_volume (80075A05)
    mult(v1, v0);
loc_80046B48:
    v0 = lo;
    v0 = u32(i32(v0) >> 21);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEF0);                                 // Store to: 8007F110
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEEC);                                // Load from: 8007F114
    v1 = lbu(v0 + 0x2);
    v0 = 3;                                             // Result = 00000003
    sw(v0, s1 + 0x4);                                   // Store to: 8007F194
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A06);                              // Load from: gWess_pan_status (80075A06)
    v1 = s2 << v1;
    sw(v1, s1);                                         // Store to: 8007F190
    if (v0 != 0) goto loc_80046BA0;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lhu(v0 - 0xEF0);                               // Load from: 8007F110
    v0 <<= 6;
    sh(v0, s1 + 0x8);                                   // Store to: 8007F198
    sh(v0, s1 + 0xA);                                   // Store to: 8007F19A
    goto loc_80046C24;
loc_80046BA0:
    {
        const bool bJump = (v0 != s2)
        v0 = 0x80;                                      // Result = 00000080
        if (bJump) goto loc_80046BE8;
    }
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xEF0);                                // Load from: 8007F110
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lh(v1 - 0xEE8);                                // Load from: 8007F118
    a0 <<= 7;
    v0 -= v1;
    mult(a0, v0);
    v0 = lo;
    v1++;
    mult(a0, v1);
    v0 = u32(i32(v0) >> 7);
    sh(v0, s1 + 0x8);                                   // Store to: 8007F198
    v0 = lo;
    v0 = u32(i32(v0) >> 7);
    sh(v0, s1 + 0xA);                                   // Store to: 8007F19A
    goto loc_80046C24;
loc_80046BE8:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xEF0);                                // Load from: 8007F110
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lh(v1 - 0xEE8);                                // Load from: 8007F118
    a0 <<= 7;
    v0 -= v1;
    mult(a0, v0);
    v0 = lo;
    v1++;
    mult(a0, v1);
    v0 = u32(i32(v0) >> 7);
    sh(v0, s1 + 0xA);                                   // Store to: 8007F19A
    v0 = lo;
    v0 = u32(i32(v0) >> 7);
    sh(v0, s1 + 0x8);                                   // Store to: 8007F198
loc_80046C24:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0xE70;                                        // Result = 8007F190
    LIBSPU_SpuSetVoiceAttr();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEF8);                                // Load from: 8007F108
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEF8);                                 // Store to: 8007F108
    if (v0 == 0) goto loc_80046C88;
loc_80046C54:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEEC);                                // Load from: 8007F114
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xEF4);                                // Load from: 8007F10C
    v0 += 0x18;
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEEC);                                 // Store to: 8007F114
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xEF4);                                 // Store to: 8007F10C
    if (v1 != v0) goto loc_80046A00;
loc_80046C88:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void PSX_PanMod() noexcept {
loc_80046CA4:
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 = lw(s0 + 0x34);
    v0 = lbu(v0 + 0x1);
    sb(v0, s0 + 0xD);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A06);                              // Load from: gWess_pan_status (80075A06)
    if (v0 == 0) goto loc_80046F64;
    v0 = lbu(s0 + 0x10);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEE4);                                 // Store to: 8007F11C
    if (v0 == 0) goto loc_80046F64;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE8C);                                // Load from: 8007F174
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE90);                                // Load from: 8007F170
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xED8);                                 // Store to: 8007F128
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xEE0);                                 // Store to: 8007F120
    s2 = 1;                                             // Result = 00000001
    if (v1 == v0) goto loc_80046F64;
    s1 = 0x80080000;                                    // Result = 80080000
    s1 -= 0xE70;                                        // Result = 8007F190
loc_80046D34:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xED8);                                // Load from: 8007F128
    v0 = lw(a0);
    v0 &= 1;
    if (v0 == 0) goto loc_80046F30;
    v1 = lbu(a0 + 0x3);
    v0 = lbu(s0 + 0x1);
    if (v1 != v0) goto loc_80046F30;
    v0 = lw(a0 + 0x8);
    v1 = lbu(v0 + 0x3);
    v0 = lbu(s0 + 0xD);
    v1 <<= 24;
    v1 = u32(i32(v1) >> 24);
    v0 += v1;
    v0 -= 0x40;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xED4);                                 // Store to: 8007F12C
    v0 = (i32(v0) < 0x80);
    {
        const bool bJump = (v0 != 0)
        v0 = 0x7F;                                      // Result = 0000007F
        if (bJump) goto loc_80046DA4;
    }
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xED4);                                 // Store to: 8007F12C
loc_80046DA4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lh(v0 - 0xED4);                                // Load from: 8007F12C
    if (i32(v0) >= 0) goto loc_80046DC0;
    at = 0x80080000;                                    // Result = 80080000
    sh(0, at - 0xED4);                                  // Store to: 8007F12C
loc_80046DC0:
    v0 = lbu(s0 + 0x13);
    if (v0 != 0) goto loc_80046E08;
    v0 = lw(a0 + 0x8);
    v1 = lbu(a0 + 0x6);
    v0 = lbu(v0 + 0x2);
    mult(v1, v0);
    v1 = lo;
    v0 = lbu(s0 + 0xC);
    mult(v1, v0);
    v1 = lo;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A04);                              // Load from: gWess_master_sfx_volume (80075A04)
    mult(v1, v0);
    goto loc_80046E40;
loc_80046E08:
    v0 = lw(a0 + 0x8);
    v1 = lbu(a0 + 0x6);
    v0 = lbu(v0 + 0x2);
    mult(v1, v0);
    v1 = lo;
    v0 = lbu(s0 + 0xC);
    mult(v1, v0);
    v1 = lo;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A05);                              // Load from: gWess_master_mus_volume (80075A05)
    mult(v1, v0);
loc_80046E40:
    v0 = lo;
    v0 = u32(i32(v0) >> 21);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEDC);                                 // Store to: 8007F124
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xED8);                                // Load from: 8007F128
    v1 = lbu(v0 + 0x2);
    v0 = 3;                                             // Result = 00000003
    sw(v0, s1 + 0x4);                                   // Store to: 8007F194
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A06);                              // Load from: gWess_pan_status (80075A06)
    v1 = s2 << v1;
    sw(v1, s1);                                         // Store to: 8007F190
    if (v0 != s2) goto loc_80046EC0;
    v0 = 0x80;                                          // Result = 00000080
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xEDC);                                // Load from: 8007F124
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lh(v1 - 0xED4);                                // Load from: 8007F12C
    a0 <<= 7;
    v0 -= v1;
    mult(a0, v0);
    v0 = lo;
    v1++;
    mult(a0, v1);
    v0 = u32(i32(v0) >> 7);
    sh(v0, s1 + 0x8);                                   // Store to: 8007F198
    v0 = lo;
    v0 = u32(i32(v0) >> 7);
    sh(v0, s1 + 0xA);                                   // Store to: 8007F19A
    goto loc_80046F00;
loc_80046EC0:
    v0 = 0x80;                                          // Result = 00000080
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xEDC);                                // Load from: 8007F124
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lh(v1 - 0xED4);                                // Load from: 8007F12C
    a0 <<= 7;
    v0 -= v1;
    mult(a0, v0);
    v0 = lo;
    v1++;
    mult(a0, v1);
    v0 = u32(i32(v0) >> 7);
    sh(v0, s1 + 0xA);                                   // Store to: 8007F19A
    v0 = lo;
    v0 = u32(i32(v0) >> 7);
    sh(v0, s1 + 0x8);                                   // Store to: 8007F198
loc_80046F00:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 -= 0xE70;                                        // Result = 8007F190
    LIBSPU_SpuSetVoiceAttr();
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEE4);                                // Load from: 8007F11C
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEE4);                                 // Store to: 8007F11C
    if (v0 == 0) goto loc_80046F64;
loc_80046F30:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xED8);                                // Load from: 8007F128
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xEE0);                                // Load from: 8007F120
    v0 += 0x18;
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xED8);                                 // Store to: 8007F128
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xEE0);                                 // Store to: 8007F120
    if (v1 != v0) goto loc_80046D34;
loc_80046F64:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void PSX_PedalMod() noexcept {
loc_80046F80:
    return;
}

void PSX_ReverbMod() noexcept {
loc_80046F88:
    return;
}

void PSX_ChorusMod() noexcept {
loc_80046F90:
    return;
}

void PSX_voiceon() noexcept {
loc_80046F98:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    v0 = lw(a0);
    v1 = -3;                                            // Result = FFFFFFFD
    v0 |= 1;
    v0 &= v1;
    sw(v0, a0);
    v0 = lbu(a1 + 0x1);
    t0 = lbu(sp + 0x28);
    t1 = lbu(sp + 0x2C);
    sb(v0, a0 + 0x3);
    v0 = lbu(a1 + 0x8);
    sb(t0, a0 + 0x5);
    sb(t1, a0 + 0x6);
    sb(0, a0 + 0x7);
    sb(v0, a0 + 0x4);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE84);                                // Load from: 8007F17C
    sw(a2, a0 + 0x8);
    sw(a3, a0 + 0xC);
    v0 = lw(v0);
    sw(v0, a0 + 0x10);
    v1 = lhu(a2 + 0xE);
    v0 = v1 & 0x20;
    {
        const bool bJump = (v0 == 0)
        v0 = v1 & 0x1F;
        if (bJump) goto loc_80047018;
    }
    v1 = 0x1F;                                          // Result = 0000001F
    v1 -= v0;
    v0 = 0x10000000;                                    // Result = 10000000
    goto loc_80047024;
loc_80047018:
    v1 = 0x1F;                                          // Result = 0000001F
    v1 -= v0;
    v0 = 0x5DC0000;                                     // Result = 05DC0000
loc_80047024:
    v0 = i32(v0) >> v1;
    sw(v0, a0 + 0x14);
    v0 = lbu(a1 + 0x10);
    v0++;
    sb(v0, a1 + 0x10);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE9C);                                // Load from: 8007F164
    a2 = t1;
    v0 = lbu(v1 + 0x6);
    a1 = t0;
    v0++;
    sb(v0, v1 + 0x6);
    TriggerPSXVoice();
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PSX_voiceparmoff() noexcept {
loc_8004706C:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v1 = lbu(s0 + 0x3);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xE9C);                                // Load from: 8007F164
    v0 = v1 << 2;
    v0 += v1;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE94);                                // Load from: 8007F16C
    v0 <<= 4;
    v0 += v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xED0);                                 // Store to: 8007F130
    v0 = lbu(a0 + 0x6);
    v0--;
    sb(v0, a0 + 0x6);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xED0);                                // Load from: 8007F130
    v0 = lbu(v1 + 0x10);
    v0--;
    sb(v0, v1 + 0x10);
    v0 &= 0xFF;
    if (v0 != 0) goto loc_80047108;
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xED0);                                // Load from: 8007F130
    v0 = lw(a0);
    v0 &= 0x80;
    if (v0 == 0) goto loc_80047108;
    Eng_TrkOff();
loc_80047108:
    v0 = lw(s0);
    v1 = -2;                                            // Result = FFFFFFFE
    v0 &= v1;
    v1 = -3;                                            // Result = FFFFFFFD
    v0 &= v1;
    sw(v0, s0);
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void PSX_voicerelease() noexcept {
loc_80047134:
    v0 = 1;                                             // Result = 00000001
    v1 = lbu(a0 + 0x2);
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x5A08);                               // Load from: 80075A08
    v0 = v0 << v1;
    v0 |= a1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5A08);                                // Store to: 80075A08
    v0 = lw(a0);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE84);                                // Load from: 8007F17C
    v0 |= 2;
    sw(v0, a0);
    v0 = lw(v1);
    v1 = lw(a0 + 0x14);
    v0 += v1;
    sw(v0, a0 + 0x10);
    return;
}

void PSX_voicenote() noexcept {
loc_80047180:
    sp -= 0x30;
    sw(s4, sp + 0x28);
    s4 = lbu(sp + 0x40);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE90);                                // Load from: 8007F170
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE8C);                                // Load from: 8007F174
    sw(s0, sp + 0x18);
    s0 = a0;
    sw(s2, sp + 0x20);
    s2 = a1;
    sw(s3, sp + 0x24);
    s3 = a2;
    sw(s1, sp + 0x1C);
    sw(ra, sp + 0x2C);
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0xEC8);                                  // Store to: 8007F138
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEC4);                                 // Store to: 8007F13C
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xECC);                                 // Store to: 8007F134
    s1 = a3;
    if (v1 == v0) goto loc_80047328;
    a2 = 1;                                             // Result = 00000001
loc_800471E8:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xEC4);                                // Load from: 8007F13C
    a1 = lw(a0);
    v0 = a1 & 1;
    a3 = s3;
    if (v0 != 0) goto loc_80047230;
    a1 = s0;
    a2 = s2;
    v0 = s1 & 0xFF;
    sw(v0, sp + 0x10);
    sw(s4, sp + 0x14);
    PSX_voiceon();
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0xEC8);                                  // Store to: 8007F138
    goto loc_80047328;
loc_80047230:
    v1 = lbu(a0 + 0x4);
    v0 = lbu(s0 + 0x8);
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_800472F4;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5A18);                               // Load from: 80075A18
    v0 = (i32(v1) < i32(v0));
    {
        const bool bJump = (v0 != 0)
        v0 = a1 & 2;
        if (bJump) goto loc_800472CC;
    }
    if (v0 == 0) goto loc_80047290;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5A14);                               // Load from: 80075A14
    v0 = lw(v0);
    v0 &= 2;
    if (v0 == 0) goto loc_800472CC;
    goto loc_800472B0;
loc_80047290:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5A14);                               // Load from: 80075A14
    v0 = lw(v0);
    v0 &= 2;
    if (v0 != 0) goto loc_800472F4;
loc_800472B0:
    v0 = lw(a0 + 0x10);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5A1C);                               // Load from: 80075A1C
    v0 = (v0 < v1);
    if (v0 == 0) goto loc_800472F4;
loc_800472CC:
    at = 0x80080000;                                    // Result = 80080000
    sw(a2, at - 0xEC8);                                 // Store to: 8007F138
    v0 = lbu(a0 + 0x4);
    v1 = lw(a0 + 0x10);
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x5A14);                                // Store to: 80075A14
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5A18);                                // Store to: 80075A18
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5A1C);                                // Store to: 80075A1C
loc_800472F4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEC4);                                // Load from: 8007F13C
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xECC);                                // Load from: 8007F134
    v0 += 0x18;
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEC4);                                 // Store to: 8007F13C
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xECC);                                 // Store to: 8007F134
    if (v1 != v0) goto loc_800471E8;
loc_80047328:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEC8);                                // Load from: 8007F138
    if (v0 == 0) goto loc_80047370;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5A14);                               // Load from: 80075A14
    PSX_voiceparmoff();
    a1 = s0;
    a2 = s2;
    a3 = s3;
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5A14);                               // Load from: 80075A14
    v0 = s1 & 0xFF;
    sw(v0, sp + 0x10);
    sw(s4, sp + 0x14);
    PSX_voiceon();
loc_80047370:
    ra = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x30;
    return;
}

void PSX_NoteOn() noexcept {
loc_80047394:
    sp -= 0x20;
    sw(s0, sp + 0x18);
    s0 = a0;
    sw(ra, sp + 0x1C);
    v0 = lw(s0 + 0x34);
    v1 = lw(s0 + 0x34);
    v0 = lbu(v0 + 0x1);
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xEBC);                                 // Store to: 8007F144
    v0 = lbu(v1 + 0x2);
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xEB8);                                 // Store to: 8007F148
    v1 = lbu(s0 + 0x13);
    v0 = 2;                                             // Result = 00000002
    if (v1 != v0) goto loc_80047428;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lbu(v1 - 0xEBC);                               // Load from: 8007F144
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE74);                                // Load from: 8007F18C
    v1 <<= 2;
    v1 += v0;
    v0 = lh(v1);
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xE80);                                // Load from: 8007F180
    v0 <<= 2;
    v0 += a0;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEB0);                                 // Store to: 8007F150
    v0 = lbu(v1 + 0x2);
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xEBC);                                 // Store to: 8007F144
    goto loc_80047444;
loc_80047428:
    v0 = lh(s0 + 0xA);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE80);                                // Load from: 8007F180
    v0 <<= 2;
    v0 += v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEB0);                                 // Store to: 8007F150
loc_80047444:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEB0);                                // Load from: 8007F150
    v1 = lbu(v0);
    at = 0x80080000;                                    // Result = 80080000
    sw(0, at - 0xEC0);                                  // Store to: 8007F140
    v0 = v1 - 1;
    at = 0x80080000;                                    // Result = 80080000
    sb(v1, at - 0xEB4);                                 // Store to: 8007F14C
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xEB4);                                 // Store to: 8007F14C
    v0 &= 0xFF;
    v1 = 0xFF;                                          // Result = 000000FF
    if (v0 == v1) goto loc_80047564;
loc_80047480:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEB0);                                // Load from: 8007F150
    v1 = lh(v0 + 0x2);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEC0);                                // Load from: 8007F140
    v1 += v0;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE7C);                                // Load from: 8007F184
    v1 <<= 4;
    a1 = v1 + v0;
    v1 = lh(a1 + 0xA);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE78);                                // Load from: 8007F188
    v0 <<= 2;
    a2 = v0 + v1;
    v0 = lw(a2 + 0x8);
    at = 0x80080000;                                    // Result = 80080000
    sw(a1, at - 0xEAC);                                 // Store to: 8007F154
    at = 0x80080000;                                    // Result = 80080000
    sw(a2, at - 0xEA8);                                 // Store to: 8007F158
    if (v0 == 0) goto loc_8004752C;
    v0 = lbu(a1 + 0x6);
    a3 = 0x80080000;                                    // Result = 80080000
    a3 = lbu(a3 - 0xEBC);                               // Load from: 8007F144
    v0 = (a3 < v0);
    if (v0 != 0) goto loc_8004752C;
    v0 = lbu(a1 + 0x7);
    v0 = (v0 < a3);
    a0 = s0;
    if (v0 != 0) goto loc_8004752C;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xEB8);                               // Load from: 8007F148
    sw(v0, sp + 0x10);
    PSX_voicenote();
loc_8004752C:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xEB4);                               // Load from: 8007F14C
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xEC0);                                // Load from: 8007F140
    v0--;
    v1++;
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xEB4);                                 // Store to: 8007F14C
    v0 &= 0xFF;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xEC0);                                 // Store to: 8007F140
    v1 = 0xFF;                                          // Result = 000000FF
    if (v0 != v1) goto loc_80047480;
loc_80047564:
    ra = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x20;
    return;
}

void PSX_NoteOff() noexcept {
loc_80047578:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE90);                                // Load from: 8007F170
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xE8C);                                // Load from: 8007F174
    sp -= 0x20;
    sw(s0, sp + 0x10);
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEA0);                                 // Store to: 8007F160
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xEA4);                                 // Store to: 8007F15C
    s0 = a0;
    if (v1 == v0) goto loc_80047648;
    s2 = 1;                                             // Result = 00000001
    s1 = -1;                                            // Result = FFFFFFFF
loc_800475C4:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xEA0);                                // Load from: 8007F160
    v0 = lw(a0);
    v0 &= 3;
    if (v0 != s2) goto loc_80047618;
    v0 = lw(s0 + 0x34);
    v1 = lbu(a0 + 0x5);
    v0 = lbu(v0 + 0x1);
    if (v1 != v0) goto loc_80047618;
    v1 = lbu(a0 + 0x3);
    v0 = lbu(s0 + 0x1);
    if (v1 != v0) goto loc_80047618;
    PSX_voicerelease();
loc_80047618:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xEA0);                                // Load from: 8007F160
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xEA4);                                // Load from: 8007F15C
    v0 += 0x18;
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xEA0);                                 // Store to: 8007F160
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xEA4);                                 // Store to: 8007F15C
    if (v1 != s1) goto loc_800475C4;
loc_80047648:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void Read_Vlq() noexcept {
loc_80047664:
    a2 = a0;
    v1 = lbu(a2);
    v0 = v1 & 0x80;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xE00);                                 // Store to: gWess_Read_Vlq_v (8007F200)
    a2++;
    if (v0 == 0) goto loc_800476C4;
    v0 = v1 & 0x7F;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xE00);                                 // Store to: gWess_Read_Vlq_v (8007F200)
loc_80047690:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE00);                                // Load from: gWess_Read_Vlq_v (8007F200)
    a0 = lbu(a2);
    v0 <<= 7;
    v1 = a0 & 0x7F;
    v0 += v1;
    at = 0x80080000;                                    // Result = 80080000
    sb(a0, at - 0xDFC);                                 // Store to: gWess_Read_Vlq_c (8007F204)
    a0 &= 0x80;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xE00);                                 // Store to: gWess_Read_Vlq_v (8007F200)
    a2++;
    if (a0 != 0) goto loc_80047690;
loc_800476C4:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xE00);                                // Load from: gWess_Read_Vlq_v (8007F200)
    sw(v0, a1);
    v0 = a2;
    return;
}

void Write_Vlq() noexcept {
    sp -= 0x10;
    v0 = a1 & 0x7F;
    sb(v0, sp);
    a1 >>= 7;
    v1 = sp + 1;
    if (a1 == 0) goto loc_80047708;
loc_800476F4:
    v0 = a1 | 0x80;
    sb(v0, v1);
    a1 >>= 7;
    v1++;
    if (a1 != 0) goto loc_800476F4;
loc_80047708:
    v1--;
    v0 = lbu(v1);
    sb(v0, a0);
    v0 = lbu(v1);
    v0 &= 0x80;
    a0++;
    if (v0 != 0) goto loc_80047708;
    v0 = a0;
    sp += 0x10;
    return;
}

void Len_Vlq() noexcept {
    sp -= 0x20;
    a1 = sp + 0x10;
    v0 = a0 & 0x7F;
    sb(v0, sp);
    a0 >>= 7;
    v1 = sp + 1;
    if (a0 == 0) goto loc_8004776C;
loc_80047758:
    v0 = a0 | 0x80;
    sb(v0, v1);
    a0 >>= 7;
    v1++;
    if (a0 != 0) goto loc_80047758;
loc_8004776C:
    v1--;
    v0 = lbu(v1);
    sb(v0, a1);
    v0 = lbu(v1);
    v0 &= 0x80;
    a1++;
    if (v0 != 0) goto loc_8004776C;
    v0 = sp + 0x10;
    v0 = a1 - v0;
    v0 &= 0xFF;
    sp += 0x20;
    return;
}

void Eng_DriverInit() noexcept {
loc_800477A8:
    v0 = lw(a0 + 0x28);
    v1 = lw(a0 + 0x20);
    a1 = lw(a0 + 0xC);
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x5AC0);                                // Store to: gWess_SeqEngine_pm_stat (80075AC0)
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5AB8);                                // Store to: 80075AB8
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5ABC);                                // Store to: gWess_Eng_piter (80075ABC)
    v0 = lbu(a1 + 0xC);
    at = 0x80070000;                                    // Result = 80070000
    sb(v0, at + 0x5AB4);                                // Store to: 80075AB4
    return;
}

void Eng_DriverExit() noexcept {
loc_800477E4:
    return;
}

void Eng_DriverEntry1() noexcept {
loc_800477EC:
    return;
}

void Eng_DriverEntry2() noexcept {
loc_800477F4:
    return;
}

void Eng_DriverEntry3() noexcept {
loc_800477FC:
    return;
}

void Eng_TrkOff() noexcept {
loc_80047804:
    a1 = a0;
    v1 = lbu(a1 + 0x2);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    a0 = lw(a1);
    v1 = lw(v1 + 0x20);
    v0 <<= 3;
    v1 += v0;
    v0 = a0 & 8;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xDF8);                                 // Store to: 8007F208
    {
        const bool bJump = (v0 != 0)
        v0 = a0 | 8;
        if (bJump) goto loc_80047874;
    }
    sw(v0, a1);
    v0 = lbu(v1 + 0x5);
    v0--;
    sb(v0, v1 + 0x5);
    v0 &= 0xFF;
    if (v0 != 0) goto loc_80047874;
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xDF8);                                // Load from: 8007F208
    sb(0, v0 + 0x1);
loc_80047874:
    v0 = lw(a1);
    v0 &= 4;
    if (v0 != 0) goto loc_8004799C;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xDF8);                                // Load from: 8007F208
    v1 = lbu(v0 + 0x1C);
    v0 = lw(a0 + 0xC);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xDF0);                                 // Store to: 8007F210
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDF4);                                 // Store to: 8007F20C
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xDF0);                                 // Store to: 8007F210
    a2 = -1;                                            // Result = FFFFFFFF
    if (v1 == v0) goto loc_8004791C;
    a3 = 0xFF;                                          // Result = 000000FF
loc_800478CC:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xDF4);                                // Load from: 8007F20C
    v0 = lbu(a1 + 0x1);
    v1 = lbu(a0);
    {
        const bool bJump = (v1 != v0)
        v0 = a0 + 1;
        if (bJump) goto loc_800478F8;
    }
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDF4);                                 // Store to: 8007F20C
    sb(a3, a0);
    goto loc_8004791C;
loc_800478F8:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xDF0);                                // Load from: 8007F210
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDF4);                                 // Store to: 8007F20C
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xDF0);                                 // Store to: 8007F210
    if (v1 != a2) goto loc_800478CC;
loc_8004791C:
    a2 = -2;                                            // Result = FFFFFFFE
    v0 = lw(a1);
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    v0 &= a2;
    sw(v0, a1);
    v0 = lbu(v1 + 0x5);
    v0--;
    sb(v0, v1 + 0x5);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xDF8);                                // Load from: 8007F208
    v0 = lbu(v1 + 0x4);
    v0--;
    sb(v0, v1 + 0x4);
    v0 &= 0xFF;
    if (v0 != 0) goto loc_8004799C;
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xDF8);                                // Load from: 8007F208
    v0 = lw(v1);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    v0 &= a2;
    sw(v0, v1);
    v0 = lbu(a0 + 0x4);
    v0--;
    sb(v0, a0 + 0x4);
loc_8004799C:
    v0 = lw(a1);
    v1 = -0x11;                                         // Result = FFFFFFEF
    v0 &= v1;
    sw(v0, a1);
    return;
}

void Eng_TrkMute() noexcept {
loc_800479B0:
    return;
}

void Eng_PatchChg() noexcept {
loc_800479B8:
    v0 = lw(a0 + 0x34);
    v0 = lbu(v0 + 0x1);
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xDEC);                                 // Store to: gWess_Eng_thepatch (8007F214)
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xDEC);                               // Load from: gWess_Eng_thepatch (8007F214)
    sh(v0, a0 + 0xA);
    return;
}

void Eng_PatchMod() noexcept {
loc_800479E0:
    return;
}

void Eng_PitchMod() noexcept {
loc_800479E8:
    v1 = lw(a0 + 0x34);
    v0 = lbu(v1 + 0x2);
    v1 = lbu(v1 + 0x1);
    v0 <<= 8;
    v1 |= v0;
    at = 0x80080000;                                    // Result = 80080000
    sh(v1, at - 0xDE8);                                 // Store to: gWess_Eng_thepitchmod (8007F218)
    sh(v1, a0 + 0xE);
    return;
}

void Eng_ZeroMod() noexcept {
loc_80047A10:
    return;
}

void Eng_ModuMod() noexcept {
loc_80047A18:
    return;
}

void Eng_VolumeMod() noexcept {
loc_80047A20:
    v0 = lw(a0 + 0x34);
    v0 = lbu(v0 + 0x1);
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xDE4);                                 // Store to: gWess_Eng_thevolume (8007F21C)
    sb(v0, a0 + 0xC);
    return;
}

void Eng_PanMod() noexcept {
loc_80047A40:
    v0 = lw(a0 + 0x34);
    v0 = lbu(v0 + 0x1);
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xDE0);                                 // Store to: gWess_Eng_thepan (8007F220)
    sb(v0, a0 + 0xD);
    return;
}

void Eng_PedalMod() noexcept {
loc_80047A60:
    return;
}

void Eng_ReverbMod() noexcept {
loc_80047A68:
    return;
}

void Eng_ChorusMod() noexcept {
loc_80047A70:
    return;
}

void Eng_NoteOn() noexcept {
loc_80047A78:
    return;
}

void Eng_NoteOff() noexcept {
loc_80047A80:
    return;
}

void Eng_StatusMark() noexcept {
loc_80047A88:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    sp -= 0x18;
    sw(ra, sp + 0x10);
    v0 = lbu(v1 + 0xA);
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xDD8);                                 // Store to: 8007F228
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xDD8);                               // Load from: 8007F228
    if (v0 == 0) goto loc_80047B94;
    v0 = lw(v1 + 0x10);
    v1 = lw(v1 + 0xC);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDD4);                                 // Store to: 8007F22C
    v1 = lbu(v1 + 0xF);
    v0 = v1 + 0xFF;
    goto loc_80047B84;
loc_80047AD8:
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0xDD4);                                // Load from: 8007F22C
    v0 = lbu(a2);
    if (v0 == 0) goto loc_80047B64;
    a1 = lw(a0 + 0x34);
    v1 = lbu(a2 + 0x1);
    v0 = lbu(a1 + 0x1);
    if (v1 != v0) goto loc_80047B40;
    v0 = lbu(a1 + 0x3);
    a1 = lbu(a1 + 0x2);
    a0 = lbu(a2 + 0x1);
    v0 <<= 8;
    a1 |= v0;
    sh(a1, a2 + 0x2);
    a1 <<= 16;
    v0 = lw(a2 + 0x4);
    a1 = u32(i32(a1) >> 16);
    pcall(v0);
    goto loc_80047B94;
loc_80047B40:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xDD8);                               // Load from: 8007F228
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xDD8);                                 // Store to: 8007F228
    v0 &= 0xFF;
    if (v0 == 0) goto loc_80047B94;
loc_80047B64:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xDD4);                                // Load from: 8007F22C
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lbu(v1 - 0xDDC);                               // Load from: 8007F224
    v0 += 8;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDD4);                                 // Store to: 8007F22C
    v0 = v1 + 0xFF;
loc_80047B84:
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xDDC);                                 // Store to: 8007F224
    if (v1 != 0) goto loc_80047AD8;
loc_80047B94:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void Eng_GateJump() noexcept {
loc_80047BA4:
    a1 = a0;
    v1 = lbu(a1 + 0x2);
    a0 = lw(a1 + 0x34);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    v0 <<= 3;
    v0 += v1;
    v1 = lbu(a0 + 0x1);
    v0 = lw(v0 + 0x10);
    v1 += v0;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xDC8);                                 // Store to: 8007F238
    a0 = lbu(v1);
    v0 = 0xFF;                                          // Result = 000000FF
    if (a0 == 0) goto loc_80047C7C;
    if (a0 != v0) goto loc_80047C0C;
    v0 = lw(a1 + 0x34);
    v0 = lbu(v0 + 0x2);
    sb(v0, v1);
loc_80047C0C:
    v0 = lw(a1 + 0x34);
    v1 = lbu(v0 + 0x4);
    v0 = lbu(v0 + 0x3);
    v1 <<= 8;
    v0 |= v1;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xDD0);                                 // Store to: 8007F230
    v0 <<= 16;
    a0 = u32(i32(v0) >> 16);
    if (i32(a0) < 0) goto loc_80047C7C;
    v0 = lh(a1 + 0x18);
    v0 = (i32(a0) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = a0 << 2;
        if (bJump) goto loc_80047C7C;
    }
    v1 = lw(a1 + 0x38);
    v0 += v1;
    v0 = lw(v0);
    v1 = lw(a1 + 0x30);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDCC);                                 // Store to: 8007F234
    v0 += v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDCC);                                 // Store to: 8007F234
    sw(v0, a1 + 0x34);
loc_80047C7C:
    v0 = lw(a1);
    v0 |= 0x40;
    sw(v0, a1);
    return;
}

void Eng_IterJump() noexcept {
loc_80047C90:
    a1 = a0;
    v1 = lbu(a1 + 0x2);
    a0 = lw(a1 + 0x34);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    v0 <<= 3;
    v0 += v1;
    v1 = lbu(a0 + 0x1);
    v0 = lw(v0 + 0x14);
    v1 += v0;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xDBC);                                 // Store to: 8007F244
    a0 = lbu(v1);
    v0 = 0xFF;                                          // Result = 000000FF
    if (a0 == 0) goto loc_80047D78;
    if (a0 != v0) goto loc_80047CF8;
    v0 = lw(a1 + 0x34);
    v0 = lbu(v0 + 0x2);
    sb(v0, v1);
    goto loc_80047D08;
loc_80047CF8:
    v0 = lbu(v1);
    v0--;
    sb(v0, v1);
loc_80047D08:
    v0 = lw(a1 + 0x34);
    v1 = lbu(v0 + 0x4);
    v0 = lbu(v0 + 0x3);
    v1 <<= 8;
    v0 |= v1;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xDC4);                                 // Store to: 8007F23C
    v0 <<= 16;
    a0 = u32(i32(v0) >> 16);
    if (i32(a0) < 0) goto loc_80047D78;
    v0 = lh(a1 + 0x18);
    v0 = (i32(a0) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = a0 << 2;
        if (bJump) goto loc_80047D78;
    }
    v1 = lw(a1 + 0x38);
    v0 += v1;
    v0 = lw(v0);
    v1 = lw(a1 + 0x30);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDC0);                                 // Store to: 8007F240
    v0 += v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDC0);                                 // Store to: 8007F240
    sw(v0, a1 + 0x34);
loc_80047D78:
    v0 = lw(a1);
    v0 |= 0x40;
    sw(v0, a1);
    return;
}

void Eng_ResetGates() noexcept {
loc_80047D8C:
    v1 = a0;
    v0 = lw(v1 + 0x34);
    a0 = lbu(v0 + 0x1);
    v0 = 0xFF;                                          // Result = 000000FF
    if (a0 != v0) goto loc_80047E50;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    v0 = lw(v0 + 0xC);
    a0 = lbu(v0 + 0xD);
    at = 0x80080000;                                    // Result = 80080000
    sb(a0, at - 0xDB8);                                 // Store to: 8007F248
    v1 = lbu(v1 + 0x2);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    v0 <<= 3;
    v0 += v1;
    v1 = lw(v0 + 0x10);
    v0 = a0 + 0xFF;
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xDB8);                                 // Store to: 8007F248
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xDB4);                                 // Store to: 8007F24C
    {
        const bool bJump = (a0 == 0)
        a0 = 0xFF;                                      // Result = 000000FF
        if (bJump) goto loc_80047E88;
    }
loc_80047E0C:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xDB4);                                // Load from: 8007F24C
    v0 = v1 + 1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDB4);                                 // Store to: 8007F24C
    sb(a0, v1);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lbu(v1 - 0xDB8);                               // Load from: 8007F248
    v0 = v1 + 0xFF;
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xDB8);                                 // Store to: 8007F248
    if (v1 == 0) goto loc_80047E88;
    goto loc_80047E0C;
loc_80047E50:
    v1 = lbu(v1 + 0x2);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    v0 <<= 3;
    v0 += v1;
    v0 = lw(v0 + 0x10);
    v1 = 0xFF;                                          // Result = 000000FF
    v0 += a0;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDB4);                                 // Store to: 8007F24C
    sb(v1, v0);
loc_80047E88:
    return;
}

void Eng_ResetIters() noexcept {
loc_80047E90:
    v1 = a0;
    v0 = lw(v1 + 0x34);
    a0 = lbu(v0 + 0x1);
    v0 = 0xFF;                                          // Result = 000000FF
    if (a0 != v0) goto loc_80047F54;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    v0 = lw(v0 + 0xC);
    a0 = lbu(v0 + 0xE);
    at = 0x80080000;                                    // Result = 80080000
    sb(a0, at - 0xDB0);                                 // Store to: 8007F250
    v1 = lbu(v1 + 0x2);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    v0 <<= 3;
    v0 += v1;
    v1 = lw(v0 + 0x14);
    v0 = a0 + 0xFF;
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xDB0);                                 // Store to: 8007F250
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xDAC);                                 // Store to: 8007F254
    {
        const bool bJump = (a0 == 0)
        a0 = 0xFF;                                      // Result = 000000FF
        if (bJump) goto loc_80047F8C;
    }
loc_80047F10:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xDAC);                                // Load from: 8007F254
    v0 = v1 + 1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDAC);                                 // Store to: 8007F254
    sb(a0, v1);
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lbu(v1 - 0xDB0);                               // Load from: 8007F250
    v0 = v1 + 0xFF;
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xDB0);                                 // Store to: 8007F250
    if (v1 == 0) goto loc_80047F8C;
    goto loc_80047F10;
loc_80047F54:
    v1 = lbu(v1 + 0x2);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    v0 <<= 3;
    v0 += v1;
    v0 = lw(v0 + 0x14);
    v1 = 0xFF;                                          // Result = 000000FF
    v0 += a0;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xDAC);                                 // Store to: 8007F254
    sb(v1, v0);
loc_80047F8C:
    return;
}

void Eng_WriteIterBox() noexcept {
loc_80047F94:
    v1 = lbu(a0 + 0x2);
    a1 = lw(a0 + 0x34);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    v0 <<= 3;
    v0 += v1;
    v1 = lbu(a1 + 0x1);
    v0 = lw(v0 + 0x14);
    a0 = lw(a0 + 0x34);
    v1 += v0;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xDA8);                                 // Store to: 8007F258
    v0 = lbu(a0 + 0x2);
    sb(v0, v1);
    return;
}

void Eng_SeqTempo() noexcept {
loc_80047FD8:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v0 = lbu(s0 + 0x2);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    a0 = lw(a0 + 0xC);
    v1 += v0;
    a1 = lh(v1 + 0x2);
    a0 = lw(a0 + 0x10);
    v0 = a1 << 2;
    v0 += a1;
    v0 <<= 2;
    v0 += a0;
    v0 = lhu(v0);
    a0 = lw(v1 + 0xC);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD94);                                 // Store to: 8007F26C
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xDA4);                                 // Store to: 8007F25C
    v1 = lbu(v1 + 0x4);
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xDA4);                                 // Store to: 8007F25C
    v0 <<= 16;
    v0 = u32(i32(v0) >> 16);
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xD9C);                                 // Store to: 8007F264
    at = 0x80080000;                                    // Result = 80080000
    sb(v1, at - 0xDA0);                                 // Store to: 8007F260
    v1 = -1;                                            // Result = FFFFFFFF
    if (v0 == v1) goto loc_80048144;
loc_80048074:
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xD9C);                                // Load from: 8007F264
    v1 = lbu(a0);
    v0 = 0xFF;                                          // Result = 000000FF
    {
        const bool bJump = (v1 == v0)
        v0 = a0 + 1;
        if (bJump) goto loc_8004811C;
    }
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD9C);                                 // Store to: 8007F264
    v0 = lbu(a0);
    v1 = lw(s0 + 0x34);
    a0 = v0 << 2;
    a0 += v0;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AB8);                               // Load from: 80075AB8
    a0 <<= 4;
    a0 += v0;
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xD98);                                 // Store to: 8007F268
    v0 = lbu(v1 + 0x2);
    v1 = lbu(v1 + 0x1);
    v0 <<= 8;
    v1 |= v0;
    sh(v1, a0 + 0x16);
    GetIntsPerSec();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xD98);                                // Load from: 8007F268
    v0 <<= 16;
    a1 = lh(v1 + 0x14);
    a2 = lh(v1 + 0x16);
    a0 = u32(i32(v0) >> 16);
    CalcPartsPerInt();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lbu(v1 - 0xDA0);                               // Load from: 8007F260
    a0 = 0x80080000;                                    // Result = 80080000
    a0 = lw(a0 - 0xD98);                                // Load from: 8007F268
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sb(v1, at - 0xDA0);                                 // Store to: 8007F260
    v1 &= 0xFF;
    sw(v0, a0 + 0x1C);
    if (v1 == 0) goto loc_80048144;
loc_8004811C:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lhu(v0 - 0xDA4);                               // Load from: 8007F25C
    v1 = -1;                                            // Result = FFFFFFFF
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xDA4);                                 // Store to: 8007F25C
    v0 <<= 16;
    v0 = u32(i32(v0) >> 16);
    if (v0 != v1) goto loc_80048074;
loc_80048144:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void Eng_SeqGosub() noexcept {
loc_80048158:
    a2 = a0;
    v0 = lw(a2 + 0x34);
    v1 = lbu(v0 + 0x2);
    v0 = lbu(v0 + 0x1);
    v1 <<= 8;
    v0 |= v1;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD90);                                 // Store to: 8007F270
    v0 <<= 16;
    v1 = u32(i32(v0) >> 16);
    if (i32(v1) < 0) goto loc_80048320;
    v0 = lh(a2 + 0x18);
    v0 = (i32(v1) < i32(v0));
    if (v0 == 0) goto loc_80048320;
    v0 = lbu(a2 + 0x2);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    a0 = lw(a0 + 0xC);
    v1 += v0;
    a1 = lh(v1 + 0x2);
    a0 = lw(a0 + 0x10);
    v0 = a1 << 2;
    v0 += a1;
    v0 <<= 2;
    v0 += a0;
    v0 = lhu(v0);
    a0 = lw(v1 + 0xC);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD78);                                 // Store to: 8007F288
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD8C);                                 // Store to: 8007F274
    v1 = lbu(v1 + 0x4);
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD8C);                                 // Store to: 8007F274
    v0 <<= 16;
    v0 = u32(i32(v0) >> 16);
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xD80);                                 // Store to: 8007F280
    at = 0x80080000;                                    // Result = 80080000
    sb(v1, at - 0xD84);                                 // Store to: 8007F27C
    v1 = -1;                                            // Result = FFFFFFFF
    if (v0 == v1) goto loc_80048320;
    t0 = 0xFF;                                          // Result = 000000FF
    a3 = 0x80070000;                                    // Result = 80070000
    a3 += 0x5B1A;                                       // Result = gWess_CmdLength[1A] (80075B1A)
loc_80048238:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xD80);                                // Load from: 8007F280
    v0 = lbu(v1);
    {
        const bool bJump = (v0 == t0)
        v0 = v1 + 1;
        if (bJump) goto loc_800482F8;
    }
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD80);                                 // Store to: 8007F280
    v1 = lbu(v1);
    v0 = v1 << 2;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AB8);                               // Load from: 80075AB8
    v0 <<= 4;
    v0 += v1;
    a1 = lw(v0 + 0x40);
    a0 = lw(v0 + 0x34);
    v1 = a1 + 4;
    sw(v1, v0 + 0x40);
    v1 = lbu(a3);                                       // Load from: gWess_CmdLength[1A] (80075B1A)
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD7C);                                 // Store to: 8007F284
    v1 += a0;
    sw(v1, a1);
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0xD7C);                                // Load from: 8007F284
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lh(v0 - 0xD90);                                // Load from: 8007F270
    v1 = lw(a1 + 0x38);
    v0 <<= 2;
    v0 += v1;
    v1 = lw(v0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xD84);                               // Load from: 8007F27C
    a0 = lw(a1 + 0x30);
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD88);                                 // Store to: 8007F278
    v1 += a0;
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xD84);                                 // Store to: 8007F27C
    v0 &= 0xFF;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD88);                                 // Store to: 8007F278
    sw(v1, a1 + 0x34);
    if (v0 == 0) goto loc_80048320;
loc_800482F8:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lhu(v0 - 0xD8C);                               // Load from: 8007F274
    v1 = -1;                                            // Result = FFFFFFFF
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD8C);                                 // Store to: 8007F274
    v0 <<= 16;
    v0 = u32(i32(v0) >> 16);
    if (v0 != v1) goto loc_80048238;
loc_80048320:
    v0 = lw(a2);
    v0 |= 0x40;
    sw(v0, a2);
    return;
}

void Eng_SeqJump() noexcept {
loc_80048334:
    a3 = a0;
    v0 = lw(a3 + 0x34);
    v1 = lbu(v0 + 0x2);
    v0 = lbu(v0 + 0x1);
    v1 <<= 8;
    v0 |= v1;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD74);                                 // Store to: 8007F28C
    v0 <<= 16;
    a2 = u32(i32(v0) >> 16);
    if (i32(a2) < 0) goto loc_800484C8;
    v0 = lh(a3 + 0x18);
    v0 = (i32(a2) < i32(v0));
    if (v0 == 0) goto loc_800484C8;
    v0 = lbu(a3 + 0x2);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    a0 = lw(a0 + 0xC);
    v1 += v0;
    a1 = lh(v1 + 0x2);
    a0 = lw(a0 + 0x10);
    v0 = a1 << 2;
    v0 += a1;
    v0 <<= 2;
    v0 += a0;
    v0 = lhu(v0);
    a0 = lw(v1 + 0xC);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD5C);                                 // Store to: 8007F2A4
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD70);                                 // Store to: 8007F290
    v1 = lbu(v1 + 0x4);
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD70);                                 // Store to: 8007F290
    v0 <<= 16;
    v0 = u32(i32(v0) >> 16);
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xD64);                                 // Store to: 8007F29C
    at = 0x80080000;                                    // Result = 80080000
    sb(v1, at - 0xD68);                                 // Store to: 8007F298
    v1 = -1;                                            // Result = FFFFFFFF
    if (v0 == v1) goto loc_800484C8;
    t1 = 0xFF;                                          // Result = 000000FF
    t0 = 0x80070000;                                    // Result = 80070000
    t0 = lw(t0 + 0x5AB8);                               // Load from: 80075AB8
    a2 <<= 2;
loc_80048418:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xD64);                                // Load from: 8007F29C
    v0 = lbu(v1);
    {
        const bool bJump = (v0 == t1)
        v0 = v1 + 1;
        if (bJump) goto loc_800484A0;
    }
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD64);                                 // Store to: 8007F29C
    v0 = lbu(v1);
    v1 = v0 << 2;
    v1 += v0;
    v1 <<= 4;
    v1 += t0;
    v0 = lw(v1 + 0x38);
    a1 = lw(v1 + 0x30);
    v0 += a2;
    a0 = lw(v0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xD68);                               // Load from: 8007F298
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD60);                                 // Store to: 8007F2A0
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xD6C);                                 // Store to: 8007F294
    a0 += a1;
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xD68);                                 // Store to: 8007F298
    v0 &= 0xFF;
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xD6C);                                 // Store to: 8007F294
    sw(a0, v1 + 0x34);
    if (v0 == 0) goto loc_800484C8;
loc_800484A0:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lhu(v0 - 0xD70);                               // Load from: 8007F290
    v1 = -1;                                            // Result = FFFFFFFF
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD70);                                 // Store to: 8007F290
    v0 <<= 16;
    v0 = u32(i32(v0) >> 16);
    if (v0 != v1) goto loc_80048418;
loc_800484C8:
    v0 = lw(a3);
    v0 |= 0x40;
    sw(v0, a3);
    return;
}

void Eng_SeqRet() noexcept {
loc_800484DC:
    a2 = a0;
    v0 = lbu(a2 + 0x2);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    v1 = v0 << 1;
    v1 += v0;
    v1 <<= 3;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5ABC);                               // Load from: gWess_Eng_piter (80075ABC)
    a0 = lw(a0 + 0xC);
    v1 += v0;
    a1 = lh(v1 + 0x2);
    a0 = lw(a0 + 0x10);
    v0 = a1 << 2;
    v0 += a1;
    v0 <<= 2;
    v0 += a0;
    v0 = lhu(v0);
    a0 = lw(v1 + 0xC);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD48);                                 // Store to: 8007F2B8
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD58);                                 // Store to: 8007F2A8
    v1 = lbu(v1 + 0x4);
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD58);                                 // Store to: 8007F2A8
    v0 <<= 16;
    v0 = u32(i32(v0) >> 16);
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xD50);                                 // Store to: 8007F2B0
    at = 0x80080000;                                    // Result = 80080000
    sb(v1, at - 0xD54);                                 // Store to: 8007F2AC
    v1 = -1;                                            // Result = FFFFFFFF
    if (v0 == v1) goto loc_80048618;
    t0 = 0xFF;                                          // Result = 000000FF
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x5AB8);                               // Load from: 80075AB8
    a3 = -1;                                            // Result = FFFFFFFF
loc_8004857C:
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xD50);                                // Load from: 8007F2B0
    v0 = lbu(v1);
    {
        const bool bJump = (v0 == t0)
        v0 = v1 + 1;
        if (bJump) goto loc_800485F0;
    }
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD50);                                 // Store to: 8007F2B0
    v0 = lbu(v1);
    v1 = v0 << 2;
    v1 += v0;
    v1 <<= 4;
    v1 += a1;
    a0 = lw(v1 + 0x40);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD4C);                                 // Store to: 8007F2B4
    v0 = a0 - 4;
    sw(v0, v1 + 0x40);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xD54);                               // Load from: 8007F2AC
    a0 = lw(a0 - 0x4);
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xD54);                                 // Store to: 8007F2AC
    v0 &= 0xFF;
    sw(a0, v1 + 0x34);
    if (v0 == 0) goto loc_80048618;
loc_800485F0:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lhu(v0 - 0xD58);                               // Load from: 8007F2A8
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sh(v0, at - 0xD58);                                 // Store to: 8007F2A8
    v0 <<= 16;
    v0 = u32(i32(v0) >> 16);
    if (v0 != a3) goto loc_8004857C;
loc_80048618:
    v0 = lw(a2);
    v0 |= 0x40;
    sw(v0, a2);
    return;
}

void Eng_SeqEnd() noexcept {
loc_8004862C:
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x18);
    sw(s1, sp + 0x14);
    v0 = lw(s0);
    v0 &= 4;
    if (v0 != 0) goto loc_80048784;
    v1 = lbu(s0 + 0x2);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    v0 = v1 << 1;
    v0 += v1;
    v1 = lw(a0 + 0x20);
    v0 <<= 3;
    v0 += v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD44);                                 // Store to: 8007F2BC
    v1 = lbu(v0 + 0x4);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD38);                                 // Store to: 8007F2C8
    v1 = lw(v0 + 0xC);
    v0 = lbu(a0 + 0x1C);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD34);                                 // Store to: 8007F2CC
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD3C);                                 // Store to: 8007F2C4
    v1 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD34);                                 // Store to: 8007F2CC
    if (v0 == v1) goto loc_800488BC;
    s0 = 0x80070000;                                    // Result = 80070000
    s0 += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
loc_800486C8:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xD3C);                                // Load from: 8007F2C4
    v1 = lbu(v0);
    v0 = 0xFF;                                          // Result = 000000FF
    a0 = v1 << 2;
    if (v1 == v0) goto loc_80048748;
    a0 += v1;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AB8);                               // Load from: 80075AB8
    a0 <<= 4;
    a0 += v0;
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xD40);                                 // Store to: 8007F2C0
    v0 = lbu(a0 + 0x3);
    v0 <<= 2;
    v0 += s0;
    v0 = lw(v0);
    v0 = lw(v0 + 0x14);
    pcall(v0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xD38);                                // Load from: 8007F2C8
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD38);                                 // Store to: 8007F2C8
    if (v0 == 0) goto loc_800488BC;
loc_80048748:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xD3C);                                // Load from: 8007F2C4
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xD34);                                // Load from: 8007F2CC
    v0++;
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD3C);                                 // Store to: 8007F2C4
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD34);                                 // Store to: 8007F2CC
    if (v1 == v0) goto loc_800488BC;
    goto loc_800486C8;
loc_80048784:
    v1 = lbu(s0 + 0x2);
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    v0 = v1 << 1;
    v0 += v1;
    v1 = lw(a0 + 0x20);
    v0 <<= 3;
    v0 += v1;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD44);                                 // Store to: 8007F2BC
    v1 = lbu(v0 + 0x4);
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD38);                                 // Store to: 8007F2C8
    v1 = lw(v0 + 0xC);
    v0 = lbu(a0 + 0x1C);
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD34);                                 // Store to: 8007F2CC
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD3C);                                 // Store to: 8007F2C4
    v1 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD34);                                 // Store to: 8007F2CC
    if (v0 == v1) goto loc_800488AC;
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
loc_800487F8:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xD3C);                                // Load from: 8007F2C4
    v1 = lbu(v0);
    v0 = 0xFF;                                          // Result = 000000FF
    a0 = v1 << 2;
    if (v1 == v0) goto loc_80048878;
    a0 += v1;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AB8);                               // Load from: 80075AB8
    a0 <<= 4;
    a0 += v0;
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xD40);                                 // Store to: 8007F2C0
    v0 = lbu(a0 + 0x3);
    v0 <<= 2;
    v0 += s1;
    v0 = lw(v0);
    v0 = lw(v0 + 0x14);
    pcall(v0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xD38);                                // Load from: 8007F2C8
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD38);                                 // Store to: 8007F2C8
    if (v0 == 0) goto loc_800488AC;
loc_80048878:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xD3C);                                // Load from: 8007F2C4
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xD34);                                // Load from: 8007F2CC
    v0++;
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD3C);                                 // Store to: 8007F2C4
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD34);                                 // Store to: 8007F2CC
    if (v1 != v0) goto loc_800487F8;
loc_800488AC:
    v0 = lw(s0);
    v0 |= 0x40;
    sw(v0, s0);
loc_800488BC:
    ra = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void Eng_TrkTempo() noexcept {
loc_800488D4:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v1 = lw(s0 + 0x34);
    v0 = lbu(v1 + 0x2);
    v1 = lbu(v1 + 0x1);
    v0 <<= 8;
    v1 |= v0;
    sh(v1, s0 + 0x16);
    GetIntsPerSec();
    v0 <<= 16;
    a1 = lh(s0 + 0x14);
    a2 = lh(s0 + 0x16);
    a0 = u32(i32(v0) >> 16);
    CalcPartsPerInt();
    sw(v0, s0 + 0x1C);
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void Eng_TrkGosub() noexcept {
loc_80048930:
    a1 = a0;
    v0 = lw(a1 + 0x34);
    v1 = lbu(v0 + 0x2);
    v0 = lbu(v0 + 0x1);
    v1 <<= 8;
    v0 |= v1;
    v0 <<= 16;
    a2 = u32(i32(v0) >> 16);
    if (i32(a2) < 0) goto loc_800489BC;
    v0 = lh(a1 + 0x18);
    v0 = (i32(a2) < i32(v0));
    if (v0 == 0) goto loc_800489BC;
    a0 = lw(a1 + 0x40);
    v1 = lw(a1 + 0x34);
    v0 = a0 + 4;
    sw(v0, a1 + 0x40);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5B1A);                              // Load from: gWess_CmdLength[1A] (80075B1A)
    v0 += v1;
    sw(v0, a0);
    v1 = lw(a1 + 0x38);
    v0 = a2 << 2;
    v0 += v1;
    v1 = lw(v0);
    v0 = lw(a1);
    a0 = lw(a1 + 0x30);
    v0 |= 0x40;
    v1 += a0;
    sw(v0, a1);
    sw(v1, a1 + 0x34);
loc_800489BC:
    return;
}

void Eng_TrkJump() noexcept {
loc_800489C4:
    a1 = a0;
    v0 = lw(a1 + 0x34);
    v1 = lbu(v0 + 0x2);
    v0 = lbu(v0 + 0x1);
    v1 <<= 8;
    v0 |= v1;
    v0 <<= 16;
    a0 = u32(i32(v0) >> 16);
    if (i32(a0) < 0) goto loc_80048A2C;
    v0 = lh(a1 + 0x18);
    v0 = (i32(a0) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = a0 << 2;
        if (bJump) goto loc_80048A2C;
    }
    v1 = lw(a1 + 0x38);
    a0 = lw(a1 + 0x30);
    v0 += v1;
    v1 = lw(v0);
    v0 = lw(a1);
    sw(0, a1 + 0x4);
    v0 |= 0x40;
    v1 += a0;
    sw(v0, a1);
    sw(v1, a1 + 0x34);
loc_80048A2C:
    return;
}

void Eng_TrkRet() noexcept {
loc_80048A34:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v1 = lw(s0 + 0x40);
    v0 = v1 - 4;
    sw(v0, s0 + 0x40);
    a0 = lw(v1 - 0x4);
    a1 = s0 + 4;
    sw(a0, s0 + 0x34);
    Read_Vlq();
    v1 = lw(s0);
    sw(v0, s0 + 0x34);
    v1 |= 0x40;
    sw(v1, s0);
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void Eng_TrkEnd() noexcept {
loc_80048A88:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    s0 = a0;
    sw(ra, sp + 0x14);
    v1 = lw(s0);
    v0 = v1 & 4;
    {
        const bool bJump = (v0 != 0)
        v0 = v1 & 0x20;
        if (bJump) goto loc_80048B00;
    }
    if (v0 == 0) goto loc_80048AC8;
    v0 = lw(s0 + 0x28);
    v0 = (v0 < 0x10);
    a1 = s0 + 4;
    if (v0 == 0) goto loc_80048B1C;
loc_80048AC8:
    v0 = lbu(s0 + 0x3);
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    at += v0;
    v0 = lw(at);
    v0 = lw(v0 + 0x14);
    a0 = s0;
    pcall(v0);
    goto loc_80048B78;
loc_80048B00:
    if (v0 == 0) goto loc_80048B38;
    v0 = lw(s0 + 0x28);
    v0 = (v0 < 0x10);
    a1 = s0 + 4;
    if (v0 != 0) goto loc_80048B38;
loc_80048B1C:
    a0 = lw(s0 + 0x30);
    v0 = v1 | 0x40;
    sw(v0, s0);
    sw(a0, s0 + 0x34);
    Read_Vlq();
    sw(v0, s0 + 0x34);
    goto loc_80048B78;
loc_80048B38:
    v0 = lbu(s0 + 0x3);
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    at += v0;
    v0 = lw(at);
    v0 = lw(v0 + 0x14);
    a0 = s0;
    pcall(v0);
    v0 = lw(s0);
    v0 |= 0x40;
    sw(v0, s0);
loc_80048B78:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void Eng_NullEvent() noexcept {
loc_80048B8C:
    return;
}

void SeqEngine() noexcept {
loc_80048B94:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AC0);                               // Load from: gWess_SeqEngine_pm_stat (80075AC0)
    sp -= 0x20;
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    sw(s0, sp + 0x10);
    v0 = lbu(v0 + 0x5);
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xD2C);                                 // Store to: gWess_SeqEngine_tmpNumTracks (8007F2D4)
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xD2C);                               // Load from: gWess_SeqEngine_tmpNumTracks (8007F2D4)
    if (v0 == 0) goto loc_80048E8C;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lbu(v1 + 0x5AB4);                              // Load from: 80075AB4
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AB8);                               // Load from: 80075AB8
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD30);                                 // Store to: 8007F2D0
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD28);                                 // Store to: 8007F2D8
    if (v1 == v0) goto loc_80048E8C;
    s2 = 0x80070000;                                    // Result = 80070000
    s2 += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    s1 = 0x80070000;                                    // Result = 80070000
    s1 += 0x5B00;                                       // Result = gWess_CmdLength[0] (80075B00)
loc_80048C14:
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0xD30);                                // Load from: 8007F2D0
    v1 = lw(a2);
    v0 = v1 & 1;
    {
        const bool bJump = (v0 == 0)
        v0 = v1 & 8;
        if (bJump) goto loc_80048E58;
    }
    if (v0 != 0) goto loc_80048E34;
    v0 = lw(a2 + 0x20);
    v1 = lw(a2 + 0x1C);
    a0 = lw(a2 + 0x24);
    v0 += v1;
    sw(v0, a2 + 0x20);
    v0 >>= 16;
    v1 = lw(a2 + 0x28);
    a1 = lhu(a2 + 0x20);
    v0 += v1;
    sw(v0, a2 + 0x28);
    v0 = lhu(a2 + 0x22);
    v1 = lw(a2);
    sw(a1, a2 + 0x20);
    v0 += a0;
    v1 &= 0x10;
    sw(v0, a2 + 0x24);
    if (v1 == 0) goto loc_80048E10;
    v1 = lw(a2 + 0x2C);
    v0 = lw(a2 + 0x28);
    v0 = (v0 < v1);
    if (v0 != 0) goto loc_80048E10;
    v0 = lbu(a2 + 0x3);
    v0 <<= 2;
    v0 += s2;
    v0 = lw(v0);
    v0 = lw(v0 + 0x14);
    a0 = a2;
    pcall(v0);
    goto loc_80048E34;
loc_80048CC8:
    v0 = lw(a1);
    s0 = v0 & 9;
    v0 = 1;                                             // Result = 00000001
    if (s0 != v0) goto loc_80048E34;
    v0 = lw(a1 + 0x24);
    v1 = lw(a1 + 0x4);
    a0 = lw(a1 + 0x34);
    v0 -= v1;
    sw(v0, a1 + 0x24);
    a0 = lbu(a0);
    v0 = a0 - 7;
    v0 = (v0 < 0xC);
    at = 0x80080000;                                    // Result = 80080000
    sw(a0, at - 0xD24);                                 // Store to: 8007F2DC
    {
        const bool bJump = (v0 == 0)
        v0 = a0 - 0x13;
        if (bJump) goto loc_80048D6C;
    }
    v0 = lbu(a1 + 0x3);
    v0 <<= 2;
    v0 += s2;
    v1 = lw(v0);
    v0 = a0 << 2;
    v0 += v1;
    v0 = lw(v0);
    a0 = a1;
    pcall(v0);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xD24);                                // Load from: 8007F2DC
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xD30);                                // Load from: 8007F2D0
    v0 += s1;
    a0 = lbu(v0);
    v0 = lw(v1 + 0x34);
    a1 = v1 + 4;
    a0 += v0;
    sw(a0, v1 + 0x34);
    goto loc_80048DD8;
loc_80048D6C:
    v0 = (v0 < 0x11);
    {
        const bool bJump = (v0 == 0)
        v0 = a0 << 2;
        if (bJump) goto loc_80048DFC;
    }
    at = 0x80070000;                                    // Result = 80070000
    at += 0x5A20;                                       // Result = gWess_DrvFunctions[0] (80075A20)
    at += v0;
    v0 = lw(at);
    a0 = a1;
    pcall(v0);
    a2 = 0x80080000;                                    // Result = 80080000
    a2 = lw(a2 - 0xD30);                                // Load from: 8007F2D0
    v1 = lw(a2);
    v0 = v1 & 0x41;
    {
        const bool bJump = (v0 != s0)
        v0 = -0x41;                                     // Result = FFFFFFBF
        if (bJump) goto loc_80048DF0;
    }
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xD24);                                // Load from: 8007F2DC
    v0 += s1;
    a0 = lbu(v0);
    v0 = lw(a2 + 0x34);
    a1 = a2 + 4;
    a0 += v0;
    sw(a0, a2 + 0x34);
loc_80048DD8:
    Read_Vlq();
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xD30);                                // Load from: 8007F2D0
    sw(v0, v1 + 0x34);
    goto loc_80048E10;
loc_80048DF0:
    v0 &= v1;
    sw(v0, a2);
    goto loc_80048E10;
loc_80048DFC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5A94);                               // Load from: gWess_SeqFunctions[A] (80075A94)
    a0 = a1;
    pcall(v0);
loc_80048E10:
    a1 = 0x80080000;                                    // Result = 80080000
    a1 = lw(a1 - 0xD30);                                // Load from: 8007F2D0
    v1 = lw(a1 + 0x4);
    v0 = lw(a1 + 0x24);
    v0 = (v0 < v1);
    if (v0 == 0) goto loc_80048CC8;
loc_80048E34:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lbu(v0 - 0xD2C);                               // Load from: gWess_SeqEngine_tmpNumTracks (8007F2D4)
    v0--;
    at = 0x80080000;                                    // Result = 80080000
    sb(v0, at - 0xD2C);                                 // Store to: gWess_SeqEngine_tmpNumTracks (8007F2D4)
    v0 &= 0xFF;
    if (v0 == 0) goto loc_80048E8C;
loc_80048E58:
    v0 = 0x80080000;                                    // Result = 80080000
    v0 = lw(v0 - 0xD30);                                // Load from: 8007F2D0
    v1 = 0x80080000;                                    // Result = 80080000
    v1 = lw(v1 - 0xD28);                                // Load from: 8007F2D8
    v0 += 0x50;
    v1--;
    at = 0x80080000;                                    // Result = 80080000
    sw(v0, at - 0xD30);                                 // Store to: 8007F2D0
    v0 = -1;                                            // Result = FFFFFFFF
    at = 0x80080000;                                    // Result = 80080000
    sw(v1, at - 0xD28);                                 // Store to: 8007F2D8
    if (v1 != v0) goto loc_80048C14;
loc_80048E8C:
    a0 = 0x80070000;                                    // Result = 80070000
    a0 = lw(a0 + 0x5AB8);                               // Load from: 80075AB8
    v0 = lbu(a0 + 0x3);
    v0 <<= 2;
    at = 0x80070000;                                    // Result = 80070000
    at += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    at += v0;
    v0 = lw(at);
    v0 = lw(v0 + 0x8);
    pcall(v0);
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void wess_dig_lcd_loader_init() noexcept {
loc_80048EE4:
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5AC4);                                 // Store to: 80075AC4
    a2 = 0;                                             // Result = 00000000
    if (a0 != 0) goto loc_80048F0C;
    v0 = 0;                                             // Result = 00000000
    goto loc_80048FC4;
loc_80048EFC:
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x5AD8);                                // Store to: 80075AD8
    goto loc_80048F50;
loc_80048F0C:
    v0 = lw(a0 + 0xC);
    a1 = lbu(v0 + 0xA);
    v0 = (i32(a2) < i32(a1));
    v1 = 0;                                             // Result = 00000000
    if (v0 == 0) goto loc_80048F50;
    a3 = 1;                                             // Result = 00000001
    a0 = lw(a0 + 0x18);
loc_80048F30:
    v0 = lbu(a0 + 0x4);
    v1++;
    if (v0 == a3) goto loc_80048EFC;
    v0 = (i32(v1) < i32(a1));
    a0 += 0x54;
    if (v0 != 0) goto loc_80048F30;
loc_80048F50:
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x5AD8);                               // Load from: 80075AD8
    v0 = a2;                                            // Result = 00000000
    if (a1 == 0) goto loc_80048FC4;
    a0 = lw(a1 + 0x1C);
    v0 = lh(a1 + 0x8);
    v1 = lh(a1 + 0xC);
    a2 = 1;                                             // Result = 00000001
    at = 0x80070000;                                    // Result = 80070000
    sw(a2, at + 0x5AC4);                                // Store to: 80075AC4
    v0 <<= 2;
    v0 += a0;
    v1 <<= 4;
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x5AC8);                                // Store to: 80075AC8
    a0 = lh(a1 + 0x10);
    v1 += v0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5ACC);                                // Store to: 80075ACC
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5AD0);                                // Store to: 80075AD0
    v0 = a0 << 1;
    v0 += a0;
    v0 <<= 2;
    v0 += v1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5AD4);                                // Store to: 80075AD4
    v0 = a2;                                            // Result = 00000001
loc_80048FC4:
    return;
}

void wess_dig_set_sample_position() noexcept {
loc_80048FCC:
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AD0);                               // Load from: 80075AD0
    v0 = a0 << 1;
    if (v1 == 0) goto loc_80048FF0;
    v0 += a0;
    v0 <<= 2;
    v0 += v1;
    sw(a1, v0 + 0x8);
loc_80048FF0:
    return;
}

void lcd_open() noexcept {
loc_80048FF8:
    sp -= 0x18;
    sw(ra, sp + 0x10);
    psxcd_open();
    a3 = 0x80080000;                                    // Result = 80080000
    a3 -= 0xD20;                                        // Result = 8007F2E0
    a2 = v0;
    t0 = a2 + 0x20;
loc_80049018:
    v0 = lw(a2);
    v1 = lw(a2 + 0x4);
    a0 = lw(a2 + 0x8);
    a1 = lw(a2 + 0xC);
    sw(v0, a3);
    sw(v1, a3 + 0x4);
    sw(a0, a3 + 0x8);
    sw(a1, a3 + 0xC);
    a2 += 0x10;
    a3 += 0x10;
    if (a2 != t0) goto loc_80049018;
    v0 = lw(a2);
    v1 = lw(a2 + 0x4);
    sw(v0, a3);
    sw(v1, a3 + 0x4);
    v0 = 0x80080000;                                    // Result = 80080000
    v0 -= 0xD20;                                        // Result = 8007F2E0
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void lcd_upload_spu_samples() noexcept {
loc_8004906C:
    sp -= 0x30;
    sw(s6, sp + 0x28);
    s6 = a0;
    sw(s4, sp + 0x20);
    s4 = a1;
    sw(s3, sp + 0x1C);
    s3 = a2;
    sw(s5, sp + 0x24);
    s5 = a3;
    sw(s1, sp + 0x14);
    s1 = 0;                                             // Result = 00000000
    sw(s2, sp + 0x18);
    s2 = 0;                                             // Result = 00000000
    sw(s0, sp + 0x10);
    s0 = 0x800;                                         // Result = 00000800
    sw(ra, sp + 0x2C);
loc_800490AC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AE4);                               // Load from: 80075AE4
    {
        const bool bJump = (v0 != 0)
        v0 = (i32(v0) < i32(s0));
        if (bJump) goto loc_80049234;
    }
loc_800490C0:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AE0);                               // Load from: 80075AE0
    {
        const bool bJump = (i32(v0) <= 0)
        v0 <<= 1;
        if (bJump) goto loc_80049178;
    }
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AEC);                               // Load from: 80075AEC
    a1 = v0 + v1;
    v1 = lhu(a1);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 = lw(a2 + 0x5AD0);                               // Load from: 80075AD0
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v1 = v0 + a2;
    v0 = lw(v1 + 0x8);
    if (v0 == 0) goto loc_80049118;
    if (s5 == 0) goto loc_80049178;
loc_80049118:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5ADC);                               // Load from: 80075ADC
    sw(v0, v1 + 0x8);
    if (s3 == 0) goto loc_80049178;
    v0 = lhu(s3);
    v1 = lhu(a1);
    v0 <<= 1;
    v0 += s3;
    sh(v1, v0 + 0x2);
    a0 = lhu(s3);
    v1 = lhu(a1);
    a0 <<= 1;
    v0 = v1 << 1;
    v0 += v1;
    v0 <<= 2;
    v0 += a2;
    v0 = lw(v0 + 0x8);
    a0 += s3;
    v0 >>= 3;
    sh(v0, a0 + 0xCA);
    v0 = lhu(s3);
    v0++;
    sh(v0, s3);
loc_80049178:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lhu(v0 + 0x5AE8);                              // Load from: 80075AE8
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x5AE0);                               // Load from: 80075AE0
    v0 = (i32(a1) < i32(v0));
    {
        const bool bJump = (v0 == 0)
        v0 = s2;
        if (bJump) goto loc_80049380;
    }
    a0 = a1 + 1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AEC);                               // Load from: 80075AEC
    v0 = a0 << 1;
    v0 += v1;
    v1 = lhu(v0);
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x5AE0);                                // Store to: 80075AE0
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AD0);                               // Load from: 80075AD0
    v0 <<= 2;
    v0 += v1;
    a0 = lw(v0 + 0x4);
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x598C);                               // Load from: 8007598C
    v1 = s4 + s1;
    at = 0x80070000;                                    // Result = 80070000
    sw(v1, at + 0x5ADC);                                // Store to: 80075ADC
    v0 -= s4;
    v0 += s1;
    v0 = (v0 < a0);
    at = 0x80070000;                                    // Result = 80070000
    sw(a0, at + 0x5AE4);                                // Store to: 80075AE4
    {
        const bool bJump = (v0 == 0)
        v0 = s2;
        if (bJump) goto loc_8004921C;
    }
    at = 0x80070000;                                    // Result = 80070000
    sw(a1, at + 0x5AE0);                                // Store to: 80075AE0
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5AE4);                                 // Store to: 80075AE4
    goto loc_80049380;
loc_8004921C:
    if (s0 == 0) goto loc_80049380;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AE4);                               // Load from: 80075AE4
    v0 = (i32(v0) < i32(s0));
loc_80049234:
    if (v0 != 0) goto loc_800492CC;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AE0);                               // Load from: 80075AE0
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AEC);                               // Load from: 80075AEC
    v0 <<= 1;
    v0 += v1;
    v1 = lhu(v0);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AD0);                               // Load from: 80075AD0
    v0 <<= 2;
    v0 += v1;
    v0 = lw(v0 + 0x8);
    if (v0 == 0) goto loc_8004928C;
    if (s5 == 0) goto loc_800492AC;
loc_8004928C:
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuIsTransferCompleted();
    a0 = s4 + s1;
    LIBSPU_SpuSetTransferStartAddr();
    a0 = s6 + s1;
    a1 = s0;
    LIBSPU_SpuWrite();
    s2 += s0;
loc_800492AC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AE4);                               // Load from: 80075AE4
    s1 += s0;
    v0 -= s0;
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5AE4);                                // Store to: 80075AE4
    s0 = 0;                                             // Result = 00000000
    goto loc_80049364;
loc_800492CC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AE0);                               // Load from: 80075AE0
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AEC);                               // Load from: 80075AEC
    v0 <<= 1;
    v0 += v1;
    v1 = lhu(v0);
    v0 = v1 << 1;
    v0 += v1;
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x5AD0);                               // Load from: 80075AD0
    v0 <<= 2;
    v0 += v1;
    v0 = lw(v0 + 0x8);
    if (v0 == 0) goto loc_8004931C;
    if (s5 == 0) goto loc_8004934C;
loc_8004931C:
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuIsTransferCompleted();
    a0 = s4 + s1;
    LIBSPU_SpuSetTransferStartAddr();
    a1 = 0x80070000;                                    // Result = 80070000
    a1 = lw(a1 + 0x5AE4);                               // Load from: 80075AE4
    a0 = s6 + s1;
    LIBSPU_SpuWrite();
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AE4);                               // Load from: 80075AE4
    s2 += v0;
loc_8004934C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AE4);                               // Load from: 80075AE4
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5AE4);                                 // Store to: 80075AE4
    s1 += v0;
    s0 -= v0;
loc_80049364:
    if (s0 != 0) goto loc_800490AC;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AE4);                               // Load from: 80075AE4
    {
        const bool bJump = (v0 == 0)
        v0 = s2;
        if (bJump) goto loc_800490C0;
    }
loc_80049380:
    ra = lw(sp + 0x2C);
    s6 = lw(sp + 0x28);
    s5 = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x30;
    return;
}

void lcd_close() noexcept {
loc_800493AC:
    sp -= 0x20;
    sw(s0, sp + 0x10);
    s0 = 0x80070000;                                    // Result = 80070000
    s0 = lw(s0 + 0x5954);                               // Load from: gWess_Millicount (80075954)
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5954);                               // Load from: gWess_Millicount (80075954)
    sw(ra, sp + 0x1C);
    sw(s2, sp + 0x18);
    s0 += 0x1F40;
    v0 = (v0 < s0);
    sw(s1, sp + 0x14);
    if (v0 == 0) goto loc_80049434;
    s2 = 5;                                             // Result = 00000005
    s1 = 2;                                             // Result = 00000002
loc_800493E4:
    a1 = 0x80070000;                                    // Result = 80070000
    a1 += 0x5AF8;                                       // Result = 80075AF8
    a0 = 1;                                             // Result = 00000001
    LIBCD_CdSync();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5AF4);                                // Store to: 80075AF4
    if (v0 != s2) goto loc_80049414;
    LIBCD_CdFlush();
    v0 = 1;                                             // Result = 00000001
    goto loc_80049438;
loc_80049414:
    {
        const bool bJump = (v0 == s1)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80049438;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5954);                               // Load from: gWess_Millicount (80075954)
    v0 = (v0 < s0);
    if (v0 != 0) goto loc_800493E4;
loc_80049434:
    v0 = 1;                                             // Result = 00000001
loc_80049438:
    ra = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x20;
    return;
}

void wess_dig_lcd_load() noexcept {
loc_80049454:
    sp -= 0x40;
    sw(fp, sp + 0x38);
    fp = a0;
    sw(s6, sp + 0x30);
    s6 = a2;
    sw(s7, sp + 0x34);
    s7 = a3;
    sw(ra, sp + 0x3C);
    sw(s5, sp + 0x2C);
    sw(s4, sp + 0x28);
    sw(s3, sp + 0x24);
    sw(s2, sp + 0x20);
    sw(s1, sp + 0x1C);
    sw(s0, sp + 0x18);
    sw(a1, sp + 0x10);
    psxcd_disable_callbacks();
loc_80049494:
    s5 = 1;                                             // Result = 00000001
    s4 = 5;                                             // Result = 00000005
loc_8004949C:
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5AE0);                                 // Store to: 80075AE0
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5AE4);                                 // Store to: 80075AE4
    s3 = 0;                                             // Result = 00000000
    psxcd_init_pos();
    psxcd_set_data_mode();
    a0 = fp;
    lcd_open();
    s0 = v0;
    v0 = lw(s0);
    s2 = lw(sp + 0x10);
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_800497A4;
    }
    s1 = lw(s0 + 0x4);
    a0 = s0;
    LIBCD_CdPosToInt();
    a0 = v0;
    s0 += 0x18;
    a1 = s0;
    LIBCD_CdIntToPos();
    a0 = 2;                                             // Result = 00000002
    a1 = s0;
    a2 = 0;                                             // Result = 00000000
    LIBCD_CdControl();
    a0 = 6;                                             // Result = 00000006
    a1 = s0;
    a2 = 0;                                             // Result = 00000000
    LIBCD_CdControl();
    a0 = 1;                                             // Result = 00000001
loc_80049518:
    a1 = 0;                                             // Result = 00000000
    LIBCD_CdReady();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5AF0);                                // Store to: 80075AF0
    if (v0 == s5) goto loc_80049540;
    a0 = 1;                                             // Result = 00000001
    if (v0 != s4) goto loc_80049518;
    LIBCD_CdFlush();
loc_80049540:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AF0);                               // Load from: 80075AF0
    if (v0 == s4) goto loc_8004949C;
    s0 = 0x800B0000;                                    // Result = 800B0000
    s0 -= 0x6AE8;                                       // Result = gPSXCD_sectorbuf[0] (800A9518)
    a0 = s0;                                            // Result = gPSXCD_sectorbuf[0] (800A9518)
    a1 = 0x200;                                         // Result = 00000200
    LIBCD_CdGetSector();
    v0 = lhu(s0);                                       // Load from: gPSXCD_sectorbuf[0] (800A9518)
    at = 0x80070000;                                    // Result = 80070000
    sh(v0, at + 0x5AE8);                                // Store to: 80075AE8
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lhu(v0 + 0x5AE8);                              // Load from: 80075AE8
    at = 0x80070000;                                    // Result = 80070000
    sw(s0, at + 0x5AEC);                                // Store to: 80075AEC
    v0 = (v0 < 0x65);
    {
        const bool bJump = (v0 == 0)
        v0 = (i32(s1) < 0x800);
        if (bJump) goto loc_8004949C;
    }
    s1 -= 0x800;
    if (v0 == 0) goto loc_800495A0;
    s1 = 0;                                             // Result = 00000000
loc_800495A0:
    s0 = 1;                                             // Result = 00000001
    v0 = 1;                                             // Result = 00000001
    if (s1 == 0) goto loc_80049760;
loc_800495AC:
    a0 = 1;                                             // Result = 00000001
    if (s0 == 0) goto loc_8004963C;
loc_800495B4:
    a1 = 0;                                             // Result = 00000000
    LIBCD_CdReady();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5AF0);                                // Store to: 80075AF0
    if (v0 == s5) goto loc_800495DC;
    a0 = 1;                                             // Result = 00000001
    if (v0 != s4) goto loc_800495B4;
    LIBCD_CdFlush();
loc_800495DC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AF0);                               // Load from: 80075AF0
    if (v0 == s4) goto loc_80049494;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x656C;                                       // Result = gWess_data_read_chunk1[0] (8009656C)
    a1 = 0x200;                                         // Result = 00000200
    LIBCD_CdGetSector();
    v0 = (i32(s1) < 0x800);
    s1 -= 0x800;
    if (v0 == 0) goto loc_80049610;
    s1 = 0;                                             // Result = 00000000
loc_80049610:
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x656C;                                       // Result = gWess_data_read_chunk1[0] (8009656C)
    a1 = s2;
    a2 = s6;
    a3 = s7;
    lcd_upload_spu_samples();
    s3 += v0;
    s2 += v0;
    v0 = 1;                                             // Result = 00000001
    s0 = 0;                                             // Result = 00000000
    goto loc_80049758;
loc_8004963C:
    if (v0 == 0) goto loc_800496D0;
loc_80049644:
    a1 = 0;                                             // Result = 00000000
    LIBCD_CdReady();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5AF0);                                // Store to: 80075AF0
    if (v0 == s5) goto loc_8004966C;
    a0 = 1;                                             // Result = 00000001
    if (v0 != s4) goto loc_80049644;
    LIBCD_CdFlush();
loc_8004966C:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AF0);                               // Load from: 80075AF0
    if (v0 == s4) goto loc_80049494;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x6D7C;                                       // Result = gWess_data_read_chunk2[0] (80096D7C)
    a1 = 0x200;                                         // Result = 00000200
    LIBCD_CdGetSector();
    v0 = (i32(s1) < 0x800);
    s1 -= 0x800;
    if (v0 == 0) goto loc_800496A0;
    s1 = 0;                                             // Result = 00000000
loc_800496A0:
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuIsTransferCompleted();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x6D7C;                                       // Result = gWess_data_read_chunk2[0] (80096D7C)
    a1 = s2;
    a2 = s6;
    a3 = s7;
    lcd_upload_spu_samples();
    s3 += v0;
    s2 += v0;
    v0 = 0;                                             // Result = 00000000
    goto loc_80049758;
loc_800496D0:
    a1 = 0;                                             // Result = 00000000
    LIBCD_CdReady();
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5AF0);                                // Store to: 80075AF0
    if (v0 == s5) goto loc_800496F8;
    a0 = 1;                                             // Result = 00000001
    if (v0 != s4) goto loc_800496D0;
    LIBCD_CdFlush();
loc_800496F8:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AF0);                               // Load from: 80075AF0
    if (v0 == s4) goto loc_80049494;
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x656C;                                       // Result = gWess_data_read_chunk1[0] (8009656C)
    a1 = 0x200;                                         // Result = 00000200
    LIBCD_CdGetSector();
    v0 = (i32(s1) < 0x800);
    s1 -= 0x800;
    if (v0 == 0) goto loc_8004972C;
    s1 = 0;                                             // Result = 00000000
loc_8004972C:
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuIsTransferCompleted();
    a0 = 0x80090000;                                    // Result = 80090000
    a0 += 0x656C;                                       // Result = gWess_data_read_chunk1[0] (8009656C)
    a1 = s2;
    a2 = s6;
    a3 = s7;
    lcd_upload_spu_samples();
    s3 += v0;
    s2 += v0;
    v0 = 1;                                             // Result = 00000001
loc_80049758:
    if (s1 != 0) goto loc_800495AC;
loc_80049760:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5AF0);                               // Load from: 80075AF0
    a0 = 9;                                             // Result = 00000009
    if (v0 == s4) goto loc_8004949C;
    a1 = 0;                                             // Result = 00000000
    a2 = 0;                                             // Result = 00000000
    LIBCD_CdControl();
    lcd_close();
    if (v0 != 0) goto loc_8004949C;
    a0 = 1;                                             // Result = 00000001
    LIBSPU_SpuIsTransferCompleted();
    psxcd_enable_callbacks();
    v0 = s3;
loc_800497A4:
    ra = lw(sp + 0x3C);
    fp = lw(sp + 0x38);
    s7 = lw(sp + 0x34);
    s6 = lw(sp + 0x30);
    s5 = lw(sp + 0x2C);
    s4 = lw(sp + 0x28);
    s3 = lw(sp + 0x24);
    s2 = lw(sp + 0x20);
    s1 = lw(sp + 0x1C);
    s0 = lw(sp + 0x18);
    sp += 0x40;
    return;
}

void wess_master_sfx_volume_get() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    Is_Module_Loaded();
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_800497F8;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A04);                              // Load from: gWess_master_sfx_volume (80075A04)
loc_800497F8:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_master_mus_volume_get() noexcept {
    sp -= 0x18;
    sw(ra, sp + 0x10);
    Is_Module_Loaded();
    {
        const bool bJump = (v0 == 0)
        v0 = 0;                                         // Result = 00000000
        if (bJump) goto loc_80049828;
    }
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A05);                              // Load from: gWess_master_mus_volume (80075A05)
loc_80049828:
    ra = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_master_sfx_vol_set() noexcept {
loc_80049838:
    sp -= 0x18;
    sw(s0, sp + 0x10);
    sw(ra, sp + 0x14);
    s0 = a0;
    Is_Module_Loaded();
    if (v0 == 0) goto loc_8004985C;
    at = 0x80070000;                                    // Result = 80070000
    sb(s0, at + 0x5A04);                                // Store to: gWess_master_sfx_volume (80075A04)
loc_8004985C:
    ra = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x18;
    return;
}

void wess_master_mus_vol_set() noexcept {
loc_80049870:
    sp -= 0x48;
    sw(s0, sp + 0x20);
    s0 = a0;
    sw(ra, sp + 0x44);
    sw(fp, sp + 0x40);
    sw(s7, sp + 0x3C);
    sw(s6, sp + 0x38);
    sw(s5, sp + 0x34);
    sw(s4, sp + 0x30);
    sw(s3, sp + 0x2C);
    sw(s2, sp + 0x28);
    sw(s1, sp + 0x24);
    Is_Module_Loaded();
    if (v0 == 0) goto loc_800499FC;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    at = 0x80070000;                                    // Result = 80070000
    sb(s0, at + 0x5A05);                                // Store to: gWess_master_mus_volume (80075A05)
    at = 0x80070000;                                    // Result = 80070000
    sw(0, at + 0x5948);                                 // Store to: gbWess_SeqOn (80075948)
    fp = lbu(v0 + 0x4);
    v1 = lw(v0 + 0xC);
    s7 = lw(v0 + 0x20);
    s6 = lbu(v1 + 0xB);
    v0 = s6;
    if (fp == 0) goto loc_800499F0;
    v0 &= 0xFF;
    s6--;
    if (v0 == 0) goto loc_800499F0;
    a1 = -1;                                            // Result = FFFFFFFF
    s5 = s7 + 0xC;
loc_800498F0:
    v0 = lw(s7);
    v0 &= 1;
    if (v0 == 0) goto loc_800499D8;
    v0 = 0x800B0000;                                    // Result = 800B0000
    v0 = lw(v0 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    s4 = lbu(s5 - 0x8);
    s2 = lbu(v0 + 0x1C);
    s3 = lw(s5);
    s2--;
    if (s2 == a1) goto loc_800499C8;
loc_80049924:
    a0 = lbu(s3);
    v0 = 0xFF;                                          // Result = 000000FF
    {
        const bool bJump = (a0 == v0)
        v0 = a0 << 2;
        if (bJump) goto loc_800499BC;
    }
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 = lw(v1 - 0x78A8);                               // Load from: gpWess_pm_stat (800A8758)
    v0 += a0;
    v1 = lw(v1 + 0x28);
    v0 <<= 4;
    s1 = v0 + v1;
    v1 = lbu(s1 + 0x13);
    v0 = 1;                                             // Result = 00000001
    s4--;
    if (v1 != v0) goto loc_800499B4;
    s0 = lw(s1 + 0x34);
    v0 = sp + 0x10;
    sw(v0, s1 + 0x34);
    v0 = 0xC;                                           // Result = 0000000C
    sb(v0, sp + 0x10);
    v1 = lw(s1 + 0x34);
    v0 = lbu(s1 + 0xC);
    sb(v0, v1 + 0x1);
    v0 = lbu(s1 + 0x3);
    a2 = 0x80070000;                                    // Result = 80070000
    a2 += 0x5920;                                       // Result = gWess_CmdFuncArr[0] (80075920)
    v0 <<= 2;
    v0 += a2;
    v0 = lw(v0);
    v0 = lw(v0 + 0x30);
    a0 = s1;
    sw(a1, sp + 0x18);
    pcall(v0);
    sw(s0, s1 + 0x34);
    a1 = lw(sp + 0x18);
loc_800499B4:
    if (s4 == 0) goto loc_800499C8;
loc_800499BC:
    s2--;
    s3++;
    if (s2 != a1) goto loc_80049924;
loc_800499C8:
    fp--;
    v0 = fp & 0xFF;
    {
        const bool bJump = (v0 == 0)
        v0 = 1;                                         // Result = 00000001
        if (bJump) goto loc_800499F4;
    }
loc_800499D8:
    s5 += 0x18;
    s7 += 0x18;
    v0 = s6;
    v0 &= 0xFF;
    s6--;
    if (v0 != 0) goto loc_800498F0;
loc_800499F0:
    v0 = 1;                                             // Result = 00000001
loc_800499F4:
    at = 0x80070000;                                    // Result = 80070000
    sw(v0, at + 0x5948);                                // Store to: gbWess_SeqOn (80075948)
loc_800499FC:
    ra = lw(sp + 0x44);
    fp = lw(sp + 0x40);
    s7 = lw(sp + 0x3C);
    s6 = lw(sp + 0x38);
    s5 = lw(sp + 0x34);
    s4 = lw(sp + 0x30);
    s3 = lw(sp + 0x2C);
    s2 = lw(sp + 0x28);
    s1 = lw(sp + 0x24);
    s0 = lw(sp + 0x20);
    sp += 0x48;
    return;
}

void wess_pan_mode_get() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lbu(v0 + 0x5A06);                              // Load from: gWess_pan_status (80075A06)
    return;
}

void wess_pan_mode_set() noexcept {
    at = 0x80070000;                                    // Result = 80070000
    sb(a0, at + 0x5A06);                                // Store to: gWess_pan_status (80075A06)
    return;
}

void wess_seq_range_sizeof() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5960);                               // Load from: gbWess_seq_loader_enable (80075960)
    sp -= 0x28;
    sw(s0, sp + 0x10);
    s0 = a1;
    sw(s2, sp + 0x18);
    s2 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x20);
    sw(s3, sp + 0x1C);
    sw(s1, sp + 0x14);
    if (v0 == 0) goto loc_80049AB8;
    s1 = a0;
    if (s0 != 0) goto loc_80049A8C;
    v0 = 0;                                             // Result = 00000000
    goto loc_80049ABC;
loc_80049A8C:
    s0--;
    v0 = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s0 == v0)
        v0 = s2;                                        // Result = 00000000
        if (bJump) goto loc_80049ABC;
    }
    s3 = -1;                                            // Result = FFFFFFFF
loc_80049AA0:
    a0 = s1;
    wess_seq_sizeof();
    s2 += v0;
    s0--;
    s1++;
    if (s0 != s3) goto loc_80049AA0;
loc_80049AB8:
    v0 = s2;
loc_80049ABC:
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void wess_seq_range_load() noexcept {
loc_80049ADC:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5960);                               // Load from: gbWess_seq_loader_enable (80075960)
    sp -= 0x28;
    sw(s2, sp + 0x18);
    s2 = a0;
    sw(s0, sp + 0x10);
    s0 = a1;
    sw(s4, sp + 0x20);
    s4 = a2;
    sw(s1, sp + 0x14);
    s1 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x24);
    sw(s3, sp + 0x1C);
    if (v0 == 0) goto loc_80049B68;
    open_sequence_data();
    if (v0 == 0) goto loc_80049B2C;
    {
        const bool bJump = (s0 != 0)
        s0--;
        if (bJump) goto loc_80049B34;
    }
loc_80049B2C:
    v0 = 0;                                             // Result = 00000000
    goto loc_80049B6C;
loc_80049B34:
    v0 = -1;                                            // Result = FFFFFFFF
    if (s0 == v0) goto loc_80049B60;
    s3 = -1;                                            // Result = FFFFFFFF
loc_80049B44:
    a0 = s2;
    a1 = s4 + s1;
    wess_seq_load();
    s1 += v0;
    s0--;
    s2++;
    if (s0 != s3) goto loc_80049B44;
loc_80049B60:
    close_sequence_data();
loc_80049B68:
    v0 = s1;
loc_80049B6C:
    ra = lw(sp + 0x24);
    s4 = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void wess_seq_range_free() noexcept {
loc_80049B90:
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x5960);                               // Load from: gbWess_seq_loader_enable (80075960)
    sp -= 0x28;
    sw(s0, sp + 0x10);
    s0 = a1;
    sw(s3, sp + 0x1C);
    s3 = 0;                                             // Result = 00000000
    sw(ra, sp + 0x20);
    sw(s2, sp + 0x18);
    sw(s1, sp + 0x14);
    if (v0 == 0) goto loc_80049BF8;
    s1 = a0;
    if (s0 != 0) goto loc_80049BCC;
    v0 = 0;                                             // Result = 00000000
    goto loc_80049BFC;
loc_80049BCC:
    s0--;
    v0 = -1;                                            // Result = FFFFFFFF
    {
        const bool bJump = (s0 == v0)
        v0 = s3;                                        // Result = 00000000
        if (bJump) goto loc_80049BFC;
    }
    s3 = 1;                                             // Result = 00000001
    s2 = -1;                                            // Result = FFFFFFFF
loc_80049BE4:
    a0 = s1;
    wess_seq_free();
    s0--;
    s1++;
    if (s0 != s2) goto loc_80049BE4;
loc_80049BF8:
    v0 = s3;
loc_80049BFC:
    ra = lw(sp + 0x20);
    s3 = lw(sp + 0x1C);
    s2 = lw(sp + 0x18);
    s1 = lw(sp + 0x14);
    s0 = lw(sp + 0x10);
    sp += 0x28;
    return;
}

void psyq_main() noexcept {
    v0 = 0x80070000;                                    // Result = 80070000
    v0 += 0x7E30;                                       // Result = gPSXCD_cbsyncsave (80077E30)
    v1 = 0x800B0000;                                    // Result = 800B0000
    v1 -= 0x613C;                                       // Result = 800A9EC4
loc_80050724:
    sw(0, v0);
    v0 += 4;
    at = (v0 < v1);
    if (at != 0) goto loc_80050724;
    v0 = 0x80070000;                                    // Result = 80070000
    v0 = lw(v0 + 0x7BF8);                               // Load from: StackEndAddr (80077BF8)
    v0 = addi(v0, -0x8);
    t0 = 0x80000000;                                    // Result = 80000000
    sp = v0 | t0;
    a0 = 0x800B0000;                                    // Result = 800B0000
    a0 -= 0x613C;                                       // Result = 800A9EC4
    a0 <<= 3;                                           // Result = 0054F620
    a0 >>= 3;                                           // Result = 000A9EC4
    v1 = 0x80070000;                                    // Result = 80070000
    v1 = lw(v1 + 0x7BFC);                               // Load from: StackSize (80077BFC)
    a1 = v0 - v1;
    a1 -= a0;
    a0 |= t0;                                           // Result = 800A9EC4
    at = 0x80070000;                                    // Result = 80070000
    sw(ra, at + 0x7E58);                                // Store to: gProgramReturnAddr (80077E58)
    gp = 0x80070000;                                    // Result = 80070000
    gp += 0x75E0;                                       // Result = GPU_REG_GP0 (800775E0)
    fp = sp;
    a0 = addi(a0, 0x4);                                 // Result = 800A9EC8
    LIBAPI_InitHeap();
    ra = 0x80070000;                                    // Result = 80070000
    ra = lw(ra + 0x7E58);                               // Load from: gProgramReturnAddr (80077E58)
    StartGame();
    _break(0x1);
}
