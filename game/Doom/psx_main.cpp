#include "psx_main.h"

#include "Base/i_main.h"
#include "PsxVm/PsxVm.h"
#include "PsyQ/LIBAPI.h"

#include <cstring>

//------------------------------------------------------------------------------------------------------------------------------------------
// This was the reverse engineered entrypoint for PSXDOOM.EXE.
//
// This code was generated by the compiler and/or toolchain and does stuff which the user application cannot do such as deciding on the
// value of the 'gp' register, zero initializing the BSS section global variables and so on. Basically all of the setup stuff before the
// C program proper can run.
//
// There used to be a lot more here, but as layers of emulation are removed this function has less and less purpose.
// It's mainly here just for historical reference now.
//
// Code which was removed includes:
//  (1) Save and restore the current return address register (ra) for returning control to operating system after the program is done.
//  (2) Setting the value of the 'global pointer' (gp) register that is used as a base to reference many global variables.
//  (3) Setting the value of the 'frame pointer' (fp) register.
//  (4) Setting the value of the 'stack pointer' (sp) register.
//  (5) Zero initializing the BSS section globals. These are globals with a defaulted (0) value.
//------------------------------------------------------------------------------------------------------------------------------------------
void psx_main() noexcept {    
    // Figure out the size and start address to use when initializing the heap
    constexpr uint32_t InitialStackPtrAddr = StackEndAddr - sizeof(uint64_t);
    constexpr uint32_t WrappedHeapStartAddr = ((HeapStartAddr << 3) >> 3);
    constexpr uint32_t StackStartAddr = InitialStackPtrAddr - StackSize;
    constexpr uint32_t InitHeapSize = StackStartAddr - WrappedHeapStartAddr;

    // Initialize the heap for the PsyQ SDK.
    // Note that DOOM uses it's own memory management system, so this call is effectively useless.
    // Note: I don't know why '4' was added here, was that incorrect? Would only be a problem anyway if we reached the end of the stack.
    LIBAPI_InitHeap(PsxVm::gpRam + WrappedHeapStartAddr + 4, InitHeapSize);

    // Call the application entrypoint, or the real main() function as it would have been written in C
    I_Main();
}
